"{\"value\":{\"mdx\":\"# Fallback on Failure\\n\\nImplement graceful degradation when operations fail, ensuring your workflows remain resilient and provide the best possible user experience even during failures.\\n\\n## FallbackNode Interface\\n\\nThe `FallbackNode` interface allows custom fallback behavior:\\n\\n```go\\ntype FallbackNode interface {\\n    Node\\n    ExecFallback(prepResult any, err error) (any, error)\\n}\\n```\\n\\n## Basic Fallback\\n\\nReturn default values on failure:\\n\\n```go\\ntype DefaultValueNode struct {\\n    *flyt.BaseNode\\n}\\n\\nfunc (n *DefaultValueNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    // Try primary operation\\n    result, err := fetchFromPrimarySource()\\n    if err != nil {\\n        return nil, err // Will trigger fallback\\n    }\\n    return result, nil\\n}\\n\\nfunc (n *DefaultValueNode) ExecFallback(prepResult any, err error) (any, error) {\\n    log.Printf(\\\"Primary source failed: %v, returning default\\\", err)\\n    \\n    // Return safe default value\\n    return map[string]any{\\n        \\\"status\\\": \\\"degraded\\\",\\n        \\\"data\\\": \\\"default_value\\\",\\n        \\\"error\\\": err.Error(),\\n    }, nil\\n}\\n```\\n\\n## Cached Fallback\\n\\nUse cached data when fresh data is unavailable:\\n\\n```go\\ntype CachedAPINode struct {\\n    *flyt.BaseNode\\n    cache map[string]CacheEntry\\n    mu    sync.RWMutex\\n}\\n\\ntype CacheEntry struct {\\n    Data      any\\n    Timestamp time.Time\\n}\\n\\nfunc (n *CachedAPINode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    key := prepResult.(string)\\n    \\n    // Try to fetch fresh data\\n    data, err := fetchFromAPI(key)\\n    if err == nil {\\n        // Update cache on success\\n        n.mu.Lock()\\n        n.cache[key] = CacheEntry{\\n            Data:      data,\\n            Timestamp: time.Now(),\\n        }\\n        n.mu.Unlock()\\n        return data, nil\\n    }\\n    \\n    return nil, err\\n}\\n\\nfunc (n *CachedAPINode) ExecFallback(prepResult any, err error) (any, error) {\\n    key := prepResult.(string)\\n    \\n    n.mu.RLock()\\n    entry, exists := n.cache[key]\\n    n.mu.RUnlock()\\n    \\n    if exists {\\n        age := time.Since(entry.Timestamp)\\n        log.Printf(\\\"Returning cached data (age: %v) due to error: %v\\\", age, err)\\n        \\n        // Add metadata about cache usage\\n        return map[string]any{\\n            \\\"data\\\":       entry.Data,\\n            \\\"cached\\\":     true,\\n            \\\"cache_age\\\":  age.Seconds(),\\n            \\\"error\\\":      err.Error(),\\n        }, nil\\n    }\\n    \\n    // No cache available\\n    return nil, fmt.Errorf(\\\"no fallback available: %w\\\", err)\\n}\\n```\\n\\n## Multi-Level Fallback\\n\\nTry multiple fallback strategies:\\n\\n```go\\ntype MultiLevelFallbackNode struct {\\n    *flyt.BaseNode\\n    primaryURL   string\\n    secondaryURL string\\n    cache        sync.Map\\n}\\n\\nfunc (n *MultiLevelFallbackNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    // Try primary source\\n    data, err := fetchFromURL(n.primaryURL)\\n    if err == nil {\\n        n.cache.Store(\\\"last_good\\\", data)\\n        return data, nil\\n    }\\n    \\n    return nil, err\\n}\\n\\nfunc (n *MultiLevelFallbackNode) ExecFallback(prepResult any, primaryErr error) (any, error) {\\n    // Level 1: Try secondary source\\n    data, err := fetchFromURL(n.secondaryURL)\\n    if err == nil {\\n        log.Printf(\\\"Using secondary source due to primary error: %v\\\", primaryErr)\\n        return data, nil\\n    }\\n    \\n    // Level 2: Try cache\\n    if cached, ok := n.cache.Load(\\\"last_good\\\"); ok {\\n        log.Printf(\\\"Using cached data due to all sources failing\\\")\\n        return cached, nil\\n    }\\n    \\n    // Level 3: Return minimal default\\n    log.Printf(\\\"All fallbacks exhausted, returning minimal response\\\")\\n    return map[string]any{\\n        \\\"status\\\": \\\"unavailable\\\",\\n        \\\"message\\\": \\\"Service temporarily unavailable\\\",\\n    }, nil\\n}\\n```\\n\\n## Partial Fallback\\n\\nReturn partial results when complete processing fails:\\n\\n```go\\ntype BatchProcessorNode struct {\\n    *flyt.BaseNode\\n    results []Result\\n    errors  []error\\n}\\n\\nfunc (n *BatchProcessorNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    items := prepResult.([]Item)\\n    n.results = make([]Result, 0, len(items))\\n    n.errors = make([]error, 0)\\n    \\n    for _, item := range items {\\n        result, err := processItem(item)\\n        if err != nil {\\n            n.errors = append(n.errors, err)\\n            continue\\n        }\\n        n.results = append(n.results, result)\\n    }\\n    \\n    if len(n.errors) > 0 {\\n        return nil, fmt.Errorf(\\\"processing failed: %d errors\\\", len(n.errors))\\n    }\\n    \\n    return n.results, nil\\n}\\n\\nfunc (n *BatchProcessorNode) ExecFallback(prepResult any, err error) (any, error) {\\n    // Return partial results\\n    return map[string]any{\\n        \\\"partial_results\\\": n.results,\\n        \\\"success_count\\\":   len(n.results),\\n        \\\"error_count\\\":     len(n.errors),\\n        \\\"errors\\\":          n.errors,\\n        \\\"status\\\":          \\\"partial_success\\\",\\n    }, nil\\n}\\n```\\n\\n## Circuit Breaker Fallback\\n\\nPrevent cascading failures:\\n\\n```go\\ntype CircuitBreakerNode struct {\\n    *flyt.BaseNode\\n    failures    int\\n    lastFailure time.Time\\n    threshold   int\\n    timeout     time.Duration\\n    fallbackMsg string\\n}\\n\\nfunc (n *CircuitBreakerNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    // Check if circuit is open\\n    if n.isCircuitOpen() {\\n        return nil, fmt.Errorf(\\\"circuit breaker open\\\")\\n    }\\n    \\n    result, err := callService(prepResult)\\n    if err != nil {\\n        n.recordFailure()\\n        return nil, err\\n    }\\n    \\n    n.reset()\\n    return result, nil\\n}\\n\\nfunc (n *CircuitBreakerNode) ExecFallback(prepResult any, err error) (any, error) {\\n    if n.isCircuitOpen() {\\n        // Return cached or default response immediately\\n        return map[string]any{\\n            \\\"status\\\": \\\"circuit_open\\\",\\n            \\\"message\\\": n.fallbackMsg,\\n            \\\"retry_after\\\": n.timeout - time.Since(n.lastFailure),\\n        }, nil\\n    }\\n    \\n    // Circuit not open, but request failed\\n    return map[string]any{\\n        \\\"status\\\": \\\"degraded\\\",\\n        \\\"message\\\": \\\"Service temporarily unavailable\\\",\\n    }, nil\\n}\\n\\nfunc (n *CircuitBreakerNode) isCircuitOpen() bool {\\n    return n.failures >= n.threshold && \\n           time.Since(n.lastFailure) < n.timeout\\n}\\n\\nfunc (n *CircuitBreakerNode) recordFailure() {\\n    n.failures++\\n    n.lastFailure = time.Now()\\n}\\n\\nfunc (n *CircuitBreakerNode) reset() {\\n    n.failures = 0\\n}\\n```\\n\\n## Fallback with Metrics\\n\\nTrack fallback usage:\\n\\n```go\\ntype MetricsFallbackNode struct {\\n    *flyt.BaseNode\\n    primaryCalls   int64\\n    fallbackCalls  int64\\n    lastFallback   time.Time\\n}\\n\\nfunc (n *MetricsFallbackNode) ExecFallback(prepResult any, err error) (any, error) {\\n    atomic.AddInt64(&n.fallbackCalls, 1)\\n    n.lastFallback = time.Now()\\n    \\n    // Log metrics\\n    total := atomic.LoadInt64(&n.primaryCalls) + atomic.LoadInt64(&n.fallbackCalls)\\n    fallbackRate := float64(n.fallbackCalls) / float64(total) * 100\\n    \\n    log.Printf(\\\"Fallback metrics - Rate: %.2f%%, Total fallbacks: %d\\\", \\n        fallbackRate, n.fallbackCalls)\\n    \\n    // Return fallback data\\n    return getDefaultResponse(), nil\\n}\\n```\\n\\n## Conditional Fallback\\n\\nDifferent fallbacks based on error type:\\n\\n```go\\nfunc (n *ConditionalFallbackNode) ExecFallback(prepResult any, err error) (any, error) {\\n    switch {\\n    case errors.Is(err, ErrTimeout):\\n        // For timeouts, return cached data\\n        return n.getCachedResponse(), nil\\n        \\n    case errors.Is(err, ErrRateLimit):\\n        // For rate limits, return throttled message\\n        return map[string]any{\\n            \\\"error\\\": \\\"rate_limited\\\",\\n            \\\"retry_after\\\": 60,\\n        }, nil\\n        \\n    case errors.Is(err, ErrNotFound):\\n        // For not found, return empty result\\n        return map[string]any{\\n            \\\"found\\\": false,\\n            \\\"data\\\": nil,\\n        }, nil\\n        \\n    default:\\n        // Generic fallback\\n        return map[string]any{\\n            \\\"status\\\": \\\"error\\\",\\n            \\\"message\\\": \\\"Service unavailable\\\",\\n        }, nil\\n    }\\n}\\n```\\n\\n## Best Practices\\n\\n1. **Log Fallback Usage**: Track when and why fallbacks are triggered\\n2. **Monitor Fallback Rates**: High rates indicate system issues\\n3. **Set Appropriate Timeouts**: Don't wait too long before falling back\\n4. **Provide Meaningful Defaults**: Fallback data should be useful\\n5. **Document Fallback Behavior**: Make it clear what happens during failures\\n6. **Test Fallback Paths**: Ensure fallbacks work correctly\\n7. **Consider User Experience**: Degraded service is better than no service\\n\\n## Next Steps\\n\\n- [Error Handling](/patterns/error-handling) - Comprehensive error strategies\\n- [Conditional Branching](/patterns/branching) - Dynamic flow control\\n- [Circuit Breaker Pattern](/patterns/error-handling#circuit-breaker-pattern) - Prevent cascading failures\",\"document\":[{\"href\":\"/patterns/fallback#fallback-on-failure\",\"html\":\"</header>\\n<p>Implement graceful degradation when operations fail, ensuring your workflows remain resilient and provide the best possible user experience even during failures.</p>\\n\",\"id\":\"docs/pages/patterns/fallback.mdx#fallback-on-failure\",\"isPage\":true,\"text\":\"\\nImplement graceful degradation when operations fail, ensuring your workflows remain resilient and provide the best possible user experience even during failures.\\n\",\"title\":\"Fallback on Failure\",\"titles\":[]},{\"href\":\"/patterns/fallback#fallbacknode-interface\",\"html\":\"\\n<p>The <code>FallbackNode</code> interface allows custom fallback behavior:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> FallbackNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> interface</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">    Node</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">    ExecFallback</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">err</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/fallback.mdx#fallbacknode-interface\",\"isPage\":false,\"text\":\"\\nThe FallbackNode interface allows custom fallback behavior:\\ntype FallbackNode interface {\\n    Node\\n    ExecFallback(prepResult any, err error) (any, error)\\n}\\n\",\"title\":\"FallbackNode Interface\",\"titles\":[\"Fallback on Failure\"]},{\"href\":\"/patterns/fallback#basic-fallback\",\"html\":\"\\n<p>Return default values on failure:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> DefaultValueNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DefaultValueNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Try primary operation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> fetchFromPrimarySource</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Will trigger fallback</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DefaultValueNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">ExecFallback</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">err</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Primary source failed: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">, returning default&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Return safe default value</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;status&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;degraded&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;data&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;default_value&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: err.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/fallback.mdx#basic-fallback\",\"isPage\":false,\"text\":\"\\nReturn default values on failure:\\ntype DefaultValueNode struct {\\n    *flyt.BaseNode\\n}\\n \\nfunc (n *DefaultValueNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    // Try primary operation\\n    result, err := fetchFromPrimarySource()\\n    if err != nil {\\n        return nil, err // Will trigger fallback\\n    }\\n    return result, nil\\n}\\n \\nfunc (n *DefaultValueNode) ExecFallback(prepResult any, err error) (any, error) {\\n    log.Printf(&quot;Primary source failed: %v, returning default&quot;, err)\\n    \\n    // Return safe default value\\n    return map[string]any{\\n        &quot;status&quot;: &quot;degraded&quot;,\\n        &quot;data&quot;: &quot;default_value&quot;,\\n        &quot;error&quot;: err.Error(),\\n    }, nil\\n}\\n\",\"title\":\"Basic Fallback\",\"titles\":[\"Fallback on Failure\"]},{\"href\":\"/patterns/fallback#cached-fallback\",\"html\":\"\\n<p>Use cached data when fresh data is unavailable:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> CachedAPINode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    cache </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CacheEntry</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    mu    </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">sync</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">RWMutex</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> CacheEntry</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Data      </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Timestamp </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Time</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CachedAPINode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    key </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Try to fetch fresh data</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    data, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> fetchFromAPI</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(key)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Update cache on success</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        n.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Lock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        n.cache[key] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> CacheEntry</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Data:      data,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Timestamp: time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        n.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Unlock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CachedAPINode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">ExecFallback</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">err</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    key </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">RLock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    entry, exists </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.cache[key]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">RUnlock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> exists {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        age </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Since</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(entry.Timestamp)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Returning cached data (age: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">) due to error: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, age, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Add metadata about cache usage</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;data&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:       entry.Data,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;cached&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:     </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;cache_age&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:  age.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Seconds</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:      err.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // No cache available</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;no fallback available: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%w</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/fallback.mdx#cached-fallback\",\"isPage\":false,\"text\":\"\\nUse cached data when fresh data is unavailable:\\ntype CachedAPINode struct {\\n    *flyt.BaseNode\\n    cache map[string]CacheEntry\\n    mu    sync.RWMutex\\n}\\n \\ntype CacheEntry struct {\\n    Data      any\\n    Timestamp time.Time\\n}\\n \\nfunc (n *CachedAPINode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    key := prepResult.(string)\\n    \\n    // Try to fetch fresh data\\n    data, err := fetchFromAPI(key)\\n    if err == nil {\\n        // Update cache on success\\n        n.mu.Lock()\\n        n.cache[key] = CacheEntry{\\n            Data:      data,\\n            Timestamp: time.Now(),\\n        }\\n        n.mu.Unlock()\\n        return data, nil\\n    }\\n    \\n    return nil, err\\n}\\n \\nfunc (n *CachedAPINode) ExecFallback(prepResult any, err error) (any, error) {\\n    key := prepResult.(string)\\n    \\n    n.mu.RLock()\\n    entry, exists := n.cache[key]\\n    n.mu.RUnlock()\\n    \\n    if exists {\\n        age := time.Since(entry.Timestamp)\\n        log.Printf(&quot;Returning cached data (age: %v) due to error: %v&quot;, age, err)\\n        \\n        // Add metadata about cache usage\\n        return map[string]any{\\n            &quot;data&quot;:       entry.Data,\\n            &quot;cached&quot;:     true,\\n            &quot;cache_age&quot;:  age.Seconds(),\\n            &quot;error&quot;:      err.Error(),\\n        }, nil\\n    }\\n    \\n    // No cache available\\n    return nil, fmt.Errorf(&quot;no fallback available: %w&quot;, err)\\n}\\n\",\"title\":\"Cached Fallback\",\"titles\":[\"Fallback on Failure\"]},{\"href\":\"/patterns/fallback#multi-level-fallback\",\"html\":\"\\n<p>Try multiple fallback strategies:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> MultiLevelFallbackNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    primaryURL   </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    secondaryURL </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    cache        </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">sync</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Map</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">MultiLevelFallbackNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Try primary source</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    data, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> fetchFromURL</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.primaryURL)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        n.cache.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Store</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;last_good&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, data)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">MultiLevelFallbackNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">ExecFallback</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">primaryErr</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Level 1: Try secondary source</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    data, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> fetchFromURL</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.secondaryURL)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Using secondary source due to primary error: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, primaryErr)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Level 2: Try cache</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> cached, ok </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.cache.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Load</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;last_good&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">); ok {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Using cached data due to all sources failing&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> cached, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Level 3: Return minimal default</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;All fallbacks exhausted, returning minimal response&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;status&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;unavailable&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;message&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Service temporarily unavailable&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/fallback.mdx#multi-level-fallback\",\"isPage\":false,\"text\":\"\\nTry multiple fallback strategies:\\ntype MultiLevelFallbackNode struct {\\n    *flyt.BaseNode\\n    primaryURL   string\\n    secondaryURL string\\n    cache        sync.Map\\n}\\n \\nfunc (n *MultiLevelFallbackNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    // Try primary source\\n    data, err := fetchFromURL(n.primaryURL)\\n    if err == nil {\\n        n.cache.Store(&quot;last_good&quot;, data)\\n        return data, nil\\n    }\\n    \\n    return nil, err\\n}\\n \\nfunc (n *MultiLevelFallbackNode) ExecFallback(prepResult any, primaryErr error) (any, error) {\\n    // Level 1: Try secondary source\\n    data, err := fetchFromURL(n.secondaryURL)\\n    if err == nil {\\n        log.Printf(&quot;Using secondary source due to primary error: %v&quot;, primaryErr)\\n        return data, nil\\n    }\\n    \\n    // Level 2: Try cache\\n    if cached, ok := n.cache.Load(&quot;last_good&quot;); ok {\\n        log.Printf(&quot;Using cached data due to all sources failing&quot;)\\n        return cached, nil\\n    }\\n    \\n    // Level 3: Return minimal default\\n    log.Printf(&quot;All fallbacks exhausted, returning minimal response&quot;)\\n    return map[string]any{\\n        &quot;status&quot;: &quot;unavailable&quot;,\\n        &quot;message&quot;: &quot;Service temporarily unavailable&quot;,\\n    }, nil\\n}\\n\",\"title\":\"Multi-Level Fallback\",\"titles\":[\"Fallback on Failure\"]},{\"href\":\"/patterns/fallback#partial-fallback\",\"html\":\"\\n<p>Return partial results when complete processing fails:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> BatchProcessorNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    results []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Result</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    errors  []</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BatchProcessorNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    items </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Item</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.results </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Result</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(items))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.errors </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([]</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> _, item </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> range</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> items {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processItem</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(item)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            n.errors </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> append</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.errors, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            continue</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        n.results </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> append</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.results, result)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.errors) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&gt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;processing failed: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> errors&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.errors))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.results, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BatchProcessorNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">ExecFallback</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">err</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Return partial results</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;partial_results&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: n.results,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;success_count&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:   </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.results),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;error_count&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:     </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.errors),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;errors&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:          n.errors,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;status&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:          </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;partial_success&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/fallback.mdx#partial-fallback\",\"isPage\":false,\"text\":\"\\nReturn partial results when complete processing fails:\\ntype BatchProcessorNode struct {\\n    *flyt.BaseNode\\n    results []Result\\n    errors  []error\\n}\\n \\nfunc (n *BatchProcessorNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    items := prepResult.([]Item)\\n    n.results = make([]Result, 0, len(items))\\n    n.errors = make([]error, 0)\\n    \\n    for _, item := range items {\\n        result, err := processItem(item)\\n        if err != nil {\\n            n.errors = append(n.errors, err)\\n            continue\\n        }\\n        n.results = append(n.results, result)\\n    }\\n    \\n    if len(n.errors) &gt; 0 {\\n        return nil, fmt.Errorf(&quot;processing failed: %d errors&quot;, len(n.errors))\\n    }\\n    \\n    return n.results, nil\\n}\\n \\nfunc (n *BatchProcessorNode) ExecFallback(prepResult any, err error) (any, error) {\\n    // Return partial results\\n    return map[string]any{\\n        &quot;partial_results&quot;: n.results,\\n        &quot;success_count&quot;:   len(n.results),\\n        &quot;error_count&quot;:     len(n.errors),\\n        &quot;errors&quot;:          n.errors,\\n        &quot;status&quot;:          &quot;partial_success&quot;,\\n    }, nil\\n}\\n\",\"title\":\"Partial Fallback\",\"titles\":[\"Fallback on Failure\"]},{\"href\":\"/patterns/fallback#circuit-breaker-fallback\",\"html\":\"\\n<p>Prevent cascading failures:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> CircuitBreakerNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    failures    </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    lastFailure </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Time</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    threshold   </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    timeout     </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Duration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    fallbackMsg </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CircuitBreakerNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Check if circuit is open</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">isCircuitOpen</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;circuit breaker open&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> callService</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(prepResult)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        n.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">recordFailure</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">reset</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CircuitBreakerNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">ExecFallback</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">err</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">isCircuitOpen</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Return cached or default response immediately</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;status&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;circuit_open&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;message&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: n.fallbackMsg,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;retry_after&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: n.timeout </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Since</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.lastFailure),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Circuit not open, but request failed</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;status&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;degraded&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;message&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Service temporarily unavailable&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CircuitBreakerNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">isCircuitOpen</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">bool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.failures </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&gt;=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.threshold </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">           time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Since</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.lastFailure) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.timeout</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CircuitBreakerNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">recordFailure</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.failures</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">++</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.lastFailure </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CircuitBreakerNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">reset</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.failures </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/fallback.mdx#circuit-breaker-fallback\",\"isPage\":false,\"text\":\"\\nPrevent cascading failures:\\ntype CircuitBreakerNode struct {\\n    *flyt.BaseNode\\n    failures    int\\n    lastFailure time.Time\\n    threshold   int\\n    timeout     time.Duration\\n    fallbackMsg string\\n}\\n \\nfunc (n *CircuitBreakerNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    // Check if circuit is open\\n    if n.isCircuitOpen() {\\n        return nil, fmt.Errorf(&quot;circuit breaker open&quot;)\\n    }\\n    \\n    result, err := callService(prepResult)\\n    if err != nil {\\n        n.recordFailure()\\n        return nil, err\\n    }\\n    \\n    n.reset()\\n    return result, nil\\n}\\n \\nfunc (n *CircuitBreakerNode) ExecFallback(prepResult any, err error) (any, error) {\\n    if n.isCircuitOpen() {\\n        // Return cached or default response immediately\\n        return map[string]any{\\n            &quot;status&quot;: &quot;circuit_open&quot;,\\n            &quot;message&quot;: n.fallbackMsg,\\n            &quot;retry_after&quot;: n.timeout - time.Since(n.lastFailure),\\n        }, nil\\n    }\\n    \\n    // Circuit not open, but request failed\\n    return map[string]any{\\n        &quot;status&quot;: &quot;degraded&quot;,\\n        &quot;message&quot;: &quot;Service temporarily unavailable&quot;,\\n    }, nil\\n}\\n \\nfunc (n *CircuitBreakerNode) isCircuitOpen() bool {\\n    return n.failures &gt;= n.threshold &amp;&amp; \\n           time.Since(n.lastFailure) &lt; n.timeout\\n}\\n \\nfunc (n *CircuitBreakerNode) recordFailure() {\\n    n.failures++\\n    n.lastFailure = time.Now()\\n}\\n \\nfunc (n *CircuitBreakerNode) reset() {\\n    n.failures = 0\\n}\\n\",\"title\":\"Circuit Breaker Fallback\",\"titles\":[\"Fallback on Failure\"]},{\"href\":\"/patterns/fallback#fallback-with-metrics\",\"html\":\"\\n<p>Track fallback usage:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> MetricsFallbackNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    primaryCalls   </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int64</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    fallbackCalls  </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int64</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    lastFallback   </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Time</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">MetricsFallbackNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">ExecFallback</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">err</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">AddInt64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">n.fallbackCalls, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.lastFallback </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Log metrics</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    total </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">LoadInt64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">n.primaryCalls) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">LoadInt64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">n.fallbackCalls)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    fallbackRate </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> float64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.fallbackCalls) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">/</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> float64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(total) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 100</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Fallback metrics - Rate: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%.2f%%</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">, Total fallbacks: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        fallbackRate, n.fallbackCalls)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Return fallback data</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getDefaultResponse</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(), </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/fallback.mdx#fallback-with-metrics\",\"isPage\":false,\"text\":\"\\nTrack fallback usage:\\ntype MetricsFallbackNode struct {\\n    *flyt.BaseNode\\n    primaryCalls   int64\\n    fallbackCalls  int64\\n    lastFallback   time.Time\\n}\\n \\nfunc (n *MetricsFallbackNode) ExecFallback(prepResult any, err error) (any, error) {\\n    atomic.AddInt64(&amp;n.fallbackCalls, 1)\\n    n.lastFallback = time.Now()\\n    \\n    // Log metrics\\n    total := atomic.LoadInt64(&amp;n.primaryCalls) + atomic.LoadInt64(&amp;n.fallbackCalls)\\n    fallbackRate := float64(n.fallbackCalls) / float64(total) * 100\\n    \\n    log.Printf(&quot;Fallback metrics - Rate: %.2f%%, Total fallbacks: %d&quot;, \\n        fallbackRate, n.fallbackCalls)\\n    \\n    // Return fallback data\\n    return getDefaultResponse(), nil\\n}\\n\",\"title\":\"Fallback with Metrics\",\"titles\":[\"Fallback on Failure\"]},{\"href\":\"/patterns/fallback#conditional-fallback\",\"html\":\"\\n<p>Different fallbacks based on error type:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">ConditionalFallbackNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">ExecFallback</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">err</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    switch</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> errors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Is</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(err, ErrTimeout):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // For timeouts, return cached data</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getCachedResponse</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(), </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> errors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Is</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(err, ErrRateLimit):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // For rate limits, return throttled message</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;rate_limited&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;retry_after&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">60</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> errors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Is</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(err, ErrNotFound):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // For not found, return empty result</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;found&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">false</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;data&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    default</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Generic fallback</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;status&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;message&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Service unavailable&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/fallback.mdx#conditional-fallback\",\"isPage\":false,\"text\":\"\\nDifferent fallbacks based on error type:\\nfunc (n *ConditionalFallbackNode) ExecFallback(prepResult any, err error) (any, error) {\\n    switch {\\n    case errors.Is(err, ErrTimeout):\\n        // For timeouts, return cached data\\n        return n.getCachedResponse(), nil\\n        \\n    case errors.Is(err, ErrRateLimit):\\n        // For rate limits, return throttled message\\n        return map[string]any{\\n            &quot;error&quot;: &quot;rate_limited&quot;,\\n            &quot;retry_after&quot;: 60,\\n        }, nil\\n        \\n    case errors.Is(err, ErrNotFound):\\n        // For not found, return empty result\\n        return map[string]any{\\n            &quot;found&quot;: false,\\n            &quot;data&quot;: nil,\\n        }, nil\\n        \\n    default:\\n        // Generic fallback\\n        return map[string]any{\\n            &quot;status&quot;: &quot;error&quot;,\\n            &quot;message&quot;: &quot;Service unavailable&quot;,\\n        }, nil\\n    }\\n}\\n\",\"title\":\"Conditional Fallback\",\"titles\":[\"Fallback on Failure\"]},{\"href\":\"/patterns/fallback#best-practices\",\"html\":\"\\n<ol>\\n<li><strong>Log Fallback Usage</strong>: Track when and why fallbacks are triggered</li>\\n<li><strong>Monitor Fallback Rates</strong>: High rates indicate system issues</li>\\n<li><strong>Set Appropriate Timeouts</strong>: Don&#x27;t wait too long before falling back</li>\\n<li><strong>Provide Meaningful Defaults</strong>: Fallback data should be useful</li>\\n<li><strong>Document Fallback Behavior</strong>: Make it clear what happens during failures</li>\\n<li><strong>Test Fallback Paths</strong>: Ensure fallbacks work correctly</li>\\n<li><strong>Consider User Experience</strong>: Degraded service is better than no service</li>\\n</ol>\\n\",\"id\":\"docs/pages/patterns/fallback.mdx#best-practices\",\"isPage\":false,\"text\":\"\\n\\nLog Fallback Usage: Track when and why fallbacks are triggered\\nMonitor Fallback Rates: High rates indicate system issues\\nSet Appropriate Timeouts: Don&#x27;t wait too long before falling back\\nProvide Meaningful Defaults: Fallback data should be useful\\nDocument Fallback Behavior: Make it clear what happens during failures\\nTest Fallback Paths: Ensure fallbacks work correctly\\nConsider User Experience: Degraded service is better than no service\\n\\n\",\"title\":\"Best Practices\",\"titles\":[\"Fallback on Failure\"]},{\"href\":\"/patterns/fallback#next-steps\",\"html\":\"\\n<ul>\\n<li><a href=\\\"/patterns/error-handling\\\">Error Handling</a> - Comprehensive error strategies</li>\\n<li><a href=\\\"/patterns/branching\\\">Conditional Branching</a> - Dynamic flow control</li>\\n<li><a href=\\\"/patterns/error-handling#circuit-breaker-pattern\\\">Circuit Breaker Pattern</a> - Prevent cascading failures</li>\\n</ul>\",\"id\":\"docs/pages/patterns/fallback.mdx#next-steps\",\"isPage\":false,\"text\":\"\\n\\nError Handling - Comprehensive error strategies\\nConditional Branching - Dynamic flow control\\nCircuit Breaker Pattern - Prevent cascading failures\\n\",\"title\":\"Next Steps\",\"titles\":[\"Fallback on Failure\"]}]}}"
