"{\"value\":{\"mdx\":\"# Best Practices\\n\\nFollow these guidelines to build robust, maintainable Flyt workflows.\\n\\n## Node Design\\n\\n### Single Responsibility\\n\\nEach node should do one thing well:\\n\\n```go\\n// ❌ Bad: Node doing too much\\nnode := flyt.NewNode(\\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n        // Fetch data\\n        data := fetchFromAPI()\\n        // Validate\\n        if !isValid(data) {\\n            return nil, errors.New(\\\"invalid\\\")\\n        }\\n        // Transform\\n        transformed := transform(data)\\n        // Save\\n        saveToDatabase(transformed)\\n        return transformed, nil\\n    }),\\n)\\n\\n// ✅ Good: Separate concerns\\nfetchNode := createFetchNode()\\nvalidateNode := createValidateNode()\\ntransformNode := createTransformNode()\\nsaveNode := createSaveNode()\\n\\nflow := flyt.NewFlow(fetchNode)\\nflow.Connect(fetchNode, flyt.DefaultAction, validateNode)\\nflow.Connect(validateNode, \\\"valid\\\", transformNode)\\nflow.Connect(transformNode, flyt.DefaultAction, saveNode)\\n```\\n\\n### Idempotency\\n\\nDesign nodes to be safely retryable:\\n\\n```go\\n// ✅ Good: Idempotent operation\\nfunc (n *SaveNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    data := prepResult.(Record)\\n    \\n    // Use upsert instead of insert\\n    _, err := db.Exec(`\\n        INSERT INTO records (id, data) VALUES (?, ?)\\n        ON CONFLICT (id) DO UPDATE SET data = ?\\n    `, data.ID, data.Data, data.Data)\\n    \\n    return data.ID, err\\n}\\n```\\n\\n### Error Handling\\n\\nReturn clear, actionable errors:\\n\\n```go\\n// ❌ Bad: Generic error\\nreturn nil, errors.New(\\\"failed\\\")\\n\\n// ✅ Good: Descriptive error\\nreturn nil, fmt.Errorf(\\\"failed to fetch user %d: %w\\\", userID, err)\\n```\\n\\n## Flow Design\\n\\n### Modular Flows\\n\\nCreate reusable sub-flows:\\n\\n```go\\n// Reusable validation flow\\nfunc createValidationFlow() *flyt.Flow {\\n    schemaCheck := createSchemaValidator()\\n    businessRules := createBusinessValidator()\\n    \\n    flow := flyt.NewFlow(schemaCheck)\\n    flow.Connect(schemaCheck, \\\"valid\\\", businessRules)\\n    return flow\\n}\\n\\n// Use in multiple places\\nmainFlow.Connect(fetchNode, flyt.DefaultAction, createValidationFlow())\\napiFlow.Connect(parseNode, flyt.DefaultAction, createValidationFlow())\\n```\\n\\n### Error Boundaries\\n\\nCentralize error handling:\\n\\n```go\\nfunc createFlowWithErrorHandling() *flyt.Flow {\\n    flow := flyt.NewFlow(startNode)\\n    errorHandler := createErrorHandler()\\n    \\n    // Connect all error paths to handler\\n    for _, node := range []flyt.Node{startNode, processNode, saveNode} {\\n        flow.Connect(node, \\\"error\\\", errorHandler)\\n    }\\n    \\n    return flow\\n}\\n```\\n\\n## Context Handling\\n\\n### Respect Cancellation\\n\\nAlways check context in long-running operations:\\n\\n```go\\nfunc (n *ProcessNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    items := prepResult.([]Item)\\n    results := []Result{}\\n    \\n    for _, item := range items {\\n        // Check context before each iteration\\n        select {\\n        case <-ctx.Done():\\n            return nil, ctx.Err()\\n        default:\\n        }\\n        \\n        result := processItem(ctx, item)\\n        results = append(results, result)\\n    }\\n    \\n    return results, nil\\n}\\n```\\n\\n### Timeout Management\\n\\nSet appropriate timeouts:\\n\\n```go\\nfunc (n *APINode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    // Create timeout context\\n    ctx, cancel := context.WithTimeout(ctx, 30*time.Second)\\n    defer cancel()\\n    \\n    return callAPI(ctx, prepResult)\\n}\\n```\\n\\n## Concurrency Safety\\n\\n### Thread-Safe Nodes\\n\\nProtect shared state in nodes:\\n\\n```go\\ntype CounterNode struct {\\n    *flyt.BaseNode\\n    mu    sync.Mutex\\n    count int\\n}\\n\\nfunc (n *CounterNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    n.mu.Lock()\\n    n.count++\\n    current := n.count\\n    n.mu.Unlock()\\n    \\n    return current, nil\\n}\\n```\\n\\n### Avoid Shared Node Instances\\n\\nCreate new instances for concurrent use:\\n\\n```go\\n// ❌ Bad: Sharing node instance\\nnode := createProcessNode()\\nfor i := 0; i < 10; i++ {\\n    go flyt.Run(ctx, node, shared) // Race condition!\\n}\\n\\n// ✅ Good: Create new instances\\nfor i := 0; i < 10; i++ {\\n    go flyt.Run(ctx, createProcessNode(), shared)\\n}\\n```\\n\\n## Resource Management\\n\\n### Clean Up Resources\\n\\nUse defer for cleanup:\\n\\n```go\\nfunc (n *FileNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    file, err := os.Open(prepResult.(string))\\n    if err != nil {\\n        return nil, err\\n    }\\n    defer file.Close() // Always cleanup\\n    \\n    // Process file...\\n    return processFile(file)\\n}\\n```\\n\\n### Connection Pooling\\n\\nReuse expensive resources:\\n\\n```go\\ntype DatabaseFlow struct {\\n    db *sql.DB\\n}\\n\\nfunc NewDatabaseFlow(db *sql.DB) *DatabaseFlow {\\n    return &DatabaseFlow{db: db}\\n}\\n\\nfunc (f *DatabaseFlow) CreateNode() flyt.Node {\\n    return &DatabaseNode{\\n        BaseNode: flyt.NewBaseNode(),\\n        db: f.db, // Reuse connection pool\\n    }\\n}\\n```\\n\\n## Testing\\n\\n### Unit Test Nodes\\n\\nTest nodes in isolation:\\n\\n```go\\nfunc TestProcessNode(t *testing.T) {\\n    node := createProcessNode()\\n    ctx := context.Background()\\n    \\n    // Test successful case\\n    result, err := node.Exec(ctx, \\\"test input\\\")\\n    assert.NoError(t, err)\\n    assert.Equal(t, \\\"expected output\\\", result)\\n    \\n    // Test error case\\n    result, err = node.Exec(ctx, nil)\\n    assert.Error(t, err)\\n}\\n```\\n\\n### Integration Test Flows\\n\\nTest complete workflows:\\n\\n```go\\nfunc TestCompleteFlow(t *testing.T) {\\n    flow := createMainFlow()\\n    shared := flyt.NewSharedStore()\\n    shared.Set(\\\"input\\\", testData)\\n    \\n    ctx := context.Background()\\n    err := flow.Run(ctx, shared)\\n    assert.NoError(t, err)\\n    \\n    result, ok := shared.Get(\\\"output\\\")\\n    assert.True(t, ok)\\n    assert.Equal(t, expectedResult, result)\\n}\\n```\\n\\n## Documentation\\n\\n### Document Node Behavior\\n\\n```go\\n// FetchUserNode fetches user data from the API.\\n// \\n// Prep: Reads \\\"user_id\\\" from SharedStore\\n// Exec: Fetches user from API, retries on network errors\\n// Post: Stores user data in \\\"user_data\\\" key\\n// Actions:\\n//   - \\\"success\\\": User fetched successfully\\n//   - \\\"not_found\\\": User does not exist\\n//   - \\\"error\\\": Unrecoverable error occurred\\ntype FetchUserNode struct {\\n    *flyt.BaseNode\\n    apiClient *APIClient\\n}\\n```\\n\\n### Document Flow Structure\\n\\n```go\\n// CreateOrderFlow processes new orders:\\n// 1. Validates order data\\n// 2. Checks inventory\\n// 3. Processes payment\\n// 4. Creates shipment\\n// 5. Sends confirmation\\n//\\n// Required SharedStore keys:\\n//   - \\\"order_data\\\": OrderData struct\\n//   - \\\"customer_id\\\": string\\n//\\n// Sets SharedStore keys:\\n//   - \\\"order_id\\\": string\\n//   - \\\"tracking_number\\\": string\\nfunc CreateOrderFlow() *flyt.Flow {\\n    // ...\\n}\\n```\\n\\n## Performance\\n\\n### Batch Operations\\n\\nProcess items in batches when possible:\\n\\n```go\\n// Instead of processing one at a time\\nfor _, item := range items {\\n    process(item)\\n}\\n\\n// Process in batches\\nbatchNode := flyt.NewBatchNode(processFunc, true)\\nshared.Set(\\\"items\\\", items)\\n```\\n\\n### Lazy Loading\\n\\nLoad data only when needed:\\n\\n```go\\nfunc (n *ProcessNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n    // Only load the data this node needs\\n    if needsUserData(shared) {\\n        userData := loadUserData()\\n        return userData, nil\\n    }\\n    return nil, nil\\n}\\n```\\n\\n## Monitoring\\n\\n### Add Observability\\n\\nLog important events:\\n\\n```go\\nfunc (n *ProcessNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    start := time.Now()\\n    defer func() {\\n        log.Printf(\\\"ProcessNode took %v\\\", time.Since(start))\\n    }()\\n    \\n    result, err := process(prepResult)\\n    if err != nil {\\n        log.Printf(\\\"ProcessNode error: %v\\\", err)\\n        return nil, err\\n    }\\n    \\n    log.Printf(\\\"ProcessNode success: processed %d items\\\", len(result))\\n    return result, nil\\n}\\n```\\n\\n## Next Steps\\n\\n- [Examples](/examples/agent) - See best practices in action\\n- [Advanced Usage](/advanced/custom-nodes) - Advanced patterns\\n- [Core Concepts](/concepts/nodes) - Review fundamentals\",\"document\":[{\"href\":\"/best-practices#best-practices\",\"html\":\"</header>\\n<p>Follow these guidelines to build robust, maintainable Flyt workflows.</p>\\n\",\"id\":\"docs/pages/best-practices.mdx#best-practices\",\"isPage\":true,\"text\":\"\\nFollow these guidelines to build robust, maintainable Flyt workflows.\\n\",\"title\":\"Best Practices\",\"titles\":[]},{\"href\":\"/best-practices#node-design\",\"html\":\"\\n\",\"id\":\"docs/pages/best-practices.mdx#node-design\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Node Design\",\"titles\":[\"Best Practices\"]},{\"href\":\"/best-practices#single-responsibility\",\"html\":\"\\n<p>Each node should do one thing well:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ❌ Bad: Node doing too much</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">node </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithExecFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Fetch data</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> fetchFromAPI</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Validate</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> !</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">isValid</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(data) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, errors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">New</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;invalid&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Transform</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        transformed </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> transform</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(data)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Save</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">        saveToDatabase</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(transformed)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> transformed, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ✅ Good: Separate concerns</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">fetchNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createFetchNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">validateNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createValidateNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">transformNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createTransformNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">saveNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createSaveNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode, flyt.DefaultAction, validateNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(validateNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;valid&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, transformNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(transformNode, flyt.DefaultAction, saveNode)</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#single-responsibility\",\"isPage\":false,\"text\":\"\\nEach node should do one thing well:\\n// ❌ Bad: Node doing too much\\nnode := flyt.NewNode(\\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n        // Fetch data\\n        data := fetchFromAPI()\\n        // Validate\\n        if !isValid(data) {\\n            return nil, errors.New(&quot;invalid&quot;)\\n        }\\n        // Transform\\n        transformed := transform(data)\\n        // Save\\n        saveToDatabase(transformed)\\n        return transformed, nil\\n    }),\\n)\\n \\n// ✅ Good: Separate concerns\\nfetchNode := createFetchNode()\\nvalidateNode := createValidateNode()\\ntransformNode := createTransformNode()\\nsaveNode := createSaveNode()\\n \\nflow := flyt.NewFlow(fetchNode)\\nflow.Connect(fetchNode, flyt.DefaultAction, validateNode)\\nflow.Connect(validateNode, &quot;valid&quot;, transformNode)\\nflow.Connect(transformNode, flyt.DefaultAction, saveNode)\\n\",\"title\":\"Single Responsibility\",\"titles\":[\"Best Practices\",\"Node Design\"]},{\"href\":\"/best-practices#idempotency\",\"html\":\"\\n<p>Design nodes to be safely retryable:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ✅ Good: Idempotent operation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SaveNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.(</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Record</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Use upsert instead of insert</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    _, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> db.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">`</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        INSERT INTO records (id, data) VALUES (?, ?)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        ON CONFLICT (id) DO UPDATE SET data = ?</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    `</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, data.ID, data.Data, data.Data)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data.ID, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#idempotency\",\"isPage\":false,\"text\":\"\\nDesign nodes to be safely retryable:\\n// ✅ Good: Idempotent operation\\nfunc (n *SaveNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    data := prepResult.(Record)\\n    \\n    // Use upsert instead of insert\\n    _, err := db.Exec(`\\n        INSERT INTO records (id, data) VALUES (?, ?)\\n        ON CONFLICT (id) DO UPDATE SET data = ?\\n    `, data.ID, data.Data, data.Data)\\n    \\n    return data.ID, err\\n}\\n\",\"title\":\"Idempotency\",\"titles\":[\"Best Practices\",\"Node Design\"]},{\"href\":\"/best-practices#error-handling\",\"html\":\"\\n<p>Return clear, actionable errors:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ❌ Bad: Generic error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, errors.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">New</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;failed&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ✅ Good: Descriptive error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;failed to fetch user </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%w</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, userID, err)</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#error-handling\",\"isPage\":false,\"text\":\"\\nReturn clear, actionable errors:\\n// ❌ Bad: Generic error\\nreturn nil, errors.New(&quot;failed&quot;)\\n \\n// ✅ Good: Descriptive error\\nreturn nil, fmt.Errorf(&quot;failed to fetch user %d: %w&quot;, userID, err)\\n\",\"title\":\"Error Handling\",\"titles\":[\"Best Practices\",\"Node Design\"]},{\"href\":\"/best-practices#flow-design\",\"html\":\"\\n\",\"id\":\"docs/pages/best-practices.mdx#flow-design\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Flow Design\",\"titles\":[\"Best Practices\"]},{\"href\":\"/best-practices#modular-flows\",\"html\":\"\\n<p>Create reusable sub-flows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Reusable validation flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createValidationFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    schemaCheck </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createSchemaValidator</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    businessRules </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createBusinessValidator</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(schemaCheck)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(schemaCheck, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;valid&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, businessRules)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Use in multiple places</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">mainFlow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode, flyt.DefaultAction, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createValidationFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">())</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">apiFlow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(parseNode, flyt.DefaultAction, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createValidationFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">())</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#modular-flows\",\"isPage\":false,\"text\":\"\\nCreate reusable sub-flows:\\n// Reusable validation flow\\nfunc createValidationFlow() *flyt.Flow {\\n    schemaCheck := createSchemaValidator()\\n    businessRules := createBusinessValidator()\\n    \\n    flow := flyt.NewFlow(schemaCheck)\\n    flow.Connect(schemaCheck, &quot;valid&quot;, businessRules)\\n    return flow\\n}\\n \\n// Use in multiple places\\nmainFlow.Connect(fetchNode, flyt.DefaultAction, createValidationFlow())\\napiFlow.Connect(parseNode, flyt.DefaultAction, createValidationFlow())\\n\",\"title\":\"Modular Flows\",\"titles\":[\"Best Practices\",\"Flow Design\"]},{\"href\":\"/best-practices#error-boundaries\",\"html\":\"\\n<p>Centralize error handling:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createFlowWithErrorHandling</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(startNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    errorHandler </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createErrorHandler</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Connect all error paths to handler</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> _, node </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> range</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Node</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{startNode, processNode, saveNode} {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(node, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, errorHandler)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#error-boundaries\",\"isPage\":false,\"text\":\"\\nCentralize error handling:\\nfunc createFlowWithErrorHandling() *flyt.Flow {\\n    flow := flyt.NewFlow(startNode)\\n    errorHandler := createErrorHandler()\\n    \\n    // Connect all error paths to handler\\n    for _, node := range []flyt.Node{startNode, processNode, saveNode} {\\n        flow.Connect(node, &quot;error&quot;, errorHandler)\\n    }\\n    \\n    return flow\\n}\\n\",\"title\":\"Error Boundaries\",\"titles\":[\"Best Practices\",\"Flow Design\"]},{\"href\":\"/best-practices#context-handling\",\"html\":\"\\n\",\"id\":\"docs/pages/best-practices.mdx#context-handling\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Context Handling\",\"titles\":[\"Best Practices\"]},{\"href\":\"/best-practices#respect-cancellation\",\"html\":\"\\n<p>Always check context in long-running operations:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">ProcessNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    items </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Item</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    results </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Result</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> _, item </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> range</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> items {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Check context before each iteration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        select</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        case</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">ctx.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Done</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, ctx.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Err</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        default</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        result </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processItem</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, item)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        results </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> append</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(results, result)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> results, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#respect-cancellation\",\"isPage\":false,\"text\":\"\\nAlways check context in long-running operations:\\nfunc (n *ProcessNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    items := prepResult.([]Item)\\n    results := []Result{}\\n    \\n    for _, item := range items {\\n        // Check context before each iteration\\n        select {\\n        case &lt;-ctx.Done():\\n            return nil, ctx.Err()\\n        default:\\n        }\\n        \\n        result := processItem(ctx, item)\\n        results = append(results, result)\\n    }\\n    \\n    return results, nil\\n}\\n\",\"title\":\"Respect Cancellation\",\"titles\":[\"Best Practices\",\"Context Handling\"]},{\"href\":\"/best-practices#timeout-management\",\"html\":\"\\n<p>Set appropriate timeouts:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">APINode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Create timeout context</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ctx, cancel </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> context.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithTimeout</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">30</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">time.Second)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    defer</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> cancel</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> callAPI</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, prepResult)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#timeout-management\",\"isPage\":false,\"text\":\"\\nSet appropriate timeouts:\\nfunc (n *APINode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    // Create timeout context\\n    ctx, cancel := context.WithTimeout(ctx, 30*time.Second)\\n    defer cancel()\\n    \\n    return callAPI(ctx, prepResult)\\n}\\n\",\"title\":\"Timeout Management\",\"titles\":[\"Best Practices\",\"Context Handling\"]},{\"href\":\"/best-practices#concurrency-safety\",\"html\":\"\\n\",\"id\":\"docs/pages/best-practices.mdx#concurrency-safety\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Concurrency Safety\",\"titles\":[\"Best Practices\"]},{\"href\":\"/best-practices#thread-safe-nodes\",\"html\":\"\\n<p>Protect shared state in nodes:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> CounterNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    mu    </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">sync</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Mutex</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    count </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CounterNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Lock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.count</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">++</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    current </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.count</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Unlock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> current, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#thread-safe-nodes\",\"isPage\":false,\"text\":\"\\nProtect shared state in nodes:\\ntype CounterNode struct {\\n    *flyt.BaseNode\\n    mu    sync.Mutex\\n    count int\\n}\\n \\nfunc (n *CounterNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    n.mu.Lock()\\n    n.count++\\n    current := n.count\\n    n.mu.Unlock()\\n    \\n    return current, nil\\n}\\n\",\"title\":\"Thread-Safe Nodes\",\"titles\":[\"Best Practices\",\"Concurrency Safety\"]},{\"href\":\"/best-practices#avoid-shared-node-instances\",\"html\":\"\\n<p>Create new instances for concurrent use:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ❌ Bad: Sharing node instance</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">node </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createProcessNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 10</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; i</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">++</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    go</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Run</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, node, shared) </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Race condition!</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// ✅ Good: Create new instances</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 10</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; i</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">++</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    go</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Run</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createProcessNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(), shared)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#avoid-shared-node-instances\",\"isPage\":false,\"text\":\"\\nCreate new instances for concurrent use:\\n// ❌ Bad: Sharing node instance\\nnode := createProcessNode()\\nfor i := 0; i &lt; 10; i++ {\\n    go flyt.Run(ctx, node, shared) // Race condition!\\n}\\n \\n// ✅ Good: Create new instances\\nfor i := 0; i &lt; 10; i++ {\\n    go flyt.Run(ctx, createProcessNode(), shared)\\n}\\n\",\"title\":\"Avoid Shared Node Instances\",\"titles\":[\"Best Practices\",\"Concurrency Safety\"]},{\"href\":\"/best-practices#resource-management\",\"html\":\"\\n\",\"id\":\"docs/pages/best-practices.mdx#resource-management\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Resource Management\",\"titles\":[\"Best Practices\"]},{\"href\":\"/best-practices#clean-up-resources\",\"html\":\"\\n<p>Use defer for cleanup:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FileNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    file, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> os.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Open</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(prepResult.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    defer</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> file.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Close</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Always cleanup</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Process file...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processFile</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(file)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#clean-up-resources\",\"isPage\":false,\"text\":\"\\nUse defer for cleanup:\\nfunc (n *FileNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    file, err := os.Open(prepResult.(string))\\n    if err != nil {\\n        return nil, err\\n    }\\n    defer file.Close() // Always cleanup\\n    \\n    // Process file...\\n    return processFile(file)\\n}\\n\",\"title\":\"Clean Up Resources\",\"titles\":[\"Best Practices\",\"Resource Management\"]},{\"href\":\"/best-practices#connection-pooling\",\"html\":\"\\n<p>Reuse expensive resources:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> DatabaseFlow</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    db </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">sql</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DB</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewDatabaseFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">db</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">sql</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DB</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DatabaseFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DatabaseFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{db: db}</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">f </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DatabaseFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">CreateNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Node</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DatabaseNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        BaseNode: flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewBaseNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        db: f.db, </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Reuse connection pool</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#connection-pooling\",\"isPage\":false,\"text\":\"\\nReuse expensive resources:\\ntype DatabaseFlow struct {\\n    db *sql.DB\\n}\\n \\nfunc NewDatabaseFlow(db *sql.DB) *DatabaseFlow {\\n    return &amp;DatabaseFlow{db: db}\\n}\\n \\nfunc (f *DatabaseFlow) CreateNode() flyt.Node {\\n    return &amp;DatabaseNode{\\n        BaseNode: flyt.NewBaseNode(),\\n        db: f.db, // Reuse connection pool\\n    }\\n}\\n\",\"title\":\"Connection Pooling\",\"titles\":[\"Best Practices\",\"Resource Management\"]},{\"href\":\"/best-practices#testing\",\"html\":\"\\n\",\"id\":\"docs/pages/best-practices.mdx#testing\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Testing\",\"titles\":[\"Best Practices\"]},{\"href\":\"/best-practices#unit-test-nodes\",\"html\":\"\\n<p>Test nodes in isolation:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> TestProcessNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">t</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">testing</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">T</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    node </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createProcessNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ctx </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> context.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Background</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Test successful case</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> node.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;test input&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    assert.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NoError</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(t, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    assert.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Equal</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(t, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;expected output&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, result)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Test error case</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> node.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    assert.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(t, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#unit-test-nodes\",\"isPage\":false,\"text\":\"\\nTest nodes in isolation:\\nfunc TestProcessNode(t *testing.T) {\\n    node := createProcessNode()\\n    ctx := context.Background()\\n    \\n    // Test successful case\\n    result, err := node.Exec(ctx, &quot;test input&quot;)\\n    assert.NoError(t, err)\\n    assert.Equal(t, &quot;expected output&quot;, result)\\n    \\n    // Test error case\\n    result, err = node.Exec(ctx, nil)\\n    assert.Error(t, err)\\n}\\n\",\"title\":\"Unit Test Nodes\",\"titles\":[\"Best Practices\",\"Testing\"]},{\"href\":\"/best-practices#integration-test-flows\",\"html\":\"\\n<p>Test complete workflows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> TestCompleteFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">t</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">testing</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">T</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createMainFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    shared </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewSharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Set</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;input&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, testData)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ctx </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> context.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Background</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Run</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, shared)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    assert.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NoError</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(t, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    result, ok </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Get</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;output&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    assert.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">True</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(t, ok)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    assert.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Equal</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(t, expectedResult, result)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#integration-test-flows\",\"isPage\":false,\"text\":\"\\nTest complete workflows:\\nfunc TestCompleteFlow(t *testing.T) {\\n    flow := createMainFlow()\\n    shared := flyt.NewSharedStore()\\n    shared.Set(&quot;input&quot;, testData)\\n    \\n    ctx := context.Background()\\n    err := flow.Run(ctx, shared)\\n    assert.NoError(t, err)\\n    \\n    result, ok := shared.Get(&quot;output&quot;)\\n    assert.True(t, ok)\\n    assert.Equal(t, expectedResult, result)\\n}\\n\",\"title\":\"Integration Test Flows\",\"titles\":[\"Best Practices\",\"Testing\"]},{\"href\":\"/best-practices#documentation\",\"html\":\"\\n\",\"id\":\"docs/pages/best-practices.mdx#documentation\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Documentation\",\"titles\":[\"Best Practices\"]},{\"href\":\"/best-practices#document-node-behavior\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// FetchUserNode fetches user data from the API.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Prep: Reads &quot;user_id&quot; from SharedStore</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Exec: Fetches user from API, retries on network errors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Post: Stores user data in &quot;user_data&quot; key</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Actions:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//   - &quot;success&quot;: User fetched successfully</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//   - &quot;not_found&quot;: User does not exist</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//   - &quot;error&quot;: Unrecoverable error occurred</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> FetchUserNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    apiClient </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">APIClient</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#document-node-behavior\",\"isPage\":false,\"text\":\"\\n// FetchUserNode fetches user data from the API.\\n// \\n// Prep: Reads &quot;user_id&quot; from SharedStore\\n// Exec: Fetches user from API, retries on network errors\\n// Post: Stores user data in &quot;user_data&quot; key\\n// Actions:\\n//   - &quot;success&quot;: User fetched successfully\\n//   - &quot;not_found&quot;: User does not exist\\n//   - &quot;error&quot;: Unrecoverable error occurred\\ntype FetchUserNode struct {\\n    *flyt.BaseNode\\n    apiClient *APIClient\\n}\\n\",\"title\":\"Document Node Behavior\",\"titles\":[\"Best Practices\",\"Documentation\"]},{\"href\":\"/best-practices#document-flow-structure\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// CreateOrderFlow processes new orders:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 1. Validates order data</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 2. Checks inventory</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 3. Processes payment</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 4. Creates shipment</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 5. Sends confirmation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Required SharedStore keys:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//   - &quot;order_data&quot;: OrderData struct</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//   - &quot;customer_id&quot;: string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Sets SharedStore keys:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//   - &quot;order_id&quot;: string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//   - &quot;tracking_number&quot;: string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> CreateOrderFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // ...</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#document-flow-structure\",\"isPage\":false,\"text\":\"\\n// CreateOrderFlow processes new orders:\\n// 1. Validates order data\\n// 2. Checks inventory\\n// 3. Processes payment\\n// 4. Creates shipment\\n// 5. Sends confirmation\\n//\\n// Required SharedStore keys:\\n//   - &quot;order_data&quot;: OrderData struct\\n//   - &quot;customer_id&quot;: string\\n//\\n// Sets SharedStore keys:\\n//   - &quot;order_id&quot;: string\\n//   - &quot;tracking_number&quot;: string\\nfunc CreateOrderFlow() *flyt.Flow {\\n    // ...\\n}\\n\",\"title\":\"Document Flow Structure\",\"titles\":[\"Best Practices\",\"Documentation\"]},{\"href\":\"/best-practices#performance\",\"html\":\"\\n\",\"id\":\"docs/pages/best-practices.mdx#performance\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Performance\",\"titles\":[\"Best Practices\"]},{\"href\":\"/best-practices#batch-operations\",\"html\":\"\\n<p>Process items in batches when possible:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Instead of processing one at a time</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> _, item </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> range</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> items {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">    process</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(item)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Process in batches</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">batchNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewBatchNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(processFunc, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Set</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;items&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, items)</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#batch-operations\",\"isPage\":false,\"text\":\"\\nProcess items in batches when possible:\\n// Instead of processing one at a time\\nfor _, item := range items {\\n    process(item)\\n}\\n \\n// Process in batches\\nbatchNode := flyt.NewBatchNode(processFunc, true)\\nshared.Set(&quot;items&quot;, items)\\n\",\"title\":\"Batch Operations\",\"titles\":[\"Best Practices\",\"Performance\"]},{\"href\":\"/best-practices#lazy-loading\",\"html\":\"\\n<p>Load data only when needed:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">ProcessNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Prep</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Only load the data this node needs</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> needsUserData</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(shared) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        userData </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> loadUserData</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> userData, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#lazy-loading\",\"isPage\":false,\"text\":\"\\nLoad data only when needed:\\nfunc (n *ProcessNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n    // Only load the data this node needs\\n    if needsUserData(shared) {\\n        userData := loadUserData()\\n        return userData, nil\\n    }\\n    return nil, nil\\n}\\n\",\"title\":\"Lazy Loading\",\"titles\":[\"Best Practices\",\"Performance\"]},{\"href\":\"/best-practices#monitoring\",\"html\":\"\\n\",\"id\":\"docs/pages/best-practices.mdx#monitoring\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Monitoring\",\"titles\":[\"Best Practices\"]},{\"href\":\"/best-practices#add-observability\",\"html\":\"\\n<p>Log important events:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">ProcessNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    start </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    defer</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;ProcessNode took </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Since</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(start))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(prepResult)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;ProcessNode error: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;ProcessNode success: processed </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> items&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(result))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/best-practices.mdx#add-observability\",\"isPage\":false,\"text\":\"\\nLog important events:\\nfunc (n *ProcessNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    start := time.Now()\\n    defer func() {\\n        log.Printf(&quot;ProcessNode took %v&quot;, time.Since(start))\\n    }()\\n    \\n    result, err := process(prepResult)\\n    if err != nil {\\n        log.Printf(&quot;ProcessNode error: %v&quot;, err)\\n        return nil, err\\n    }\\n    \\n    log.Printf(&quot;ProcessNode success: processed %d items&quot;, len(result))\\n    return result, nil\\n}\\n\",\"title\":\"Add Observability\",\"titles\":[\"Best Practices\",\"Monitoring\"]},{\"href\":\"/best-practices#next-steps\",\"html\":\"\\n<ul>\\n<li><a href=\\\"/examples/agent\\\">Examples</a> - See best practices in action</li>\\n<li><a href=\\\"/advanced/custom-nodes\\\">Advanced Usage</a> - Advanced patterns</li>\\n<li><a href=\\\"/concepts/nodes\\\">Core Concepts</a> - Review fundamentals</li>\\n</ul>\",\"id\":\"docs/pages/best-practices.mdx#next-steps\",\"isPage\":false,\"text\":\"\\n\\nExamples - See best practices in action\\nAdvanced Usage - Advanced patterns\\nCore Concepts - Review fundamentals\\n\",\"title\":\"Next Steps\",\"titles\":[\"Best Practices\"]}]}}"
