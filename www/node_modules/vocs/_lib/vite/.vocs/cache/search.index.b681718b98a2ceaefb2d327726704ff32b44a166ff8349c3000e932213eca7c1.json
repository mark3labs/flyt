"{\"value\":{\"mdx\":\"# Flows\\n\\nFlows connect nodes together to create workflows. They define the execution path based on actions returned by nodes.\\n\\n## Creating Flows\\n\\nStart with a single node and build connections:\\n\\n```go\\n// Create nodes\\nstartNode := createStartNode()\\nprocessNode := createProcessNode()\\nendNode := createEndNode()\\n\\n// Build flow\\nflow := flyt.NewFlow(startNode)\\nflow.Connect(startNode, flyt.DefaultAction, processNode)\\nflow.Connect(processNode, flyt.DefaultAction, endNode)\\n```\\n\\n## Running Flows\\n\\nExecute a flow with a context and SharedStore:\\n\\n```go\\nctx := context.Background()\\nshared := flyt.NewSharedStore()\\n\\n// Add initial data\\nshared.Set(\\\"input\\\", \\\"data to process\\\")\\n\\n// Run the flow\\nerr := flow.Run(ctx, shared)\\nif err != nil {\\n    log.Fatal(err)\\n}\\n\\n// Get results\\nresult, _ := shared.Get(\\\"output\\\")\\n```\\n\\n## Flow Connections\\n\\n### Linear Flow\\n\\nSimple sequential execution:\\n\\n```go\\nflow := flyt.NewFlow(node1)\\nflow.Connect(node1, flyt.DefaultAction, node2)\\nflow.Connect(node2, flyt.DefaultAction, node3)\\nflow.Connect(node3, flyt.DefaultAction, nil) // Terminate\\n```\\n\\n### Branching Flow\\n\\nMultiple paths based on actions:\\n\\n```go\\nflow := flyt.NewFlow(decisionNode)\\nflow.Connect(decisionNode, \\\"path_a\\\", nodeA)\\nflow.Connect(decisionNode, \\\"path_b\\\", nodeB)\\nflow.Connect(nodeA, flyt.DefaultAction, mergeNode)\\nflow.Connect(nodeB, flyt.DefaultAction, mergeNode)\\n```\\n\\n### Loop Flow\\n\\nCreate cycles for retry or iteration:\\n\\n```go\\nflow := flyt.NewFlow(startNode)\\nflow.Connect(startNode, flyt.DefaultAction, processNode)\\nflow.Connect(processNode, \\\"retry\\\", startNode)    // Loop back\\nflow.Connect(processNode, \\\"success\\\", endNode)\\n```\\n\\n## Flow as Node\\n\\nFlows implement the Node interface and can be used as nodes:\\n\\n```go\\n// Create a sub-flow\\nsubFlow := flyt.NewFlow(validateNode)\\nsubFlow.Connect(validateNode, flyt.DefaultAction, transformNode)\\n\\n// Use sub-flow in main flow\\nmainFlow := flyt.NewFlow(fetchNode)\\nmainFlow.Connect(fetchNode, flyt.DefaultAction, subFlow)\\nmainFlow.Connect(subFlow, flyt.DefaultAction, saveNode)\\n```\\n\\n## Complex Flow Patterns\\n\\n### Diamond Pattern\\n\\nSplit and merge execution paths:\\n\\n```go\\nflow := flyt.NewFlow(splitNode)\\nflow.Connect(splitNode, \\\"path1\\\", process1)\\nflow.Connect(splitNode, \\\"path2\\\", process2)\\nflow.Connect(process1, flyt.DefaultAction, mergeNode)\\nflow.Connect(process2, flyt.DefaultAction, mergeNode)\\n```\\n\\n### Error Handling Flow\\n\\nCentralized error handling:\\n\\n```go\\nflow := flyt.NewFlow(startNode)\\nflow.Connect(startNode, \\\"error\\\", errorHandler)\\nflow.Connect(startNode, flyt.DefaultAction, processNode)\\nflow.Connect(processNode, \\\"error\\\", errorHandler)\\nflow.Connect(processNode, flyt.DefaultAction, saveNode)\\nflow.Connect(saveNode, \\\"error\\\", errorHandler)\\n```\\n\\n### Pipeline Pattern\\n\\nData transformation pipeline:\\n\\n```go\\nflow := flyt.NewFlow(fetchNode)\\nflow.Connect(fetchNode, flyt.DefaultAction, validateNode)\\nflow.Connect(validateNode, \\\"valid\\\", transformNode)\\nflow.Connect(validateNode, \\\"invalid\\\", rejectNode)\\nflow.Connect(transformNode, flyt.DefaultAction, enrichNode)\\nflow.Connect(enrichNode, flyt.DefaultAction, saveNode)\\n```\\n\\n## Flow Composition\\n\\nBuild complex flows from simpler ones:\\n\\n```go\\nfunc createValidationFlow() *flyt.Flow {\\n    checkFormat := createFormatChecker()\\n    checkBusiness := createBusinessRules()\\n    \\n    flow := flyt.NewFlow(checkFormat)\\n    flow.Connect(checkFormat, \\\"valid\\\", checkBusiness)\\n    return flow\\n}\\n\\nfunc createMainFlow() *flyt.Flow {\\n    fetch := createFetchNode()\\n    validation := createValidationFlow()\\n    process := createProcessNode()\\n    \\n    flow := flyt.NewFlow(fetch)\\n    flow.Connect(fetch, flyt.DefaultAction, validation)\\n    flow.Connect(validation, flyt.DefaultAction, process)\\n    return flow\\n}\\n```\\n\\n## Debugging Flows\\n\\nAdd logging nodes for debugging:\\n\\n```go\\nfunc createLoggingNode(name string) flyt.Node {\\n    return flyt.NewNode(\\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n            log.Printf(\\\"[%s] Prep: SharedStore keys: %v\\\", name, shared.GetAll())\\n            return nil, nil\\n        }),\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            log.Printf(\\\"[%s] Exec\\\", name)\\n            return prepResult, nil\\n        }),\\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\\n            log.Printf(\\\"[%s] Post: Result: %v\\\", name, execResult)\\n            return flyt.DefaultAction, nil\\n        }),\\n    )\\n}\\n\\n// Insert between nodes for debugging\\nflow.Connect(node1, flyt.DefaultAction, createLoggingNode(\\\"debug\\\"))\\nflow.Connect(createLoggingNode(\\\"debug\\\"), flyt.DefaultAction, node2)\\n```\\n\\n## Best Practices\\n\\n1. **Start Simple**: Build flows incrementally, testing as you go\\n2. **Name Nodes**: Give nodes descriptive names for easier debugging\\n3. **Document Flows**: Create diagrams or comments explaining flow logic\\n4. **Reuse Flows**: Extract common patterns into reusable sub-flows\\n5. **Test Flows**: Write tests for different execution paths\\n\\n## Visualizing Flows\\n\\nDocument your flows with clear structure:\\n\\n```go\\n// Flow structure:\\n// Start -> Validate -> Process -> Save\\n//              └─> Error (on invalid)\\n\\nflow := flyt.NewFlow(startNode)\\nflow.Connect(startNode, flyt.DefaultAction, validateNode)\\nflow.Connect(validateNode, \\\"valid\\\", processNode)\\nflow.Connect(validateNode, \\\"invalid\\\", errorNode)\\nflow.Connect(processNode, flyt.DefaultAction, saveNode)\\n```\\n\\n## Next Steps\\n\\n- [Shared Store](/concepts/shared-store) - Share data between nodes\\n- [Nested Flows](/advanced/nested-flows) - Advanced composition\\n- [Batch Flows](/advanced/batch-flows) - Process multiple inputs\",\"document\":[{\"href\":\"/concepts/flows#flows\",\"html\":\"</header>\\n<p>Flows connect nodes together to create workflows. They define the execution path based on actions returned by nodes.</p>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#flows\",\"isPage\":true,\"text\":\"\\nFlows connect nodes together to create workflows. They define the execution path based on actions returned by nodes.\\n\",\"title\":\"Flows\",\"titles\":[]},{\"href\":\"/concepts/flows#creating-flows\",\"html\":\"\\n<p>Start with a single node and build connections:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Create nodes</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">startNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createStartNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">processNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createProcessNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">endNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createEndNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Build flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(startNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(startNode, flyt.DefaultAction, processNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(processNode, flyt.DefaultAction, endNode)</span></span></code></pre>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#creating-flows\",\"isPage\":false,\"text\":\"\\nStart with a single node and build connections:\\n// Create nodes\\nstartNode := createStartNode()\\nprocessNode := createProcessNode()\\nendNode := createEndNode()\\n \\n// Build flow\\nflow := flyt.NewFlow(startNode)\\nflow.Connect(startNode, flyt.DefaultAction, processNode)\\nflow.Connect(processNode, flyt.DefaultAction, endNode)\\n\",\"title\":\"Creating Flows\",\"titles\":[\"Flows\"]},{\"href\":\"/concepts/flows#running-flows\",\"html\":\"\\n<p>Execute a flow with a context and SharedStore:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">ctx </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> context.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Background</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">shared </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewSharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Add initial data</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Set</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;input&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;data to process&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Run the flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Run</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, shared)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Fatal</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Get results</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">result, _ </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Get</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;output&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#running-flows\",\"isPage\":false,\"text\":\"\\nExecute a flow with a context and SharedStore:\\nctx := context.Background()\\nshared := flyt.NewSharedStore()\\n \\n// Add initial data\\nshared.Set(&quot;input&quot;, &quot;data to process&quot;)\\n \\n// Run the flow\\nerr := flow.Run(ctx, shared)\\nif err != nil {\\n    log.Fatal(err)\\n}\\n \\n// Get results\\nresult, _ := shared.Get(&quot;output&quot;)\\n\",\"title\":\"Running Flows\",\"titles\":[\"Flows\"]},{\"href\":\"/concepts/flows#flow-connections\",\"html\":\"\\n\",\"id\":\"docs/pages/concepts/flows.mdx#flow-connections\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Flow Connections\",\"titles\":[\"Flows\"]},{\"href\":\"/concepts/flows#linear-flow\",\"html\":\"\\n<p>Simple sequential execution:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(node1)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(node1, flyt.DefaultAction, node2)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(node2, flyt.DefaultAction, node3)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(node3, flyt.DefaultAction, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Terminate</span></span></code></pre>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#linear-flow\",\"isPage\":false,\"text\":\"\\nSimple sequential execution:\\nflow := flyt.NewFlow(node1)\\nflow.Connect(node1, flyt.DefaultAction, node2)\\nflow.Connect(node2, flyt.DefaultAction, node3)\\nflow.Connect(node3, flyt.DefaultAction, nil) // Terminate\\n\",\"title\":\"Linear Flow\",\"titles\":[\"Flows\",\"Flow Connections\"]},{\"href\":\"/concepts/flows#branching-flow\",\"html\":\"\\n<p>Multiple paths based on actions:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(decisionNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(decisionNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;path_a&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, nodeA)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(decisionNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;path_b&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, nodeB)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(nodeA, flyt.DefaultAction, mergeNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(nodeB, flyt.DefaultAction, mergeNode)</span></span></code></pre>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#branching-flow\",\"isPage\":false,\"text\":\"\\nMultiple paths based on actions:\\nflow := flyt.NewFlow(decisionNode)\\nflow.Connect(decisionNode, &quot;path_a&quot;, nodeA)\\nflow.Connect(decisionNode, &quot;path_b&quot;, nodeB)\\nflow.Connect(nodeA, flyt.DefaultAction, mergeNode)\\nflow.Connect(nodeB, flyt.DefaultAction, mergeNode)\\n\",\"title\":\"Branching Flow\",\"titles\":[\"Flows\",\"Flow Connections\"]},{\"href\":\"/concepts/flows#loop-flow\",\"html\":\"\\n<p>Create cycles for retry or iteration:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(startNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(startNode, flyt.DefaultAction, processNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(processNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;retry&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, startNode)    </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Loop back</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(processNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;success&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, endNode)</span></span></code></pre>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#loop-flow\",\"isPage\":false,\"text\":\"\\nCreate cycles for retry or iteration:\\nflow := flyt.NewFlow(startNode)\\nflow.Connect(startNode, flyt.DefaultAction, processNode)\\nflow.Connect(processNode, &quot;retry&quot;, startNode)    // Loop back\\nflow.Connect(processNode, &quot;success&quot;, endNode)\\n\",\"title\":\"Loop Flow\",\"titles\":[\"Flows\",\"Flow Connections\"]},{\"href\":\"/concepts/flows#flow-as-node\",\"html\":\"\\n<p>Flows implement the Node interface and can be used as nodes:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Create a sub-flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">subFlow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(validateNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">subFlow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(validateNode, flyt.DefaultAction, transformNode)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Use sub-flow in main flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">mainFlow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">mainFlow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode, flyt.DefaultAction, subFlow)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">mainFlow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(subFlow, flyt.DefaultAction, saveNode)</span></span></code></pre>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#flow-as-node\",\"isPage\":false,\"text\":\"\\nFlows implement the Node interface and can be used as nodes:\\n// Create a sub-flow\\nsubFlow := flyt.NewFlow(validateNode)\\nsubFlow.Connect(validateNode, flyt.DefaultAction, transformNode)\\n \\n// Use sub-flow in main flow\\nmainFlow := flyt.NewFlow(fetchNode)\\nmainFlow.Connect(fetchNode, flyt.DefaultAction, subFlow)\\nmainFlow.Connect(subFlow, flyt.DefaultAction, saveNode)\\n\",\"title\":\"Flow as Node\",\"titles\":[\"Flows\"]},{\"href\":\"/concepts/flows#complex-flow-patterns\",\"html\":\"\\n\",\"id\":\"docs/pages/concepts/flows.mdx#complex-flow-patterns\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Complex Flow Patterns\",\"titles\":[\"Flows\"]},{\"href\":\"/concepts/flows#diamond-pattern\",\"html\":\"\\n<p>Split and merge execution paths:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(splitNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(splitNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;path1&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, process1)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(splitNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;path2&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, process2)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(process1, flyt.DefaultAction, mergeNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(process2, flyt.DefaultAction, mergeNode)</span></span></code></pre>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#diamond-pattern\",\"isPage\":false,\"text\":\"\\nSplit and merge execution paths:\\nflow := flyt.NewFlow(splitNode)\\nflow.Connect(splitNode, &quot;path1&quot;, process1)\\nflow.Connect(splitNode, &quot;path2&quot;, process2)\\nflow.Connect(process1, flyt.DefaultAction, mergeNode)\\nflow.Connect(process2, flyt.DefaultAction, mergeNode)\\n\",\"title\":\"Diamond Pattern\",\"titles\":[\"Flows\",\"Complex Flow Patterns\"]},{\"href\":\"/concepts/flows#error-handling-flow\",\"html\":\"\\n<p>Centralized error handling:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(startNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(startNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, errorHandler)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(startNode, flyt.DefaultAction, processNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(processNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, errorHandler)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(processNode, flyt.DefaultAction, saveNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(saveNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, errorHandler)</span></span></code></pre>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#error-handling-flow\",\"isPage\":false,\"text\":\"\\nCentralized error handling:\\nflow := flyt.NewFlow(startNode)\\nflow.Connect(startNode, &quot;error&quot;, errorHandler)\\nflow.Connect(startNode, flyt.DefaultAction, processNode)\\nflow.Connect(processNode, &quot;error&quot;, errorHandler)\\nflow.Connect(processNode, flyt.DefaultAction, saveNode)\\nflow.Connect(saveNode, &quot;error&quot;, errorHandler)\\n\",\"title\":\"Error Handling Flow\",\"titles\":[\"Flows\",\"Complex Flow Patterns\"]},{\"href\":\"/concepts/flows#pipeline-pattern\",\"html\":\"\\n<p>Data transformation pipeline:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode, flyt.DefaultAction, validateNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(validateNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;valid&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, transformNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(validateNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;invalid&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, rejectNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(transformNode, flyt.DefaultAction, enrichNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(enrichNode, flyt.DefaultAction, saveNode)</span></span></code></pre>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#pipeline-pattern\",\"isPage\":false,\"text\":\"\\nData transformation pipeline:\\nflow := flyt.NewFlow(fetchNode)\\nflow.Connect(fetchNode, flyt.DefaultAction, validateNode)\\nflow.Connect(validateNode, &quot;valid&quot;, transformNode)\\nflow.Connect(validateNode, &quot;invalid&quot;, rejectNode)\\nflow.Connect(transformNode, flyt.DefaultAction, enrichNode)\\nflow.Connect(enrichNode, flyt.DefaultAction, saveNode)\\n\",\"title\":\"Pipeline Pattern\",\"titles\":[\"Flows\",\"Complex Flow Patterns\"]},{\"href\":\"/concepts/flows#flow-composition\",\"html\":\"\\n<p>Build complex flows from simpler ones:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createValidationFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    checkFormat </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createFormatChecker</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    checkBusiness </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createBusinessRules</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(checkFormat)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(checkFormat, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;valid&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, checkBusiness)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createMainFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    fetch </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createFetchNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    validation </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createValidationFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    process </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createProcessNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetch)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetch, flyt.DefaultAction, validation)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(validation, flyt.DefaultAction, process)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#flow-composition\",\"isPage\":false,\"text\":\"\\nBuild complex flows from simpler ones:\\nfunc createValidationFlow() *flyt.Flow {\\n    checkFormat := createFormatChecker()\\n    checkBusiness := createBusinessRules()\\n    \\n    flow := flyt.NewFlow(checkFormat)\\n    flow.Connect(checkFormat, &quot;valid&quot;, checkBusiness)\\n    return flow\\n}\\n \\nfunc createMainFlow() *flyt.Flow {\\n    fetch := createFetchNode()\\n    validation := createValidationFlow()\\n    process := createProcessNode()\\n    \\n    flow := flyt.NewFlow(fetch)\\n    flow.Connect(fetch, flyt.DefaultAction, validation)\\n    flow.Connect(validation, flyt.DefaultAction, process)\\n    return flow\\n}\\n\",\"title\":\"Flow Composition\",\"titles\":[\"Flows\"]},{\"href\":\"/concepts/flows#debugging-flows\",\"html\":\"\\n<p>Add logging nodes for debugging:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createLoggingNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">name</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Node</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithPrepFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;[</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%s</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">] Prep: SharedStore keys: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, name, shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">GetAll</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">())</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithExecFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;[</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%s</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">] Exec&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, name)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithPostFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">execResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Action</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;[</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%s</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">] Post: Result: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, name, execResult)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.DefaultAction, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Insert between nodes for debugging</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(node1, flyt.DefaultAction, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createLoggingNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;debug&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">createLoggingNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;debug&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">), flyt.DefaultAction, node2)</span></span></code></pre>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#debugging-flows\",\"isPage\":false,\"text\":\"\\nAdd logging nodes for debugging:\\nfunc createLoggingNode(name string) flyt.Node {\\n    return flyt.NewNode(\\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n            log.Printf(&quot;[%s] Prep: SharedStore keys: %v&quot;, name, shared.GetAll())\\n            return nil, nil\\n        }),\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            log.Printf(&quot;[%s] Exec&quot;, name)\\n            return prepResult, nil\\n        }),\\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\\n            log.Printf(&quot;[%s] Post: Result: %v&quot;, name, execResult)\\n            return flyt.DefaultAction, nil\\n        }),\\n    )\\n}\\n \\n// Insert between nodes for debugging\\nflow.Connect(node1, flyt.DefaultAction, createLoggingNode(&quot;debug&quot;))\\nflow.Connect(createLoggingNode(&quot;debug&quot;), flyt.DefaultAction, node2)\\n\",\"title\":\"Debugging Flows\",\"titles\":[\"Flows\"]},{\"href\":\"/concepts/flows#best-practices\",\"html\":\"\\n<ol>\\n<li><strong>Start Simple</strong>: Build flows incrementally, testing as you go</li>\\n<li><strong>Name Nodes</strong>: Give nodes descriptive names for easier debugging</li>\\n<li><strong>Document Flows</strong>: Create diagrams or comments explaining flow logic</li>\\n<li><strong>Reuse Flows</strong>: Extract common patterns into reusable sub-flows</li>\\n<li><strong>Test Flows</strong>: Write tests for different execution paths</li>\\n</ol>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#best-practices\",\"isPage\":false,\"text\":\"\\n\\nStart Simple: Build flows incrementally, testing as you go\\nName Nodes: Give nodes descriptive names for easier debugging\\nDocument Flows: Create diagrams or comments explaining flow logic\\nReuse Flows: Extract common patterns into reusable sub-flows\\nTest Flows: Write tests for different execution paths\\n\\n\",\"title\":\"Best Practices\",\"titles\":[\"Flows\"]},{\"href\":\"/concepts/flows#visualizing-flows\",\"html\":\"\\n<p>Document your flows with clear structure:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Flow structure:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Start -&gt; Validate -&gt; Process -&gt; Save</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">//              └─&gt; Error (on invalid)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(startNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(startNode, flyt.DefaultAction, validateNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(validateNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;valid&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, processNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(validateNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;invalid&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, errorNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(processNode, flyt.DefaultAction, saveNode)</span></span></code></pre>\\n\",\"id\":\"docs/pages/concepts/flows.mdx#visualizing-flows\",\"isPage\":false,\"text\":\"\\nDocument your flows with clear structure:\\n// Flow structure:\\n// Start -&gt; Validate -&gt; Process -&gt; Save\\n//              └─&gt; Error (on invalid)\\n \\nflow := flyt.NewFlow(startNode)\\nflow.Connect(startNode, flyt.DefaultAction, validateNode)\\nflow.Connect(validateNode, &quot;valid&quot;, processNode)\\nflow.Connect(validateNode, &quot;invalid&quot;, errorNode)\\nflow.Connect(processNode, flyt.DefaultAction, saveNode)\\n\",\"title\":\"Visualizing Flows\",\"titles\":[\"Flows\"]},{\"href\":\"/concepts/flows#next-steps\",\"html\":\"\\n<ul>\\n<li><a href=\\\"/concepts/shared-store\\\">Shared Store</a> - Share data between nodes</li>\\n<li><a href=\\\"/advanced/nested-flows\\\">Nested Flows</a> - Advanced composition</li>\\n<li><a href=\\\"/advanced/batch-flows\\\">Batch Flows</a> - Process multiple inputs</li>\\n</ul>\",\"id\":\"docs/pages/concepts/flows.mdx#next-steps\",\"isPage\":false,\"text\":\"\\n\\nShared Store - Share data between nodes\\nNested Flows - Advanced composition\\nBatch Flows - Process multiple inputs\\n\",\"title\":\"Next Steps\",\"titles\":[\"Flows\"]}]}}"
