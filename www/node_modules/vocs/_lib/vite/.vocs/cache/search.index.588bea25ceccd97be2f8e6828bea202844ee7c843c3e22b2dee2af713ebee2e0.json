"{\"value\":{\"mdx\":\"# Error Handling & Retries\\n\\nBuild resilient workflows with proper error handling and retry strategies.\\n\\n## Basic Retry Configuration\\n\\nConfigure retries at the node level:\\n\\n```go\\nnode := flyt.NewNode(\\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n        // This will be retried up to 3 times\\n        return callFlakeyAPI()\\n    }),\\n    flyt.WithMaxRetries(3),\\n    flyt.WithWait(time.Second), // Wait 1 second between retries\\n)\\n```\\n\\n## Exponential Backoff\\n\\nImplement exponential backoff with RetryableNode:\\n\\n```go\\ntype BackoffNode struct {\\n    *flyt.BaseNode\\n    attempt int\\n}\\n\\nfunc (n *BackoffNode) GetMaxRetries() int {\\n    return 5\\n}\\n\\nfunc (n *BackoffNode) GetWait() time.Duration {\\n    // Exponential backoff: 1s, 2s, 4s, 8s, 16s\\n    return time.Duration(math.Pow(2, float64(n.attempt))) * time.Second\\n}\\n\\nfunc (n *BackoffNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    n.attempt++\\n    result, err := callAPI()\\n    if err != nil {\\n        log.Printf(\\\"Attempt %d failed: %v\\\", n.attempt, err)\\n        return nil, err\\n    }\\n    n.attempt = 0 // Reset on success\\n    return result, nil\\n}\\n```\\n\\n## Circuit Breaker Pattern\\n\\nPrevent cascading failures:\\n\\n```go\\ntype CircuitBreakerNode struct {\\n    *flyt.BaseNode\\n    failures    int\\n    lastFailure time.Time\\n    threshold   int\\n    timeout     time.Duration\\n}\\n\\nfunc NewCircuitBreakerNode() *CircuitBreakerNode {\\n    return &CircuitBreakerNode{\\n        BaseNode:  flyt.NewBaseNode(),\\n        threshold: 5,\\n        timeout:   30 * time.Second,\\n    }\\n}\\n\\nfunc (n *CircuitBreakerNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    // Check if circuit is open\\n    if n.failures >= n.threshold {\\n        if time.Since(n.lastFailure) < n.timeout {\\n            return nil, fmt.Errorf(\\\"circuit breaker open\\\")\\n        }\\n        // Reset after timeout\\n        n.failures = 0\\n    }\\n    \\n    result, err := callService()\\n    if err != nil {\\n        n.failures++\\n        n.lastFailure = time.Now()\\n        return nil, err\\n    }\\n    \\n    n.failures = 0 // Reset on success\\n    return result, nil\\n}\\n```\\n\\n## Fallback on Failure\\n\\nImplement the FallbackNode interface for graceful degradation:\\n\\n```go\\ntype CachedAPINode struct {\\n    *flyt.BaseNode\\n    cache sync.Map\\n}\\n\\nfunc (n *CachedAPINode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    key := prepResult.(string)\\n    \\n    // Try to fetch fresh data\\n    data, err := fetchFromAPI(key)\\n    if err == nil {\\n        // Cache successful result\\n        n.cache.Store(key, data)\\n        return data, nil\\n    }\\n    \\n    return nil, err\\n}\\n\\nfunc (n *CachedAPINode) ExecFallback(prepResult any, err error) (any, error) {\\n    key := prepResult.(string)\\n    \\n    // Return cached data on failure\\n    if cached, ok := n.cache.Load(key); ok {\\n        log.Printf(\\\"Returning cached data for %s due to error: %v\\\", key, err)\\n        return cached, nil\\n    }\\n    \\n    // Return default if no cache\\n    return map[string]any{\\n        \\\"status\\\": \\\"unavailable\\\",\\n        \\\"cached\\\": false,\\n    }, nil\\n}\\n```\\n\\n## Error Aggregation\\n\\nCollect errors from batch operations:\\n\\n```go\\nfunc processBatch(ctx context.Context, items []Item) error {\\n    var errs []error\\n    \\n    for i, item := range items {\\n        if err := processItem(item); err != nil {\\n            errs = append(errs, fmt.Errorf(\\\"item %d: %w\\\", i, err))\\n        }\\n    }\\n    \\n    if len(errs) > 0 {\\n        return &flyt.BatchError{\\n            Errors: errs,\\n            Message: fmt.Sprintf(\\\"%d/%d items failed\\\", len(errs), len(items)),\\n        }\\n    }\\n    \\n    return nil\\n}\\n```\\n\\n## Retry with Jitter\\n\\nAdd randomization to prevent thundering herd:\\n\\n```go\\nfunc (n *JitterNode) GetWait() time.Duration {\\n    base := time.Second * time.Duration(n.attempt)\\n    jitter := time.Duration(rand.Intn(1000)) * time.Millisecond\\n    return base + jitter\\n}\\n```\\n\\n## Selective Retry\\n\\nOnly retry specific errors:\\n\\n```go\\nfunc (n *SelectiveRetryNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    result, err := callAPI()\\n    if err != nil {\\n        // Only retry on network errors\\n        if isNetworkError(err) {\\n            return nil, err // Will be retried\\n        }\\n        // Don't retry business logic errors\\n        return nil, fmt.Errorf(\\\"permanent error: %w\\\", err)\\n    }\\n    return result, nil\\n}\\n\\nfunc (n *SelectiveRetryNode) GetMaxRetries() int {\\n    // Check error type from last execution\\n    if n.lastError != nil && !isRetryable(n.lastError) {\\n        return 0 // Don't retry\\n    }\\n    return 3\\n}\\n```\\n\\n## Error Context\\n\\nProvide context for debugging:\\n\\n```go\\ntype ErrorContext struct {\\n    Node      string\\n    Action    string\\n    Input     any\\n    Error     error\\n    Timestamp time.Time\\n    Attempts  int\\n}\\n\\nfunc (n *DetailedErrorNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\\n    if err, ok := execResult.(error); ok && err != nil {\\n        errorCtx := ErrorContext{\\n            Node:      \\\"DetailedErrorNode\\\",\\n            Action:    \\\"process\\\",\\n            Input:     prepResult,\\n            Error:     err,\\n            Timestamp: time.Now(),\\n            Attempts:  n.attempts,\\n        }\\n        \\n        shared.Set(\\\"last_error\\\", errorCtx)\\n        \\n        if n.attempts < n.maxRetries {\\n            return \\\"retry\\\", nil\\n        }\\n        return \\\"error\\\", nil\\n    }\\n    \\n    return flyt.DefaultAction, nil\\n}\\n```\\n\\n## Timeout Handling\\n\\nPrevent hanging operations:\\n\\n```go\\nfunc (n *TimeoutNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    // Create timeout context\\n    ctx, cancel := context.WithTimeout(ctx, 30*time.Second)\\n    defer cancel()\\n    \\n    resultChan := make(chan any)\\n    errChan := make(chan error)\\n    \\n    go func() {\\n        result, err := longRunningOperation()\\n        if err != nil {\\n            errChan <- err\\n        } else {\\n            resultChan <- result\\n        }\\n    }()\\n    \\n    select {\\n    case result := <-resultChan:\\n        return result, nil\\n    case err := <-errChan:\\n        return nil, err\\n    case <-ctx.Done():\\n        return nil, fmt.Errorf(\\\"operation timed out: %w\\\", ctx.Err())\\n    }\\n}\\n```\\n\\n## Best Practices\\n\\n1. **Identify Transient vs Permanent Errors**: Only retry transient failures\\n2. **Set Reasonable Limits**: Don't retry indefinitely\\n3. **Use Backoff**: Avoid overwhelming failing services\\n4. **Log Failures**: Track retry attempts for debugging\\n5. **Provide Fallbacks**: Gracefully degrade when possible\\n6. **Monitor Retry Rates**: High retry rates indicate problems\\n\\n## Next Steps\\n\\n- [Fallback on Failure](/patterns/fallback) - Graceful degradation\\n- [Batch Error Handling](/advanced/batch-processing#batch-error-handling) - Handle batch failures\\n- [Best Practices](/best-practices) - General guidelines\",\"document\":[{\"href\":\"/patterns/error-handling#error-handling--retries\",\"html\":\"</header>\\n<p>Build resilient workflows with proper error handling and retry strategies.</p>\\n\",\"id\":\"docs/pages/patterns/error-handling.mdx#error-handling--retries\",\"isPage\":true,\"text\":\"\\nBuild resilient workflows with proper error handling and retry strategies.\\n\",\"title\":\"Error Handling &amp; Retries\",\"titles\":[]},{\"href\":\"/patterns/error-handling#basic-retry-configuration\",\"html\":\"\\n<p>Configure retries at the node level:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">node </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithExecFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // This will be retried up to 3 times</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> callFlakeyAPI</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithMaxRetries</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">3</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithWait</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(time.Second), </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Wait 1 second between retries</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/error-handling.mdx#basic-retry-configuration\",\"isPage\":false,\"text\":\"\\nConfigure retries at the node level:\\nnode := flyt.NewNode(\\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n        // This will be retried up to 3 times\\n        return callFlakeyAPI()\\n    }),\\n    flyt.WithMaxRetries(3),\\n    flyt.WithWait(time.Second), // Wait 1 second between retries\\n)\\n\",\"title\":\"Basic Retry Configuration\",\"titles\":[\"Error Handling &amp; Retries\"]},{\"href\":\"/patterns/error-handling#exponential-backoff\",\"html\":\"\\n<p>Implement exponential backoff with RetryableNode:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> BackoffNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    attempt </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BackoffNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">GetMaxRetries</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 5</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BackoffNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">GetWait</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Duration</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Exponential backoff: 1s, 2s, 4s, 8s, 16s</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Duration</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(math.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Pow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">2</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">float64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.attempt))) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.Second</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BackoffNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.attempt</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">++</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> callAPI</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Attempt </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> failed: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, n.attempt, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.attempt </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> // Reset on success</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/error-handling.mdx#exponential-backoff\",\"isPage\":false,\"text\":\"\\nImplement exponential backoff with RetryableNode:\\ntype BackoffNode struct {\\n    *flyt.BaseNode\\n    attempt int\\n}\\n \\nfunc (n *BackoffNode) GetMaxRetries() int {\\n    return 5\\n}\\n \\nfunc (n *BackoffNode) GetWait() time.Duration {\\n    // Exponential backoff: 1s, 2s, 4s, 8s, 16s\\n    return time.Duration(math.Pow(2, float64(n.attempt))) * time.Second\\n}\\n \\nfunc (n *BackoffNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    n.attempt++\\n    result, err := callAPI()\\n    if err != nil {\\n        log.Printf(&quot;Attempt %d failed: %v&quot;, n.attempt, err)\\n        return nil, err\\n    }\\n    n.attempt = 0 // Reset on success\\n    return result, nil\\n}\\n\",\"title\":\"Exponential Backoff\",\"titles\":[\"Error Handling &amp; Retries\"]},{\"href\":\"/patterns/error-handling#circuit-breaker-pattern\",\"html\":\"\\n<p>Prevent cascading failures:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> CircuitBreakerNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    failures    </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    lastFailure </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Time</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    threshold   </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    timeout     </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Duration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewCircuitBreakerNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CircuitBreakerNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CircuitBreakerNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        BaseNode:  flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewBaseNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        threshold: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">5</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        timeout:   </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">30</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.Second,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CircuitBreakerNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Check if circuit is open</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.failures </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&gt;=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.threshold {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Since</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.lastFailure) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.timeout {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;circuit breaker open&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Reset after timeout</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        n.failures </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> callService</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        n.failures</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">++</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        n.lastFailure </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.failures </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> // Reset on success</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/error-handling.mdx#circuit-breaker-pattern\",\"isPage\":false,\"text\":\"\\nPrevent cascading failures:\\ntype CircuitBreakerNode struct {\\n    *flyt.BaseNode\\n    failures    int\\n    lastFailure time.Time\\n    threshold   int\\n    timeout     time.Duration\\n}\\n \\nfunc NewCircuitBreakerNode() *CircuitBreakerNode {\\n    return &amp;CircuitBreakerNode{\\n        BaseNode:  flyt.NewBaseNode(),\\n        threshold: 5,\\n        timeout:   30 * time.Second,\\n    }\\n}\\n \\nfunc (n *CircuitBreakerNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    // Check if circuit is open\\n    if n.failures &gt;= n.threshold {\\n        if time.Since(n.lastFailure) &lt; n.timeout {\\n            return nil, fmt.Errorf(&quot;circuit breaker open&quot;)\\n        }\\n        // Reset after timeout\\n        n.failures = 0\\n    }\\n    \\n    result, err := callService()\\n    if err != nil {\\n        n.failures++\\n        n.lastFailure = time.Now()\\n        return nil, err\\n    }\\n    \\n    n.failures = 0 // Reset on success\\n    return result, nil\\n}\\n\",\"title\":\"Circuit Breaker Pattern\",\"titles\":[\"Error Handling &amp; Retries\"]},{\"href\":\"/patterns/error-handling#fallback-on-failure\",\"html\":\"\\n<p>Implement the FallbackNode interface for graceful degradation:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> CachedAPINode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    cache </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">sync</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Map</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CachedAPINode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    key </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Try to fetch fresh data</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    data, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> fetchFromAPI</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(key)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">==</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Cache successful result</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        n.cache.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Store</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(key, data)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CachedAPINode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">ExecFallback</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">err</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    key </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Return cached data on failure</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> cached, ok </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.cache.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Load</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(key); ok {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Returning cached data for </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%s</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> due to error: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, key, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> cached, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Return default if no cache</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;status&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;unavailable&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;cached&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">false</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/error-handling.mdx#fallback-on-failure\",\"isPage\":false,\"text\":\"\\nImplement the FallbackNode interface for graceful degradation:\\ntype CachedAPINode struct {\\n    *flyt.BaseNode\\n    cache sync.Map\\n}\\n \\nfunc (n *CachedAPINode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    key := prepResult.(string)\\n    \\n    // Try to fetch fresh data\\n    data, err := fetchFromAPI(key)\\n    if err == nil {\\n        // Cache successful result\\n        n.cache.Store(key, data)\\n        return data, nil\\n    }\\n    \\n    return nil, err\\n}\\n \\nfunc (n *CachedAPINode) ExecFallback(prepResult any, err error) (any, error) {\\n    key := prepResult.(string)\\n    \\n    // Return cached data on failure\\n    if cached, ok := n.cache.Load(key); ok {\\n        log.Printf(&quot;Returning cached data for %s due to error: %v&quot;, key, err)\\n        return cached, nil\\n    }\\n    \\n    // Return default if no cache\\n    return map[string]any{\\n        &quot;status&quot;: &quot;unavailable&quot;,\\n        &quot;cached&quot;: false,\\n    }, nil\\n}\\n\",\"title\":\"Fallback on Failure\",\"titles\":[\"Error Handling &amp; Retries\"]},{\"href\":\"/patterns/error-handling#error-aggregation\",\"html\":\"\\n<p>Collect errors from batch operations:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processBatch</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">items</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Item</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    var</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> errs []</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i, item </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> range</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> items {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processItem</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(item); err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            errs </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> append</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(errs, fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;item </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%w</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, i, err))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(errs) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&gt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BatchError</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Errors: errs,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Message: fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Sprintf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">/</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> items failed&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(errs), </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(items)),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/error-handling.mdx#error-aggregation\",\"isPage\":false,\"text\":\"\\nCollect errors from batch operations:\\nfunc processBatch(ctx context.Context, items []Item) error {\\n    var errs []error\\n    \\n    for i, item := range items {\\n        if err := processItem(item); err != nil {\\n            errs = append(errs, fmt.Errorf(&quot;item %d: %w&quot;, i, err))\\n        }\\n    }\\n    \\n    if len(errs) &gt; 0 {\\n        return &amp;flyt.BatchError{\\n            Errors: errs,\\n            Message: fmt.Sprintf(&quot;%d/%d items failed&quot;, len(errs), len(items)),\\n        }\\n    }\\n    \\n    return nil\\n}\\n\",\"title\":\"Error Aggregation\",\"titles\":[\"Error Handling &amp; Retries\"]},{\"href\":\"/patterns/error-handling#retry-with-jitter\",\"html\":\"\\n<p>Add randomization to prevent thundering herd:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">JitterNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">GetWait</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Duration</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    base </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.Second </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Duration</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.attempt)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    jitter </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Duration</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(rand.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Intn</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1000</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.Millisecond</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> base </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> jitter</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/error-handling.mdx#retry-with-jitter\",\"isPage\":false,\"text\":\"\\nAdd randomization to prevent thundering herd:\\nfunc (n *JitterNode) GetWait() time.Duration {\\n    base := time.Second * time.Duration(n.attempt)\\n    jitter := time.Duration(rand.Intn(1000)) * time.Millisecond\\n    return base + jitter\\n}\\n\",\"title\":\"Retry with Jitter\",\"titles\":[\"Error Handling &amp; Retries\"]},{\"href\":\"/patterns/error-handling#selective-retry\",\"html\":\"\\n<p>Only retry specific errors:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SelectiveRetryNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> callAPI</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Only retry on network errors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> isNetworkError</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(err) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Will be retried</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Don&#x27;t retry business logic errors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;permanent error: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%w</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SelectiveRetryNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">GetMaxRetries</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Check error type from last execution</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.lastError </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;&amp;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> !</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">isRetryable</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.lastError) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\"> // Don&#x27;t retry</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 3</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/error-handling.mdx#selective-retry\",\"isPage\":false,\"text\":\"\\nOnly retry specific errors:\\nfunc (n *SelectiveRetryNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    result, err := callAPI()\\n    if err != nil {\\n        // Only retry on network errors\\n        if isNetworkError(err) {\\n            return nil, err // Will be retried\\n        }\\n        // Don&#x27;t retry business logic errors\\n        return nil, fmt.Errorf(&quot;permanent error: %w&quot;, err)\\n    }\\n    return result, nil\\n}\\n \\nfunc (n *SelectiveRetryNode) GetMaxRetries() int {\\n    // Check error type from last execution\\n    if n.lastError != nil &amp;&amp; !isRetryable(n.lastError) {\\n        return 0 // Don&#x27;t retry\\n    }\\n    return 3\\n}\\n\",\"title\":\"Selective Retry\",\"titles\":[\"Error Handling &amp; Retries\"]},{\"href\":\"/patterns/error-handling#error-context\",\"html\":\"\\n<p>Provide context for debugging:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> ErrorContext</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Node      </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Action    </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Input     </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Error     </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Timestamp </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Time</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Attempts  </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DetailedErrorNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Post</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">execResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Action</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err, ok </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> execResult.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">); ok </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        errorCtx </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> ErrorContext</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Node:      </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;DetailedErrorNode&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Action:    </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;process&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Input:     prepResult,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Error:     err,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Timestamp: time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            Attempts:  n.attempts,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Set</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;last_error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, errorCtx)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.attempts </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.maxRetries {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;retry&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.DefaultAction, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/error-handling.mdx#error-context\",\"isPage\":false,\"text\":\"\\nProvide context for debugging:\\ntype ErrorContext struct {\\n    Node      string\\n    Action    string\\n    Input     any\\n    Error     error\\n    Timestamp time.Time\\n    Attempts  int\\n}\\n \\nfunc (n *DetailedErrorNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\\n    if err, ok := execResult.(error); ok &amp;&amp; err != nil {\\n        errorCtx := ErrorContext{\\n            Node:      &quot;DetailedErrorNode&quot;,\\n            Action:    &quot;process&quot;,\\n            Input:     prepResult,\\n            Error:     err,\\n            Timestamp: time.Now(),\\n            Attempts:  n.attempts,\\n        }\\n        \\n        shared.Set(&quot;last_error&quot;, errorCtx)\\n        \\n        if n.attempts &lt; n.maxRetries {\\n            return &quot;retry&quot;, nil\\n        }\\n        return &quot;error&quot;, nil\\n    }\\n    \\n    return flyt.DefaultAction, nil\\n}\\n\",\"title\":\"Error Context\",\"titles\":[\"Error Handling &amp; Retries\"]},{\"href\":\"/patterns/error-handling#timeout-handling\",\"html\":\"\\n<p>Prevent hanging operations:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">TimeoutNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Create timeout context</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ctx, cancel </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> context.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithTimeout</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">30</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">time.Second)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    defer</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> cancel</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    resultChan </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">chan</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    errChan </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">chan</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    go</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> longRunningOperation</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            errChan </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">else</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            resultChan </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    select</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">resultChan:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">errChan:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">ctx.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Done</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;operation timed out: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%w</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, ctx.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Err</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">())</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/patterns/error-handling.mdx#timeout-handling\",\"isPage\":false,\"text\":\"\\nPrevent hanging operations:\\nfunc (n *TimeoutNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    // Create timeout context\\n    ctx, cancel := context.WithTimeout(ctx, 30*time.Second)\\n    defer cancel()\\n    \\n    resultChan := make(chan any)\\n    errChan := make(chan error)\\n    \\n    go func() {\\n        result, err := longRunningOperation()\\n        if err != nil {\\n            errChan &lt;- err\\n        } else {\\n            resultChan &lt;- result\\n        }\\n    }()\\n    \\n    select {\\n    case result := &lt;-resultChan:\\n        return result, nil\\n    case err := &lt;-errChan:\\n        return nil, err\\n    case &lt;-ctx.Done():\\n        return nil, fmt.Errorf(&quot;operation timed out: %w&quot;, ctx.Err())\\n    }\\n}\\n\",\"title\":\"Timeout Handling\",\"titles\":[\"Error Handling &amp; Retries\"]},{\"href\":\"/patterns/error-handling#best-practices\",\"html\":\"\\n<ol>\\n<li><strong>Identify Transient vs Permanent Errors</strong>: Only retry transient failures</li>\\n<li><strong>Set Reasonable Limits</strong>: Don&#x27;t retry indefinitely</li>\\n<li><strong>Use Backoff</strong>: Avoid overwhelming failing services</li>\\n<li><strong>Log Failures</strong>: Track retry attempts for debugging</li>\\n<li><strong>Provide Fallbacks</strong>: Gracefully degrade when possible</li>\\n<li><strong>Monitor Retry Rates</strong>: High retry rates indicate problems</li>\\n</ol>\\n\",\"id\":\"docs/pages/patterns/error-handling.mdx#best-practices\",\"isPage\":false,\"text\":\"\\n\\nIdentify Transient vs Permanent Errors: Only retry transient failures\\nSet Reasonable Limits: Don&#x27;t retry indefinitely\\nUse Backoff: Avoid overwhelming failing services\\nLog Failures: Track retry attempts for debugging\\nProvide Fallbacks: Gracefully degrade when possible\\nMonitor Retry Rates: High retry rates indicate problems\\n\\n\",\"title\":\"Best Practices\",\"titles\":[\"Error Handling &amp; Retries\"]},{\"href\":\"/patterns/error-handling#next-steps\",\"html\":\"\\n<ul>\\n<li><a href=\\\"/patterns/fallback\\\">Fallback on Failure</a> - Graceful degradation</li>\\n<li><a href=\\\"/advanced/batch-processing#batch-error-handling\\\">Batch Error Handling</a> - Handle batch failures</li>\\n<li><a href=\\\"/best-practices\\\">Best Practices</a> - General guidelines</li>\\n</ul>\",\"id\":\"docs/pages/patterns/error-handling.mdx#next-steps\",\"isPage\":false,\"text\":\"\\n\\nFallback on Failure - Graceful degradation\\nBatch Error Handling - Handle batch failures\\nBest Practices - General guidelines\\n\",\"title\":\"Next Steps\",\"titles\":[\"Error Handling &amp; Retries\"]}]}}"
