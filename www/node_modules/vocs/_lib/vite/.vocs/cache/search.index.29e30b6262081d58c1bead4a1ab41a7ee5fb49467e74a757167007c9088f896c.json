"{\"value\":{\"mdx\":\"# Quick Start\\n\\nThis guide will help you build your first Flyt workflow in 5 minutes.\\n\\n## Your First Node\\n\\nLet's start with a simple node that processes data:\\n\\n```go\\npackage main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"github.com/mark3labs/flyt\\\"\\n)\\n\\nfunc main() {\\n    // Create a node with just an Exec function\\n    node := flyt.NewNode(\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            fmt.Println(\\\"Processing data...\\\")\\n            return \\\"Hello, Flyt!\\\", nil\\n        }),\\n    )\\n\\n    // Create shared store and context\\n    shared := flyt.NewSharedStore()\\n    ctx := context.Background()\\n\\n    // Run the node\\n    action, err := flyt.Run(ctx, node, shared)\\n    if err != nil {\\n        panic(err)\\n    }\\n    \\n    fmt.Printf(\\\"Completed with action: %s\\\\n\\\", action)\\n}\\n```\\n\\n## Building a Flow\\n\\nNow let's create a simple workflow with multiple nodes:\\n\\n```go\\npackage main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"github.com/mark3labs/flyt\\\"\\n)\\n\\nfunc main() {\\n    // Create nodes\\n    fetchNode := flyt.NewNode(\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            fmt.Println(\\\"Fetching data...\\\")\\n            return map[string]string{\\\"data\\\": \\\"important info\\\"}, nil\\n        }),\\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\\n            shared.Set(\\\"fetched_data\\\", execResult)\\n            return flyt.DefaultAction, nil\\n        }),\\n    )\\n\\n    processNode := flyt.NewNode(\\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n            data, _ := shared.Get(\\\"fetched_data\\\")\\n            return data, nil\\n        }),\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            data := prepResult.(map[string]string)\\n            fmt.Printf(\\\"Processing: %v\\\\n\\\", data[\\\"data\\\"])\\n            return \\\"processed: \\\" + data[\\\"data\\\"], nil\\n        }),\\n    )\\n\\n    // Build the flow\\n    flow := flyt.NewFlow(fetchNode)\\n    flow.Connect(fetchNode, flyt.DefaultAction, processNode)\\n\\n    // Run the flow\\n    shared := flyt.NewSharedStore()\\n    ctx := context.Background()\\n    \\n    err := flow.Run(ctx, shared)\\n    if err != nil {\\n        panic(err)\\n    }\\n    \\n    fmt.Println(\\\"Flow completed successfully!\\\")\\n}\\n```\\n\\n## Adding Error Handling\\n\\nLet's add retry logic and error handling:\\n\\n```go\\nfunc createRobustNode() flyt.Node {\\n    attempts := 0\\n    \\n    return flyt.NewNode(\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            attempts++\\n            fmt.Printf(\\\"Attempt %d...\\\\n\\\", attempts)\\n            \\n            // Simulate flaky operation\\n            if attempts < 2 {\\n                return nil, fmt.Errorf(\\\"temporary failure\\\")\\n            }\\n            \\n            return \\\"Success!\\\", nil\\n        }),\\n        flyt.WithMaxRetries(3),\\n        flyt.WithWait(time.Second),\\n    )\\n}\\n```\\n\\n## Using Shared Store\\n\\nThe SharedStore allows nodes to communicate:\\n\\n```go\\nfunc main() {\\n    shared := flyt.NewSharedStore()\\n    \\n    // Set initial data\\n    shared.Set(\\\"config\\\", map[string]any{\\n        \\\"timeout\\\": 30,\\n        \\\"retries\\\": 3,\\n    })\\n    \\n    node := flyt.NewNode(\\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n            config, _ := shared.Get(\\\"config\\\")\\n            return config, nil\\n        }),\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            config := prepResult.(map[string]any)\\n            fmt.Printf(\\\"Using config: %v\\\\n\\\", config)\\n            return \\\"configured\\\", nil\\n        }),\\n    )\\n    \\n    ctx := context.Background()\\n    flyt.Run(ctx, node, shared)\\n}\\n```\\n\\n## Next Steps\\n\\nNow that you've built your first workflow, explore:\\n\\n- [Nodes](/concepts/nodes) - Deep dive into node lifecycle\\n- [Actions](/concepts/actions) - Control flow with actions\\n- [Error Handling](/patterns/error-handling) - Build resilient workflows\\n- [Examples](https://github.com/mark3labs/flyt/tree/main/cookbook) - Real-world use cases\",\"document\":[{\"href\":\"/getting-started/quick-start#quick-start\",\"html\":\"</header>\\n<p>This guide will help you build your first Flyt workflow in 5 minutes.</p>\\n\",\"id\":\"docs/pages/getting-started/quick-start.mdx#quick-start\",\"isPage\":true,\"text\":\"\\nThis guide will help you build your first Flyt workflow in 5 minutes.\\n\",\"title\":\"Quick Start\",\"titles\":[]},{\"href\":\"/getting-started/quick-start#your-first-node\",\"html\":\"\\n<p>Let&#x27;s start with a simple node that processes data:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">package</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> main</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">context</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">fmt</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">github.com/mark3labs/flyt</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> main</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Create a node with just an Exec function</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    node </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithExecFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Println</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Processing data...&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Hello, Flyt!&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Create shared store and context</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    shared </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewSharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ctx </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> context.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Background</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Run the node</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    action, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Run</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, node, shared)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">        panic</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Completed with action: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%s\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, action)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/getting-started/quick-start.mdx#your-first-node\",\"isPage\":false,\"text\":\"\\nLet&#x27;s start with a simple node that processes data:\\npackage main\\n \\nimport (\\n    &quot;context&quot;\\n    &quot;fmt&quot;\\n    &quot;github.com/mark3labs/flyt&quot;\\n)\\n \\nfunc main() {\\n    // Create a node with just an Exec function\\n    node := flyt.NewNode(\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            fmt.Println(&quot;Processing data...&quot;)\\n            return &quot;Hello, Flyt!&quot;, nil\\n        }),\\n    )\\n \\n    // Create shared store and context\\n    shared := flyt.NewSharedStore()\\n    ctx := context.Background()\\n \\n    // Run the node\\n    action, err := flyt.Run(ctx, node, shared)\\n    if err != nil {\\n        panic(err)\\n    }\\n    \\n    fmt.Printf(&quot;Completed with action: %s\\\\n&quot;, action)\\n}\\n\",\"title\":\"Your First Node\",\"titles\":[\"Quick Start\"]},{\"href\":\"/getting-started/quick-start#building-a-flow\",\"html\":\"\\n<p>Now let&#x27;s create a simple workflow with multiple nodes:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">package</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> main</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">import</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">context</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">fmt</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">    &quot;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">github.com/mark3labs/flyt</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> main</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Create nodes</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    fetchNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithExecFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Println</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Fetching data...&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;data&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;important info&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithPostFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">execResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Action</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Set</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;fetched_data&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, execResult)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.DefaultAction, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    processNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithPrepFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            data, _ </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Get</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;fetched_data&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithExecFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Processing: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, data[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;data&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">])</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;processed: &quot;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> +</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> data[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;data&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">], </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Build the flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode, flyt.DefaultAction, processNode)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Run the flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    shared </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewSharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ctx </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> context.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Background</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Run</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, shared)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">        panic</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Println</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Flow completed successfully!&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/getting-started/quick-start.mdx#building-a-flow\",\"isPage\":false,\"text\":\"\\nNow let&#x27;s create a simple workflow with multiple nodes:\\npackage main\\n \\nimport (\\n    &quot;context&quot;\\n    &quot;fmt&quot;\\n    &quot;github.com/mark3labs/flyt&quot;\\n)\\n \\nfunc main() {\\n    // Create nodes\\n    fetchNode := flyt.NewNode(\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            fmt.Println(&quot;Fetching data...&quot;)\\n            return map[string]string{&quot;data&quot;: &quot;important info&quot;}, nil\\n        }),\\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\\n            shared.Set(&quot;fetched_data&quot;, execResult)\\n            return flyt.DefaultAction, nil\\n        }),\\n    )\\n \\n    processNode := flyt.NewNode(\\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n            data, _ := shared.Get(&quot;fetched_data&quot;)\\n            return data, nil\\n        }),\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            data := prepResult.(map[string]string)\\n            fmt.Printf(&quot;Processing: %v\\\\n&quot;, data[&quot;data&quot;])\\n            return &quot;processed: &quot; + data[&quot;data&quot;], nil\\n        }),\\n    )\\n \\n    // Build the flow\\n    flow := flyt.NewFlow(fetchNode)\\n    flow.Connect(fetchNode, flyt.DefaultAction, processNode)\\n \\n    // Run the flow\\n    shared := flyt.NewSharedStore()\\n    ctx := context.Background()\\n    \\n    err := flow.Run(ctx, shared)\\n    if err != nil {\\n        panic(err)\\n    }\\n    \\n    fmt.Println(&quot;Flow completed successfully!&quot;)\\n}\\n\",\"title\":\"Building a Flow\",\"titles\":[\"Quick Start\"]},{\"href\":\"/getting-started/quick-start#adding-error-handling\",\"html\":\"\\n<p>Let&#x27;s add retry logic and error handling:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createRobustNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Node</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    attempts </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithExecFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            attempts</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">++</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Attempt </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">...</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, attempts)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">            // Simulate flaky operation</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> attempts </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 2</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;temporary failure&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;Success!&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithMaxRetries</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">3</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithWait</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(time.Second),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/getting-started/quick-start.mdx#adding-error-handling\",\"isPage\":false,\"text\":\"\\nLet&#x27;s add retry logic and error handling:\\nfunc createRobustNode() flyt.Node {\\n    attempts := 0\\n    \\n    return flyt.NewNode(\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            attempts++\\n            fmt.Printf(&quot;Attempt %d...\\\\n&quot;, attempts)\\n            \\n            // Simulate flaky operation\\n            if attempts &lt; 2 {\\n                return nil, fmt.Errorf(&quot;temporary failure&quot;)\\n            }\\n            \\n            return &quot;Success!&quot;, nil\\n        }),\\n        flyt.WithMaxRetries(3),\\n        flyt.WithWait(time.Second),\\n    )\\n}\\n\",\"title\":\"Adding Error Handling\",\"titles\":[\"Quick Start\"]},{\"href\":\"/getting-started/quick-start#using-shared-store\",\"html\":\"\\n<p>The SharedStore allows nodes to communicate:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> main</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    shared </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewSharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Set initial data</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Set</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;config&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;timeout&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">30</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;retries&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">3</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    node </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithPrepFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            config, _ </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Get</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;config&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> config, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithExecFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            config </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Using config: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, config)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;configured&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ctx </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> context.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Background</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Run</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, node, shared)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/getting-started/quick-start.mdx#using-shared-store\",\"isPage\":false,\"text\":\"\\nThe SharedStore allows nodes to communicate:\\nfunc main() {\\n    shared := flyt.NewSharedStore()\\n    \\n    // Set initial data\\n    shared.Set(&quot;config&quot;, map[string]any{\\n        &quot;timeout&quot;: 30,\\n        &quot;retries&quot;: 3,\\n    })\\n    \\n    node := flyt.NewNode(\\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n            config, _ := shared.Get(&quot;config&quot;)\\n            return config, nil\\n        }),\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            config := prepResult.(map[string]any)\\n            fmt.Printf(&quot;Using config: %v\\\\n&quot;, config)\\n            return &quot;configured&quot;, nil\\n        }),\\n    )\\n    \\n    ctx := context.Background()\\n    flyt.Run(ctx, node, shared)\\n}\\n\",\"title\":\"Using Shared Store\",\"titles\":[\"Quick Start\"]},{\"href\":\"/getting-started/quick-start#next-steps\",\"html\":\"\\n<p>Now that you&#x27;ve built your first workflow, explore:</p>\\n<ul>\\n<li><a href=\\\"/concepts/nodes\\\">Nodes</a> - Deep dive into node lifecycle</li>\\n<li><a href=\\\"/concepts/actions\\\">Actions</a> - Control flow with actions</li>\\n<li><a href=\\\"/patterns/error-handling\\\">Error Handling</a> - Build resilient workflows</li>\\n<li><a href=\\\"https://github.com/mark3labs/flyt/tree/main/cookbook\\\">Examples</a> - Real-world use cases</li>\\n</ul>\",\"id\":\"docs/pages/getting-started/quick-start.mdx#next-steps\",\"isPage\":false,\"text\":\"\\nNow that you&#x27;ve built your first workflow, explore:\\n\\nNodes - Deep dive into node lifecycle\\nActions - Control flow with actions\\nError Handling - Build resilient workflows\\nExamples - Real-world use cases\\n\",\"title\":\"Next Steps\",\"titles\":[\"Quick Start\"]}]}}"
