"{\"value\":{\"mdx\":\"# Agent Example\\n\\nAn AI agent implementation with web search capabilities using LLM and search providers.\\n\\n## Overview\\n\\nThis example demonstrates how to build an intelligent agent that can:\\n- Search the web for information\\n- Process search results with an LLM\\n- Make decisions based on gathered information\\n- Chain multiple searches together\\n\\n## Architecture\\n\\n```\\n┌─────────┐     ┌──────────┐     ┌─────────┐\\n│  Input  │────▶│  Search  │────▶│   LLM   │\\n└─────────┘     └──────────┘     └─────────┘\\n                      │                 │\\n                      ▼                 ▼\\n                ┌──────────┐     ┌─────────┐\\n                │ Results  │     │Decision │\\n                └──────────┘     └─────────┘\\n```\\n\\n## Key Components\\n\\n### Search Node\\n\\nPerforms web searches using configured providers:\\n\\n```go\\ntype SearchNode struct {\\n    *flyt.BaseNode\\n    provider SearchProvider\\n}\\n\\nfunc (n *SearchNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    query := prepResult.(string)\\n    results, err := n.provider.Search(ctx, query)\\n    if err != nil {\\n        return nil, err\\n    }\\n    return results, nil\\n}\\n```\\n\\n### LLM Processing Node\\n\\nAnalyzes search results using an LLM:\\n\\n```go\\ntype LLMNode struct {\\n    *flyt.BaseNode\\n    client *openai.Client\\n}\\n\\nfunc (n *LLMNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    searchResults := prepResult.([]SearchResult)\\n    \\n    prompt := buildPrompt(searchResults)\\n    response, err := n.client.Complete(ctx, prompt)\\n    if err != nil {\\n        return nil, err\\n    }\\n    \\n    return parseResponse(response), nil\\n}\\n```\\n\\n### Decision Node\\n\\nMakes routing decisions based on LLM analysis:\\n\\n```go\\nfunc (n *DecisionNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\\n    analysis := execResult.(Analysis)\\n    \\n    if analysis.NeedsMoreInfo {\\n        shared.Set(\\\"next_query\\\", analysis.NextQuery)\\n        return \\\"search_again\\\", nil\\n    }\\n    \\n    if analysis.HasAnswer {\\n        shared.Set(\\\"final_answer\\\", analysis.Answer)\\n        return \\\"complete\\\", nil\\n    }\\n    \\n    return \\\"insufficient_data\\\", nil\\n}\\n```\\n\\n## Complete Flow\\n\\n```go\\nfunc CreateAgentFlow(config AgentConfig) *flyt.Flow {\\n    // Create nodes\\n    searchNode := NewSearchNode(config.SearchProvider)\\n    llmNode := NewLLMNode(config.LLMClient)\\n    decisionNode := NewDecisionNode()\\n    formatNode := NewFormatNode()\\n    \\n    // Build flow with loops for iterative search\\n    flow := flyt.NewFlow(searchNode)\\n    flow.Connect(searchNode, flyt.DefaultAction, llmNode)\\n    flow.Connect(llmNode, flyt.DefaultAction, decisionNode)\\n    flow.Connect(decisionNode, \\\"search_again\\\", searchNode)\\n    flow.Connect(decisionNode, \\\"complete\\\", formatNode)\\n    flow.Connect(decisionNode, \\\"insufficient_data\\\", errorNode)\\n    \\n    return flow\\n}\\n```\\n\\n## Running the Agent\\n\\n```go\\nfunc main() {\\n    // Configure agent\\n    config := AgentConfig{\\n        SearchProvider: NewGoogleSearchProvider(apiKey),\\n        LLMClient:     openai.NewClient(openaiKey),\\n        MaxIterations: 3,\\n    }\\n    \\n    // Create flow\\n    agentFlow := CreateAgentFlow(config)\\n    \\n    // Prepare shared store\\n    shared := flyt.NewSharedStore()\\n    shared.Set(\\\"query\\\", \\\"What are the latest developments in quantum computing?\\\")\\n    shared.Set(\\\"iteration\\\", 0)\\n    \\n    // Run agent\\n    ctx := context.Background()\\n    err := agentFlow.Run(ctx, shared)\\n    if err != nil {\\n        log.Fatal(err)\\n    }\\n    \\n    // Get results\\n    answer, _ := shared.Get(\\\"final_answer\\\")\\n    fmt.Println(\\\"Agent Answer:\\\", answer)\\n}\\n```\\n\\n## Configuration\\n\\n### Search Providers\\n\\n```go\\n// Google Search\\nprovider := NewGoogleSearchProvider(GoogleConfig{\\n    APIKey:     \\\"your-api-key\\\",\\n    EngineID:   \\\"your-engine-id\\\",\\n    MaxResults: 10,\\n})\\n\\n// Bing Search\\nprovider := NewBingSearchProvider(BingConfig{\\n    APIKey:     \\\"your-api-key\\\",\\n    MaxResults: 10,\\n})\\n\\n// DuckDuckGo (no API key required)\\nprovider := NewDuckDuckGoProvider()\\n```\\n\\n### LLM Configuration\\n\\n```go\\nllmClient := openai.NewClient(\\n    openai.WithAPIKey(apiKey),\\n    openai.WithModel(\\\"gpt-4\\\"),\\n    openai.WithTemperature(0.7),\\n)\\n```\\n\\n## Advanced Features\\n\\n### Memory Management\\n\\nStore conversation history:\\n\\n```go\\ntype MemoryNode struct {\\n    *flyt.BaseNode\\n    history []Interaction\\n}\\n\\nfunc (n *MemoryNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n    // Add current interaction to history\\n    query, _ := shared.Get(\\\"query\\\")\\n    n.history = append(n.history, Interaction{\\n        Query:     query.(string),\\n        Timestamp: time.Now(),\\n    })\\n    \\n    // Provide context for LLM\\n    return n.history, nil\\n}\\n```\\n\\n### Tool Integration\\n\\nAdd specialized tools:\\n\\n```go\\nfunc CreateToolNode(toolType string) flyt.Node {\\n    switch toolType {\\n    case \\\"calculator\\\":\\n        return NewCalculatorNode()\\n    case \\\"code_executor\\\":\\n        return NewCodeExecutorNode()\\n    case \\\"database_query\\\":\\n        return NewDatabaseNode()\\n    default:\\n        return NewDefaultToolNode()\\n    }\\n}\\n```\\n\\n### Rate Limiting\\n\\nPrevent API overuse:\\n\\n```go\\nsearchNode := NewSearchNode(provider)\\nrateLimitedSearch := WithRateLimit(searchNode, 10) // 10 requests per second\\n```\\n\\n## Error Handling\\n\\nHandle various failure modes:\\n\\n```go\\nfunc CreateRobustAgentFlow() *flyt.Flow {\\n    searchNode := NewSearchNode(provider)\\n    searchNode.SetMaxRetries(3)\\n    searchNode.SetFallback(NewCachedSearchNode())\\n    \\n    llmNode := NewLLMNode(client)\\n    llmNode.SetTimeout(30 * time.Second)\\n    \\n    // ... rest of flow\\n}\\n```\\n\\n## Testing\\n\\nTest the agent with mock providers:\\n\\n```go\\nfunc TestAgent(t *testing.T) {\\n    // Mock search provider\\n    mockSearch := &MockSearchProvider{\\n        Results: []SearchResult{\\n            {Title: \\\"Test Result\\\", Content: \\\"Test content\\\"},\\n        },\\n    }\\n    \\n    // Mock LLM\\n    mockLLM := &MockLLMClient{\\n        Response: \\\"Based on the search results...\\\",\\n    }\\n    \\n    config := AgentConfig{\\n        SearchProvider: mockSearch,\\n        LLMClient:     mockLLM,\\n    }\\n    \\n    flow := CreateAgentFlow(config)\\n    // ... test flow\\n}\\n```\\n\\n## Performance Optimization\\n\\n### Caching\\n\\nCache search results:\\n\\n```go\\ncachedSearch := NewCachedNode(searchNode, CacheConfig{\\n    TTL:      1 * time.Hour,\\n    MaxSize:  100,\\n})\\n```\\n\\n### Parallel Searches\\n\\nSearch multiple sources simultaneously:\\n\\n```go\\nparallelSearch := NewParallelSearchNode([]SearchProvider{\\n    googleProvider,\\n    bingProvider,\\n    duckduckgoProvider,\\n})\\n```\\n\\n## Source Code\\n\\nThe complete source code for this example is available in the [cookbook/agent](https://github.com/mark3labs/flyt/tree/main/cookbook/agent) directory.\\n\\n## Next Steps\\n\\n- [Chat Example](/examples/chat) - Build conversational interfaces\\n- [LLM Streaming](/examples/llm-streaming) - Stream LLM responses\\n- [MCP Integration](/examples/mcp) - Model Context Protocol\",\"document\":[{\"href\":\"/examples/agent#agent-example\",\"html\":\"</header>\\n<p>An AI agent implementation with web search capabilities using LLM and search providers.</p>\\n\",\"id\":\"docs/pages/examples/agent.mdx#agent-example\",\"isPage\":true,\"text\":\"\\nAn AI agent implementation with web search capabilities using LLM and search providers.\\n\",\"title\":\"Agent Example\",\"titles\":[]},{\"href\":\"/examples/agent#overview\",\"html\":\"\\n<p>This example demonstrates how to build an intelligent agent that can:</p>\\n<ul>\\n<li>Search the web for information</li>\\n<li>Process search results with an LLM</li>\\n<li>Make decisions based on gathered information</li>\\n<li>Chain multiple searches together</li>\\n</ul>\\n\",\"id\":\"docs/pages/examples/agent.mdx#overview\",\"isPage\":false,\"text\":\"\\nThis example demonstrates how to build an intelligent agent that can:\\n\\nSearch the web for information\\nProcess search results with an LLM\\nMake decisions based on gathered information\\nChain multiple searches together\\n\\n\",\"title\":\"Overview\",\"titles\":[\"Agent Example\"]},{\"href\":\"/examples/agent#architecture\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">┌─────────┐     ┌──────────┐     ┌─────────┐</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">│  Input  │────▶│  Search  │────▶│   LLM   │</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">└─────────┘     └──────────┘     └─────────┘</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                      │                 │</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                      ▼                 ▼</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                ┌──────────┐     ┌─────────┐</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                │ Results  │     │Decision │</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                └──────────┘     └─────────┘</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#architecture\",\"isPage\":false,\"text\":\"\\n┌─────────┐     ┌──────────┐     ┌─────────┐\\n│  Input  │────▶│  Search  │────▶│   LLM   │\\n└─────────┘     └──────────┘     └─────────┘\\n                      │                 │\\n                      ▼                 ▼\\n                ┌──────────┐     ┌─────────┐\\n                │ Results  │     │Decision │\\n                └──────────┘     └─────────┘\\n\",\"title\":\"Architecture\",\"titles\":[\"Agent Example\"]},{\"href\":\"/examples/agent#key-components\",\"html\":\"\\n\",\"id\":\"docs/pages/examples/agent.mdx#key-components\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Key Components\",\"titles\":[\"Agent Example\"]},{\"href\":\"/examples/agent#search-node\",\"html\":\"\\n<p>Performs web searches using configured providers:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> SearchNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    provider </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SearchProvider</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SearchNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    query </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    results, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.provider.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Search</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, query)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> results, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#search-node\",\"isPage\":false,\"text\":\"\\nPerforms web searches using configured providers:\\ntype SearchNode struct {\\n    *flyt.BaseNode\\n    provider SearchProvider\\n}\\n \\nfunc (n *SearchNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    query := prepResult.(string)\\n    results, err := n.provider.Search(ctx, query)\\n    if err != nil {\\n        return nil, err\\n    }\\n    return results, nil\\n}\\n\",\"title\":\"Search Node\",\"titles\":[\"Agent Example\",\"Key Components\"]},{\"href\":\"/examples/agent#llm-processing-node\",\"html\":\"\\n<p>Analyzes search results using an LLM:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> LLMNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    client </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">openai</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Client</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">LLMNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    searchResults </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SearchResult</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    prompt </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> buildPrompt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(searchResults)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    response, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.client.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Complete</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, prompt)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> parseResponse</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(response), </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#llm-processing-node\",\"isPage\":false,\"text\":\"\\nAnalyzes search results using an LLM:\\ntype LLMNode struct {\\n    *flyt.BaseNode\\n    client *openai.Client\\n}\\n \\nfunc (n *LLMNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    searchResults := prepResult.([]SearchResult)\\n    \\n    prompt := buildPrompt(searchResults)\\n    response, err := n.client.Complete(ctx, prompt)\\n    if err != nil {\\n        return nil, err\\n    }\\n    \\n    return parseResponse(response), nil\\n}\\n\",\"title\":\"LLM Processing Node\",\"titles\":[\"Agent Example\",\"Key Components\"]},{\"href\":\"/examples/agent#decision-node\",\"html\":\"\\n<p>Makes routing decisions based on LLM analysis:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DecisionNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Post</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">execResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Action</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    analysis </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> execResult.(</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Analysis</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> analysis.NeedsMoreInfo {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Set</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;next_query&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, analysis.NextQuery)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;search_again&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> analysis.HasAnswer {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Set</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;final_answer&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, analysis.Answer)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;complete&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;insufficient_data&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#decision-node\",\"isPage\":false,\"text\":\"\\nMakes routing decisions based on LLM analysis:\\nfunc (n *DecisionNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\\n    analysis := execResult.(Analysis)\\n    \\n    if analysis.NeedsMoreInfo {\\n        shared.Set(&quot;next_query&quot;, analysis.NextQuery)\\n        return &quot;search_again&quot;, nil\\n    }\\n    \\n    if analysis.HasAnswer {\\n        shared.Set(&quot;final_answer&quot;, analysis.Answer)\\n        return &quot;complete&quot;, nil\\n    }\\n    \\n    return &quot;insufficient_data&quot;, nil\\n}\\n\",\"title\":\"Decision Node\",\"titles\":[\"Agent Example\",\"Key Components\"]},{\"href\":\"/examples/agent#complete-flow\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> CreateAgentFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">config</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> AgentConfig</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Create nodes</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    searchNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewSearchNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(config.SearchProvider)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    llmNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewLLMNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(config.LLMClient)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    decisionNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewDecisionNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    formatNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewFormatNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Build flow with loops for iterative search</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(searchNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(searchNode, flyt.DefaultAction, llmNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(llmNode, flyt.DefaultAction, decisionNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(decisionNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;search_again&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, searchNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(decisionNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;complete&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, formatNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(decisionNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;insufficient_data&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, errorNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#complete-flow\",\"isPage\":false,\"text\":\"\\nfunc CreateAgentFlow(config AgentConfig) *flyt.Flow {\\n    // Create nodes\\n    searchNode := NewSearchNode(config.SearchProvider)\\n    llmNode := NewLLMNode(config.LLMClient)\\n    decisionNode := NewDecisionNode()\\n    formatNode := NewFormatNode()\\n    \\n    // Build flow with loops for iterative search\\n    flow := flyt.NewFlow(searchNode)\\n    flow.Connect(searchNode, flyt.DefaultAction, llmNode)\\n    flow.Connect(llmNode, flyt.DefaultAction, decisionNode)\\n    flow.Connect(decisionNode, &quot;search_again&quot;, searchNode)\\n    flow.Connect(decisionNode, &quot;complete&quot;, formatNode)\\n    flow.Connect(decisionNode, &quot;insufficient_data&quot;, errorNode)\\n    \\n    return flow\\n}\\n\",\"title\":\"Complete Flow\",\"titles\":[\"Agent Example\"]},{\"href\":\"/examples/agent#running-the-agent\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> main</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Configure agent</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    config </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> AgentConfig</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        SearchProvider: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewGoogleSearchProvider</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(apiKey),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        LLMClient:     openai.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(openaiKey),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        MaxIterations: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">3</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Create flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    agentFlow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> CreateAgentFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(config)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Prepare shared store</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    shared </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewSharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Set</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;query&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;What are the latest developments in quantum computing?&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Set</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;iteration&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Run agent</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ctx </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> context.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Background</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> agentFlow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Run</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, shared)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Fatal</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Get results</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    answer, _ </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Get</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;final_answer&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Println</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Agent Answer:&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, answer)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#running-the-agent\",\"isPage\":false,\"text\":\"\\nfunc main() {\\n    // Configure agent\\n    config := AgentConfig{\\n        SearchProvider: NewGoogleSearchProvider(apiKey),\\n        LLMClient:     openai.NewClient(openaiKey),\\n        MaxIterations: 3,\\n    }\\n    \\n    // Create flow\\n    agentFlow := CreateAgentFlow(config)\\n    \\n    // Prepare shared store\\n    shared := flyt.NewSharedStore()\\n    shared.Set(&quot;query&quot;, &quot;What are the latest developments in quantum computing?&quot;)\\n    shared.Set(&quot;iteration&quot;, 0)\\n    \\n    // Run agent\\n    ctx := context.Background()\\n    err := agentFlow.Run(ctx, shared)\\n    if err != nil {\\n        log.Fatal(err)\\n    }\\n    \\n    // Get results\\n    answer, _ := shared.Get(&quot;final_answer&quot;)\\n    fmt.Println(&quot;Agent Answer:&quot;, answer)\\n}\\n\",\"title\":\"Running the Agent\",\"titles\":[\"Agent Example\"]},{\"href\":\"/examples/agent#configuration\",\"html\":\"\\n\",\"id\":\"docs/pages/examples/agent.mdx#configuration\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Configuration\",\"titles\":[\"Agent Example\"]},{\"href\":\"/examples/agent#search-providers\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Google Search</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">provider </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewGoogleSearchProvider</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">GoogleConfig</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    APIKey:     </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;your-api-key&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    EngineID:   </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;your-engine-id&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    MaxResults: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">10</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Bing Search</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">provider </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewBingSearchProvider</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BingConfig</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    APIKey:     </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;your-api-key&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    MaxResults: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">10</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// DuckDuckGo (no API key required)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">provider </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewDuckDuckGoProvider</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#search-providers\",\"isPage\":false,\"text\":\"\\n// Google Search\\nprovider := NewGoogleSearchProvider(GoogleConfig{\\n    APIKey:     &quot;your-api-key&quot;,\\n    EngineID:   &quot;your-engine-id&quot;,\\n    MaxResults: 10,\\n})\\n \\n// Bing Search\\nprovider := NewBingSearchProvider(BingConfig{\\n    APIKey:     &quot;your-api-key&quot;,\\n    MaxResults: 10,\\n})\\n \\n// DuckDuckGo (no API key required)\\nprovider := NewDuckDuckGoProvider()\\n\",\"title\":\"Search Providers\",\"titles\":[\"Agent Example\",\"Configuration\"]},{\"href\":\"/examples/agent#llm-configuration\",\"html\":\"\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">llmClient </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> openai.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    openai.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithAPIKey</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(apiKey),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    openai.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithModel</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;gpt-4&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    openai.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithTemperature</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0.7</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#llm-configuration\",\"isPage\":false,\"text\":\"\\nllmClient := openai.NewClient(\\n    openai.WithAPIKey(apiKey),\\n    openai.WithModel(&quot;gpt-4&quot;),\\n    openai.WithTemperature(0.7),\\n)\\n\",\"title\":\"LLM Configuration\",\"titles\":[\"Agent Example\",\"Configuration\"]},{\"href\":\"/examples/agent#advanced-features\",\"html\":\"\\n\",\"id\":\"docs/pages/examples/agent.mdx#advanced-features\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Advanced Features\",\"titles\":[\"Agent Example\"]},{\"href\":\"/examples/agent#memory-management\",\"html\":\"\\n<p>Store conversation history:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> MemoryNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    history []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Interaction</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">MemoryNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Prep</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Add current interaction to history</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    query, _ </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Get</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;query&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.history </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> append</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(n.history, </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Interaction</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Query:     query.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Timestamp: time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Provide context for LLM</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> n.history, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#memory-management\",\"isPage\":false,\"text\":\"\\nStore conversation history:\\ntype MemoryNode struct {\\n    *flyt.BaseNode\\n    history []Interaction\\n}\\n \\nfunc (n *MemoryNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n    // Add current interaction to history\\n    query, _ := shared.Get(&quot;query&quot;)\\n    n.history = append(n.history, Interaction{\\n        Query:     query.(string),\\n        Timestamp: time.Now(),\\n    })\\n    \\n    // Provide context for LLM\\n    return n.history, nil\\n}\\n\",\"title\":\"Memory Management\",\"titles\":[\"Agent Example\",\"Advanced Features\"]},{\"href\":\"/examples/agent#tool-integration\",\"html\":\"\\n<p>Add specialized tools:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> CreateToolNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">toolType</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Node</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    switch</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> toolType {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;calculator&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewCalculatorNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;code_executor&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewCodeExecutorNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;database_query&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewDatabaseNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    default</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewDefaultToolNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#tool-integration\",\"isPage\":false,\"text\":\"\\nAdd specialized tools:\\nfunc CreateToolNode(toolType string) flyt.Node {\\n    switch toolType {\\n    case &quot;calculator&quot;:\\n        return NewCalculatorNode()\\n    case &quot;code_executor&quot;:\\n        return NewCodeExecutorNode()\\n    case &quot;database_query&quot;:\\n        return NewDatabaseNode()\\n    default:\\n        return NewDefaultToolNode()\\n    }\\n}\\n\",\"title\":\"Tool Integration\",\"titles\":[\"Agent Example\",\"Advanced Features\"]},{\"href\":\"/examples/agent#rate-limiting\",\"html\":\"\\n<p>Prevent API overuse:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">searchNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewSearchNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(provider)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">rateLimitedSearch </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> WithRateLimit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(searchNode, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">10</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// 10 requests per second</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#rate-limiting\",\"isPage\":false,\"text\":\"\\nPrevent API overuse:\\nsearchNode := NewSearchNode(provider)\\nrateLimitedSearch := WithRateLimit(searchNode, 10) // 10 requests per second\\n\",\"title\":\"Rate Limiting\",\"titles\":[\"Agent Example\",\"Advanced Features\"]},{\"href\":\"/examples/agent#error-handling\",\"html\":\"\\n<p>Handle various failure modes:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> CreateRobustAgentFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    searchNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewSearchNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(provider)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    searchNode.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">SetMaxRetries</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">3</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    searchNode.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">SetFallback</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewCachedSearchNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">())</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    llmNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewLLMNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(client)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    llmNode.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">SetTimeout</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">30</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.Second)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // ... rest of flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#error-handling\",\"isPage\":false,\"text\":\"\\nHandle various failure modes:\\nfunc CreateRobustAgentFlow() *flyt.Flow {\\n    searchNode := NewSearchNode(provider)\\n    searchNode.SetMaxRetries(3)\\n    searchNode.SetFallback(NewCachedSearchNode())\\n    \\n    llmNode := NewLLMNode(client)\\n    llmNode.SetTimeout(30 * time.Second)\\n    \\n    // ... rest of flow\\n}\\n\",\"title\":\"Error Handling\",\"titles\":[\"Agent Example\"]},{\"href\":\"/examples/agent#testing\",\"html\":\"\\n<p>Test the agent with mock providers:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> TestAgent</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">t</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">testing</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">T</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Mock search provider</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    mockSearch </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">MockSearchProvider</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Results: []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SearchResult</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            {Title: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Test Result&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, Content: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Test content&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        },</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Mock LLM</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    mockLLM </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">MockLLMClient</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Response: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Based on the search results...&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    config </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> AgentConfig</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        SearchProvider: mockSearch,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        LLMClient:     mockLLM,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> CreateAgentFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(config)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // ... test flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#testing\",\"isPage\":false,\"text\":\"\\nTest the agent with mock providers:\\nfunc TestAgent(t *testing.T) {\\n    // Mock search provider\\n    mockSearch := &amp;MockSearchProvider{\\n        Results: []SearchResult{\\n            {Title: &quot;Test Result&quot;, Content: &quot;Test content&quot;},\\n        },\\n    }\\n    \\n    // Mock LLM\\n    mockLLM := &amp;MockLLMClient{\\n        Response: &quot;Based on the search results...&quot;,\\n    }\\n    \\n    config := AgentConfig{\\n        SearchProvider: mockSearch,\\n        LLMClient:     mockLLM,\\n    }\\n    \\n    flow := CreateAgentFlow(config)\\n    // ... test flow\\n}\\n\",\"title\":\"Testing\",\"titles\":[\"Agent Example\"]},{\"href\":\"/examples/agent#performance-optimization\",\"html\":\"\\n\",\"id\":\"docs/pages/examples/agent.mdx#performance-optimization\",\"isPage\":false,\"text\":\"\\n\",\"title\":\"Performance Optimization\",\"titles\":[\"Agent Example\"]},{\"href\":\"/examples/agent#caching\",\"html\":\"\\n<p>Cache search results:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">cachedSearch </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewCachedNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(searchNode, </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CacheConfig</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    TTL:      </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.Hour,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    MaxSize:  </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">100</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#caching\",\"isPage\":false,\"text\":\"\\nCache search results:\\ncachedSearch := NewCachedNode(searchNode, CacheConfig{\\n    TTL:      1 * time.Hour,\\n    MaxSize:  100,\\n})\\n\",\"title\":\"Caching\",\"titles\":[\"Agent Example\",\"Performance Optimization\"]},{\"href\":\"/examples/agent#parallel-searches\",\"html\":\"\\n<p>Search multiple sources simultaneously:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">parallelSearch </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewParallelSearchNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SearchProvider</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    googleProvider,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    bingProvider,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    duckduckgoProvider,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">})</span></span></code></pre>\\n\",\"id\":\"docs/pages/examples/agent.mdx#parallel-searches\",\"isPage\":false,\"text\":\"\\nSearch multiple sources simultaneously:\\nparallelSearch := NewParallelSearchNode([]SearchProvider{\\n    googleProvider,\\n    bingProvider,\\n    duckduckgoProvider,\\n})\\n\",\"title\":\"Parallel Searches\",\"titles\":[\"Agent Example\",\"Performance Optimization\"]},{\"href\":\"/examples/agent#source-code\",\"html\":\"\\n<p>The complete source code for this example is available in the <a href=\\\"https://github.com/mark3labs/flyt/tree/main/cookbook/agent\\\">cookbook/agent</a> directory.</p>\\n\",\"id\":\"docs/pages/examples/agent.mdx#source-code\",\"isPage\":false,\"text\":\"\\nThe complete source code for this example is available in the cookbook/agent directory.\\n\",\"title\":\"Source Code\",\"titles\":[\"Agent Example\"]},{\"href\":\"/examples/agent#next-steps\",\"html\":\"\\n<ul>\\n<li><a href=\\\"/examples/chat\\\">Chat Example</a> - Build conversational interfaces</li>\\n<li><a href=\\\"/examples/llm-streaming\\\">LLM Streaming</a> - Stream LLM responses</li>\\n<li><a href=\\\"/examples/mcp\\\">MCP Integration</a> - Model Context Protocol</li>\\n</ul>\",\"id\":\"docs/pages/examples/agent.mdx#next-steps\",\"isPage\":false,\"text\":\"\\n\\nChat Example - Build conversational interfaces\\nLLM Streaming - Stream LLM responses\\nMCP Integration - Model Context Protocol\\n\",\"title\":\"Next Steps\",\"titles\":[\"Agent Example\"]}]}}"
