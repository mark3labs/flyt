"{\"value\":{\"mdx\":\"# Batch Flows\\n\\nRun the same flow multiple times with different parameters, perfect for processing multiple entities or parallel workflows.\\n\\n## Basic Batch Flow\\n\\nRun a flow for each set of inputs:\\n\\n```go\\n// Create a flow factory - returns a new flow instance for each iteration\\nflowFactory := func() *flyt.Flow {\\n    validateNode := flyt.NewNode(\\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n            // Each flow has its own SharedStore with merged FlowInputs\\n            userID, _ := shared.Get(\\\"user_id\\\")\\n            email, _ := shared.Get(\\\"email\\\")\\n            return map[string]any{\\\"user_id\\\": userID, \\\"email\\\": email}, nil\\n        }),\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            data := prepResult.(map[string]any)\\n            // Process user data\\n            return processUser(data), nil\\n        }),\\n    )\\n    return flyt.NewFlow(validateNode)\\n}\\n\\n// Define input parameters for each flow iteration\\nbatchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\\n    // Could fetch from database, API, etc.\\n    return []flyt.FlowInputs{\\n        {\\\"user_id\\\": 1, \\\"email\\\": \\\"user1@example.com\\\"},\\n        {\\\"user_id\\\": 2, \\\"email\\\": \\\"user2@example.com\\\"},\\n        {\\\"user_id\\\": 3, \\\"email\\\": \\\"user3@example.com\\\"},\\n    }, nil\\n}\\n\\n// Create and run batch flow\\nbatchFlow := flyt.NewBatchFlow(flowFactory, batchFunc, true) // true for concurrent\\nshared := flyt.NewSharedStore()\\nerr := batchFlow.Run(ctx, shared)\\n```\\n\\n## Sequential vs Concurrent Execution\\n\\nControl how flows are executed:\\n\\n```go\\n// Sequential - one flow at a time\\nsequentialBatch := flyt.NewBatchFlow(flowFactory, batchFunc, false)\\n\\n// Concurrent - multiple flows in parallel\\nconcurrentBatch := flyt.NewBatchFlow(flowFactory, batchFunc, true)\\n```\\n\\n## Dynamic Input Generation\\n\\nGenerate inputs based on runtime data:\\n\\n```go\\nbatchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\\n    // Get configuration from parent shared store\\n    config, _ := shared.Get(\\\"batch_config\\\")\\n    batchSize := config.(map[string]any)[\\\"size\\\"].(int)\\n    \\n    // Fetch data from database\\n    users, err := fetchUsers(batchSize)\\n    if err != nil {\\n        return nil, err\\n    }\\n    \\n    // Convert to FlowInputs\\n    inputs := make([]flyt.FlowInputs, len(users))\\n    for i, user := range users {\\n        inputs[i] = flyt.FlowInputs{\\n            \\\"user_id\\\":   user.ID,\\n            \\\"user_name\\\": user.Name,\\n            \\\"user_data\\\": user,\\n        }\\n    }\\n    \\n    return inputs, nil\\n}\\n```\\n\\n## Complex Flow Factory\\n\\nCreate sophisticated flows for each batch:\\n\\n```go\\nflowFactory := func() *flyt.Flow {\\n    // Create nodes\\n    fetchNode := createFetchNode()\\n    validateNode := createValidateNode()\\n    processNode := createProcessNode()\\n    saveNode := createSaveNode()\\n    errorNode := createErrorNode()\\n    \\n    // Build flow with error handling\\n    flow := flyt.NewFlow(fetchNode)\\n    flow.Connect(fetchNode, flyt.DefaultAction, validateNode)\\n    flow.Connect(validateNode, \\\"valid\\\", processNode)\\n    flow.Connect(validateNode, \\\"invalid\\\", errorNode)\\n    flow.Connect(processNode, flyt.DefaultAction, saveNode)\\n    flow.Connect(processNode, \\\"error\\\", errorNode)\\n    \\n    return flow\\n}\\n```\\n\\n## Batch Flow with Configuration\\n\\nPass configuration to batch flows:\\n\\n```go\\nfunc createConfiguredBatchFlow(config Config) *flyt.Flow {\\n    flowFactory := func() *flyt.Flow {\\n        // Each flow gets the same configuration\\n        node := flyt.NewNode(\\n            flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n                // Use config in processing\\n                return processWithConfig(prepResult, config), nil\\n            }),\\n        )\\n        return flyt.NewFlow(node)\\n    }\\n    \\n    batchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\\n        items, _ := shared.Get(\\\"items\\\")\\n        \\n        inputs := make([]flyt.FlowInputs, 0)\\n        for _, item := range items.([]any) {\\n            inputs = append(inputs, flyt.FlowInputs{\\n                \\\"item\\\": item,\\n                \\\"config\\\": config,\\n            })\\n        }\\n        \\n        return inputs, nil\\n    }\\n    \\n    return flyt.NewBatchFlow(flowFactory, batchFunc, true)\\n}\\n```\\n\\n## Result Aggregation\\n\\nCollect results from all flows:\\n\\n```go\\ntype ResultCollector struct {\\n    mu      sync.Mutex\\n    results []any\\n    errors  []error\\n}\\n\\nfunc createAggregatingBatchFlow(collector *ResultCollector) *flyt.Flow {\\n    flowFactory := func() *flyt.Flow {\\n        node := flyt.NewNode(\\n            flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n                result, err := process(prepResult)\\n                \\n                collector.mu.Lock()\\n                if err != nil {\\n                    collector.errors = append(collector.errors, err)\\n                } else {\\n                    collector.results = append(collector.results, result)\\n                }\\n                collector.mu.Unlock()\\n                \\n                return result, err\\n            }),\\n        )\\n        return flyt.NewFlow(node)\\n    }\\n    \\n    // ... rest of batch flow setup\\n}\\n```\\n\\n## Batch Flow with Progress\\n\\nTrack progress across batch execution:\\n\\n```go\\ntype ProgressTracker struct {\\n    total     int\\n    completed int32\\n    failed    int32\\n}\\n\\nfunc createProgressBatchFlow(tracker *ProgressTracker) *flyt.Flow {\\n    flowFactory := func() *flyt.Flow {\\n        node := flyt.NewNode(\\n            flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\\n                if execResult != nil {\\n                    atomic.AddInt32(&tracker.completed, 1)\\n                } else {\\n                    atomic.AddInt32(&tracker.failed, 1)\\n                }\\n                \\n                progress := atomic.LoadInt32(&tracker.completed) + atomic.LoadInt32(&tracker.failed)\\n                percentage := float64(progress) / float64(tracker.total) * 100\\n                \\n                log.Printf(\\\"Batch progress: %.1f%% (%d/%d)\\\", percentage, progress, tracker.total)\\n                \\n                return flyt.DefaultAction, nil\\n            }),\\n        )\\n        return flyt.NewFlow(node)\\n    }\\n    \\n    batchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\\n        inputs := generateInputs()\\n        tracker.total = len(inputs)\\n        return inputs, nil\\n    }\\n    \\n    return flyt.NewBatchFlow(flowFactory, batchFunc, true)\\n}\\n```\\n\\n## Conditional Batch Processing\\n\\nProcess batches based on conditions:\\n\\n```go\\nbatchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\\n    mode, _ := shared.Get(\\\"processing_mode\\\")\\n    \\n    var inputs []flyt.FlowInputs\\n    \\n    switch mode.(string) {\\n    case \\\"all\\\":\\n        inputs = getAllInputs()\\n    case \\\"pending\\\":\\n        inputs = getPendingInputs()\\n    case \\\"failed\\\":\\n        inputs = getFailedInputs()\\n    default:\\n        return nil, fmt.Errorf(\\\"unknown mode: %s\\\", mode)\\n    }\\n    \\n    // Filter based on additional criteria\\n    filtered := make([]flyt.FlowInputs, 0)\\n    for _, input := range inputs {\\n        if shouldProcess(input) {\\n            filtered = append(filtered, input)\\n        }\\n    }\\n    \\n    return filtered, nil\\n}\\n```\\n\\n## Nested Batch Flows\\n\\nBatch flows within batch flows:\\n\\n```go\\nouterFlowFactory := func() *flyt.Flow {\\n    // Inner batch flow for processing items\\n    innerBatchFlow := flyt.NewBatchFlow(\\n        innerFlowFactory,\\n        innerBatchFunc,\\n        true,\\n    )\\n    \\n    // Outer flow that includes the batch\\n    fetchNode := createFetchNode()\\n    \\n    flow := flyt.NewFlow(fetchNode)\\n    flow.Connect(fetchNode, flyt.DefaultAction, innerBatchFlow)\\n    flow.Connect(innerBatchFlow, flyt.DefaultAction, aggregateNode)\\n    \\n    return flow\\n}\\n\\n// Create outer batch flow\\nouterBatchFlow := flyt.NewBatchFlow(outerFlowFactory, outerBatchFunc, false)\\n```\\n\\n## Error Recovery\\n\\nHandle failures in batch flows:\\n\\n```go\\nflowFactory := func() *flyt.Flow {\\n    node := flyt.NewNode(\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            result, err := riskyOperation(prepResult)\\n            if err != nil {\\n                // Store error for later analysis\\n                errorData := map[string]any{\\n                    \\\"input\\\": prepResult,\\n                    \\\"error\\\": err.Error(),\\n                    \\\"time\\\":  time.Now(),\\n                }\\n                storeError(errorData)\\n                \\n                // Return partial result\\n                return map[string]any{\\n                    \\\"status\\\": \\\"failed\\\",\\n                    \\\"error\\\":  err.Error(),\\n                }, nil  // Don't fail the entire batch\\n            }\\n            return result, nil\\n        }),\\n    )\\n    return flyt.NewFlow(node)\\n}\\n```\\n\\n## Best Practices\\n\\n1. **Isolate Flows**: Each flow instance should be independent\\n2. **Manage Resources**: Be mindful of resource usage with concurrent flows\\n3. **Handle Failures**: Decide whether one failure should stop the batch\\n4. **Track Progress**: Implement progress tracking for long-running batches\\n5. **Limit Concurrency**: Set reasonable concurrency limits\\n6. **Test Thoroughly**: Test with various batch sizes and failure scenarios\\n\\n## Next Steps\\n\\n- [Batch Processing](/advanced/batch-processing) - Process items within a single node\\n- [Nested Flows](/advanced/nested-flows) - Compose complex workflows\\n- [Worker Pool](/advanced/worker-pool) - Fine-grained concurrency control\",\"document\":[{\"href\":\"/advanced/batch-flows#batch-flows\",\"html\":\"</header>\\n<p>Run the same flow multiple times with different parameters, perfect for processing multiple entities or parallel workflows.</p>\\n\",\"id\":\"docs/pages/advanced/batch-flows.mdx#batch-flows\",\"isPage\":true,\"text\":\"\\nRun the same flow multiple times with different parameters, perfect for processing multiple entities or parallel workflows.\\n\",\"title\":\"Batch Flows\",\"titles\":[]},{\"href\":\"/advanced/batch-flows#basic-batch-flow\",\"html\":\"\\n<p>Run a flow for each set of inputs:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Create a flow factory - returns a new flow instance for each iteration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flowFactory </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    validateNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithPrepFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">            // Each flow has its own SharedStore with merged FlowInputs</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            userID, _ </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Get</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;user_id&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            email, _ </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Get</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;email&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;user_id&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: userID, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;email&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: email}, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithExecFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">            // Process user data</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processUser</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(data), </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(validateNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Define input parameters for each flow iteration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">batchFunc </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) ([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FlowInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Could fetch from database, API, etc.</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FlowInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        {</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;user_id&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;email&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;user1@example.com&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        {</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;user_id&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">2</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;email&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;user2@example.com&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        {</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;user_id&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">3</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;email&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;user3@example.com&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">},</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Create and run batch flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">batchFlow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewBatchFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(flowFactory, batchFunc, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// true for concurrent</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">shared </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewSharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> batchFlow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Run</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx, shared)</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/batch-flows.mdx#basic-batch-flow\",\"isPage\":false,\"text\":\"\\nRun a flow for each set of inputs:\\n// Create a flow factory - returns a new flow instance for each iteration\\nflowFactory := func() *flyt.Flow {\\n    validateNode := flyt.NewNode(\\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n            // Each flow has its own SharedStore with merged FlowInputs\\n            userID, _ := shared.Get(&quot;user_id&quot;)\\n            email, _ := shared.Get(&quot;email&quot;)\\n            return map[string]any{&quot;user_id&quot;: userID, &quot;email&quot;: email}, nil\\n        }),\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            data := prepResult.(map[string]any)\\n            // Process user data\\n            return processUser(data), nil\\n        }),\\n    )\\n    return flyt.NewFlow(validateNode)\\n}\\n \\n// Define input parameters for each flow iteration\\nbatchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\\n    // Could fetch from database, API, etc.\\n    return []flyt.FlowInputs{\\n        {&quot;user_id&quot;: 1, &quot;email&quot;: &quot;user1@example.com&quot;},\\n        {&quot;user_id&quot;: 2, &quot;email&quot;: &quot;user2@example.com&quot;},\\n        {&quot;user_id&quot;: 3, &quot;email&quot;: &quot;user3@example.com&quot;},\\n    }, nil\\n}\\n \\n// Create and run batch flow\\nbatchFlow := flyt.NewBatchFlow(flowFactory, batchFunc, true) // true for concurrent\\nshared := flyt.NewSharedStore()\\nerr := batchFlow.Run(ctx, shared)\\n\",\"title\":\"Basic Batch Flow\",\"titles\":[\"Batch Flows\"]},{\"href\":\"/advanced/batch-flows#sequential-vs-concurrent-execution\",\"html\":\"\\n<p>Control how flows are executed:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Sequential - one flow at a time</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">sequentialBatch </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewBatchFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(flowFactory, batchFunc, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">false</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Concurrent - multiple flows in parallel</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">concurrentBatch </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewBatchFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(flowFactory, batchFunc, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/batch-flows.mdx#sequential-vs-concurrent-execution\",\"isPage\":false,\"text\":\"\\nControl how flows are executed:\\n// Sequential - one flow at a time\\nsequentialBatch := flyt.NewBatchFlow(flowFactory, batchFunc, false)\\n \\n// Concurrent - multiple flows in parallel\\nconcurrentBatch := flyt.NewBatchFlow(flowFactory, batchFunc, true)\\n\",\"title\":\"Sequential vs Concurrent Execution\",\"titles\":[\"Batch Flows\"]},{\"href\":\"/advanced/batch-flows#dynamic-input-generation\",\"html\":\"\\n<p>Generate inputs based on runtime data:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">batchFunc </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) ([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FlowInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Get configuration from parent shared store</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    config, _ </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Get</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;batch_config&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    batchSize </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> config.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)[</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;size&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">].(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Fetch data from database</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    users, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> fetchUsers</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(batchSize)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Convert to FlowInputs</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    inputs </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FlowInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(users))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i, user </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> range</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> users {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        inputs[i] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FlowInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;user_id&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:   user.ID,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;user_name&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: user.Name,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">            &quot;user_data&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: user,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> inputs, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/batch-flows.mdx#dynamic-input-generation\",\"isPage\":false,\"text\":\"\\nGenerate inputs based on runtime data:\\nbatchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\\n    // Get configuration from parent shared store\\n    config, _ := shared.Get(&quot;batch_config&quot;)\\n    batchSize := config.(map[string]any)[&quot;size&quot;].(int)\\n    \\n    // Fetch data from database\\n    users, err := fetchUsers(batchSize)\\n    if err != nil {\\n        return nil, err\\n    }\\n    \\n    // Convert to FlowInputs\\n    inputs := make([]flyt.FlowInputs, len(users))\\n    for i, user := range users {\\n        inputs[i] = flyt.FlowInputs{\\n            &quot;user_id&quot;:   user.ID,\\n            &quot;user_name&quot;: user.Name,\\n            &quot;user_data&quot;: user,\\n        }\\n    }\\n    \\n    return inputs, nil\\n}\\n\",\"title\":\"Dynamic Input Generation\",\"titles\":[\"Batch Flows\"]},{\"href\":\"/advanced/batch-flows#complex-flow-factory\",\"html\":\"\\n<p>Create sophisticated flows for each batch:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flowFactory </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Create nodes</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    fetchNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createFetchNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    validateNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createValidateNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    processNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createProcessNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    saveNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createSaveNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    errorNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createErrorNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Build flow with error handling</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode, flyt.DefaultAction, validateNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(validateNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;valid&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, processNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(validateNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;invalid&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, errorNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(processNode, flyt.DefaultAction, saveNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(processNode, </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, errorNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/batch-flows.mdx#complex-flow-factory\",\"isPage\":false,\"text\":\"\\nCreate sophisticated flows for each batch:\\nflowFactory := func() *flyt.Flow {\\n    // Create nodes\\n    fetchNode := createFetchNode()\\n    validateNode := createValidateNode()\\n    processNode := createProcessNode()\\n    saveNode := createSaveNode()\\n    errorNode := createErrorNode()\\n    \\n    // Build flow with error handling\\n    flow := flyt.NewFlow(fetchNode)\\n    flow.Connect(fetchNode, flyt.DefaultAction, validateNode)\\n    flow.Connect(validateNode, &quot;valid&quot;, processNode)\\n    flow.Connect(validateNode, &quot;invalid&quot;, errorNode)\\n    flow.Connect(processNode, flyt.DefaultAction, saveNode)\\n    flow.Connect(processNode, &quot;error&quot;, errorNode)\\n    \\n    return flow\\n}\\n\",\"title\":\"Complex Flow Factory\",\"titles\":[\"Batch Flows\"]},{\"href\":\"/advanced/batch-flows#batch-flow-with-configuration\",\"html\":\"\\n<p>Pass configuration to batch flows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createConfiguredBatchFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">config</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> Config</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flowFactory </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Each flow gets the same configuration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        node </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithExecFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">                // Use config in processing</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                return</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processWithConfig</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(prepResult, config), </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(node)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    batchFunc </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) ([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FlowInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        items, _ </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Get</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;items&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        inputs </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FlowInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> _, item </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> range</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> items.([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            inputs </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> append</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(inputs, </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FlowInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                &quot;item&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: item,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                &quot;config&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: config,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> inputs, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewBatchFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(flowFactory, batchFunc, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/batch-flows.mdx#batch-flow-with-configuration\",\"isPage\":false,\"text\":\"\\nPass configuration to batch flows:\\nfunc createConfiguredBatchFlow(config Config) *flyt.Flow {\\n    flowFactory := func() *flyt.Flow {\\n        // Each flow gets the same configuration\\n        node := flyt.NewNode(\\n            flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n                // Use config in processing\\n                return processWithConfig(prepResult, config), nil\\n            }),\\n        )\\n        return flyt.NewFlow(node)\\n    }\\n    \\n    batchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\\n        items, _ := shared.Get(&quot;items&quot;)\\n        \\n        inputs := make([]flyt.FlowInputs, 0)\\n        for _, item := range items.([]any) {\\n            inputs = append(inputs, flyt.FlowInputs{\\n                &quot;item&quot;: item,\\n                &quot;config&quot;: config,\\n            })\\n        }\\n        \\n        return inputs, nil\\n    }\\n    \\n    return flyt.NewBatchFlow(flowFactory, batchFunc, true)\\n}\\n\",\"title\":\"Batch Flow with Configuration\",\"titles\":[\"Batch Flows\"]},{\"href\":\"/advanced/batch-flows#result-aggregation\",\"html\":\"\\n<p>Collect results from all flows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> ResultCollector</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    mu      </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">sync</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Mutex</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    results []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    errors  []</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createAggregatingBatchFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">collector</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">ResultCollector</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flowFactory </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        node </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithExecFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> process</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(prepResult)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                collector.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Lock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    collector.errors </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> append</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(collector.errors, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">else</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    collector.results </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> append</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(collector.results, result)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                collector.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Unlock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result, err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(node)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // ... rest of batch flow setup</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/batch-flows.mdx#result-aggregation\",\"isPage\":false,\"text\":\"\\nCollect results from all flows:\\ntype ResultCollector struct {\\n    mu      sync.Mutex\\n    results []any\\n    errors  []error\\n}\\n \\nfunc createAggregatingBatchFlow(collector *ResultCollector) *flyt.Flow {\\n    flowFactory := func() *flyt.Flow {\\n        node := flyt.NewNode(\\n            flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n                result, err := process(prepResult)\\n                \\n                collector.mu.Lock()\\n                if err != nil {\\n                    collector.errors = append(collector.errors, err)\\n                } else {\\n                    collector.results = append(collector.results, result)\\n                }\\n                collector.mu.Unlock()\\n                \\n                return result, err\\n            }),\\n        )\\n        return flyt.NewFlow(node)\\n    }\\n    \\n    // ... rest of batch flow setup\\n}\\n\",\"title\":\"Result Aggregation\",\"titles\":[\"Batch Flows\"]},{\"href\":\"/advanced/batch-flows#batch-flow-with-progress\",\"html\":\"\\n<p>Track progress across batch execution:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> ProgressTracker</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    total     </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    completed </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int32</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    failed    </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int32</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createProgressBatchFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">tracker</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">ProgressTracker</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flowFactory </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        node </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithPostFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">execResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Action</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> execResult </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">AddInt32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">tracker.completed, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">else</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                    atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">AddInt32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">tracker.failed, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                progress </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">LoadInt32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">tracker.completed) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">LoadInt32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">tracker.failed)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                percentage </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> float64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(progress) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">/</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> float64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(tracker.total) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 100</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                log.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Batch progress: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%.1f%%</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> (</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">/</span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">)&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, percentage, progress, tracker.total)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.DefaultAction, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(node)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    batchFunc </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) ([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FlowInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        inputs </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> generateInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        tracker.total </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(inputs)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> inputs, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewBatchFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(flowFactory, batchFunc, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/batch-flows.mdx#batch-flow-with-progress\",\"isPage\":false,\"text\":\"\\nTrack progress across batch execution:\\ntype ProgressTracker struct {\\n    total     int\\n    completed int32\\n    failed    int32\\n}\\n \\nfunc createProgressBatchFlow(tracker *ProgressTracker) *flyt.Flow {\\n    flowFactory := func() *flyt.Flow {\\n        node := flyt.NewNode(\\n            flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\\n                if execResult != nil {\\n                    atomic.AddInt32(&amp;tracker.completed, 1)\\n                } else {\\n                    atomic.AddInt32(&amp;tracker.failed, 1)\\n                }\\n                \\n                progress := atomic.LoadInt32(&amp;tracker.completed) + atomic.LoadInt32(&amp;tracker.failed)\\n                percentage := float64(progress) / float64(tracker.total) * 100\\n                \\n                log.Printf(&quot;Batch progress: %.1f%% (%d/%d)&quot;, percentage, progress, tracker.total)\\n                \\n                return flyt.DefaultAction, nil\\n            }),\\n        )\\n        return flyt.NewFlow(node)\\n    }\\n    \\n    batchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\\n        inputs := generateInputs()\\n        tracker.total = len(inputs)\\n        return inputs, nil\\n    }\\n    \\n    return flyt.NewBatchFlow(flowFactory, batchFunc, true)\\n}\\n\",\"title\":\"Batch Flow with Progress\",\"titles\":[\"Batch Flows\"]},{\"href\":\"/advanced/batch-flows#conditional-batch-processing\",\"html\":\"\\n<p>Process batches based on conditions:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">batchFunc </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">shared</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">SharedStore</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) ([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FlowInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    mode, _ </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> shared.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Get</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;processing_mode&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    var</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> inputs []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FlowInputs</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    switch</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> mode.(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;all&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        inputs </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getAllInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;pending&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        inputs </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getPendingInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> &quot;failed&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        inputs </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> getFailedInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    default</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;unknown mode: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%s</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, mode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Filter based on additional criteria</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    filtered </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">FlowInputs</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> _, input </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> range</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> inputs {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> shouldProcess</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(input) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            filtered </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> append</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(filtered, input)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> filtered, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/batch-flows.mdx#conditional-batch-processing\",\"isPage\":false,\"text\":\"\\nProcess batches based on conditions:\\nbatchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\\n    mode, _ := shared.Get(&quot;processing_mode&quot;)\\n    \\n    var inputs []flyt.FlowInputs\\n    \\n    switch mode.(string) {\\n    case &quot;all&quot;:\\n        inputs = getAllInputs()\\n    case &quot;pending&quot;:\\n        inputs = getPendingInputs()\\n    case &quot;failed&quot;:\\n        inputs = getFailedInputs()\\n    default:\\n        return nil, fmt.Errorf(&quot;unknown mode: %s&quot;, mode)\\n    }\\n    \\n    // Filter based on additional criteria\\n    filtered := make([]flyt.FlowInputs, 0)\\n    for _, input := range inputs {\\n        if shouldProcess(input) {\\n            filtered = append(filtered, input)\\n        }\\n    }\\n    \\n    return filtered, nil\\n}\\n\",\"title\":\"Conditional Batch Processing\",\"titles\":[\"Batch Flows\"]},{\"href\":\"/advanced/batch-flows#nested-batch-flows\",\"html\":\"\\n<p>Batch flows within batch flows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">outerFlowFactory </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Inner batch flow for processing items</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    innerBatchFlow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewBatchFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        innerFlowFactory,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        innerBatchFunc,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">        true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Outer flow that includes the batch</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    fetchNode </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createFetchNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(fetchNode, flyt.DefaultAction, innerBatchFlow)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    flow.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Connect</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(innerBatchFlow, flyt.DefaultAction, aggregateNode)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Create outer batch flow</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">outerBatchFlow </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewBatchFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(outerFlowFactory, outerBatchFunc, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">false</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/batch-flows.mdx#nested-batch-flows\",\"isPage\":false,\"text\":\"\\nBatch flows within batch flows:\\nouterFlowFactory := func() *flyt.Flow {\\n    // Inner batch flow for processing items\\n    innerBatchFlow := flyt.NewBatchFlow(\\n        innerFlowFactory,\\n        innerBatchFunc,\\n        true,\\n    )\\n    \\n    // Outer flow that includes the batch\\n    fetchNode := createFetchNode()\\n    \\n    flow := flyt.NewFlow(fetchNode)\\n    flow.Connect(fetchNode, flyt.DefaultAction, innerBatchFlow)\\n    flow.Connect(innerBatchFlow, flyt.DefaultAction, aggregateNode)\\n    \\n    return flow\\n}\\n \\n// Create outer batch flow\\nouterBatchFlow := flyt.NewBatchFlow(outerFlowFactory, outerBatchFunc, false)\\n\",\"title\":\"Nested Batch Flows\",\"titles\":[\"Batch Flows\"]},{\"href\":\"/advanced/batch-flows#error-recovery\",\"html\":\"\\n<p>Handle failures in batch flows:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">flowFactory </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Flow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    node </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">WithExecFunc</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> riskyOperation</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(prepResult)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">                // Store error for later analysis</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                errorData </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;input&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: prepResult,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: err.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;time&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:  time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">                storeError</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(errorData)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">                // Return partial result</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;status&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">: </span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;failed&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">                    &quot;error&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:  err.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                }, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">  // Don&#x27;t fail the entire batch</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    )</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewFlow</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(node)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/batch-flows.mdx#error-recovery\",\"isPage\":false,\"text\":\"\\nHandle failures in batch flows:\\nflowFactory := func() *flyt.Flow {\\n    node := flyt.NewNode(\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            result, err := riskyOperation(prepResult)\\n            if err != nil {\\n                // Store error for later analysis\\n                errorData := map[string]any{\\n                    &quot;input&quot;: prepResult,\\n                    &quot;error&quot;: err.Error(),\\n                    &quot;time&quot;:  time.Now(),\\n                }\\n                storeError(errorData)\\n                \\n                // Return partial result\\n                return map[string]any{\\n                    &quot;status&quot;: &quot;failed&quot;,\\n                    &quot;error&quot;:  err.Error(),\\n                }, nil  // Don&#x27;t fail the entire batch\\n            }\\n            return result, nil\\n        }),\\n    )\\n    return flyt.NewFlow(node)\\n}\\n\",\"title\":\"Error Recovery\",\"titles\":[\"Batch Flows\"]},{\"href\":\"/advanced/batch-flows#best-practices\",\"html\":\"\\n<ol>\\n<li><strong>Isolate Flows</strong>: Each flow instance should be independent</li>\\n<li><strong>Manage Resources</strong>: Be mindful of resource usage with concurrent flows</li>\\n<li><strong>Handle Failures</strong>: Decide whether one failure should stop the batch</li>\\n<li><strong>Track Progress</strong>: Implement progress tracking for long-running batches</li>\\n<li><strong>Limit Concurrency</strong>: Set reasonable concurrency limits</li>\\n<li><strong>Test Thoroughly</strong>: Test with various batch sizes and failure scenarios</li>\\n</ol>\\n\",\"id\":\"docs/pages/advanced/batch-flows.mdx#best-practices\",\"isPage\":false,\"text\":\"\\n\\nIsolate Flows: Each flow instance should be independent\\nManage Resources: Be mindful of resource usage with concurrent flows\\nHandle Failures: Decide whether one failure should stop the batch\\nTrack Progress: Implement progress tracking for long-running batches\\nLimit Concurrency: Set reasonable concurrency limits\\nTest Thoroughly: Test with various batch sizes and failure scenarios\\n\\n\",\"title\":\"Best Practices\",\"titles\":[\"Batch Flows\"]},{\"href\":\"/advanced/batch-flows#next-steps\",\"html\":\"\\n<ul>\\n<li><a href=\\\"/advanced/batch-processing\\\">Batch Processing</a> - Process items within a single node</li>\\n<li><a href=\\\"/advanced/nested-flows\\\">Nested Flows</a> - Compose complex workflows</li>\\n<li><a href=\\\"/advanced/worker-pool\\\">Worker Pool</a> - Fine-grained concurrency control</li>\\n</ul>\",\"id\":\"docs/pages/advanced/batch-flows.mdx#next-steps\",\"isPage\":false,\"text\":\"\\n\\nBatch Processing - Process items within a single node\\nNested Flows - Compose complex workflows\\nWorker Pool - Fine-grained concurrency control\\n\",\"title\":\"Next Steps\",\"titles\":[\"Batch Flows\"]}]}}"
