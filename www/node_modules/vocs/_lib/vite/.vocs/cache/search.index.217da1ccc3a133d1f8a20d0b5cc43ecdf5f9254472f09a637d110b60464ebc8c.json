"{\"value\":{\"mdx\":\"---\\nlayout: landing\\n---\\n\\nimport { HomePage } from 'vocs/components'\\n\\n<HomePage.Root>\\n  <HomePage.Logo />\\n  <HomePage.Tagline>A minimalist workflow framework for Go</HomePage.Tagline>\\n  <HomePage.InstallPackage name=\\\"github.com/mark3labs/flyt\\\" type=\\\"go-get\\\" />\\n  <HomePage.Description>\\n    Build powerful, composable workflows with zero dependencies. Flyt (Norwegian for \\\"flow\\\", pronounced \\\"fleet\\\") \\n    provides a simple yet flexible graph-based abstraction for orchestrating tasks in Go.\\n  </HomePage.Description>\\n  <HomePage.Buttons>\\n    <HomePage.Button href=\\\"/getting-started/quick-start\\\" variant=\\\"accent\\\">Get Started</HomePage.Button>\\n    <HomePage.Button href=\\\"https://github.com/mark3labs/flyt\\\">GitHub</HomePage.Button>\\n  </HomePage.Buttons>\\n</HomePage.Root>\\n\\n## Features\\n\\n- 🚀 **Zero Dependencies** - Pure Go standard library\\n- 🔄 **Composable Workflows** - Build complex flows from simple nodes\\n- 🎯 **Action-Based Routing** - Dynamic flow control based on results\\n- 🔁 **Built-in Retry Logic** - Handle transient failures gracefully\\n- 🔒 **Thread-Safe** - Concurrent batch processing with shared state\\n- 📦 **Batch Processing** - Process collections efficiently\\n- 🎨 **Flexible Design** - Extend with custom node types\\n\\n## Quick Example\\n\\n```go\\npackage main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"github.com/mark3labs/flyt\\\"\\n)\\n\\nfunc main() {\\n    // Create a simple node\\n    node := flyt.NewNode(\\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\\n            fmt.Println(\\\"Hello, Flyt!\\\")\\n            return \\\"done\\\", nil\\n        }),\\n    )\\n\\n    // Run it\\n    ctx := context.Background()\\n    shared := flyt.NewSharedStore()\\n    \\n    action, err := flyt.Run(ctx, node, shared)\\n    if err != nil {\\n        panic(err)\\n    }\\n    fmt.Printf(\\\"Completed with action: %s\\\\n\\\", action)\\n}\\n```\\n\\n## Why Flyt?\\n\\nFlyt was inspired by [Pocket Flow](https://github.com/The-Pocket/PocketFlow) and designed to provide a simple, \\ndependency-free solution for workflow orchestration in Go. Whether you're building data pipelines, \\nAPI orchestration, or complex business logic, Flyt gives you the tools to create maintainable, \\ntestable workflows.\\n\\n### Perfect for:\\n\\n- **Data Processing Pipelines** - ETL workflows with error handling\\n- **API Orchestration** - Chain multiple API calls with retries\\n- **Business Logic Flows** - Complex decision trees and state machines\\n- **Batch Operations** - Process large datasets concurrently\\n- **AI/LLM Workflows** - Build agent systems and conversation flows\",\"document\":[]}}"
