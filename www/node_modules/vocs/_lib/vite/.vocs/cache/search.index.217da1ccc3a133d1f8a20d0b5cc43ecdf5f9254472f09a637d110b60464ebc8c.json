"{\"value\":{\"mdx\":\"---\\nlayout: landing\\n---\\n\\nimport { HomePage } from 'vocs/components'\\n\\n<HomePage.Root>\\n  <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginBottom: '1rem' }}>\\n    <img src=\\\"/flyt-logo.png\\\" alt=\\\"Flyt Logo\\\" style={{ width: '280px', height: 'auto' }} />\\n    <p style={{ fontStyle: 'italic', color: 'var(--vocs-color_text2)', marginTop: '0.5rem', fontSize: '0.95rem' }}>\\n      Norwegian for \\\"flow\\\" ‚Ä¢ Pronounced \\\"fleet\\\"\\n    </p>\\n  </div>\\n  <HomePage.Tagline>A minimalist workflow framework for Go</HomePage.Tagline>\\n  \\n  ```bash\\n  go get github.com/mark3labs/flyt\\n  ```\\n  \\n  <HomePage.Description>\\n    Build powerful, composable workflows with zero dependencies. Flyt provides a simple yet flexible \\n    graph-based abstraction for orchestrating tasks in Go.\\n  </HomePage.Description>\\n  \\n  <HomePage.Buttons>\\n    <HomePage.Button href=\\\"/getting-started/quick-start\\\" variant=\\\"accent\\\">Get Started</HomePage.Button>\\n    <HomePage.Button href=\\\"https://github.com/mark3labs/flyt\\\">GitHub</HomePage.Button>\\n  </HomePage.Buttons>\\n</HomePage.Root>\\n\\n<div style={{ marginTop: '4rem' }}>\\n\\n## Features\\n\\n<div style={{ \\n  display: 'grid', \\n  gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))',\\n  gap: '1.5rem',\\n  marginTop: '2rem'\\n}}>\\n  <div>\\n    <h3 style={{ fontSize: '1.1rem', marginBottom: '0.5rem' }}>üöÄ Zero Dependencies</h3>\\n    <p style={{ color: 'var(--vocs-color_text2)', fontSize: '0.95rem' }}>Pure Go standard library - no external dependencies required</p>\\n  </div>\\n  <div>\\n    <h3 style={{ fontSize: '1.1rem', marginBottom: '0.5rem' }}>üîÑ Composable Workflows</h3>\\n    <p style={{ color: 'var(--vocs-color_text2)', fontSize: '0.95rem' }}>Build complex flows from simple, reusable nodes</p>\\n  </div>\\n  <div>\\n    <h3 style={{ fontSize: '1.1rem', marginBottom: '0.5rem' }}>üéØ Action-Based Routing</h3>\\n    <p style={{ color: 'var(--vocs-color_text2)', fontSize: '0.95rem' }}>Dynamic flow control based on runtime results</p>\\n  </div>\\n  <div>\\n    <h3 style={{ fontSize: '1.1rem', marginBottom: '0.5rem' }}>üîÅ Built-in Retry Logic</h3>\\n    <p style={{ color: 'var(--vocs-color_text2)', fontSize: '0.95rem' }}>Handle transient failures with configurable retries</p>\\n  </div>\\n  <div>\\n    <h3 style={{ fontSize: '1.1rem', marginBottom: '0.5rem' }}>üîí Thread-Safe</h3>\\n    <p style={{ color: 'var(--vocs-color_text2)', fontSize: '0.95rem' }}>Concurrent batch processing with safe shared state</p>\\n  </div>\\n  <div>\\n    <h3 style={{ fontSize: '1.1rem', marginBottom: '0.5rem' }}>üì¶ Batch Processing</h3>\\n    <p style={{ color: 'var(--vocs-color_text2)', fontSize: '0.95rem' }}>Process collections efficiently with built-in patterns</p>\\n  </div>\\n</div>\\n\\n</div>\\n\\n<div style={{ marginTop: '3rem' }}>\\n\\n## Quick Example\\n\\n<div style={{ marginTop: '1.5rem' }}>\\n\\n```go\\npackage main\\n\\nimport (\\n    \\\"context\\\"\\n    \\\"fmt\\\"\\n    \\\"github.com/mark3labs/flyt\\\"\\n)\\n\\nfunc main() {\\n    // Create nodes that share data via SharedStore\\n    fetchNode := flyt.NewNode(\\n        flyt.WithExecFunc(func(ctx context.Context, _ any) (any, error) {\\n            fmt.Println(\\\"Fetching data...\\\")\\n            return map[string]int{\\\"value\\\": 42}, nil\\n        }),\\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, _, execResult any) (flyt.Action, error) {\\n            shared.Set(\\\"data\\\", execResult)\\n            return flyt.DefaultAction, nil\\n        }),\\n    )\\n    \\n    processNode := flyt.NewNode(\\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n            data, _ := shared.Get(\\\"data\\\")\\n            return data, nil\\n        }),\\n        flyt.WithExecFunc(func(ctx context.Context, data any) (any, error) {\\n            val := data.(map[string]int)[\\\"value\\\"]\\n            fmt.Printf(\\\"Processing: %d\\\\n\\\", val)\\n            return val * 2, nil\\n        }),\\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, _, execResult any) (flyt.Action, error) {\\n            shared.Set(\\\"result\\\", execResult)\\n            return flyt.DefaultAction, nil\\n        }),\\n    )\\n    \\n    saveNode := flyt.NewNode(\\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\\n            result, _ := shared.Get(\\\"result\\\")\\n            return result, nil\\n        }),\\n        flyt.WithExecFunc(func(ctx context.Context, result any) (any, error) {\\n            fmt.Printf(\\\"Saving result: %d\\\\n\\\", result)\\n            return nil, nil\\n        }),\\n    )\\n    \\n    // Build and run flow\\n    flow := flyt.NewFlow(fetchNode)\\n    flow.Connect(fetchNode, flyt.DefaultAction, processNode)\\n    flow.Connect(processNode, flyt.DefaultAction, saveNode)\\n    \\n    err := flow.Run(context.Background(), flyt.NewSharedStore())\\n    if err != nil {\\n        panic(err)\\n    }\\n}\\n```\\n\\n</div>\\n</div>\\n\\n<div style={{ marginTop: '3rem' }}>\\n\\n## Why Flyt?\\n\\n<p style={{ fontSize: '1.05rem', lineHeight: '1.7', color: 'var(--vocs-color_text2)', marginTop: '1rem' }}>\\nFlyt was inspired by <a href=\\\"https://github.com/The-Pocket/PocketFlow\\\" style={{ color: 'var(--vocs-color_link)' }}>Pocket Flow</a> and \\ndesigned to provide a simple, dependency-free solution for workflow orchestration in Go. Whether you're building \\ndata pipelines, API orchestration, or complex business logic, Flyt gives you the tools to create maintainable, \\ntestable workflows.\\n</p>\\n\\n<h3 style={{ marginTop: '2rem', marginBottom: '1.5rem' }}>Perfect for</h3>\\n\\n<div style={{ \\n  display: 'grid', \\n  gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',\\n  gap: '1rem'\\n}}>\\n  <div style={{ \\n    padding: '1rem',\\n    backgroundColor: 'var(--vocs-color_backgroundDark)',\\n    borderRadius: '6px',\\n    border: '1px solid var(--vocs-color_border)'\\n  }}>\\n    <strong>Data Processing Pipelines</strong>\\n    <p style={{ color: 'var(--vocs-color_text2)', fontSize: '0.9rem', marginTop: '0.5rem' }}>\\n      ETL workflows with built-in error handling\\n    </p>\\n  </div>\\n  <div style={{ \\n    padding: '1rem',\\n    backgroundColor: 'var(--vocs-color_backgroundDark)',\\n    borderRadius: '6px',\\n    border: '1px solid var(--vocs-color_border)'\\n  }}>\\n    <strong>API Orchestration</strong>\\n    <p style={{ color: 'var(--vocs-color_text2)', fontSize: '0.9rem', marginTop: '0.5rem' }}>\\n      Chain multiple API calls with automatic retries\\n    </p>\\n  </div>\\n  <div style={{ \\n    padding: '1rem',\\n    backgroundColor: 'var(--vocs-color_backgroundDark)',\\n    borderRadius: '6px',\\n    border: '1px solid var(--vocs-color_border)'\\n  }}>\\n    <strong>Business Logic Flows</strong>\\n    <p style={{ color: 'var(--vocs-color_text2)', fontSize: '0.9rem', marginTop: '0.5rem' }}>\\n      Complex decision trees and state machines\\n    </p>\\n  </div>\\n  <div style={{ \\n    padding: '1rem',\\n    backgroundColor: 'var(--vocs-color_backgroundDark)',\\n    borderRadius: '6px',\\n    border: '1px solid var(--vocs-color_border)'\\n  }}>\\n    <strong>Batch Operations</strong>\\n    <p style={{ color: 'var(--vocs-color_text2)', fontSize: '0.9rem', marginTop: '0.5rem' }}>\\n      Process large datasets concurrently\\n    </p>\\n  </div>\\n  <div style={{ \\n    padding: '1rem',\\n    backgroundColor: 'var(--vocs-color_backgroundDark)',\\n    borderRadius: '6px',\\n    border: '1px solid var(--vocs-color_border)'\\n  }}>\\n    <strong>AI/LLM Workflows</strong>\\n    <p style={{ color: 'var(--vocs-color_text2)', fontSize: '0.9rem', marginTop: '0.5rem' }}>\\n      Build agent systems and conversation flows\\n    </p>\\n  </div>\\n</div>\\n\\n</div>\",\"document\":[]}}"
