"{\"value\":{\"mdx\":\"# Worker Pool\\n\\nManage concurrent task execution with fine-grained control using the WorkerPool utility.\\n\\n## Basic Worker Pool\\n\\nCreate and use a worker pool:\\n\\n```go\\n// Create a pool with 10 workers\\npool := flyt.NewWorkerPool(10)\\n\\n// Submit tasks\\nfor i := 0; i < 100; i++ {\\n    taskID := i\\n    pool.Submit(func() {\\n        // Process task\\n        result := processTask(taskID)\\n        fmt.Printf(\\\"Task %d completed: %v\\\\n\\\", taskID, result)\\n    })\\n}\\n\\n// Wait for all tasks to complete\\npool.Wait()\\n\\n// Clean up\\npool.Close()\\n```\\n\\n## Worker Pool with Results\\n\\nCollect results from worker pool:\\n\\n```go\\ntype ResultCollector struct {\\n    mu      sync.Mutex\\n    results []Result\\n}\\n\\nfunc processWithWorkerPool(items []Item) []Result {\\n    pool := flyt.NewWorkerPool(5)\\n    collector := &ResultCollector{\\n        results: make([]Result, len(items)),\\n    }\\n    \\n    for i, item := range items {\\n        index := i\\n        data := item\\n        \\n        pool.Submit(func() {\\n            result := processItem(data)\\n            \\n            collector.mu.Lock()\\n            collector.results[index] = result\\n            collector.mu.Unlock()\\n        })\\n    }\\n    \\n    pool.Wait()\\n    pool.Close()\\n    \\n    return collector.results\\n}\\n```\\n\\n## Dynamic Worker Scaling\\n\\nAdjust worker count based on load:\\n\\n```go\\ntype DynamicWorkerPool struct {\\n    minWorkers int\\n    maxWorkers int\\n    pool       *flyt.WorkerPool\\n    load       int32\\n    mu         sync.RWMutex\\n}\\n\\nfunc NewDynamicWorkerPool(min, max int) *DynamicWorkerPool {\\n    return &DynamicWorkerPool{\\n        minWorkers: min,\\n        maxWorkers: max,\\n        pool:       flyt.NewWorkerPool(min),\\n    }\\n}\\n\\nfunc (p *DynamicWorkerPool) Submit(task func()) {\\n    currentLoad := atomic.AddInt32(&p.load, 1)\\n    \\n    // Scale up if needed\\n    if currentLoad > int32(p.getCurrentWorkers()*2) {\\n        p.scaleUp()\\n    }\\n    \\n    p.pool.Submit(func() {\\n        task()\\n        \\n        newLoad := atomic.AddInt32(&p.load, -1)\\n        \\n        // Scale down if idle\\n        if newLoad < int32(p.getCurrentWorkers()/2) {\\n            p.scaleDown()\\n        }\\n    })\\n}\\n\\nfunc (p *DynamicWorkerPool) scaleUp() {\\n    p.mu.Lock()\\n    defer p.mu.Unlock()\\n    \\n    current := p.getCurrentWorkers()\\n    if current < p.maxWorkers {\\n        // Create new pool with more workers\\n        newPool := flyt.NewWorkerPool(min(current*2, p.maxWorkers))\\n        p.pool.Close()\\n        p.pool = newPool\\n    }\\n}\\n```\\n\\n## Rate-Limited Worker Pool\\n\\nControl processing rate:\\n\\n```go\\nfunc createRateLimitedPool(workers int, rps int) *RateLimitedPool {\\n    limiter := rate.NewLimiter(rate.Limit(rps), 1)\\n    pool := flyt.NewWorkerPool(workers)\\n    \\n    return &RateLimitedPool{\\n        pool:    pool,\\n        limiter: limiter,\\n    }\\n}\\n\\ntype RateLimitedPool struct {\\n    pool    *flyt.WorkerPool\\n    limiter *rate.Limiter\\n}\\n\\nfunc (p *RateLimitedPool) Submit(ctx context.Context, task func()) error {\\n    // Wait for rate limit\\n    if err := p.limiter.Wait(ctx); err != nil {\\n        return err\\n    }\\n    \\n    p.pool.Submit(task)\\n    return nil\\n}\\n```\\n\\n## Priority Queue Worker Pool\\n\\nProcess tasks by priority:\\n\\n```go\\ntype PriorityTask struct {\\n    Priority int\\n    Task     func()\\n    ID       string\\n}\\n\\ntype PriorityWorkerPool struct {\\n    workers int\\n    queue   *PriorityQueue\\n    pool    *flyt.WorkerPool\\n    running bool\\n    mu      sync.Mutex\\n}\\n\\nfunc NewPriorityWorkerPool(workers int) *PriorityWorkerPool {\\n    p := &PriorityWorkerPool{\\n        workers: workers,\\n        queue:   NewPriorityQueue(),\\n        pool:    flyt.NewWorkerPool(workers),\\n        running: true,\\n    }\\n    \\n    // Start dispatcher\\n    go p.dispatch()\\n    \\n    return p\\n}\\n\\nfunc (p *PriorityWorkerPool) Submit(priority int, task func()) {\\n    p.queue.Push(PriorityTask{\\n        Priority: priority,\\n        Task:     task,\\n        ID:       generateID(),\\n    })\\n}\\n\\nfunc (p *PriorityWorkerPool) dispatch() {\\n    for p.running {\\n        task := p.queue.Pop() // Blocks until task available\\n        if task != nil {\\n            p.pool.Submit(task.Task)\\n        }\\n    }\\n}\\n```\\n\\n## Worker Pool with Timeout\\n\\nHandle task timeouts:\\n\\n```go\\nfunc createTimeoutPool(workers int, timeout time.Duration) *TimeoutPool {\\n    return &TimeoutPool{\\n        pool:    flyt.NewWorkerPool(workers),\\n        timeout: timeout,\\n    }\\n}\\n\\ntype TimeoutPool struct {\\n    pool    *flyt.WorkerPool\\n    timeout time.Duration\\n}\\n\\nfunc (p *TimeoutPool) Submit(task func() error) error {\\n    errChan := make(chan error, 1)\\n    \\n    p.pool.Submit(func() {\\n        done := make(chan error, 1)\\n        \\n        go func() {\\n            done <- task()\\n        }()\\n        \\n        select {\\n        case err := <-done:\\n            errChan <- err\\n        case <-time.After(p.timeout):\\n            errChan <- fmt.Errorf(\\\"task timeout after %v\\\", p.timeout)\\n        }\\n    })\\n    \\n    return <-errChan\\n}\\n```\\n\\n## Worker Pool in Nodes\\n\\nUse worker pools within nodes:\\n\\n```go\\ntype ParallelProcessingNode struct {\\n    *flyt.BaseNode\\n    pool *flyt.WorkerPool\\n}\\n\\nfunc NewParallelProcessingNode(workers int) *ParallelProcessingNode {\\n    return &ParallelProcessingNode{\\n        BaseNode: flyt.NewBaseNode(),\\n        pool:     flyt.NewWorkerPool(workers),\\n    }\\n}\\n\\nfunc (n *ParallelProcessingNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    items := prepResult.([]Item)\\n    results := make([]Result, len(items))\\n    errors := make([]error, len(items))\\n    \\n    var wg sync.WaitGroup\\n    \\n    for i, item := range items {\\n        wg.Add(1)\\n        index := i\\n        data := item\\n        \\n        n.pool.Submit(func() {\\n            defer wg.Done()\\n            \\n            result, err := processItem(data)\\n            results[index] = result\\n            errors[index] = err\\n        })\\n    }\\n    \\n    // Wait with context\\n    done := make(chan struct{})\\n    go func() {\\n        wg.Wait()\\n        close(done)\\n    }()\\n    \\n    select {\\n    case <-ctx.Done():\\n        return nil, ctx.Err()\\n    case <-done:\\n        // Check for errors\\n        for _, err := range errors {\\n            if err != nil {\\n                return results, fmt.Errorf(\\\"processing failed: %w\\\", err)\\n            }\\n        }\\n        return results, nil\\n    }\\n}\\n\\nfunc (n *ParallelProcessingNode) Close() {\\n    n.pool.Close()\\n}\\n```\\n\\n## Batch Processing with Worker Pool\\n\\nProcess batches efficiently:\\n\\n```go\\nfunc processBatchesWithPool(items []Item, batchSize int, workers int) []Result {\\n    pool := flyt.NewWorkerPool(workers)\\n    results := make([]Result, len(items))\\n    \\n    // Process in batches\\n    for i := 0; i < len(items); i += batchSize {\\n        end := min(i+batchSize, len(items))\\n        batch := items[i:end]\\n        batchStart := i\\n        \\n        pool.Submit(func() {\\n            batchResults := processBatch(batch)\\n            \\n            // Store results\\n            for j, result := range batchResults {\\n                results[batchStart+j] = result\\n            }\\n        })\\n    }\\n    \\n    pool.Wait()\\n    pool.Close()\\n    \\n    return results\\n}\\n```\\n\\n## Monitoring Worker Pool\\n\\nTrack pool performance:\\n\\n```go\\ntype MonitoredPool struct {\\n    pool      *flyt.WorkerPool\\n    submitted int64\\n    completed int64\\n    failed    int64\\n    totalTime int64\\n}\\n\\nfunc (p *MonitoredPool) Submit(task func() error) {\\n    atomic.AddInt64(&p.submitted, 1)\\n    \\n    p.pool.Submit(func() {\\n        start := time.Now()\\n        \\n        err := task()\\n        \\n        duration := time.Since(start)\\n        atomic.AddInt64(&p.totalTime, int64(duration))\\n        \\n        if err != nil {\\n            atomic.AddInt64(&p.failed, 1)\\n        } else {\\n            atomic.AddInt64(&p.completed, 1)\\n        }\\n    })\\n}\\n\\nfunc (p *MonitoredPool) GetStats() map[string]int64 {\\n    return map[string]int64{\\n        \\\"submitted\\\":     atomic.LoadInt64(&p.submitted),\\n        \\\"completed\\\":     atomic.LoadInt64(&p.completed),\\n        \\\"failed\\\":        atomic.LoadInt64(&p.failed),\\n        \\\"avg_time_ms\\\":   p.getAverageTime(),\\n        \\\"pending\\\":       p.getPendingCount(),\\n    }\\n}\\n```\\n\\n## Circuit Breaker Pool\\n\\nPrevent overload with circuit breaker:\\n\\n```go\\ntype CircuitBreakerPool struct {\\n    pool        *flyt.WorkerPool\\n    failures    int32\\n    threshold   int32\\n    resetTime   time.Duration\\n    lastFailure time.Time\\n    mu          sync.RWMutex\\n}\\n\\nfunc (p *CircuitBreakerPool) Submit(task func() error) error {\\n    if p.isOpen() {\\n        return fmt.Errorf(\\\"circuit breaker open\\\")\\n    }\\n    \\n    p.pool.Submit(func() {\\n        err := task()\\n        \\n        if err != nil {\\n            failures := atomic.AddInt32(&p.failures, 1)\\n            \\n            if failures >= p.threshold {\\n                p.mu.Lock()\\n                p.lastFailure = time.Now()\\n                p.mu.Unlock()\\n            }\\n        } else {\\n            // Reset on success\\n            atomic.StoreInt32(&p.failures, 0)\\n        }\\n    })\\n    \\n    return nil\\n}\\n\\nfunc (p *CircuitBreakerPool) isOpen() bool {\\n    p.mu.RLock()\\n    defer p.mu.RUnlock()\\n    \\n    if atomic.LoadInt32(&p.failures) >= p.threshold {\\n        if time.Since(p.lastFailure) < p.resetTime {\\n            return true\\n        }\\n        // Reset after timeout\\n        atomic.StoreInt32(&p.failures, 0)\\n    }\\n    \\n    return false\\n}\\n```\\n\\n## Best Practices\\n\\n1. **Size Appropriately**: Set worker count based on workload and resources\\n2. **Handle Panics**: Recover from panics in worker goroutines\\n3. **Clean Up**: Always close pools when done\\n4. **Monitor Performance**: Track metrics for optimization\\n5. **Avoid Blocking**: Don't block workers with long waits\\n6. **Test Concurrency**: Test with various worker counts and loads\\n\\n## Next Steps\\n\\n- [Batch Processing](/advanced/batch-processing) - High-level batch operations\\n- [Custom Nodes](/advanced/custom-nodes) - Build nodes with worker pools\\n- [Best Practices](/best-practices) - General guidelines\",\"document\":[{\"href\":\"/advanced/worker-pool#worker-pool\",\"html\":\"</header>\\n<p>Manage concurrent task execution with fine-grained control using the WorkerPool utility.</p>\\n\",\"id\":\"docs/pages/advanced/worker-pool.mdx#worker-pool\",\"isPage\":true,\"text\":\"\\nManage concurrent task execution with fine-grained control using the WorkerPool utility.\\n\",\"title\":\"Worker Pool\",\"titles\":[]},{\"href\":\"/advanced/worker-pool#basic-worker-pool\",\"html\":\"\\n<p>Create and use a worker pool:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Create a pool with 10 workers</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">pool </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">10</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Submit tasks</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 100</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; i</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">++</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    taskID </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Process task</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        result </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processTask</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(taskID)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Printf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;Task </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%d</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\"> completed: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v\\\\n</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, taskID, result)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Wait for all tasks to complete</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Wait</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Clean up</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Close</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/worker-pool.mdx#basic-worker-pool\",\"isPage\":false,\"text\":\"\\nCreate and use a worker pool:\\n// Create a pool with 10 workers\\npool := flyt.NewWorkerPool(10)\\n \\n// Submit tasks\\nfor i := 0; i &lt; 100; i++ {\\n    taskID := i\\n    pool.Submit(func() {\\n        // Process task\\n        result := processTask(taskID)\\n        fmt.Printf(&quot;Task %d completed: %v\\\\n&quot;, taskID, result)\\n    })\\n}\\n \\n// Wait for all tasks to complete\\npool.Wait()\\n \\n// Clean up\\npool.Close()\\n\",\"title\":\"Basic Worker Pool\",\"titles\":[\"Worker Pool\"]},{\"href\":\"/advanced/worker-pool#worker-pool-with-results\",\"html\":\"\\n<p>Collect results from worker pool:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> ResultCollector</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    mu      </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">sync</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Mutex</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    results []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Result</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processWithWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">items</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Item</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Result</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">5</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    collector </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">ResultCollector</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        results: </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Result</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(items)),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i, item </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> range</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> items {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        index </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> item</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            result </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processItem</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(data)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            collector.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Lock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            collector.results[index] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            collector.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Unlock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Wait</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Close</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> collector.results</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/worker-pool.mdx#worker-pool-with-results\",\"isPage\":false,\"text\":\"\\nCollect results from worker pool:\\ntype ResultCollector struct {\\n    mu      sync.Mutex\\n    results []Result\\n}\\n \\nfunc processWithWorkerPool(items []Item) []Result {\\n    pool := flyt.NewWorkerPool(5)\\n    collector := &amp;ResultCollector{\\n        results: make([]Result, len(items)),\\n    }\\n    \\n    for i, item := range items {\\n        index := i\\n        data := item\\n        \\n        pool.Submit(func() {\\n            result := processItem(data)\\n            \\n            collector.mu.Lock()\\n            collector.results[index] = result\\n            collector.mu.Unlock()\\n        })\\n    }\\n    \\n    pool.Wait()\\n    pool.Close()\\n    \\n    return collector.results\\n}\\n\",\"title\":\"Worker Pool with Results\",\"titles\":[\"Worker Pool\"]},{\"href\":\"/advanced/worker-pool#dynamic-worker-scaling\",\"html\":\"\\n<p>Adjust worker count based on load:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> DynamicWorkerPool</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    minWorkers </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    maxWorkers </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool       </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">WorkerPool</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    load       </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int32</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    mu         </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">sync</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">RWMutex</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewDynamicWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">min</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">max</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DynamicWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DynamicWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        minWorkers: min,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        maxWorkers: max,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        pool:       flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(min),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">p </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DynamicWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">task</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    currentLoad </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">AddInt32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.load, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Scale up if needed</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> currentLoad </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&gt;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> int32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(p.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getCurrentWorkers</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">2</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        p.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">scaleUp</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    p.pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">        task</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        newLoad </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">AddInt32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.load, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">-</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Scale down if idle</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> newLoad </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> int32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(p.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getCurrentWorkers</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">/</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">2</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            p.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">scaleDown</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">p </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">DynamicWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">scaleUp</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    p.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Lock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    defer</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Unlock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    current </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getCurrentWorkers</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> current </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p.maxWorkers {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Create new pool with more workers</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        newPool </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">min</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(current</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">2</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, p.maxWorkers))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        p.pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Close</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        p.pool </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> newPool</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/worker-pool.mdx#dynamic-worker-scaling\",\"isPage\":false,\"text\":\"\\nAdjust worker count based on load:\\ntype DynamicWorkerPool struct {\\n    minWorkers int\\n    maxWorkers int\\n    pool       *flyt.WorkerPool\\n    load       int32\\n    mu         sync.RWMutex\\n}\\n \\nfunc NewDynamicWorkerPool(min, max int) *DynamicWorkerPool {\\n    return &amp;DynamicWorkerPool{\\n        minWorkers: min,\\n        maxWorkers: max,\\n        pool:       flyt.NewWorkerPool(min),\\n    }\\n}\\n \\nfunc (p *DynamicWorkerPool) Submit(task func()) {\\n    currentLoad := atomic.AddInt32(&amp;p.load, 1)\\n    \\n    // Scale up if needed\\n    if currentLoad &gt; int32(p.getCurrentWorkers()*2) {\\n        p.scaleUp()\\n    }\\n    \\n    p.pool.Submit(func() {\\n        task()\\n        \\n        newLoad := atomic.AddInt32(&amp;p.load, -1)\\n        \\n        // Scale down if idle\\n        if newLoad &lt; int32(p.getCurrentWorkers()/2) {\\n            p.scaleDown()\\n        }\\n    })\\n}\\n \\nfunc (p *DynamicWorkerPool) scaleUp() {\\n    p.mu.Lock()\\n    defer p.mu.Unlock()\\n    \\n    current := p.getCurrentWorkers()\\n    if current &lt; p.maxWorkers {\\n        // Create new pool with more workers\\n        newPool := flyt.NewWorkerPool(min(current*2, p.maxWorkers))\\n        p.pool.Close()\\n        p.pool = newPool\\n    }\\n}\\n\",\"title\":\"Dynamic Worker Scaling\",\"titles\":[\"Worker Pool\"]},{\"href\":\"/advanced/worker-pool#rate-limited-worker-pool\",\"html\":\"\\n<p>Control processing rate:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createRateLimitedPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">workers</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">rps</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">RateLimitedPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    limiter </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> rate.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewLimiter</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(rate.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Limit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(rps), </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(workers)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">RateLimitedPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        pool:    pool,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        limiter: limiter,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> RateLimitedPool</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool    </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">WorkerPool</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    limiter </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">rate</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Limiter</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">p </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">RateLimitedPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">task</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Wait for rate limit</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p.limiter.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Wait</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(ctx); err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    p.pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(task)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/worker-pool.mdx#rate-limited-worker-pool\",\"isPage\":false,\"text\":\"\\nControl processing rate:\\nfunc createRateLimitedPool(workers int, rps int) *RateLimitedPool {\\n    limiter := rate.NewLimiter(rate.Limit(rps), 1)\\n    pool := flyt.NewWorkerPool(workers)\\n    \\n    return &amp;RateLimitedPool{\\n        pool:    pool,\\n        limiter: limiter,\\n    }\\n}\\n \\ntype RateLimitedPool struct {\\n    pool    *flyt.WorkerPool\\n    limiter *rate.Limiter\\n}\\n \\nfunc (p *RateLimitedPool) Submit(ctx context.Context, task func()) error {\\n    // Wait for rate limit\\n    if err := p.limiter.Wait(ctx); err != nil {\\n        return err\\n    }\\n    \\n    p.pool.Submit(task)\\n    return nil\\n}\\n\",\"title\":\"Rate-Limited Worker Pool\",\"titles\":[\"Worker Pool\"]},{\"href\":\"/advanced/worker-pool#priority-queue-worker-pool\",\"html\":\"\\n<p>Process tasks by priority:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> PriorityTask</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Priority </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    Task     </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    ID       </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> PriorityWorkerPool</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    workers </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    queue   </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">PriorityQueue</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool    </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">WorkerPool</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    running </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">bool</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    mu      </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">sync</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Mutex</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewPriorityWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">workers</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">PriorityWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    p </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">PriorityWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        workers: workers,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        queue:   </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewPriorityQueue</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        pool:    flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(workers),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        running: </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">true</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Start dispatcher</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    go</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">dispatch</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">p </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">PriorityWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">priority</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">task</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    p.queue.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Push</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">PriorityTask</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Priority: priority,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        Task:     task,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        ID:       </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">generateID</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">p </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">PriorityWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">dispatch</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p.running {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        task </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p.queue.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Pop</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">// Blocks until task available</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> task </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            p.pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(task.Task)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/worker-pool.mdx#priority-queue-worker-pool\",\"isPage\":false,\"text\":\"\\nProcess tasks by priority:\\ntype PriorityTask struct {\\n    Priority int\\n    Task     func()\\n    ID       string\\n}\\n \\ntype PriorityWorkerPool struct {\\n    workers int\\n    queue   *PriorityQueue\\n    pool    *flyt.WorkerPool\\n    running bool\\n    mu      sync.Mutex\\n}\\n \\nfunc NewPriorityWorkerPool(workers int) *PriorityWorkerPool {\\n    p := &amp;PriorityWorkerPool{\\n        workers: workers,\\n        queue:   NewPriorityQueue(),\\n        pool:    flyt.NewWorkerPool(workers),\\n        running: true,\\n    }\\n    \\n    // Start dispatcher\\n    go p.dispatch()\\n    \\n    return p\\n}\\n \\nfunc (p *PriorityWorkerPool) Submit(priority int, task func()) {\\n    p.queue.Push(PriorityTask{\\n        Priority: priority,\\n        Task:     task,\\n        ID:       generateID(),\\n    })\\n}\\n \\nfunc (p *PriorityWorkerPool) dispatch() {\\n    for p.running {\\n        task := p.queue.Pop() // Blocks until task available\\n        if task != nil {\\n            p.pool.Submit(task.Task)\\n        }\\n    }\\n}\\n\",\"title\":\"Priority Queue Worker Pool\",\"titles\":[\"Worker Pool\"]},{\"href\":\"/advanced/worker-pool#worker-pool-with-timeout\",\"html\":\"\\n<p>Handle task timeouts:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> createTimeoutPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">workers</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">timeout</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Duration</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">TimeoutPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">TimeoutPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        pool:    flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(workers),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        timeout: timeout,</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> TimeoutPool</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool    </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">WorkerPool</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    timeout </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Duration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">p </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">TimeoutPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">task</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    errChan </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">chan</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    p.pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        done </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">chan</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        go</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            done </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;-</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> task</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        select</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        case</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">done:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            errChan </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        case</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">After</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(p.timeout):</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            errChan </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;task timeout after </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%v</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, p.timeout)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">errChan</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/worker-pool.mdx#worker-pool-with-timeout\",\"isPage\":false,\"text\":\"\\nHandle task timeouts:\\nfunc createTimeoutPool(workers int, timeout time.Duration) *TimeoutPool {\\n    return &amp;TimeoutPool{\\n        pool:    flyt.NewWorkerPool(workers),\\n        timeout: timeout,\\n    }\\n}\\n \\ntype TimeoutPool struct {\\n    pool    *flyt.WorkerPool\\n    timeout time.Duration\\n}\\n \\nfunc (p *TimeoutPool) Submit(task func() error) error {\\n    errChan := make(chan error, 1)\\n    \\n    p.pool.Submit(func() {\\n        done := make(chan error, 1)\\n        \\n        go func() {\\n            done &lt;- task()\\n        }()\\n        \\n        select {\\n        case err := &lt;-done:\\n            errChan &lt;- err\\n        case &lt;-time.After(p.timeout):\\n            errChan &lt;- fmt.Errorf(&quot;task timeout after %v&quot;, p.timeout)\\n        }\\n    })\\n    \\n    return &lt;-errChan\\n}\\n\",\"title\":\"Worker Pool with Timeout\",\"titles\":[\"Worker Pool\"]},{\"href\":\"/advanced/worker-pool#worker-pool-in-nodes\",\"html\":\"\\n<p>Use worker pools within nodes:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> ParallelProcessingNode</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    *</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">BaseNode</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">WorkerPool</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> NewParallelProcessingNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">workers</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">ParallelProcessingNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &amp;</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">ParallelProcessingNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        BaseNode: flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewBaseNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        pool:     flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(workers),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">ParallelProcessingNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Exec</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">ctx</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Context</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">prepResult</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) (</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">any</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    items </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> prepResult.([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Item</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    results </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Result</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(items))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    errors </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([]</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(items))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    var</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> wg </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">sync</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">WaitGroup</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i, item </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> range</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> items {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        wg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Add</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        index </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        data </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> item</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        n.pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            defer</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> wg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Done</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            result, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processItem</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(data)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            results[index] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            errors[index] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Wait with context</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    done </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">chan</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{})</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    go</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        wg.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Wait</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">        close</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(done)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    select</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">ctx.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Done</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">():</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, ctx.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Err</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    case</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> &lt;-</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">done:</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Check for errors</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> _, err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> range</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> errors {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">                return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> results, fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;processing failed: </span><span style=\\\"color:#005CC5;--shiki-dark:#F47067\\\">%w</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, err)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> results, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">n </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">ParallelProcessingNode</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Close</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    n.pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Close</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/worker-pool.mdx#worker-pool-in-nodes\",\"isPage\":false,\"text\":\"\\nUse worker pools within nodes:\\ntype ParallelProcessingNode struct {\\n    *flyt.BaseNode\\n    pool *flyt.WorkerPool\\n}\\n \\nfunc NewParallelProcessingNode(workers int) *ParallelProcessingNode {\\n    return &amp;ParallelProcessingNode{\\n        BaseNode: flyt.NewBaseNode(),\\n        pool:     flyt.NewWorkerPool(workers),\\n    }\\n}\\n \\nfunc (n *ParallelProcessingNode) Exec(ctx context.Context, prepResult any) (any, error) {\\n    items := prepResult.([]Item)\\n    results := make([]Result, len(items))\\n    errors := make([]error, len(items))\\n    \\n    var wg sync.WaitGroup\\n    \\n    for i, item := range items {\\n        wg.Add(1)\\n        index := i\\n        data := item\\n        \\n        n.pool.Submit(func() {\\n            defer wg.Done()\\n            \\n            result, err := processItem(data)\\n            results[index] = result\\n            errors[index] = err\\n        })\\n    }\\n    \\n    // Wait with context\\n    done := make(chan struct{})\\n    go func() {\\n        wg.Wait()\\n        close(done)\\n    }()\\n    \\n    select {\\n    case &lt;-ctx.Done():\\n        return nil, ctx.Err()\\n    case &lt;-done:\\n        // Check for errors\\n        for _, err := range errors {\\n            if err != nil {\\n                return results, fmt.Errorf(&quot;processing failed: %w&quot;, err)\\n            }\\n        }\\n        return results, nil\\n    }\\n}\\n \\nfunc (n *ParallelProcessingNode) Close() {\\n    n.pool.Close()\\n}\\n\",\"title\":\"Worker Pool in Nodes\",\"titles\":[\"Worker Pool\"]},{\"href\":\"/advanced/worker-pool#batch-processing-with-worker-pool\",\"html\":\"\\n<p>Process batches efficiently:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processBatchesWithPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">items</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Item</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">batchSize</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">workers</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> int</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) []</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Result</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> flyt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">NewWorkerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(workers)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    results </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> make</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">([]</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Result</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(items))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">    // Process in batches</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> 0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">; i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(items); i </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> batchSize {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        end </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> min</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(i</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">batchSize, </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">len</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(items))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        batch </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> items[i:end]</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        batchStart </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> i</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            batchResults </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> processBatch</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(batch)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">            // Store results</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            for</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> j, result </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> range</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> batchResults {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                results[batchStart</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">+</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">j] </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> result</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Wait</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Close</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> results</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/worker-pool.mdx#batch-processing-with-worker-pool\",\"isPage\":false,\"text\":\"\\nProcess batches efficiently:\\nfunc processBatchesWithPool(items []Item, batchSize int, workers int) []Result {\\n    pool := flyt.NewWorkerPool(workers)\\n    results := make([]Result, len(items))\\n    \\n    // Process in batches\\n    for i := 0; i &lt; len(items); i += batchSize {\\n        end := min(i+batchSize, len(items))\\n        batch := items[i:end]\\n        batchStart := i\\n        \\n        pool.Submit(func() {\\n            batchResults := processBatch(batch)\\n            \\n            // Store results\\n            for j, result := range batchResults {\\n                results[batchStart+j] = result\\n            }\\n        })\\n    }\\n    \\n    pool.Wait()\\n    pool.Close()\\n    \\n    return results\\n}\\n\",\"title\":\"Batch Processing with Worker Pool\",\"titles\":[\"Worker Pool\"]},{\"href\":\"/advanced/worker-pool#monitoring-worker-pool\",\"html\":\"\\n<p>Track pool performance:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> MonitoredPool</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool      </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">WorkerPool</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    submitted </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int64</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    completed </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int64</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    failed    </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int64</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    totalTime </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int64</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">p </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">MonitoredPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">task</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">AddInt64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.submitted, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    p.pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        start </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> task</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        duration </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Since</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(start)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">AddInt64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.totalTime, </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(duration))</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">AddInt64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.failed, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">else</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">AddInt64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.completed, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">p </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">MonitoredPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">GetStats</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> map</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">[</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">string</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">]</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">{</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;submitted&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:     atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">LoadInt64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.submitted),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;completed&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:     atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">LoadInt64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.completed),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;failed&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:        atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">LoadInt64</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.failed),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;avg_time_ms&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:   p.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getAverageTime</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">        &quot;pending&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">:       p.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">getPendingCount</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(),</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/worker-pool.mdx#monitoring-worker-pool\",\"isPage\":false,\"text\":\"\\nTrack pool performance:\\ntype MonitoredPool struct {\\n    pool      *flyt.WorkerPool\\n    submitted int64\\n    completed int64\\n    failed    int64\\n    totalTime int64\\n}\\n \\nfunc (p *MonitoredPool) Submit(task func() error) {\\n    atomic.AddInt64(&amp;p.submitted, 1)\\n    \\n    p.pool.Submit(func() {\\n        start := time.Now()\\n        \\n        err := task()\\n        \\n        duration := time.Since(start)\\n        atomic.AddInt64(&amp;p.totalTime, int64(duration))\\n        \\n        if err != nil {\\n            atomic.AddInt64(&amp;p.failed, 1)\\n        } else {\\n            atomic.AddInt64(&amp;p.completed, 1)\\n        }\\n    })\\n}\\n \\nfunc (p *MonitoredPool) GetStats() map[string]int64 {\\n    return map[string]int64{\\n        &quot;submitted&quot;:     atomic.LoadInt64(&amp;p.submitted),\\n        &quot;completed&quot;:     atomic.LoadInt64(&amp;p.completed),\\n        &quot;failed&quot;:        atomic.LoadInt64(&amp;p.failed),\\n        &quot;avg_time_ms&quot;:   p.getAverageTime(),\\n        &quot;pending&quot;:       p.getPendingCount(),\\n    }\\n}\\n\",\"title\":\"Monitoring Worker Pool\",\"titles\":[\"Worker Pool\"]},{\"href\":\"/advanced/worker-pool#circuit-breaker-pool\",\"html\":\"\\n<p>Prevent overload with circuit breaker:</p>\\n<pre class=\\\"shiki shiki-themes github-light github-dark-dimmed\\\" style=\\\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\\\" tabindex=\\\"0\\\"><code><span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">type</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\"> CircuitBreakerPool</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> struct</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    pool        </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">flyt</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">WorkerPool</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    failures    </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int32</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    threshold   </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">int32</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    resetTime   </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Duration</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    lastFailure </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">time</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">Time</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    mu          </span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">sync</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">.</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">RWMutex</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">p </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CircuitBreakerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">task</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\"> func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">error</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">isOpen</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        return</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> fmt.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Errorf</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#032F62;--shiki-dark:#96D0FF\\\">&quot;circuit breaker open&quot;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    p.pool.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Submit</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\"> task</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> err </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">!=</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            failures </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">:=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">AddInt32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.failures, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">1</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> failures </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&gt;=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p.threshold {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                p.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Lock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                p.lastFailure </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Now</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">                p.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Unlock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        } </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">else</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">            // Reset on success</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">            atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">StoreInt32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.failures, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    })</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> nil</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span>\\n<span class=\\\"line\\\" data-empty-line=\\\"true\\\"> </span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">func</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> (</span><span style=\\\"color:#E36209;--shiki-dark:#F69D50\\\">p </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">*</span><span style=\\\"color:#6F42C1;--shiki-dark:#F69D50\\\">CircuitBreakerPool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">) </span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">isOpen</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">() </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">bool</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    p.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">RLock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    defer</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p.mu.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">RUnlock</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">()</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">LoadInt32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.failures) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&gt;=</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p.threshold {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">        if</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> time.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">Since</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(p.lastFailure) </span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&lt;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\"> p.resetTime {</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">            return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> true</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#6A737D;--shiki-dark:#768390\\\">        // Reset after timeout</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">        atomic.</span><span style=\\\"color:#6F42C1;--shiki-dark:#DCBDFB\\\">StoreInt32</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">(</span><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">&amp;</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">p.failures, </span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\">0</span><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">)</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    }</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">    </span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#D73A49;--shiki-dark:#F47067\\\">    return</span><span style=\\\"color:#005CC5;--shiki-dark:#6CB6FF\\\"> false</span></span>\\n<span class=\\\"line\\\"><span style=\\\"color:#24292E;--shiki-dark:#ADBAC7\\\">}</span></span></code></pre>\\n\",\"id\":\"docs/pages/advanced/worker-pool.mdx#circuit-breaker-pool\",\"isPage\":false,\"text\":\"\\nPrevent overload with circuit breaker:\\ntype CircuitBreakerPool struct {\\n    pool        *flyt.WorkerPool\\n    failures    int32\\n    threshold   int32\\n    resetTime   time.Duration\\n    lastFailure time.Time\\n    mu          sync.RWMutex\\n}\\n \\nfunc (p *CircuitBreakerPool) Submit(task func() error) error {\\n    if p.isOpen() {\\n        return fmt.Errorf(&quot;circuit breaker open&quot;)\\n    }\\n    \\n    p.pool.Submit(func() {\\n        err := task()\\n        \\n        if err != nil {\\n            failures := atomic.AddInt32(&amp;p.failures, 1)\\n            \\n            if failures &gt;= p.threshold {\\n                p.mu.Lock()\\n                p.lastFailure = time.Now()\\n                p.mu.Unlock()\\n            }\\n        } else {\\n            // Reset on success\\n            atomic.StoreInt32(&amp;p.failures, 0)\\n        }\\n    })\\n    \\n    return nil\\n}\\n \\nfunc (p *CircuitBreakerPool) isOpen() bool {\\n    p.mu.RLock()\\n    defer p.mu.RUnlock()\\n    \\n    if atomic.LoadInt32(&amp;p.failures) &gt;= p.threshold {\\n        if time.Since(p.lastFailure) &lt; p.resetTime {\\n            return true\\n        }\\n        // Reset after timeout\\n        atomic.StoreInt32(&amp;p.failures, 0)\\n    }\\n    \\n    return false\\n}\\n\",\"title\":\"Circuit Breaker Pool\",\"titles\":[\"Worker Pool\"]},{\"href\":\"/advanced/worker-pool#best-practices\",\"html\":\"\\n<ol>\\n<li><strong>Size Appropriately</strong>: Set worker count based on workload and resources</li>\\n<li><strong>Handle Panics</strong>: Recover from panics in worker goroutines</li>\\n<li><strong>Clean Up</strong>: Always close pools when done</li>\\n<li><strong>Monitor Performance</strong>: Track metrics for optimization</li>\\n<li><strong>Avoid Blocking</strong>: Don&#x27;t block workers with long waits</li>\\n<li><strong>Test Concurrency</strong>: Test with various worker counts and loads</li>\\n</ol>\\n\",\"id\":\"docs/pages/advanced/worker-pool.mdx#best-practices\",\"isPage\":false,\"text\":\"\\n\\nSize Appropriately: Set worker count based on workload and resources\\nHandle Panics: Recover from panics in worker goroutines\\nClean Up: Always close pools when done\\nMonitor Performance: Track metrics for optimization\\nAvoid Blocking: Don&#x27;t block workers with long waits\\nTest Concurrency: Test with various worker counts and loads\\n\\n\",\"title\":\"Best Practices\",\"titles\":[\"Worker Pool\"]},{\"href\":\"/advanced/worker-pool#next-steps\",\"html\":\"\\n<ul>\\n<li><a href=\\\"/advanced/batch-processing\\\">Batch Processing</a> - High-level batch operations</li>\\n<li><a href=\\\"/advanced/custom-nodes\\\">Custom Nodes</a> - Build nodes with worker pools</li>\\n<li><a href=\\\"/best-practices\\\">Best Practices</a> - General guidelines</li>\\n</ul>\",\"id\":\"docs/pages/advanced/worker-pool.mdx#next-steps\",\"isPage\":false,\"text\":\"\\n\\nBatch Processing - High-level batch operations\\nCustom Nodes - Build nodes with worker pools\\nBest Practices - General guidelines\\n\",\"title\":\"Next Steps\",\"titles\":[\"Worker Pool\"]}]}}"
