import * as runtime from "react/jsx-runtime";
import { jsx, jsxs, Fragment as Fragment$1 } from "react/jsx-runtime";
import { Link as Link$2, useLocation, useNavigate, useMatch, matchPath, ScrollRestoration, StaticRouter, Routes, Route, createStaticHandler, createStaticRouter, StaticRouterProvider } from "react-router";
import { existsSync, readFileSync } from "node:fs";
import { resolve } from "node:path";
import toml from "toml";
import { loadConfigFromFile } from "vite";
import React, { createContext, useContext, useState, useEffect, forwardRef, useMemo, Fragment, useCallback, useRef, cloneElement } from "react";
import clsx$1, { clsx } from "clsx";
import { assignInlineVars } from "@vanilla-extract/dynamic";
import { useInView } from "react-intersection-observer";
import { runSync } from "@mdx-js/mdx";
import { Cross1Icon, ArrowLeftIcon, MagnifyingGlassIcon, ListBulletIcon, FileIcon, ChevronRightIcon, Pencil2Icon } from "@radix-ui/react-icons";
import * as Dialog from "@radix-ui/react-dialog";
import MiniSearch from "minisearch";
import * as Label from "@radix-ui/react-label";
import Mark from "mark.js";
import * as NavigationMenu from "@radix-ui/react-navigation-menu";
import * as Accordion from "@radix-ui/react-accordion";
import { DropdownMenu } from "radix-ui";
import * as Popover_ from "@radix-ui/react-popover";
import { MDXProvider } from "@mdx-js/react";
import * as Tabs from "@radix-ui/react-tabs";
import { useFloating, arrow, offset, shift, useHover, safePolygon, useInteractions, FloatingArrow } from "@floating-ui/react";
async function defineConfig({ aiCta = true, blogDir = "./pages/blog", cacheDir, head, ogImageUrl, rootDir = "docs", title: title2 = "Docs", titleTemplate = `%s – ${title2}`, ...config2 }) {
  const basePath = parseBasePath(config2.basePath);
  return {
    aiCta,
    blogDir,
    cacheDir,
    head,
    ogImageUrl,
    rootDir,
    title: title2,
    titleTemplate,
    ...config2,
    basePath,
    banner: await parseBanner(config2.banner ?? ""),
    font: parseFont(config2.font ?? {}),
    iconUrl: parseImageUrl(config2.iconUrl, {
      basePath
    }),
    logoUrl: parseImageUrl(config2.logoUrl, {
      basePath
    }),
    markdown: parseMarkdown(config2.markdown ?? {}),
    socials: parseSocials(config2.socials ?? []),
    topNav: parseTopNav(config2.topNav ?? []),
    theme: await parseTheme(config2.theme ?? {}),
    vite: parseViteConfig(config2.vite, {
      basePath
    })
  };
}
const getDefaultConfig = async () => await defineConfig({});
function parseBasePath(basePath_) {
  let basePath = basePath_;
  if (!basePath)
    return "";
  if (!basePath.startsWith("/"))
    basePath = `/${basePath}`;
  if (basePath.endsWith("/"))
    basePath = basePath.slice(0, -1);
  return basePath;
}
async function parseBanner(banner) {
  if (!banner)
    return void 0;
  const bannerContent = (() => {
    if (typeof banner === "string")
      return banner;
    if (typeof banner === "object" && "content" in banner)
      return banner.content;
    return void 0;
  })();
  const content2 = await (async () => {
    if (typeof bannerContent !== "string")
      return bannerContent;
    const { compile } = await import("@mdx-js/mdx");
    const remarkGfm = (await import("remark-gfm")).default;
    return String(await compile(bannerContent, {
      outputFormat: "function-body",
      remarkPlugins: [remarkGfm]
    }));
  })();
  if (!content2)
    return void 0;
  const textColor = await (async () => {
    if (typeof banner === "string")
      return void 0;
    if (typeof banner === "object") {
      if ("textColor" in banner)
        return banner.textColor;
      if ("backgroundColor" in banner && banner.backgroundColor) {
        const chroma = (await import("chroma-js")).default;
        return chroma.contrast(banner.backgroundColor, "white") < 4.5 ? "black" : "white";
      }
    }
    return void 0;
  })();
  return {
    height: "32px",
    ...typeof banner === "object" ? banner : {},
    content: content2,
    textColor
  };
}
function parseFont(font) {
  if ("google" in font)
    return { default: font };
  return font;
}
function parseImageUrl(imageUrl, { basePath }) {
  if (!imageUrl)
    return;
  if (process.env.NODE_ENV === "development")
    return imageUrl;
  if (typeof imageUrl === "string") {
    if (imageUrl.startsWith("http"))
      return imageUrl;
    return `${basePath}${imageUrl}`;
  }
  return {
    dark: imageUrl.dark.startsWith("http") ? imageUrl.dark : `${basePath}${imageUrl.dark}`,
    light: imageUrl.light.startsWith("http") ? imageUrl.light : `${basePath}${imageUrl.light}`
  };
}
function parseMarkdown(markdown) {
  return {
    ...markdown,
    code: {
      themes: {
        dark: "github-dark-dimmed",
        light: "github-light"
      },
      ...markdown.code
    }
  };
}
const socialsMeta = {
  discord: { label: "Discord", type: "discord" },
  github: { label: "GitHub", type: "github" },
  telegram: { label: "Telegram", type: "telegram" },
  warpcast: { label: "Warpcast", type: "warpcast" },
  x: { label: "X (Twitter)", type: "x" }
};
function parseSocials(socials) {
  return socials.map((social) => {
    return {
      icon: social.icon,
      link: social.link,
      ...socialsMeta[social.icon]
    };
  });
}
let id = 0;
function parseTopNav(topNav) {
  const parsedTopNav = [];
  for (const item2 of topNav) {
    parsedTopNav.push({
      ...item2,
      id: id++,
      items: item2.items ? parseTopNav(item2.items) : []
    });
  }
  return parsedTopNav;
}
async function parseTheme(theme) {
  const chroma = (await import("chroma-js")).default;
  const accentColor = (() => {
    if (!theme.accentColor)
      return theme.accentColor;
    if (typeof theme.accentColor === "object" && !Object.keys(theme.accentColor).includes("light") && !Object.keys(theme.accentColor).includes("dark"))
      return theme.accentColor;
    const accentColor2 = theme.accentColor;
    const accentColorLight = typeof accentColor2 === "object" ? accentColor2.light : accentColor2;
    const accentColorDark = typeof accentColor2 === "object" ? accentColor2.dark : accentColor2;
    return {
      backgroundAccent: {
        dark: accentColorDark,
        light: accentColorLight
      },
      backgroundAccentHover: {
        dark: chroma(accentColorDark).darken(0.25).hex(),
        light: chroma(accentColorLight).darken(0.25).hex()
      },
      backgroundAccentText: {
        dark: chroma.contrast(accentColorDark, "white") < 4.5 ? "black" : "white",
        light: chroma.contrast(accentColorLight, "white") < 4.5 ? "black" : "white"
      },
      borderAccent: {
        dark: chroma(accentColorDark).brighten(0.5).hex(),
        light: chroma(accentColorLight).darken(0.25).hex()
      },
      textAccent: {
        dark: accentColorDark,
        light: accentColorLight
      },
      textAccentHover: {
        dark: chroma(accentColorDark).darken(0.5).hex(),
        light: chroma(accentColorLight).darken(0.5).hex()
      }
    };
  })();
  return {
    ...theme,
    accentColor
  };
}
function parseViteConfig(viteConfig, { basePath }) {
  return {
    ...viteConfig,
    ...basePath ? { base: basePath } : {}
  };
}
const moduleExtensions = ["js", "jsx", "ts", "tsx", "mjs", "mts"];
const staticExtensions = ["toml", "json"];
const extensions = [...moduleExtensions, ...staticExtensions];
const defaultConfigPaths = [".vocs/config", "vocs.config", "Vocs"];
async function resolveVocsConfig(parameters = {}) {
  const { command = "serve", mode = "development" } = parameters;
  const [configPath, ext] = (() => {
    for (const ext2 of extensions) {
      if (parameters.configPath)
        return parameters.configPath;
      for (const filePath of defaultConfigPaths)
        if (existsSync(resolve(process.cwd(), `${filePath}.${ext2}`)))
          return [`${filePath}.${ext2}`, ext2];
    }
    return [void 0, void 0];
  })();
  const result2 = await (async () => {
    if (!ext)
      return;
    if (moduleExtensions.includes(ext))
      return await loadConfigFromFile({ command, mode }, configPath);
    if (staticExtensions.includes(ext)) {
      const file = readFileSync(configPath, "utf8");
      const rawConfig = (() => {
        if (ext === "toml")
          return camelCaseKeys(toml.parse(file));
        if (ext === "json")
          return JSON.parse(file);
        return;
      })();
      const config3 = await defineConfig(rawConfig);
      return config3 ? { config: config3 } : void 0;
    }
    return;
  })();
  const config2 = result2 ? result2.config : await getDefaultConfig();
  return {
    config: config2,
    configPath
  };
}
function camelCaseKeys(obj) {
  if (typeof obj !== "object")
    return obj;
  if (Array.isArray(obj))
    return obj.map(camelCaseKeys);
  return Object.fromEntries(Object.entries(obj).map(([key, value]) => [
    key.replace(/[-_](.)/g, (_, c) => c.toUpperCase()),
    camelCaseKeys(value)
  ]));
}
function deserializeFunctions(value) {
  if (Array.isArray(value)) {
    return value.map(deserializeFunctions);
  } else if (typeof value === "object" && value !== null) {
    return Object.keys(value).reduce((acc, key) => {
      acc[key] = deserializeFunctions(value[key]);
      return acc;
    }, {});
  } else if (typeof value === "string" && value.includes("_vocs-fn_")) {
    return new Function(`return ${value.slice(9)}`)();
  } else {
    return value;
  }
}
const config = deserializeFunctions({ "aiCta": true, "blogDir": "./pages/blog", "rootDir": "docs", "title": "Flyt", "titleTemplate": "%s – Flyt", "description": "A minimalist workflow framework for Go with zero dependencies", "logoUrl": "/flyt-logo.png", "sidebar": [{ "text": "Introduction", "link": "/" }, { "text": "Getting Started", "items": [{ "text": "Installation", "link": "/getting-started/installation" }, { "text": "Quick Start", "link": "/getting-started/quick-start" }, { "text": "Project Template", "link": "/getting-started/template" }] }, { "text": "Core Concepts", "items": [{ "text": "Nodes", "link": "/concepts/nodes" }, { "text": "Actions", "link": "/concepts/actions" }, { "text": "Flows", "link": "/concepts/flows" }, { "text": "Shared Store", "link": "/concepts/shared-store" }] }, { "text": "Patterns", "items": [{ "text": "Configuration via Closures", "link": "/patterns/closures" }, { "text": "Error Handling & Retries", "link": "/patterns/error-handling" }, { "text": "Fallback on Failure", "link": "/patterns/fallback" }, { "text": "Conditional Branching", "link": "/patterns/branching" }] }, { "text": "Advanced", "items": [{ "text": "Custom Node Types", "link": "/advanced/custom-nodes" }, { "text": "Batch Processing", "link": "/advanced/batch-processing" }, { "text": "Batch Flows", "link": "/advanced/batch-flows" }, { "text": "Nested Flows", "link": "/advanced/nested-flows" }, { "text": "Flow as Node", "link": "/advanced/flow-as-node" }, { "text": "Worker Pool", "link": "/advanced/worker-pool" }, { "text": "Utilities", "link": "/advanced/utilities" }] }, { "text": "Examples", "items": [{ "text": "Agent", "link": "https://github.com/mark3labs/flyt/tree/main/cookbook/agent" }, { "text": "Chat", "link": "https://github.com/mark3labs/flyt/tree/main/cookbook/chat" }, { "text": "LLM Streaming", "link": "https://github.com/mark3labs/flyt/tree/main/cookbook/llm-streaming" }, { "text": "MCP", "link": "https://github.com/mark3labs/flyt/tree/main/cookbook/mcp" }, { "text": "Summarize", "link": "https://github.com/mark3labs/flyt/tree/main/cookbook/summarize" }, { "text": "Tracing", "link": "https://github.com/mark3labs/flyt/tree/main/cookbook/tracing" }] }, { "text": "Best Practices", "link": "/best-practices" }], "socials": [{ "icon": "github", "link": "https://github.com/mark3labs/flyt", "label": "GitHub", "type": "github" }], "basePath": "", "font": {}, "markdown": { "code": { "themes": { "dark": "github-dark-dimmed", "light": "github-light" } } }, "topNav": [], "theme": {}, "vite": {} });
const ConfigContext = createContext(config);
function getConfig() {
  return config;
}
function ConfigProvider({ children, config: initialConfig }) {
  const [config2, setConfig] = useState(() => {
    if (initialConfig)
      return initialConfig;
    return getConfig();
  });
  useEffect(() => {
  }, []);
  useEffect(() => {
  }, [config2]);
  return jsx(ConfigContext.Provider, { value: config2, children });
}
function useConfig() {
  return useContext(ConfigContext);
}
const routes$1 = [{ lazy: () => import("./assets/best-practices-BFXRBBXU.js"), path: "/best-practices", type: "mdx", filePath: "best-practices.mdx", content: "%23%20Best%20Practices%0A%0AFollow%20these%20guidelines%20to%20build%20robust%2C%20maintainable%20Flyt%20workflows.%0A%0A%23%23%20Node%20Design%0A%0A%23%23%23%20Single%20Responsibility%0A%0AEach%20node%20should%20do%20one%20thing%20well%3A%0A%0A%60%60%60go%0A%2F%2F%20%E2%9D%8C%20Bad%3A%20Node%20doing%20too%20much%0Anode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Fetch%20data%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20fetchFromAPI()%0A%20%20%20%20%20%20%20%20%2F%2F%20Validate%0A%20%20%20%20%20%20%20%20if%20!isValid(data)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20errors.New(%22invalid%22)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20Transform%0A%20%20%20%20%20%20%20%20transformed%20%3A%3D%20transform(data)%0A%20%20%20%20%20%20%20%20%2F%2F%20Save%0A%20%20%20%20%20%20%20%20saveToDatabase(transformed)%0A%20%20%20%20%20%20%20%20return%20transformed%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0A%2F%2F%20%E2%9C%85%20Good%3A%20Separate%20concerns%0AfetchNode%20%3A%3D%20createFetchNode()%0AvalidateNode%20%3A%3D%20createValidateNode()%0AtransformNode%20%3A%3D%20createTransformNode()%0AsaveNode%20%3A%3D%20createSaveNode()%0A%0Aflow%20%3A%3D%20flyt.NewFlow(fetchNode)%0Aflow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20validateNode)%0Aflow.Connect(validateNode%2C%20%22valid%22%2C%20transformNode)%0Aflow.Connect(transformNode%2C%20flyt.DefaultAction%2C%20saveNode)%0A%60%60%60%0A%0A%23%23%23%20Idempotency%0A%0ADesign%20nodes%20to%20be%20safely%20retryable%3A%0A%0A%60%60%60go%0A%2F%2F%20%E2%9C%85%20Good%3A%20Idempotent%20operation%0Afunc%20(n%20*SaveNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20data%20%3A%3D%20prepResult.(Record)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Use%20upsert%20instead%20of%20insert%0A%20%20%20%20_%2C%20err%20%3A%3D%20db.Exec(%60%0A%20%20%20%20%20%20%20%20INSERT%20INTO%20records%20(id%2C%20data)%20VALUES%20(%3F%2C%20%3F)%0A%20%20%20%20%20%20%20%20ON%20CONFLICT%20(id)%20DO%20UPDATE%20SET%20data%20%3D%20%3F%0A%20%20%20%20%60%2C%20data.ID%2C%20data.Data%2C%20data.Data)%0A%20%20%20%20%0A%20%20%20%20return%20data.ID%2C%20err%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Error%20Handling%0A%0AReturn%20clear%2C%20actionable%20errors%3A%0A%0A%60%60%60go%0A%2F%2F%20%E2%9D%8C%20Bad%3A%20Generic%20error%0Areturn%20nil%2C%20errors.New(%22failed%22)%0A%0A%2F%2F%20%E2%9C%85%20Good%3A%20Descriptive%20error%0Areturn%20nil%2C%20fmt.Errorf(%22failed%20to%20fetch%20user%20%25d%3A%20%25w%22%2C%20userID%2C%20err)%0A%60%60%60%0A%0A%23%23%20Flow%20Design%0A%0A%23%23%23%20Modular%20Flows%0A%0ACreate%20reusable%20sub-flows%3A%0A%0A%60%60%60go%0A%2F%2F%20Reusable%20validation%20flow%0Afunc%20createValidationFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20schemaCheck%20%3A%3D%20createSchemaValidator()%0A%20%20%20%20businessRules%20%3A%3D%20createBusinessValidator()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(schemaCheck)%0A%20%20%20%20flow.Connect(schemaCheck%2C%20%22valid%22%2C%20businessRules)%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Use%20in%20multiple%20places%0AmainFlow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20createValidationFlow())%0AapiFlow.Connect(parseNode%2C%20flyt.DefaultAction%2C%20createValidationFlow())%0A%60%60%60%0A%0A%23%23%23%20Error%20Boundaries%0A%0ACentralize%20error%20handling%3A%0A%0A%60%60%60go%0Afunc%20createFlowWithErrorHandling()%20*flyt.Flow%20%7B%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20errorHandler%20%3A%3D%20createErrorHandler()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Connect%20all%20error%20paths%20to%20handler%0A%20%20%20%20for%20_%2C%20node%20%3A%3D%20range%20%5B%5Dflyt.Node%7BstartNode%2C%20processNode%2C%20saveNode%7D%20%7B%0A%20%20%20%20%20%20%20%20flow.Connect(node%2C%20%22error%22%2C%20errorHandler)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Context%20Handling%0A%0A%23%23%23%20Respect%20Cancellation%0A%0AAlways%20check%20context%20in%20long-running%20operations%3A%0A%0A%60%60%60go%0Afunc%20(n%20*ProcessNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20items%20%3A%3D%20prepResult.(%5B%5DItem)%0A%20%20%20%20results%20%3A%3D%20%5B%5DResult%7B%7D%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Check%20context%20before%20each%20iteration%0A%20%20%20%20%20%20%20%20select%20%7B%0A%20%20%20%20%20%20%20%20case%20%3C-ctx.Done()%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20ctx.Err()%0A%20%20%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20result%20%3A%3D%20processItem(ctx%2C%20item)%0A%20%20%20%20%20%20%20%20results%20%3D%20append(results%2C%20result)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20results%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Timeout%20Management%0A%0ASet%20appropriate%20timeouts%3A%0A%0A%60%60%60go%0Afunc%20(n%20*APINode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Create%20timeout%20context%0A%20%20%20%20ctx%2C%20cancel%20%3A%3D%20context.WithTimeout(ctx%2C%2030*time.Second)%0A%20%20%20%20defer%20cancel()%0A%20%20%20%20%0A%20%20%20%20return%20callAPI(ctx%2C%20prepResult)%0A%7D%0A%60%60%60%0A%0A%23%23%20Concurrency%20Safety%0A%0A%23%23%23%20Thread-Safe%20Nodes%0A%0AProtect%20shared%20state%20in%20nodes%3A%0A%0A%60%60%60go%0Atype%20CounterNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20mu%20%20%20%20sync.Mutex%0A%20%20%20%20count%20int%0A%7D%0A%0Afunc%20(n%20*CounterNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20n.mu.Lock()%0A%20%20%20%20n.count%2B%2B%0A%20%20%20%20current%20%3A%3D%20n.count%0A%20%20%20%20n.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20return%20current%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Avoid%20Shared%20Node%20Instances%0A%0ACreate%20new%20instances%20for%20concurrent%20use%3A%0A%0A%60%60%60go%0A%2F%2F%20%E2%9D%8C%20Bad%3A%20Sharing%20node%20instance%0Anode%20%3A%3D%20createProcessNode()%0Afor%20i%20%3A%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B%20%7B%0A%20%20%20%20go%20flyt.Run(ctx%2C%20node%2C%20shared)%20%2F%2F%20Race%20condition!%0A%7D%0A%0A%2F%2F%20%E2%9C%85%20Good%3A%20Create%20new%20instances%0Afor%20i%20%3A%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B%20%7B%0A%20%20%20%20go%20flyt.Run(ctx%2C%20createProcessNode()%2C%20shared)%0A%7D%0A%60%60%60%0A%0A%23%23%20Resource%20Management%0A%0A%23%23%23%20Clean%20Up%20Resources%0A%0AUse%20defer%20for%20cleanup%3A%0A%0A%60%60%60go%0Afunc%20(n%20*FileNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20file%2C%20err%20%3A%3D%20os.Open(prepResult.(string))%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20defer%20file.Close()%20%2F%2F%20Always%20cleanup%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Process%20file...%0A%20%20%20%20return%20processFile(file)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Connection%20Pooling%0A%0AReuse%20expensive%20resources%3A%0A%0A%60%60%60go%0Atype%20DatabaseFlow%20struct%20%7B%0A%20%20%20%20db%20*sql.DB%0A%7D%0A%0Afunc%20NewDatabaseFlow(db%20*sql.DB)%20*DatabaseFlow%20%7B%0A%20%20%20%20return%20%26DatabaseFlow%7Bdb%3A%20db%7D%0A%7D%0A%0Afunc%20(f%20*DatabaseFlow)%20CreateNode()%20flyt.Node%20%7B%0A%20%20%20%20return%20%26DatabaseNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20db%3A%20f.db%2C%20%2F%2F%20Reuse%20connection%20pool%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Testing%0A%0A%23%23%23%20Unit%20Test%20Nodes%0A%0ATest%20nodes%20in%20isolation%3A%0A%0A%60%60%60go%0Afunc%20TestProcessNode(t%20*testing.T)%20%7B%0A%20%20%20%20node%20%3A%3D%20createProcessNode()%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Test%20successful%20case%0A%20%20%20%20result%2C%20err%20%3A%3D%20node.Exec(ctx%2C%20%22test%20input%22)%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%20%20%20%20assert.Equal(t%2C%20%22expected%20output%22%2C%20result)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Test%20error%20case%0A%20%20%20%20result%2C%20err%20%3D%20node.Exec(ctx%2C%20nil)%0A%20%20%20%20assert.Error(t%2C%20err)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Integration%20Test%20Flows%0A%0ATest%20complete%20workflows%3A%0A%0A%60%60%60go%0Afunc%20TestCompleteFlow(t%20*testing.T)%20%7B%0A%20%20%20%20flow%20%3A%3D%20createMainFlow()%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20shared.Set(%22input%22%2C%20testData)%0A%20%20%20%20%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%20%20%20%20err%20%3A%3D%20flow.Run(ctx%2C%20shared)%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%20%20%20%20%0A%20%20%20%20result%2C%20ok%20%3A%3D%20shared.Get(%22output%22)%0A%20%20%20%20assert.True(t%2C%20ok)%0A%20%20%20%20assert.Equal(t%2C%20expectedResult%2C%20result)%0A%7D%0A%60%60%60%0A%0A%23%23%20Documentation%0A%0A%23%23%23%20Document%20Node%20Behavior%0A%0A%60%60%60go%0A%2F%2F%20FetchUserNode%20fetches%20user%20data%20from%20the%20API.%0A%2F%2F%20%0A%2F%2F%20Prep%3A%20Reads%20%22user_id%22%20from%20SharedStore%0A%2F%2F%20Exec%3A%20Fetches%20user%20from%20API%2C%20retries%20on%20network%20errors%0A%2F%2F%20Post%3A%20Stores%20user%20data%20in%20%22user_data%22%20key%0A%2F%2F%20Actions%3A%0A%2F%2F%20%20%20-%20%22success%22%3A%20User%20fetched%20successfully%0A%2F%2F%20%20%20-%20%22not_found%22%3A%20User%20does%20not%20exist%0A%2F%2F%20%20%20-%20%22error%22%3A%20Unrecoverable%20error%20occurred%0Atype%20FetchUserNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20apiClient%20*APIClient%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Document%20Flow%20Structure%0A%0A%60%60%60go%0A%2F%2F%20CreateOrderFlow%20processes%20new%20orders%3A%0A%2F%2F%201.%20Validates%20order%20data%0A%2F%2F%202.%20Checks%20inventory%0A%2F%2F%203.%20Processes%20payment%0A%2F%2F%204.%20Creates%20shipment%0A%2F%2F%205.%20Sends%20confirmation%0A%2F%2F%0A%2F%2F%20Required%20SharedStore%20keys%3A%0A%2F%2F%20%20%20-%20%22order_data%22%3A%20OrderData%20struct%0A%2F%2F%20%20%20-%20%22customer_id%22%3A%20string%0A%2F%2F%0A%2F%2F%20Sets%20SharedStore%20keys%3A%0A%2F%2F%20%20%20-%20%22order_id%22%3A%20string%0A%2F%2F%20%20%20-%20%22tracking_number%22%3A%20string%0Afunc%20CreateOrderFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20%2F%2F%20...%0A%7D%0A%60%60%60%0A%0A%23%23%20Performance%0A%0A%23%23%23%20Batch%20Operations%0A%0AProcess%20items%20in%20batches%20when%20possible%3A%0A%0A%60%60%60go%0A%2F%2F%20Instead%20of%20processing%20one%20at%20a%20time%0Afor%20_%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20process(item)%0A%7D%0A%0A%2F%2F%20Process%20in%20batches%0AbatchNode%20%3A%3D%20flyt.NewBatchNode(processFunc%2C%20true)%0Ashared.Set(%22items%22%2C%20items)%0A%60%60%60%0A%0A%23%23%23%20Lazy%20Loading%0A%0ALoad%20data%20only%20when%20needed%3A%0A%0A%60%60%60go%0Afunc%20(n%20*ProcessNode)%20Prep(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Only%20load%20the%20data%20this%20node%20needs%0A%20%20%20%20if%20needsUserData(shared)%20%7B%0A%20%20%20%20%20%20%20%20userData%20%3A%3D%20loadUserData()%0A%20%20%20%20%20%20%20%20return%20userData%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20nil%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Monitoring%0A%0A%23%23%23%20Add%20Observability%0A%0ALog%20important%20events%3A%0A%0A%60%60%60go%0Afunc%20(n%20*ProcessNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20start%20%3A%3D%20time.Now()%0A%20%20%20%20defer%20func()%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22ProcessNode%20took%20%25v%22%2C%20time.Since(start))%0A%20%20%20%20%7D()%0A%20%20%20%20%0A%20%20%20%20result%2C%20err%20%3A%3D%20process(prepResult)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22ProcessNode%20error%3A%20%25v%22%2C%20err)%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20log.Printf(%22ProcessNode%20success%3A%20processed%20%25d%20items%22%2C%20len(result))%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BExamples%5D(https%3A%2F%2Fgithub.com%2Fmark3labs%2Fflyt%2Ftree%2Fmain%2Fcookbook)%20-%20See%20best%20practices%20in%20action%0A-%20%5BAdvanced%20Usage%5D(%2Fadvanced%2Fcustom-nodes)%20-%20Advanced%20patterns%0A-%20%5BCore%20Concepts%5D(%2Fconcepts%2Fnodes)%20-%20Review%20fundamentals", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/best-practices-BFXRBBXU.js"), path: "/best-practices.html", type: "mdx", filePath: "best-practices.mdx", content: "%23%20Best%20Practices%0A%0AFollow%20these%20guidelines%20to%20build%20robust%2C%20maintainable%20Flyt%20workflows.%0A%0A%23%23%20Node%20Design%0A%0A%23%23%23%20Single%20Responsibility%0A%0AEach%20node%20should%20do%20one%20thing%20well%3A%0A%0A%60%60%60go%0A%2F%2F%20%E2%9D%8C%20Bad%3A%20Node%20doing%20too%20much%0Anode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Fetch%20data%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20fetchFromAPI()%0A%20%20%20%20%20%20%20%20%2F%2F%20Validate%0A%20%20%20%20%20%20%20%20if%20!isValid(data)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20errors.New(%22invalid%22)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20Transform%0A%20%20%20%20%20%20%20%20transformed%20%3A%3D%20transform(data)%0A%20%20%20%20%20%20%20%20%2F%2F%20Save%0A%20%20%20%20%20%20%20%20saveToDatabase(transformed)%0A%20%20%20%20%20%20%20%20return%20transformed%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0A%2F%2F%20%E2%9C%85%20Good%3A%20Separate%20concerns%0AfetchNode%20%3A%3D%20createFetchNode()%0AvalidateNode%20%3A%3D%20createValidateNode()%0AtransformNode%20%3A%3D%20createTransformNode()%0AsaveNode%20%3A%3D%20createSaveNode()%0A%0Aflow%20%3A%3D%20flyt.NewFlow(fetchNode)%0Aflow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20validateNode)%0Aflow.Connect(validateNode%2C%20%22valid%22%2C%20transformNode)%0Aflow.Connect(transformNode%2C%20flyt.DefaultAction%2C%20saveNode)%0A%60%60%60%0A%0A%23%23%23%20Idempotency%0A%0ADesign%20nodes%20to%20be%20safely%20retryable%3A%0A%0A%60%60%60go%0A%2F%2F%20%E2%9C%85%20Good%3A%20Idempotent%20operation%0Afunc%20(n%20*SaveNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20data%20%3A%3D%20prepResult.(Record)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Use%20upsert%20instead%20of%20insert%0A%20%20%20%20_%2C%20err%20%3A%3D%20db.Exec(%60%0A%20%20%20%20%20%20%20%20INSERT%20INTO%20records%20(id%2C%20data)%20VALUES%20(%3F%2C%20%3F)%0A%20%20%20%20%20%20%20%20ON%20CONFLICT%20(id)%20DO%20UPDATE%20SET%20data%20%3D%20%3F%0A%20%20%20%20%60%2C%20data.ID%2C%20data.Data%2C%20data.Data)%0A%20%20%20%20%0A%20%20%20%20return%20data.ID%2C%20err%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Error%20Handling%0A%0AReturn%20clear%2C%20actionable%20errors%3A%0A%0A%60%60%60go%0A%2F%2F%20%E2%9D%8C%20Bad%3A%20Generic%20error%0Areturn%20nil%2C%20errors.New(%22failed%22)%0A%0A%2F%2F%20%E2%9C%85%20Good%3A%20Descriptive%20error%0Areturn%20nil%2C%20fmt.Errorf(%22failed%20to%20fetch%20user%20%25d%3A%20%25w%22%2C%20userID%2C%20err)%0A%60%60%60%0A%0A%23%23%20Flow%20Design%0A%0A%23%23%23%20Modular%20Flows%0A%0ACreate%20reusable%20sub-flows%3A%0A%0A%60%60%60go%0A%2F%2F%20Reusable%20validation%20flow%0Afunc%20createValidationFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20schemaCheck%20%3A%3D%20createSchemaValidator()%0A%20%20%20%20businessRules%20%3A%3D%20createBusinessValidator()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(schemaCheck)%0A%20%20%20%20flow.Connect(schemaCheck%2C%20%22valid%22%2C%20businessRules)%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Use%20in%20multiple%20places%0AmainFlow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20createValidationFlow())%0AapiFlow.Connect(parseNode%2C%20flyt.DefaultAction%2C%20createValidationFlow())%0A%60%60%60%0A%0A%23%23%23%20Error%20Boundaries%0A%0ACentralize%20error%20handling%3A%0A%0A%60%60%60go%0Afunc%20createFlowWithErrorHandling()%20*flyt.Flow%20%7B%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20errorHandler%20%3A%3D%20createErrorHandler()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Connect%20all%20error%20paths%20to%20handler%0A%20%20%20%20for%20_%2C%20node%20%3A%3D%20range%20%5B%5Dflyt.Node%7BstartNode%2C%20processNode%2C%20saveNode%7D%20%7B%0A%20%20%20%20%20%20%20%20flow.Connect(node%2C%20%22error%22%2C%20errorHandler)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Context%20Handling%0A%0A%23%23%23%20Respect%20Cancellation%0A%0AAlways%20check%20context%20in%20long-running%20operations%3A%0A%0A%60%60%60go%0Afunc%20(n%20*ProcessNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20items%20%3A%3D%20prepResult.(%5B%5DItem)%0A%20%20%20%20results%20%3A%3D%20%5B%5DResult%7B%7D%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Check%20context%20before%20each%20iteration%0A%20%20%20%20%20%20%20%20select%20%7B%0A%20%20%20%20%20%20%20%20case%20%3C-ctx.Done()%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20ctx.Err()%0A%20%20%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20result%20%3A%3D%20processItem(ctx%2C%20item)%0A%20%20%20%20%20%20%20%20results%20%3D%20append(results%2C%20result)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20results%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Timeout%20Management%0A%0ASet%20appropriate%20timeouts%3A%0A%0A%60%60%60go%0Afunc%20(n%20*APINode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Create%20timeout%20context%0A%20%20%20%20ctx%2C%20cancel%20%3A%3D%20context.WithTimeout(ctx%2C%2030*time.Second)%0A%20%20%20%20defer%20cancel()%0A%20%20%20%20%0A%20%20%20%20return%20callAPI(ctx%2C%20prepResult)%0A%7D%0A%60%60%60%0A%0A%23%23%20Concurrency%20Safety%0A%0A%23%23%23%20Thread-Safe%20Nodes%0A%0AProtect%20shared%20state%20in%20nodes%3A%0A%0A%60%60%60go%0Atype%20CounterNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20mu%20%20%20%20sync.Mutex%0A%20%20%20%20count%20int%0A%7D%0A%0Afunc%20(n%20*CounterNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20n.mu.Lock()%0A%20%20%20%20n.count%2B%2B%0A%20%20%20%20current%20%3A%3D%20n.count%0A%20%20%20%20n.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20return%20current%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Avoid%20Shared%20Node%20Instances%0A%0ACreate%20new%20instances%20for%20concurrent%20use%3A%0A%0A%60%60%60go%0A%2F%2F%20%E2%9D%8C%20Bad%3A%20Sharing%20node%20instance%0Anode%20%3A%3D%20createProcessNode()%0Afor%20i%20%3A%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B%20%7B%0A%20%20%20%20go%20flyt.Run(ctx%2C%20node%2C%20shared)%20%2F%2F%20Race%20condition!%0A%7D%0A%0A%2F%2F%20%E2%9C%85%20Good%3A%20Create%20new%20instances%0Afor%20i%20%3A%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B%20%7B%0A%20%20%20%20go%20flyt.Run(ctx%2C%20createProcessNode()%2C%20shared)%0A%7D%0A%60%60%60%0A%0A%23%23%20Resource%20Management%0A%0A%23%23%23%20Clean%20Up%20Resources%0A%0AUse%20defer%20for%20cleanup%3A%0A%0A%60%60%60go%0Afunc%20(n%20*FileNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20file%2C%20err%20%3A%3D%20os.Open(prepResult.(string))%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20defer%20file.Close()%20%2F%2F%20Always%20cleanup%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Process%20file...%0A%20%20%20%20return%20processFile(file)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Connection%20Pooling%0A%0AReuse%20expensive%20resources%3A%0A%0A%60%60%60go%0Atype%20DatabaseFlow%20struct%20%7B%0A%20%20%20%20db%20*sql.DB%0A%7D%0A%0Afunc%20NewDatabaseFlow(db%20*sql.DB)%20*DatabaseFlow%20%7B%0A%20%20%20%20return%20%26DatabaseFlow%7Bdb%3A%20db%7D%0A%7D%0A%0Afunc%20(f%20*DatabaseFlow)%20CreateNode()%20flyt.Node%20%7B%0A%20%20%20%20return%20%26DatabaseNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20db%3A%20f.db%2C%20%2F%2F%20Reuse%20connection%20pool%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Testing%0A%0A%23%23%23%20Unit%20Test%20Nodes%0A%0ATest%20nodes%20in%20isolation%3A%0A%0A%60%60%60go%0Afunc%20TestProcessNode(t%20*testing.T)%20%7B%0A%20%20%20%20node%20%3A%3D%20createProcessNode()%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Test%20successful%20case%0A%20%20%20%20result%2C%20err%20%3A%3D%20node.Exec(ctx%2C%20%22test%20input%22)%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%20%20%20%20assert.Equal(t%2C%20%22expected%20output%22%2C%20result)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Test%20error%20case%0A%20%20%20%20result%2C%20err%20%3D%20node.Exec(ctx%2C%20nil)%0A%20%20%20%20assert.Error(t%2C%20err)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Integration%20Test%20Flows%0A%0ATest%20complete%20workflows%3A%0A%0A%60%60%60go%0Afunc%20TestCompleteFlow(t%20*testing.T)%20%7B%0A%20%20%20%20flow%20%3A%3D%20createMainFlow()%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20shared.Set(%22input%22%2C%20testData)%0A%20%20%20%20%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%20%20%20%20err%20%3A%3D%20flow.Run(ctx%2C%20shared)%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%20%20%20%20%0A%20%20%20%20result%2C%20ok%20%3A%3D%20shared.Get(%22output%22)%0A%20%20%20%20assert.True(t%2C%20ok)%0A%20%20%20%20assert.Equal(t%2C%20expectedResult%2C%20result)%0A%7D%0A%60%60%60%0A%0A%23%23%20Documentation%0A%0A%23%23%23%20Document%20Node%20Behavior%0A%0A%60%60%60go%0A%2F%2F%20FetchUserNode%20fetches%20user%20data%20from%20the%20API.%0A%2F%2F%20%0A%2F%2F%20Prep%3A%20Reads%20%22user_id%22%20from%20SharedStore%0A%2F%2F%20Exec%3A%20Fetches%20user%20from%20API%2C%20retries%20on%20network%20errors%0A%2F%2F%20Post%3A%20Stores%20user%20data%20in%20%22user_data%22%20key%0A%2F%2F%20Actions%3A%0A%2F%2F%20%20%20-%20%22success%22%3A%20User%20fetched%20successfully%0A%2F%2F%20%20%20-%20%22not_found%22%3A%20User%20does%20not%20exist%0A%2F%2F%20%20%20-%20%22error%22%3A%20Unrecoverable%20error%20occurred%0Atype%20FetchUserNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20apiClient%20*APIClient%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Document%20Flow%20Structure%0A%0A%60%60%60go%0A%2F%2F%20CreateOrderFlow%20processes%20new%20orders%3A%0A%2F%2F%201.%20Validates%20order%20data%0A%2F%2F%202.%20Checks%20inventory%0A%2F%2F%203.%20Processes%20payment%0A%2F%2F%204.%20Creates%20shipment%0A%2F%2F%205.%20Sends%20confirmation%0A%2F%2F%0A%2F%2F%20Required%20SharedStore%20keys%3A%0A%2F%2F%20%20%20-%20%22order_data%22%3A%20OrderData%20struct%0A%2F%2F%20%20%20-%20%22customer_id%22%3A%20string%0A%2F%2F%0A%2F%2F%20Sets%20SharedStore%20keys%3A%0A%2F%2F%20%20%20-%20%22order_id%22%3A%20string%0A%2F%2F%20%20%20-%20%22tracking_number%22%3A%20string%0Afunc%20CreateOrderFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20%2F%2F%20...%0A%7D%0A%60%60%60%0A%0A%23%23%20Performance%0A%0A%23%23%23%20Batch%20Operations%0A%0AProcess%20items%20in%20batches%20when%20possible%3A%0A%0A%60%60%60go%0A%2F%2F%20Instead%20of%20processing%20one%20at%20a%20time%0Afor%20_%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20process(item)%0A%7D%0A%0A%2F%2F%20Process%20in%20batches%0AbatchNode%20%3A%3D%20flyt.NewBatchNode(processFunc%2C%20true)%0Ashared.Set(%22items%22%2C%20items)%0A%60%60%60%0A%0A%23%23%23%20Lazy%20Loading%0A%0ALoad%20data%20only%20when%20needed%3A%0A%0A%60%60%60go%0Afunc%20(n%20*ProcessNode)%20Prep(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Only%20load%20the%20data%20this%20node%20needs%0A%20%20%20%20if%20needsUserData(shared)%20%7B%0A%20%20%20%20%20%20%20%20userData%20%3A%3D%20loadUserData()%0A%20%20%20%20%20%20%20%20return%20userData%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20nil%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Monitoring%0A%0A%23%23%23%20Add%20Observability%0A%0ALog%20important%20events%3A%0A%0A%60%60%60go%0Afunc%20(n%20*ProcessNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20start%20%3A%3D%20time.Now()%0A%20%20%20%20defer%20func()%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22ProcessNode%20took%20%25v%22%2C%20time.Since(start))%0A%20%20%20%20%7D()%0A%20%20%20%20%0A%20%20%20%20result%2C%20err%20%3A%3D%20process(prepResult)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22ProcessNode%20error%3A%20%25v%22%2C%20err)%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20log.Printf(%22ProcessNode%20success%3A%20processed%20%25d%20items%22%2C%20len(result))%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BExamples%5D(https%3A%2F%2Fgithub.com%2Fmark3labs%2Fflyt%2Ftree%2Fmain%2Fcookbook)%20-%20See%20best%20practices%20in%20action%0A-%20%5BAdvanced%20Usage%5D(%2Fadvanced%2Fcustom-nodes)%20-%20Advanced%20patterns%0A-%20%5BCore%20Concepts%5D(%2Fconcepts%2Fnodes)%20-%20Review%20fundamentals", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/index-DXdzbOqL.js"), path: "/", type: "mdx", filePath: "index.mdx", content: "---%0Alayout%3A%20landing%0A---%0A%0Aimport%20%7B%20HomePage%20%7D%20from%20'vocs%2Fcomponents'%0A%0A%3CHomePage.Root%3E%0A%20%20%3Cdiv%20style%3D%7B%7B%20display%3A%20'flex'%2C%20flexDirection%3A%20'column'%2C%20alignItems%3A%20'center'%2C%20marginBottom%3A%20'1rem'%20%7D%7D%3E%0A%20%20%20%20%3Cimg%20src%3D%22%2Fflyt-logo.png%22%20alt%3D%22Flyt%20Logo%22%20style%3D%7B%7B%20width%3A%20'280px'%2C%20height%3A%20'auto'%20%7D%7D%20%2F%3E%0A%20%20%20%20%3Cp%20style%3D%7B%7B%20fontStyle%3A%20'italic'%2C%20color%3A%20'var(--vocs-color_text2)'%2C%20marginTop%3A%20'0.5rem'%2C%20fontSize%3A%20'0.95rem'%20%7D%7D%3E%0A%20%20%20%20%20%20Norwegian%20for%20%22flow%22%20%E2%80%A2%20Pronounced%20%22fleet%22%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3CHomePage.Tagline%3EA%20minimalist%20workflow%20framework%20for%20Go%3C%2FHomePage.Tagline%3E%0A%20%20%0A%20%20%60%60%60bash%0A%20%20go%20get%20github.com%2Fmark3labs%2Fflyt%0A%20%20%60%60%60%0A%20%20%0A%20%20%3CHomePage.Description%3E%0A%20%20%20%20Build%20powerful%2C%20composable%20workflows%20with%20zero%20dependencies.%20Flyt%20provides%20a%20simple%20yet%20flexible%20%0A%20%20%20%20graph-based%20abstraction%20for%20orchestrating%20tasks%20in%20Go.%0A%20%20%3C%2FHomePage.Description%3E%0A%20%20%0A%20%20%3CHomePage.Buttons%3E%0A%20%20%20%20%3CHomePage.Button%20href%3D%22%2Fgetting-started%2Fquick-start%22%20variant%3D%22accent%22%3EGet%20Started%3C%2FHomePage.Button%3E%0A%20%20%20%20%3CHomePage.Button%20href%3D%22https%3A%2F%2Fgithub.com%2Fmark3labs%2Fflyt%22%3EGitHub%3C%2FHomePage.Button%3E%0A%20%20%3C%2FHomePage.Buttons%3E%0A%3C%2FHomePage.Root%3E%0A%0A%3Cdiv%20style%3D%7B%7B%20marginTop%3A%20'4rem'%20%7D%7D%3E%0A%0A%23%23%20Features%0A%0A%3Cdiv%20style%3D%7B%7B%20%0A%20%20display%3A%20'grid'%2C%20%0A%20%20gridTemplateColumns%3A%20'repeat(auto-fit%2C%20minmax(300px%2C%201fr))'%2C%0A%20%20gap%3A%20'1.5rem'%2C%0A%20%20marginTop%3A%20'2rem'%0A%7D%7D%3E%0A%20%20%3Cdiv%3E%0A%20%20%20%20%3Ch3%20style%3D%7B%7B%20fontSize%3A%20'1.1rem'%2C%20marginBottom%3A%20'0.5rem'%20%7D%7D%3E%F0%9F%9A%80%20Zero%20Dependencies%3C%2Fh3%3E%0A%20%20%20%20%3Cp%20style%3D%7B%7B%20color%3A%20'var(--vocs-color_text2)'%2C%20fontSize%3A%20'0.95rem'%20%7D%7D%3EPure%20Go%20standard%20library%20-%20no%20external%20dependencies%20required%3C%2Fp%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%3E%0A%20%20%20%20%3Ch3%20style%3D%7B%7B%20fontSize%3A%20'1.1rem'%2C%20marginBottom%3A%20'0.5rem'%20%7D%7D%3E%F0%9F%94%84%20Composable%20Workflows%3C%2Fh3%3E%0A%20%20%20%20%3Cp%20style%3D%7B%7B%20color%3A%20'var(--vocs-color_text2)'%2C%20fontSize%3A%20'0.95rem'%20%7D%7D%3EBuild%20complex%20flows%20from%20simple%2C%20reusable%20nodes%3C%2Fp%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%3E%0A%20%20%20%20%3Ch3%20style%3D%7B%7B%20fontSize%3A%20'1.1rem'%2C%20marginBottom%3A%20'0.5rem'%20%7D%7D%3E%F0%9F%8E%AF%20Action-Based%20Routing%3C%2Fh3%3E%0A%20%20%20%20%3Cp%20style%3D%7B%7B%20color%3A%20'var(--vocs-color_text2)'%2C%20fontSize%3A%20'0.95rem'%20%7D%7D%3EDynamic%20flow%20control%20based%20on%20runtime%20results%3C%2Fp%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%3E%0A%20%20%20%20%3Ch3%20style%3D%7B%7B%20fontSize%3A%20'1.1rem'%2C%20marginBottom%3A%20'0.5rem'%20%7D%7D%3E%F0%9F%94%81%20Built-in%20Retry%20Logic%3C%2Fh3%3E%0A%20%20%20%20%3Cp%20style%3D%7B%7B%20color%3A%20'var(--vocs-color_text2)'%2C%20fontSize%3A%20'0.95rem'%20%7D%7D%3EHandle%20transient%20failures%20with%20configurable%20retries%3C%2Fp%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%3E%0A%20%20%20%20%3Ch3%20style%3D%7B%7B%20fontSize%3A%20'1.1rem'%2C%20marginBottom%3A%20'0.5rem'%20%7D%7D%3E%F0%9F%94%92%20Thread-Safe%3C%2Fh3%3E%0A%20%20%20%20%3Cp%20style%3D%7B%7B%20color%3A%20'var(--vocs-color_text2)'%2C%20fontSize%3A%20'0.95rem'%20%7D%7D%3EConcurrent%20batch%20processing%20with%20safe%20shared%20state%3C%2Fp%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%3E%0A%20%20%20%20%3Ch3%20style%3D%7B%7B%20fontSize%3A%20'1.1rem'%2C%20marginBottom%3A%20'0.5rem'%20%7D%7D%3E%F0%9F%93%A6%20Batch%20Processing%3C%2Fh3%3E%0A%20%20%20%20%3Cp%20style%3D%7B%7B%20color%3A%20'var(--vocs-color_text2)'%2C%20fontSize%3A%20'0.95rem'%20%7D%7D%3EProcess%20collections%20efficiently%20with%20built-in%20patterns%3C%2Fp%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A%0A%3C%2Fdiv%3E%0A%0A%3Cdiv%20style%3D%7B%7B%20marginTop%3A%20'3rem'%20%7D%7D%3E%0A%0A%23%23%20Quick%20Example%0A%0A%3Cdiv%20style%3D%7B%7B%20marginTop%3A%20'1.5rem'%20%7D%7D%3E%0A%0A%60%60%60go%0Apackage%20main%0A%0Aimport%20(%0A%20%20%20%20%22context%22%0A%20%20%20%20%22fmt%22%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A)%0A%0Afunc%20main()%20%7B%0A%20%20%20%20%2F%2F%20Create%20nodes%20that%20share%20data%20via%20SharedStore%0A%20%20%20%20fetchNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20_%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Println(%22Fetching%20data...%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dint%7B%22value%22%3A%2042%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20_%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22data%22%2C%20execResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20processNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20data%2C%20_%20%3A%3D%20shared.Get(%22data%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20data%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20val%20%3A%3D%20data.(map%5Bstring%5Dint)%5B%22value%22%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Printf(%22Processing%3A%20%25d%5Cn%22%2C%20val)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20val%20*%202%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20_%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22result%22%2C%20execResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20saveNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20_%20%3A%3D%20shared.Get(%22result%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20result%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Printf(%22Saving%20result%3A%20%25d%5Cn%22%2C%20result)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Build%20and%20run%20flow%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(fetchNode)%0A%20%20%20%20flow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20processNode)%0A%20%20%20%20flow.Connect(processNode%2C%20flyt.DefaultAction%2C%20saveNode)%0A%20%20%20%20%0A%20%20%20%20err%20%3A%3D%20flow.Run(context.Background()%2C%20flyt.NewSharedStore())%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20panic(err)%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A%0A%3Cdiv%20style%3D%7B%7B%20marginTop%3A%20'3rem'%20%7D%7D%3E%0A%0A%23%23%20Why%20Flyt%3F%0A%0A%3Cp%20style%3D%7B%7B%20fontSize%3A%20'1.05rem'%2C%20lineHeight%3A%20'1.7'%2C%20color%3A%20'var(--vocs-color_text2)'%2C%20marginTop%3A%20'1rem'%20%7D%7D%3E%0AFlyt%20was%20inspired%20by%20%3Ca%20href%3D%22https%3A%2F%2Fgithub.com%2FThe-Pocket%2FPocketFlow%22%20style%3D%7B%7B%20color%3A%20'var(--vocs-color_link)'%20%7D%7D%3EPocket%20Flow%3C%2Fa%3E%20and%20%0Adesigned%20to%20provide%20a%20simple%2C%20dependency-free%20solution%20for%20workflow%20orchestration%20in%20Go.%20Whether%20you're%20building%20%0Adata%20pipelines%2C%20API%20orchestration%2C%20or%20complex%20business%20logic%2C%20Flyt%20gives%20you%20the%20tools%20to%20create%20maintainable%2C%20%0Atestable%20workflows.%0A%3C%2Fp%3E%0A%0A%3Ch3%20style%3D%7B%7B%20marginTop%3A%20'2rem'%2C%20marginBottom%3A%20'1.5rem'%20%7D%7D%3EPerfect%20for%3C%2Fh3%3E%0A%0A%3Cdiv%20style%3D%7B%7B%20%0A%20%20display%3A%20'grid'%2C%20%0A%20%20gridTemplateColumns%3A%20'repeat(auto-fit%2C%20minmax(280px%2C%201fr))'%2C%0A%20%20gap%3A%20'1rem'%0A%7D%7D%3E%0A%20%20%3Cdiv%20style%3D%7B%7B%20%0A%20%20%20%20padding%3A%20'1rem'%2C%0A%20%20%20%20backgroundColor%3A%20'var(--vocs-color_backgroundDark)'%2C%0A%20%20%20%20borderRadius%3A%20'6px'%2C%0A%20%20%20%20border%3A%20'1px%20solid%20var(--vocs-color_border)'%0A%20%20%7D%7D%3E%0A%20%20%20%20%3Cstrong%3EData%20Processing%20Pipelines%3C%2Fstrong%3E%0A%20%20%20%20%3Cp%20style%3D%7B%7B%20color%3A%20'var(--vocs-color_text2)'%2C%20fontSize%3A%20'0.9rem'%2C%20marginTop%3A%20'0.5rem'%20%7D%7D%3E%0A%20%20%20%20%20%20ETL%20workflows%20with%20built-in%20error%20handling%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20style%3D%7B%7B%20%0A%20%20%20%20padding%3A%20'1rem'%2C%0A%20%20%20%20backgroundColor%3A%20'var(--vocs-color_backgroundDark)'%2C%0A%20%20%20%20borderRadius%3A%20'6px'%2C%0A%20%20%20%20border%3A%20'1px%20solid%20var(--vocs-color_border)'%0A%20%20%7D%7D%3E%0A%20%20%20%20%3Cstrong%3EAPI%20Orchestration%3C%2Fstrong%3E%0A%20%20%20%20%3Cp%20style%3D%7B%7B%20color%3A%20'var(--vocs-color_text2)'%2C%20fontSize%3A%20'0.9rem'%2C%20marginTop%3A%20'0.5rem'%20%7D%7D%3E%0A%20%20%20%20%20%20Chain%20multiple%20API%20calls%20with%20automatic%20retries%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20style%3D%7B%7B%20%0A%20%20%20%20padding%3A%20'1rem'%2C%0A%20%20%20%20backgroundColor%3A%20'var(--vocs-color_backgroundDark)'%2C%0A%20%20%20%20borderRadius%3A%20'6px'%2C%0A%20%20%20%20border%3A%20'1px%20solid%20var(--vocs-color_border)'%0A%20%20%7D%7D%3E%0A%20%20%20%20%3Cstrong%3EBusiness%20Logic%20Flows%3C%2Fstrong%3E%0A%20%20%20%20%3Cp%20style%3D%7B%7B%20color%3A%20'var(--vocs-color_text2)'%2C%20fontSize%3A%20'0.9rem'%2C%20marginTop%3A%20'0.5rem'%20%7D%7D%3E%0A%20%20%20%20%20%20Complex%20decision%20trees%20and%20state%20machines%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20style%3D%7B%7B%20%0A%20%20%20%20padding%3A%20'1rem'%2C%0A%20%20%20%20backgroundColor%3A%20'var(--vocs-color_backgroundDark)'%2C%0A%20%20%20%20borderRadius%3A%20'6px'%2C%0A%20%20%20%20border%3A%20'1px%20solid%20var(--vocs-color_border)'%0A%20%20%7D%7D%3E%0A%20%20%20%20%3Cstrong%3EBatch%20Operations%3C%2Fstrong%3E%0A%20%20%20%20%3Cp%20style%3D%7B%7B%20color%3A%20'var(--vocs-color_text2)'%2C%20fontSize%3A%20'0.9rem'%2C%20marginTop%3A%20'0.5rem'%20%7D%7D%3E%0A%20%20%20%20%20%20Process%20large%20datasets%20concurrently%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%3C%2Fdiv%3E%0A%20%20%3Cdiv%20style%3D%7B%7B%20%0A%20%20%20%20padding%3A%20'1rem'%2C%0A%20%20%20%20backgroundColor%3A%20'var(--vocs-color_backgroundDark)'%2C%0A%20%20%20%20borderRadius%3A%20'6px'%2C%0A%20%20%20%20border%3A%20'1px%20solid%20var(--vocs-color_border)'%0A%20%20%7D%7D%3E%0A%20%20%20%20%3Cstrong%3EAI%2FLLM%20Workflows%3C%2Fstrong%3E%0A%20%20%20%20%3Cp%20style%3D%7B%7B%20color%3A%20'var(--vocs-color_text2)'%2C%20fontSize%3A%20'0.9rem'%2C%20marginTop%3A%20'0.5rem'%20%7D%7D%3E%0A%20%20%20%20%20%20Build%20agent%20systems%20and%20conversation%20flows%0A%20%20%20%20%3C%2Fp%3E%0A%20%20%3C%2Fdiv%3E%0A%3C%2Fdiv%3E%0A%0A%3C%2Fdiv%3E", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/batch-flows-DKiR8Dr8.js"), path: "/advanced/batch-flows", type: "mdx", filePath: "advanced/batch-flows.mdx", content: "%23%20Batch%20Flows%0A%0ARun%20the%20same%20flow%20multiple%20times%20with%20different%20parameters%2C%20perfect%20for%20processing%20multiple%20entities%20or%20parallel%20workflows.%0A%0A%23%23%20Basic%20Batch%20Flow%0A%0ARun%20a%20flow%20for%20each%20set%20of%20inputs%3A%0A%0A%60%60%60go%0A%2F%2F%20Create%20a%20flow%20factory%20-%20returns%20a%20new%20flow%20instance%20for%20each%20iteration%0AflowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20validateNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Each%20flow%20has%20its%20own%20SharedStore%20with%20merged%20FlowInputs%0A%20%20%20%20%20%20%20%20%20%20%20%20userID%2C%20_%20%3A%3D%20shared.Get(%22user_id%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20email%2C%20_%20%3A%3D%20shared.Get(%22email%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%22user_id%22%3A%20userID%2C%20%22email%22%3A%20email%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(map%5Bstring%5Dany)%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Process%20user%20data%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20processUser(data)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20return%20flyt.NewFlow(validateNode)%0A%7D%0A%0A%2F%2F%20Define%20input%20parameters%20for%20each%20flow%20iteration%0AbatchFunc%20%3A%3D%20func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(%5B%5Dflyt.FlowInputs%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Could%20fetch%20from%20database%2C%20API%2C%20etc.%0A%20%20%20%20return%20%5B%5Dflyt.FlowInputs%7B%0A%20%20%20%20%20%20%20%20%7B%22user_id%22%3A%201%2C%20%22email%22%3A%20%22user1%40example.com%22%7D%2C%0A%20%20%20%20%20%20%20%20%7B%22user_id%22%3A%202%2C%20%22email%22%3A%20%22user2%40example.com%22%7D%2C%0A%20%20%20%20%20%20%20%20%7B%22user_id%22%3A%203%2C%20%22email%22%3A%20%22user3%40example.com%22%7D%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%0A%2F%2F%20Create%20and%20run%20batch%20flow%0AbatchFlow%20%3A%3D%20flyt.NewBatchFlow(flowFactory%2C%20batchFunc%2C%20true)%20%2F%2F%20true%20for%20concurrent%0Ashared%20%3A%3D%20flyt.NewSharedStore()%0Aerr%20%3A%3D%20batchFlow.Run(ctx%2C%20shared)%0A%60%60%60%0A%0A%23%23%20Sequential%20vs%20Concurrent%20Execution%0A%0AControl%20how%20flows%20are%20executed%3A%0A%0A%60%60%60go%0A%2F%2F%20Sequential%20-%20one%20flow%20at%20a%20time%0AsequentialBatch%20%3A%3D%20flyt.NewBatchFlow(flowFactory%2C%20batchFunc%2C%20false)%0A%0A%2F%2F%20Concurrent%20-%20multiple%20flows%20in%20parallel%0AconcurrentBatch%20%3A%3D%20flyt.NewBatchFlow(flowFactory%2C%20batchFunc%2C%20true)%0A%60%60%60%0A%0A%23%23%20Dynamic%20Input%20Generation%0A%0AGenerate%20inputs%20based%20on%20runtime%20data%3A%0A%0A%60%60%60go%0AbatchFunc%20%3A%3D%20func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(%5B%5Dflyt.FlowInputs%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Get%20configuration%20from%20parent%20shared%20store%0A%20%20%20%20config%2C%20_%20%3A%3D%20shared.Get(%22batch_config%22)%0A%20%20%20%20batchSize%20%3A%3D%20config.(map%5Bstring%5Dany)%5B%22size%22%5D.(int)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Fetch%20data%20from%20database%0A%20%20%20%20users%2C%20err%20%3A%3D%20fetchUsers(batchSize)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Convert%20to%20FlowInputs%0A%20%20%20%20inputs%20%3A%3D%20make(%5B%5Dflyt.FlowInputs%2C%20len(users))%0A%20%20%20%20for%20i%2C%20user%20%3A%3D%20range%20users%20%7B%0A%20%20%20%20%20%20%20%20inputs%5Bi%5D%20%3D%20flyt.FlowInputs%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22user_id%22%3A%20%20%20user.ID%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22user_name%22%3A%20user.Name%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22user_data%22%3A%20user%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20inputs%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Complex%20Flow%20Factory%0A%0ACreate%20sophisticated%20flows%20for%20each%20batch%3A%0A%0A%60%60%60go%0AflowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20%2F%2F%20Create%20nodes%0A%20%20%20%20fetchNode%20%3A%3D%20createFetchNode()%0A%20%20%20%20validateNode%20%3A%3D%20createValidateNode()%0A%20%20%20%20processNode%20%3A%3D%20createProcessNode()%0A%20%20%20%20saveNode%20%3A%3D%20createSaveNode()%0A%20%20%20%20errorNode%20%3A%3D%20createErrorNode()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Build%20flow%20with%20error%20handling%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(fetchNode)%0A%20%20%20%20flow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20validateNode)%0A%20%20%20%20flow.Connect(validateNode%2C%20%22valid%22%2C%20processNode)%0A%20%20%20%20flow.Connect(validateNode%2C%20%22invalid%22%2C%20errorNode)%0A%20%20%20%20flow.Connect(processNode%2C%20flyt.DefaultAction%2C%20saveNode)%0A%20%20%20%20flow.Connect(processNode%2C%20%22error%22%2C%20errorNode)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Batch%20Flow%20with%20Configuration%0A%0APass%20configuration%20to%20batch%20flows%3A%0A%0A%60%60%60go%0Afunc%20createConfiguredBatchFlow(config%20Config)%20*flyt.Flow%20%7B%0A%20%20%20%20flowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Each%20flow%20gets%20the%20same%20configuration%0A%20%20%20%20%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Use%20config%20in%20processing%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20processWithConfig(prepResult%2C%20config)%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20return%20flyt.NewFlow(node)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20batchFunc%20%3A%3D%20func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(%5B%5Dflyt.FlowInputs%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20items%2C%20_%20%3A%3D%20shared.Get(%22items%22)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20inputs%20%3A%3D%20make(%5B%5Dflyt.FlowInputs%2C%200)%0A%20%20%20%20%20%20%20%20for%20_%2C%20item%20%3A%3D%20range%20items.(%5B%5Dany)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20inputs%20%3D%20append(inputs%2C%20flyt.FlowInputs%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22item%22%3A%20item%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22config%22%3A%20config%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20return%20inputs%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewBatchFlow(flowFactory%2C%20batchFunc%2C%20true)%0A%7D%0A%60%60%60%0A%0A%23%23%20Result%20Aggregation%0A%0ACollect%20results%20from%20all%20flows%3A%0A%0A%60%60%60go%0Atype%20ResultCollector%20struct%20%7B%0A%20%20%20%20mu%20%20%20%20%20%20sync.Mutex%0A%20%20%20%20results%20%5B%5Dany%0A%20%20%20%20errors%20%20%5B%5Derror%0A%7D%0A%0Afunc%20createAggregatingBatchFlow(collector%20*ResultCollector)%20*flyt.Flow%20%7B%0A%20%20%20%20flowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20process(prepResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20collector.mu.Lock()%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20collector.errors%20%3D%20append(collector.errors%2C%20err)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20collector.results%20%3D%20append(collector.results%2C%20result)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20collector.mu.Unlock()%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20return%20flyt.NewFlow(node)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20...%20rest%20of%20batch%20flow%20setup%0A%7D%0A%60%60%60%0A%0A%23%23%20Batch%20Flow%20with%20Progress%0A%0ATrack%20progress%20across%20batch%20execution%3A%0A%0A%60%60%60go%0Atype%20ProgressTracker%20struct%20%7B%0A%20%20%20%20total%20%20%20%20%20int%0A%20%20%20%20completed%20int32%0A%20%20%20%20failed%20%20%20%20int32%0A%7D%0A%0Afunc%20createProgressBatchFlow(tracker%20*ProgressTracker)%20*flyt.Flow%20%7B%0A%20%20%20%20flowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20execResult%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20atomic.AddInt32(%26tracker.completed%2C%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20atomic.AddInt32(%26tracker.failed%2C%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20progress%20%3A%3D%20atomic.LoadInt32(%26tracker.completed)%20%2B%20atomic.LoadInt32(%26tracker.failed)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20percentage%20%3A%3D%20float64(progress)%20%2F%20float64(tracker.total)%20*%20100%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22Batch%20progress%3A%20%25.1f%25%25%20(%25d%2F%25d)%22%2C%20percentage%2C%20progress%2C%20tracker.total)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20return%20flyt.NewFlow(node)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20batchFunc%20%3A%3D%20func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(%5B%5Dflyt.FlowInputs%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20inputs%20%3A%3D%20generateInputs()%0A%20%20%20%20%20%20%20%20tracker.total%20%3D%20len(inputs)%0A%20%20%20%20%20%20%20%20return%20inputs%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewBatchFlow(flowFactory%2C%20batchFunc%2C%20true)%0A%7D%0A%60%60%60%0A%0A%23%23%20Conditional%20Batch%20Processing%0A%0AProcess%20batches%20based%20on%20conditions%3A%0A%0A%60%60%60go%0AbatchFunc%20%3A%3D%20func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(%5B%5Dflyt.FlowInputs%2C%20error)%20%7B%0A%20%20%20%20mode%2C%20_%20%3A%3D%20shared.Get(%22processing_mode%22)%0A%20%20%20%20%0A%20%20%20%20var%20inputs%20%5B%5Dflyt.FlowInputs%0A%20%20%20%20%0A%20%20%20%20switch%20mode.(string)%20%7B%0A%20%20%20%20case%20%22all%22%3A%0A%20%20%20%20%20%20%20%20inputs%20%3D%20getAllInputs()%0A%20%20%20%20case%20%22pending%22%3A%0A%20%20%20%20%20%20%20%20inputs%20%3D%20getPendingInputs()%0A%20%20%20%20case%20%22failed%22%3A%0A%20%20%20%20%20%20%20%20inputs%20%3D%20getFailedInputs()%0A%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22unknown%20mode%3A%20%25s%22%2C%20mode)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Filter%20based%20on%20additional%20criteria%0A%20%20%20%20filtered%20%3A%3D%20make(%5B%5Dflyt.FlowInputs%2C%200)%0A%20%20%20%20for%20_%2C%20input%20%3A%3D%20range%20inputs%20%7B%0A%20%20%20%20%20%20%20%20if%20shouldProcess(input)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20filtered%20%3D%20append(filtered%2C%20input)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20filtered%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Nested%20Batch%20Flows%0A%0ABatch%20flows%20within%20batch%20flows%3A%0A%0A%60%60%60go%0AouterFlowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20%2F%2F%20Inner%20batch%20flow%20for%20processing%20items%0A%20%20%20%20innerBatchFlow%20%3A%3D%20flyt.NewBatchFlow(%0A%20%20%20%20%20%20%20%20innerFlowFactory%2C%0A%20%20%20%20%20%20%20%20innerBatchFunc%2C%0A%20%20%20%20%20%20%20%20true%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Outer%20flow%20that%20includes%20the%20batch%0A%20%20%20%20fetchNode%20%3A%3D%20createFetchNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(fetchNode)%0A%20%20%20%20flow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20innerBatchFlow)%0A%20%20%20%20flow.Connect(innerBatchFlow%2C%20flyt.DefaultAction%2C%20aggregateNode)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Create%20outer%20batch%20flow%0AouterBatchFlow%20%3A%3D%20flyt.NewBatchFlow(outerFlowFactory%2C%20outerBatchFunc%2C%20false)%0A%60%60%60%0A%0A%23%23%20Error%20Recovery%0A%0AHandle%20failures%20in%20batch%20flows%3A%0A%0A%60%60%60go%0AflowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20riskyOperation(prepResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Store%20error%20for%20later%20analysis%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20errorData%20%3A%3D%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22input%22%3A%20prepResult%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20err.Error()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22time%22%3A%20%20time.Now()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20storeError(errorData)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Return%20partial%20result%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22status%22%3A%20%22failed%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20%20err.Error()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%20nil%20%20%2F%2F%20Don't%20fail%20the%20entire%20batch%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20return%20flyt.NewFlow(node)%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Isolate%20Flows**%3A%20Each%20flow%20instance%20should%20be%20independent%0A2.%20**Manage%20Resources**%3A%20Be%20mindful%20of%20resource%20usage%20with%20concurrent%20flows%0A3.%20**Handle%20Failures**%3A%20Decide%20whether%20one%20failure%20should%20stop%20the%20batch%0A4.%20**Track%20Progress**%3A%20Implement%20progress%20tracking%20for%20long-running%20batches%0A5.%20**Limit%20Concurrency**%3A%20Set%20reasonable%20concurrency%20limits%0A6.%20**Test%20Thoroughly**%3A%20Test%20with%20various%20batch%20sizes%20and%20failure%20scenarios%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BBatch%20Processing%5D(%2Fadvanced%2Fbatch-processing)%20-%20Process%20items%20within%20a%20single%20node%0A-%20%5BNested%20Flows%5D(%2Fadvanced%2Fnested-flows)%20-%20Compose%20complex%20workflows%0A-%20%5BWorker%20Pool%5D(%2Fadvanced%2Fworker-pool)%20-%20Fine-grained%20concurrency%20control", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/batch-flows-DKiR8Dr8.js"), path: "/advanced/batch-flows.html", type: "mdx", filePath: "advanced/batch-flows.mdx", content: "%23%20Batch%20Flows%0A%0ARun%20the%20same%20flow%20multiple%20times%20with%20different%20parameters%2C%20perfect%20for%20processing%20multiple%20entities%20or%20parallel%20workflows.%0A%0A%23%23%20Basic%20Batch%20Flow%0A%0ARun%20a%20flow%20for%20each%20set%20of%20inputs%3A%0A%0A%60%60%60go%0A%2F%2F%20Create%20a%20flow%20factory%20-%20returns%20a%20new%20flow%20instance%20for%20each%20iteration%0AflowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20validateNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Each%20flow%20has%20its%20own%20SharedStore%20with%20merged%20FlowInputs%0A%20%20%20%20%20%20%20%20%20%20%20%20userID%2C%20_%20%3A%3D%20shared.Get(%22user_id%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20email%2C%20_%20%3A%3D%20shared.Get(%22email%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%22user_id%22%3A%20userID%2C%20%22email%22%3A%20email%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(map%5Bstring%5Dany)%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Process%20user%20data%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20processUser(data)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20return%20flyt.NewFlow(validateNode)%0A%7D%0A%0A%2F%2F%20Define%20input%20parameters%20for%20each%20flow%20iteration%0AbatchFunc%20%3A%3D%20func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(%5B%5Dflyt.FlowInputs%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Could%20fetch%20from%20database%2C%20API%2C%20etc.%0A%20%20%20%20return%20%5B%5Dflyt.FlowInputs%7B%0A%20%20%20%20%20%20%20%20%7B%22user_id%22%3A%201%2C%20%22email%22%3A%20%22user1%40example.com%22%7D%2C%0A%20%20%20%20%20%20%20%20%7B%22user_id%22%3A%202%2C%20%22email%22%3A%20%22user2%40example.com%22%7D%2C%0A%20%20%20%20%20%20%20%20%7B%22user_id%22%3A%203%2C%20%22email%22%3A%20%22user3%40example.com%22%7D%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%0A%2F%2F%20Create%20and%20run%20batch%20flow%0AbatchFlow%20%3A%3D%20flyt.NewBatchFlow(flowFactory%2C%20batchFunc%2C%20true)%20%2F%2F%20true%20for%20concurrent%0Ashared%20%3A%3D%20flyt.NewSharedStore()%0Aerr%20%3A%3D%20batchFlow.Run(ctx%2C%20shared)%0A%60%60%60%0A%0A%23%23%20Sequential%20vs%20Concurrent%20Execution%0A%0AControl%20how%20flows%20are%20executed%3A%0A%0A%60%60%60go%0A%2F%2F%20Sequential%20-%20one%20flow%20at%20a%20time%0AsequentialBatch%20%3A%3D%20flyt.NewBatchFlow(flowFactory%2C%20batchFunc%2C%20false)%0A%0A%2F%2F%20Concurrent%20-%20multiple%20flows%20in%20parallel%0AconcurrentBatch%20%3A%3D%20flyt.NewBatchFlow(flowFactory%2C%20batchFunc%2C%20true)%0A%60%60%60%0A%0A%23%23%20Dynamic%20Input%20Generation%0A%0AGenerate%20inputs%20based%20on%20runtime%20data%3A%0A%0A%60%60%60go%0AbatchFunc%20%3A%3D%20func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(%5B%5Dflyt.FlowInputs%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Get%20configuration%20from%20parent%20shared%20store%0A%20%20%20%20config%2C%20_%20%3A%3D%20shared.Get(%22batch_config%22)%0A%20%20%20%20batchSize%20%3A%3D%20config.(map%5Bstring%5Dany)%5B%22size%22%5D.(int)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Fetch%20data%20from%20database%0A%20%20%20%20users%2C%20err%20%3A%3D%20fetchUsers(batchSize)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Convert%20to%20FlowInputs%0A%20%20%20%20inputs%20%3A%3D%20make(%5B%5Dflyt.FlowInputs%2C%20len(users))%0A%20%20%20%20for%20i%2C%20user%20%3A%3D%20range%20users%20%7B%0A%20%20%20%20%20%20%20%20inputs%5Bi%5D%20%3D%20flyt.FlowInputs%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22user_id%22%3A%20%20%20user.ID%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22user_name%22%3A%20user.Name%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22user_data%22%3A%20user%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20inputs%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Complex%20Flow%20Factory%0A%0ACreate%20sophisticated%20flows%20for%20each%20batch%3A%0A%0A%60%60%60go%0AflowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20%2F%2F%20Create%20nodes%0A%20%20%20%20fetchNode%20%3A%3D%20createFetchNode()%0A%20%20%20%20validateNode%20%3A%3D%20createValidateNode()%0A%20%20%20%20processNode%20%3A%3D%20createProcessNode()%0A%20%20%20%20saveNode%20%3A%3D%20createSaveNode()%0A%20%20%20%20errorNode%20%3A%3D%20createErrorNode()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Build%20flow%20with%20error%20handling%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(fetchNode)%0A%20%20%20%20flow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20validateNode)%0A%20%20%20%20flow.Connect(validateNode%2C%20%22valid%22%2C%20processNode)%0A%20%20%20%20flow.Connect(validateNode%2C%20%22invalid%22%2C%20errorNode)%0A%20%20%20%20flow.Connect(processNode%2C%20flyt.DefaultAction%2C%20saveNode)%0A%20%20%20%20flow.Connect(processNode%2C%20%22error%22%2C%20errorNode)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Batch%20Flow%20with%20Configuration%0A%0APass%20configuration%20to%20batch%20flows%3A%0A%0A%60%60%60go%0Afunc%20createConfiguredBatchFlow(config%20Config)%20*flyt.Flow%20%7B%0A%20%20%20%20flowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Each%20flow%20gets%20the%20same%20configuration%0A%20%20%20%20%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Use%20config%20in%20processing%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20processWithConfig(prepResult%2C%20config)%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20return%20flyt.NewFlow(node)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20batchFunc%20%3A%3D%20func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(%5B%5Dflyt.FlowInputs%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20items%2C%20_%20%3A%3D%20shared.Get(%22items%22)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20inputs%20%3A%3D%20make(%5B%5Dflyt.FlowInputs%2C%200)%0A%20%20%20%20%20%20%20%20for%20_%2C%20item%20%3A%3D%20range%20items.(%5B%5Dany)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20inputs%20%3D%20append(inputs%2C%20flyt.FlowInputs%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22item%22%3A%20item%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22config%22%3A%20config%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20return%20inputs%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewBatchFlow(flowFactory%2C%20batchFunc%2C%20true)%0A%7D%0A%60%60%60%0A%0A%23%23%20Result%20Aggregation%0A%0ACollect%20results%20from%20all%20flows%3A%0A%0A%60%60%60go%0Atype%20ResultCollector%20struct%20%7B%0A%20%20%20%20mu%20%20%20%20%20%20sync.Mutex%0A%20%20%20%20results%20%5B%5Dany%0A%20%20%20%20errors%20%20%5B%5Derror%0A%7D%0A%0Afunc%20createAggregatingBatchFlow(collector%20*ResultCollector)%20*flyt.Flow%20%7B%0A%20%20%20%20flowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20process(prepResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20collector.mu.Lock()%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20collector.errors%20%3D%20append(collector.errors%2C%20err)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20collector.results%20%3D%20append(collector.results%2C%20result)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20collector.mu.Unlock()%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20return%20flyt.NewFlow(node)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20...%20rest%20of%20batch%20flow%20setup%0A%7D%0A%60%60%60%0A%0A%23%23%20Batch%20Flow%20with%20Progress%0A%0ATrack%20progress%20across%20batch%20execution%3A%0A%0A%60%60%60go%0Atype%20ProgressTracker%20struct%20%7B%0A%20%20%20%20total%20%20%20%20%20int%0A%20%20%20%20completed%20int32%0A%20%20%20%20failed%20%20%20%20int32%0A%7D%0A%0Afunc%20createProgressBatchFlow(tracker%20*ProgressTracker)%20*flyt.Flow%20%7B%0A%20%20%20%20flowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20execResult%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20atomic.AddInt32(%26tracker.completed%2C%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20atomic.AddInt32(%26tracker.failed%2C%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20progress%20%3A%3D%20atomic.LoadInt32(%26tracker.completed)%20%2B%20atomic.LoadInt32(%26tracker.failed)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20percentage%20%3A%3D%20float64(progress)%20%2F%20float64(tracker.total)%20*%20100%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22Batch%20progress%3A%20%25.1f%25%25%20(%25d%2F%25d)%22%2C%20percentage%2C%20progress%2C%20tracker.total)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20return%20flyt.NewFlow(node)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20batchFunc%20%3A%3D%20func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(%5B%5Dflyt.FlowInputs%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20inputs%20%3A%3D%20generateInputs()%0A%20%20%20%20%20%20%20%20tracker.total%20%3D%20len(inputs)%0A%20%20%20%20%20%20%20%20return%20inputs%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewBatchFlow(flowFactory%2C%20batchFunc%2C%20true)%0A%7D%0A%60%60%60%0A%0A%23%23%20Conditional%20Batch%20Processing%0A%0AProcess%20batches%20based%20on%20conditions%3A%0A%0A%60%60%60go%0AbatchFunc%20%3A%3D%20func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(%5B%5Dflyt.FlowInputs%2C%20error)%20%7B%0A%20%20%20%20mode%2C%20_%20%3A%3D%20shared.Get(%22processing_mode%22)%0A%20%20%20%20%0A%20%20%20%20var%20inputs%20%5B%5Dflyt.FlowInputs%0A%20%20%20%20%0A%20%20%20%20switch%20mode.(string)%20%7B%0A%20%20%20%20case%20%22all%22%3A%0A%20%20%20%20%20%20%20%20inputs%20%3D%20getAllInputs()%0A%20%20%20%20case%20%22pending%22%3A%0A%20%20%20%20%20%20%20%20inputs%20%3D%20getPendingInputs()%0A%20%20%20%20case%20%22failed%22%3A%0A%20%20%20%20%20%20%20%20inputs%20%3D%20getFailedInputs()%0A%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22unknown%20mode%3A%20%25s%22%2C%20mode)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Filter%20based%20on%20additional%20criteria%0A%20%20%20%20filtered%20%3A%3D%20make(%5B%5Dflyt.FlowInputs%2C%200)%0A%20%20%20%20for%20_%2C%20input%20%3A%3D%20range%20inputs%20%7B%0A%20%20%20%20%20%20%20%20if%20shouldProcess(input)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20filtered%20%3D%20append(filtered%2C%20input)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20filtered%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Nested%20Batch%20Flows%0A%0ABatch%20flows%20within%20batch%20flows%3A%0A%0A%60%60%60go%0AouterFlowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20%2F%2F%20Inner%20batch%20flow%20for%20processing%20items%0A%20%20%20%20innerBatchFlow%20%3A%3D%20flyt.NewBatchFlow(%0A%20%20%20%20%20%20%20%20innerFlowFactory%2C%0A%20%20%20%20%20%20%20%20innerBatchFunc%2C%0A%20%20%20%20%20%20%20%20true%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Outer%20flow%20that%20includes%20the%20batch%0A%20%20%20%20fetchNode%20%3A%3D%20createFetchNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(fetchNode)%0A%20%20%20%20flow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20innerBatchFlow)%0A%20%20%20%20flow.Connect(innerBatchFlow%2C%20flyt.DefaultAction%2C%20aggregateNode)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Create%20outer%20batch%20flow%0AouterBatchFlow%20%3A%3D%20flyt.NewBatchFlow(outerFlowFactory%2C%20outerBatchFunc%2C%20false)%0A%60%60%60%0A%0A%23%23%20Error%20Recovery%0A%0AHandle%20failures%20in%20batch%20flows%3A%0A%0A%60%60%60go%0AflowFactory%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20riskyOperation(prepResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Store%20error%20for%20later%20analysis%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20errorData%20%3A%3D%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22input%22%3A%20prepResult%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20err.Error()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22time%22%3A%20%20time.Now()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20storeError(errorData)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Return%20partial%20result%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22status%22%3A%20%22failed%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20%20err.Error()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%20nil%20%20%2F%2F%20Don't%20fail%20the%20entire%20batch%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20return%20flyt.NewFlow(node)%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Isolate%20Flows**%3A%20Each%20flow%20instance%20should%20be%20independent%0A2.%20**Manage%20Resources**%3A%20Be%20mindful%20of%20resource%20usage%20with%20concurrent%20flows%0A3.%20**Handle%20Failures**%3A%20Decide%20whether%20one%20failure%20should%20stop%20the%20batch%0A4.%20**Track%20Progress**%3A%20Implement%20progress%20tracking%20for%20long-running%20batches%0A5.%20**Limit%20Concurrency**%3A%20Set%20reasonable%20concurrency%20limits%0A6.%20**Test%20Thoroughly**%3A%20Test%20with%20various%20batch%20sizes%20and%20failure%20scenarios%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BBatch%20Processing%5D(%2Fadvanced%2Fbatch-processing)%20-%20Process%20items%20within%20a%20single%20node%0A-%20%5BNested%20Flows%5D(%2Fadvanced%2Fnested-flows)%20-%20Compose%20complex%20workflows%0A-%20%5BWorker%20Pool%5D(%2Fadvanced%2Fworker-pool)%20-%20Fine-grained%20concurrency%20control", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/batch-processing-D2o-fuSU.js"), path: "/advanced/batch-processing", type: "mdx", filePath: "advanced/batch-processing.mdx", content: "%23%20Batch%20Processing%0A%0AProcess%20collections%20of%20items%20efficiently%20with%20concurrent%20or%20sequential%20execution.%0A%0A%23%23%20Basic%20Batch%20Processing%0A%0AProcess%20items%20with%20a%20simple%20function%3A%0A%0A%60%60%60go%0A%2F%2F%20Define%20processing%20function%0AprocessFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Process%20each%20item%0A%20%20%20%20return%20fmt.Sprintf(%22processed%3A%20%25v%22%2C%20item)%2C%20nil%0A%7D%0A%0A%2F%2F%20Create%20batch%20node%0AbatchNode%20%3A%3D%20flyt.NewBatchNode(processFunc%2C%20true)%20%2F%2F%20true%20for%20concurrent%0A%0A%2F%2F%20Set%20items%20in%20shared%20store%0Ashared%20%3A%3D%20flyt.NewSharedStore()%0Ashared.Set(%22items%22%2C%20%5B%5Dstring%7B%22item1%22%2C%20%22item2%22%2C%20%22item3%22%7D)%0A%0A%2F%2F%20Run%20batch%20processing%0Actx%20%3A%3D%20context.Background()%0Aaction%2C%20err%20%3A%3D%20flyt.Run(ctx%2C%20batchNode%2C%20shared)%0A%0A%2F%2F%20Get%20results%0Aresults%2C%20_%20%3A%3D%20shared.Get(%22results%22)%0Afmt.Println(results)%20%2F%2F%20%5B%22processed%3A%20item1%22%2C%20%22processed%3A%20item2%22%2C%20%22processed%3A%20item3%22%5D%0A%60%60%60%0A%0A%23%23%20Sequential%20vs%20Concurrent%0A%0AChoose%20the%20right%20execution%20mode%3A%0A%0A%60%60%60go%0A%2F%2F%20Sequential%20processing%20-%20maintains%20order%0AsequentialNode%20%3A%3D%20flyt.NewBatchNode(processFunc%2C%20false)%0A%0A%2F%2F%20Concurrent%20processing%20-%20faster%20but%20unordered%0AconcurrentNode%20%3A%3D%20flyt.NewBatchNode(processFunc%2C%20true)%0A%60%60%60%0A%0A%23%23%20Custom%20Keys%0A%0AUse%20custom%20keys%20for%20input%20and%20output%3A%0A%0A%60%60%60go%0AbatchNode%20%3A%3D%20flyt.NewBatchNodeWithKeys(%0A%20%20%20%20processFunc%2C%0A%20%20%20%20true%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20concurrent%0A%20%20%20%20%22input_data%22%2C%20%20%20%2F%2F%20custom%20input%20key%0A%20%20%20%20%22output_data%22%2C%20%20%2F%2F%20custom%20output%20key%0A)%0A%0Ashared.Set(%22input_data%22%2C%20items)%0A%2F%2F%20Results%20will%20be%20in%20%22output_data%22%0A%60%60%60%0A%0A%23%23%20Advanced%20Configuration%0A%0AFine-tune%20batch%20processing%20with%20BatchConfig%3A%0A%0A%60%60%60go%0Aconfig%20%3A%3D%20%26flyt.BatchConfig%7B%0A%20%20%20%20BatchSize%3A%20%20%2010%2C%20%20%20%20%20%20%20%20%2F%2F%20Process%2010%20items%20at%20a%20time%0A%20%20%20%20Concurrency%3A%205%2C%20%20%20%20%20%20%20%20%20%2F%2F%20Use%205%20concurrent%20workers%0A%20%20%20%20ItemsKey%3A%20%20%20%20%22data%22%2C%20%20%20%20%2F%2F%20Key%20for%20input%20items%0A%20%20%20%20ResultsKey%3A%20%20%22output%22%2C%20%20%2F%2F%20Key%20for%20results%0A%20%20%20%20CountKey%3A%20%20%20%20%22total%22%2C%20%20%20%2F%2F%20Key%20for%20processed%20count%0A%7D%0A%0AprocessFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Heavy%20processing%0A%20%20%20%20time.Sleep(100%20*%20time.Millisecond)%0A%20%20%20%20return%20processItem(item)%0A%7D%0A%0AbatchNode%20%3A%3D%20flyt.NewBatchNodeWithConfig(processFunc%2C%20true%2C%20config)%0A%60%60%60%0A%0A%23%23%20Error%20Handling%0A%0AHandle%20errors%20in%20batch%20operations%3A%0A%0A%60%60%60go%0AprocessFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20if%20item.(int)%20%3C%200%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22negative%20value%3A%20%25v%22%2C%20item)%0A%20%20%20%20%7D%0A%20%20%20%20return%20item.(int)%20*%202%2C%20nil%0A%7D%0A%0AbatchNode%20%3A%3D%20flyt.NewBatchNode(processFunc%2C%20true)%0Ashared.Set(%22items%22%2C%20%5B%5Dint%7B1%2C%20-2%2C%203%2C%20-4%2C%205%7D)%0A%0Aaction%2C%20err%20%3A%3D%20flyt.Run(ctx%2C%20batchNode%2C%20shared)%0Aif%20err%20!%3D%20nil%20%7B%0A%20%20%20%20if%20batchErr%2C%20ok%20%3A%3D%20err.(*flyt.BatchError)%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20fmt.Printf(%22Batch%20processing%20failed%3A%20%25s%5Cn%22%2C%20batchErr.Message)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%2F%2F%20Access%20individual%20errors%0A%20%20%20%20%20%20%20%20for%20i%2C%20e%20%3A%3D%20range%20batchErr.Errors%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20e%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20fmt.Printf(%22Item%20%25d%20failed%3A%20%25v%5Cn%22%2C%20i%2C%20e)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Batch%20Processing%20Patterns%0A%0A%23%23%23%20Map%20Pattern%0A%0ATransform%20each%20item%3A%0A%0A%60%60%60go%0AmapFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20user%20%3A%3D%20item.(User)%0A%20%20%20%20return%20UserDTO%7B%0A%20%20%20%20%20%20%20%20ID%3A%20%20%20user.ID%2C%0A%20%20%20%20%20%20%20%20Name%3A%20user.Name%2C%0A%20%20%20%20%20%20%20%20Age%3A%20%20user.Age%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%0AmapNode%20%3A%3D%20flyt.NewBatchNode(mapFunc%2C%20true)%0A%60%60%60%0A%0A%23%23%23%20Filter%20Pattern%0A%0AProcess%20only%20matching%20items%3A%0A%0A%60%60%60go%0AfilterFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20value%20%3A%3D%20item.(int)%0A%20%20%20%20if%20value%20%3E%2010%20%7B%0A%20%20%20%20%20%20%20%20return%20value%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20nil%2C%20nil%20%20%2F%2F%20Skip%20this%20item%0A%7D%0A%0AfilterNode%20%3A%3D%20flyt.NewBatchNode(filterFunc%2C%20true)%0A%60%60%60%0A%0A%23%23%23%20Reduce%20Pattern%0A%0AAggregate%20results%3A%0A%0A%60%60%60go%0Atype%20SumNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20total%20int%0A%20%20%20%20mu%20%20%20%20sync.Mutex%0A%7D%0A%0Afunc%20(n%20*SumNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20items%20%3A%3D%20prepResult.(%5B%5Dint)%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20n.mu.Lock()%0A%20%20%20%20%20%20%20%20n.total%20%2B%3D%20item%0A%20%20%20%20%20%20%20%20n.mu.Unlock()%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20n.total%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Chunked%20Processing%0A%0AProcess%20large%20datasets%20in%20chunks%3A%0A%0A%60%60%60go%0Afunc%20createChunkedProcessor(chunkSize%20int)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20items%2C%20_%20%3A%3D%20shared.Get(%22items%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20items%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20items%20%3A%3D%20prepResult.(%5B%5Dany)%0A%20%20%20%20%20%20%20%20%20%20%20%20results%20%3A%3D%20make(%5B%5Dany%2C%200%2C%20len(items))%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Process%20in%20chunks%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20len(items)%3B%20i%20%2B%3D%20chunkSize%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20%3A%3D%20i%20%2B%20chunkSize%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20end%20%3E%20len(items)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20%3D%20len(items)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20chunk%20%3A%3D%20items%5Bi%3Aend%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20chunkResults%20%3A%3D%20processChunk(chunk)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20results%20%3D%20append(results%2C%20chunkResults...)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20results%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Progress%20Tracking%0A%0AMonitor%20batch%20processing%20progress%3A%0A%0A%60%60%60go%0Atype%20ProgressBatchNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20processed%20int32%0A%20%20%20%20total%20%20%20%20%20int32%0A%7D%0A%0Afunc%20(n%20*ProgressBatchNode)%20processWithProgress(ctx%20context.Context%2C%20items%20%5B%5Dany)%20(%5B%5Dany%2C%20error)%20%7B%0A%20%20%20%20n.total%20%3D%20int32(len(items))%0A%20%20%20%20results%20%3A%3D%20make(%5B%5Dany%2C%20len(items))%0A%20%20%20%20%0A%20%20%20%20var%20wg%20sync.WaitGroup%0A%20%20%20%20for%20i%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20wg.Add(1)%0A%20%20%20%20%20%20%20%20go%20func(idx%20int%2C%20data%20any)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20wg.Done()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20_%20%3A%3D%20processItem(data)%0A%20%20%20%20%20%20%20%20%20%20%20%20results%5Bidx%5D%20%3D%20result%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Update%20progress%0A%20%20%20%20%20%20%20%20%20%20%20%20current%20%3A%3D%20atomic.AddInt32(%26n.processed%2C%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20progress%20%3A%3D%20float64(current)%20%2F%20float64(n.total)%20*%20100%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20current%2510%20%3D%3D%200%20%7C%7C%20current%20%3D%3D%20n.total%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22Progress%3A%20%25.1f%25%25%20(%25d%2F%25d)%22%2C%20progress%2C%20current%2C%20n.total)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D(i%2C%20item)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20wg.Wait()%0A%20%20%20%20return%20results%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Rate-Limited%20Batch%20Processing%0A%0AControl%20processing%20rate%3A%0A%0A%60%60%60go%0Afunc%20createRateLimitedBatchNode(rps%20int)%20flyt.Node%20%7B%0A%20%20%20%20limiter%20%3A%3D%20rate.NewLimiter(rate.Limit(rps)%2C%201)%0A%20%20%20%20%0A%20%20%20%20processFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Wait%20for%20rate%20limiter%0A%20%20%20%20%20%20%20%20if%20err%20%3A%3D%20limiter.Wait(ctx)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%2F%2F%20Process%20item%0A%20%20%20%20%20%20%20%20return%20callAPI(item)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewBatchNode(processFunc%2C%20true)%0A%7D%0A%60%60%60%0A%0A%23%23%20Batch%20with%20Timeout%0A%0ASet%20timeouts%20for%20batch%20operations%3A%0A%0A%60%60%60go%0Afunc%20createTimeoutBatchNode(timeout%20time.Duration)%20flyt.Node%20%7B%0A%20%20%20%20processFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Create%20timeout%20context%20for%20this%20item%0A%20%20%20%20%20%20%20%20itemCtx%2C%20cancel%20%3A%3D%20context.WithTimeout(ctx%2C%20timeout)%0A%20%20%20%20%20%20%20%20defer%20cancel()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20resultChan%20%3A%3D%20make(chan%20any)%0A%20%20%20%20%20%20%20%20errChan%20%3A%3D%20make(chan%20error)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20go%20func()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20processItem(item)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20errChan%20%3C-%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resultChan%20%3C-%20result%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20select%20%7B%0A%20%20%20%20%20%20%20%20case%20result%20%3A%3D%20%3C-resultChan%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%20%20%20%20case%20err%20%3A%3D%20%3C-errChan%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20case%20%3C-itemCtx.Done()%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22processing%20timeout%20for%20item%3A%20%25v%22%2C%20item)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewBatchNode(processFunc%2C%20true)%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Choose%20Concurrency%20Wisely**%3A%20Use%20concurrent%20for%20I%2FO-bound%2C%20sequential%20for%20order-dependent%0A2.%20**Handle%20Errors%20Gracefully**%3A%20Decide%20whether%20to%20fail%20fast%20or%20collect%20all%20errors%0A3.%20**Monitor%20Progress**%3A%20Add%20logging%20for%20long-running%20batches%0A4.%20**Set%20Reasonable%20Limits**%3A%20Configure%20batch%20size%20and%20concurrency%20based%20on%20resources%0A5.%20**Test%20with%20Real%20Data**%3A%20Test%20with%20production-like%20data%20volumes%0A6.%20**Consider%20Memory%20Usage**%3A%20Be%20mindful%20of%20memory%20when%20processing%20large%20batches%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BBatch%20Flows%5D(%2Fadvanced%2Fbatch-flows)%20-%20Run%20flows%20with%20multiple%20inputs%0A-%20%5BWorker%20Pool%5D(%2Fadvanced%2Fworker-pool)%20-%20Custom%20concurrent%20processing%0A-%20%5BError%20Handling%5D(%2Fpatterns%2Ferror-handling)%20-%20Handle%20batch%20errors", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/batch-processing-D2o-fuSU.js"), path: "/advanced/batch-processing.html", type: "mdx", filePath: "advanced/batch-processing.mdx", content: "%23%20Batch%20Processing%0A%0AProcess%20collections%20of%20items%20efficiently%20with%20concurrent%20or%20sequential%20execution.%0A%0A%23%23%20Basic%20Batch%20Processing%0A%0AProcess%20items%20with%20a%20simple%20function%3A%0A%0A%60%60%60go%0A%2F%2F%20Define%20processing%20function%0AprocessFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Process%20each%20item%0A%20%20%20%20return%20fmt.Sprintf(%22processed%3A%20%25v%22%2C%20item)%2C%20nil%0A%7D%0A%0A%2F%2F%20Create%20batch%20node%0AbatchNode%20%3A%3D%20flyt.NewBatchNode(processFunc%2C%20true)%20%2F%2F%20true%20for%20concurrent%0A%0A%2F%2F%20Set%20items%20in%20shared%20store%0Ashared%20%3A%3D%20flyt.NewSharedStore()%0Ashared.Set(%22items%22%2C%20%5B%5Dstring%7B%22item1%22%2C%20%22item2%22%2C%20%22item3%22%7D)%0A%0A%2F%2F%20Run%20batch%20processing%0Actx%20%3A%3D%20context.Background()%0Aaction%2C%20err%20%3A%3D%20flyt.Run(ctx%2C%20batchNode%2C%20shared)%0A%0A%2F%2F%20Get%20results%0Aresults%2C%20_%20%3A%3D%20shared.Get(%22results%22)%0Afmt.Println(results)%20%2F%2F%20%5B%22processed%3A%20item1%22%2C%20%22processed%3A%20item2%22%2C%20%22processed%3A%20item3%22%5D%0A%60%60%60%0A%0A%23%23%20Sequential%20vs%20Concurrent%0A%0AChoose%20the%20right%20execution%20mode%3A%0A%0A%60%60%60go%0A%2F%2F%20Sequential%20processing%20-%20maintains%20order%0AsequentialNode%20%3A%3D%20flyt.NewBatchNode(processFunc%2C%20false)%0A%0A%2F%2F%20Concurrent%20processing%20-%20faster%20but%20unordered%0AconcurrentNode%20%3A%3D%20flyt.NewBatchNode(processFunc%2C%20true)%0A%60%60%60%0A%0A%23%23%20Custom%20Keys%0A%0AUse%20custom%20keys%20for%20input%20and%20output%3A%0A%0A%60%60%60go%0AbatchNode%20%3A%3D%20flyt.NewBatchNodeWithKeys(%0A%20%20%20%20processFunc%2C%0A%20%20%20%20true%2C%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20concurrent%0A%20%20%20%20%22input_data%22%2C%20%20%20%2F%2F%20custom%20input%20key%0A%20%20%20%20%22output_data%22%2C%20%20%2F%2F%20custom%20output%20key%0A)%0A%0Ashared.Set(%22input_data%22%2C%20items)%0A%2F%2F%20Results%20will%20be%20in%20%22output_data%22%0A%60%60%60%0A%0A%23%23%20Advanced%20Configuration%0A%0AFine-tune%20batch%20processing%20with%20BatchConfig%3A%0A%0A%60%60%60go%0Aconfig%20%3A%3D%20%26flyt.BatchConfig%7B%0A%20%20%20%20BatchSize%3A%20%20%2010%2C%20%20%20%20%20%20%20%20%2F%2F%20Process%2010%20items%20at%20a%20time%0A%20%20%20%20Concurrency%3A%205%2C%20%20%20%20%20%20%20%20%20%2F%2F%20Use%205%20concurrent%20workers%0A%20%20%20%20ItemsKey%3A%20%20%20%20%22data%22%2C%20%20%20%20%2F%2F%20Key%20for%20input%20items%0A%20%20%20%20ResultsKey%3A%20%20%22output%22%2C%20%20%2F%2F%20Key%20for%20results%0A%20%20%20%20CountKey%3A%20%20%20%20%22total%22%2C%20%20%20%2F%2F%20Key%20for%20processed%20count%0A%7D%0A%0AprocessFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Heavy%20processing%0A%20%20%20%20time.Sleep(100%20*%20time.Millisecond)%0A%20%20%20%20return%20processItem(item)%0A%7D%0A%0AbatchNode%20%3A%3D%20flyt.NewBatchNodeWithConfig(processFunc%2C%20true%2C%20config)%0A%60%60%60%0A%0A%23%23%20Error%20Handling%0A%0AHandle%20errors%20in%20batch%20operations%3A%0A%0A%60%60%60go%0AprocessFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20if%20item.(int)%20%3C%200%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22negative%20value%3A%20%25v%22%2C%20item)%0A%20%20%20%20%7D%0A%20%20%20%20return%20item.(int)%20*%202%2C%20nil%0A%7D%0A%0AbatchNode%20%3A%3D%20flyt.NewBatchNode(processFunc%2C%20true)%0Ashared.Set(%22items%22%2C%20%5B%5Dint%7B1%2C%20-2%2C%203%2C%20-4%2C%205%7D)%0A%0Aaction%2C%20err%20%3A%3D%20flyt.Run(ctx%2C%20batchNode%2C%20shared)%0Aif%20err%20!%3D%20nil%20%7B%0A%20%20%20%20if%20batchErr%2C%20ok%20%3A%3D%20err.(*flyt.BatchError)%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20fmt.Printf(%22Batch%20processing%20failed%3A%20%25s%5Cn%22%2C%20batchErr.Message)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%2F%2F%20Access%20individual%20errors%0A%20%20%20%20%20%20%20%20for%20i%2C%20e%20%3A%3D%20range%20batchErr.Errors%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20e%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20fmt.Printf(%22Item%20%25d%20failed%3A%20%25v%5Cn%22%2C%20i%2C%20e)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Batch%20Processing%20Patterns%0A%0A%23%23%23%20Map%20Pattern%0A%0ATransform%20each%20item%3A%0A%0A%60%60%60go%0AmapFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20user%20%3A%3D%20item.(User)%0A%20%20%20%20return%20UserDTO%7B%0A%20%20%20%20%20%20%20%20ID%3A%20%20%20user.ID%2C%0A%20%20%20%20%20%20%20%20Name%3A%20user.Name%2C%0A%20%20%20%20%20%20%20%20Age%3A%20%20user.Age%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%0AmapNode%20%3A%3D%20flyt.NewBatchNode(mapFunc%2C%20true)%0A%60%60%60%0A%0A%23%23%23%20Filter%20Pattern%0A%0AProcess%20only%20matching%20items%3A%0A%0A%60%60%60go%0AfilterFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20value%20%3A%3D%20item.(int)%0A%20%20%20%20if%20value%20%3E%2010%20%7B%0A%20%20%20%20%20%20%20%20return%20value%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20nil%2C%20nil%20%20%2F%2F%20Skip%20this%20item%0A%7D%0A%0AfilterNode%20%3A%3D%20flyt.NewBatchNode(filterFunc%2C%20true)%0A%60%60%60%0A%0A%23%23%23%20Reduce%20Pattern%0A%0AAggregate%20results%3A%0A%0A%60%60%60go%0Atype%20SumNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20total%20int%0A%20%20%20%20mu%20%20%20%20sync.Mutex%0A%7D%0A%0Afunc%20(n%20*SumNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20items%20%3A%3D%20prepResult.(%5B%5Dint)%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20n.mu.Lock()%0A%20%20%20%20%20%20%20%20n.total%20%2B%3D%20item%0A%20%20%20%20%20%20%20%20n.mu.Unlock()%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20n.total%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Chunked%20Processing%0A%0AProcess%20large%20datasets%20in%20chunks%3A%0A%0A%60%60%60go%0Afunc%20createChunkedProcessor(chunkSize%20int)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20items%2C%20_%20%3A%3D%20shared.Get(%22items%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20items%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20items%20%3A%3D%20prepResult.(%5B%5Dany)%0A%20%20%20%20%20%20%20%20%20%20%20%20results%20%3A%3D%20make(%5B%5Dany%2C%200%2C%20len(items))%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Process%20in%20chunks%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20len(items)%3B%20i%20%2B%3D%20chunkSize%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20%3A%3D%20i%20%2B%20chunkSize%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20end%20%3E%20len(items)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20end%20%3D%20len(items)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20chunk%20%3A%3D%20items%5Bi%3Aend%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20chunkResults%20%3A%3D%20processChunk(chunk)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20results%20%3D%20append(results%2C%20chunkResults...)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20results%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Progress%20Tracking%0A%0AMonitor%20batch%20processing%20progress%3A%0A%0A%60%60%60go%0Atype%20ProgressBatchNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20processed%20int32%0A%20%20%20%20total%20%20%20%20%20int32%0A%7D%0A%0Afunc%20(n%20*ProgressBatchNode)%20processWithProgress(ctx%20context.Context%2C%20items%20%5B%5Dany)%20(%5B%5Dany%2C%20error)%20%7B%0A%20%20%20%20n.total%20%3D%20int32(len(items))%0A%20%20%20%20results%20%3A%3D%20make(%5B%5Dany%2C%20len(items))%0A%20%20%20%20%0A%20%20%20%20var%20wg%20sync.WaitGroup%0A%20%20%20%20for%20i%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20wg.Add(1)%0A%20%20%20%20%20%20%20%20go%20func(idx%20int%2C%20data%20any)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20wg.Done()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20_%20%3A%3D%20processItem(data)%0A%20%20%20%20%20%20%20%20%20%20%20%20results%5Bidx%5D%20%3D%20result%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Update%20progress%0A%20%20%20%20%20%20%20%20%20%20%20%20current%20%3A%3D%20atomic.AddInt32(%26n.processed%2C%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20progress%20%3A%3D%20float64(current)%20%2F%20float64(n.total)%20*%20100%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20current%2510%20%3D%3D%200%20%7C%7C%20current%20%3D%3D%20n.total%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22Progress%3A%20%25.1f%25%25%20(%25d%2F%25d)%22%2C%20progress%2C%20current%2C%20n.total)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D(i%2C%20item)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20wg.Wait()%0A%20%20%20%20return%20results%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Rate-Limited%20Batch%20Processing%0A%0AControl%20processing%20rate%3A%0A%0A%60%60%60go%0Afunc%20createRateLimitedBatchNode(rps%20int)%20flyt.Node%20%7B%0A%20%20%20%20limiter%20%3A%3D%20rate.NewLimiter(rate.Limit(rps)%2C%201)%0A%20%20%20%20%0A%20%20%20%20processFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Wait%20for%20rate%20limiter%0A%20%20%20%20%20%20%20%20if%20err%20%3A%3D%20limiter.Wait(ctx)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%2F%2F%20Process%20item%0A%20%20%20%20%20%20%20%20return%20callAPI(item)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewBatchNode(processFunc%2C%20true)%0A%7D%0A%60%60%60%0A%0A%23%23%20Batch%20with%20Timeout%0A%0ASet%20timeouts%20for%20batch%20operations%3A%0A%0A%60%60%60go%0Afunc%20createTimeoutBatchNode(timeout%20time.Duration)%20flyt.Node%20%7B%0A%20%20%20%20processFunc%20%3A%3D%20func(ctx%20context.Context%2C%20item%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Create%20timeout%20context%20for%20this%20item%0A%20%20%20%20%20%20%20%20itemCtx%2C%20cancel%20%3A%3D%20context.WithTimeout(ctx%2C%20timeout)%0A%20%20%20%20%20%20%20%20defer%20cancel()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20resultChan%20%3A%3D%20make(chan%20any)%0A%20%20%20%20%20%20%20%20errChan%20%3A%3D%20make(chan%20error)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20go%20func()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20processItem(item)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20errChan%20%3C-%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20resultChan%20%3C-%20result%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20select%20%7B%0A%20%20%20%20%20%20%20%20case%20result%20%3A%3D%20%3C-resultChan%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%20%20%20%20case%20err%20%3A%3D%20%3C-errChan%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20case%20%3C-itemCtx.Done()%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22processing%20timeout%20for%20item%3A%20%25v%22%2C%20item)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewBatchNode(processFunc%2C%20true)%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Choose%20Concurrency%20Wisely**%3A%20Use%20concurrent%20for%20I%2FO-bound%2C%20sequential%20for%20order-dependent%0A2.%20**Handle%20Errors%20Gracefully**%3A%20Decide%20whether%20to%20fail%20fast%20or%20collect%20all%20errors%0A3.%20**Monitor%20Progress**%3A%20Add%20logging%20for%20long-running%20batches%0A4.%20**Set%20Reasonable%20Limits**%3A%20Configure%20batch%20size%20and%20concurrency%20based%20on%20resources%0A5.%20**Test%20with%20Real%20Data**%3A%20Test%20with%20production-like%20data%20volumes%0A6.%20**Consider%20Memory%20Usage**%3A%20Be%20mindful%20of%20memory%20when%20processing%20large%20batches%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BBatch%20Flows%5D(%2Fadvanced%2Fbatch-flows)%20-%20Run%20flows%20with%20multiple%20inputs%0A-%20%5BWorker%20Pool%5D(%2Fadvanced%2Fworker-pool)%20-%20Custom%20concurrent%20processing%0A-%20%5BError%20Handling%5D(%2Fpatterns%2Ferror-handling)%20-%20Handle%20batch%20errors", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/custom-nodes-mdDGHKaI.js"), path: "/advanced/custom-nodes", type: "mdx", filePath: "advanced/custom-nodes.mdx", content: "%23%20Custom%20Node%20Types%0A%0ACreate%20sophisticated%20nodes%20with%20custom%20behavior%2C%20state%20management%2C%20and%20advanced%20features.%0A%0A%23%23%20Basic%20Custom%20Node%0A%0AExtend%20BaseNode%20for%20custom%20functionality%3A%0A%0A%60%60%60go%0Atype%20CustomNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20config%20Config%0A%20%20%20%20state%20%20State%0A%7D%0A%0Afunc%20NewCustomNode(config%20Config)%20*CustomNode%20%7B%0A%20%20%20%20return%20%26CustomNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20config%3A%20%20%20config%2C%0A%20%20%20%20%20%20%20%20state%3A%20%20%20%20NewState()%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*CustomNode)%20Prep(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Custom%20preparation%20logic%0A%20%20%20%20input%2C%20_%20%3A%3D%20shared.Get(%22input%22)%0A%20%20%20%20n.state.Prepare(input)%0A%20%20%20%20return%20input%2C%20nil%0A%7D%0A%0Afunc%20(n%20*CustomNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Custom%20execution%20logic%0A%20%20%20%20result%20%3A%3D%20n.processWithConfig(prepResult%2C%20n.config)%0A%20%20%20%20n.state.Update(result)%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%0Afunc%20(n%20*CustomNode)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Custom%20post-processing%0A%20%20%20%20shared.Set(%22state%22%2C%20n.state)%0A%20%20%20%20%0A%20%20%20%20if%20n.state.IsComplete()%20%7B%0A%20%20%20%20%20%20%20%20return%20%22complete%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20%22continue%22%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Stateful%20Nodes%0A%0AMaintain%20state%20across%20executions%3A%0A%0A%60%60%60go%0Atype%20AccumulatorNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20mu%20%20%20%20%20%20%20sync.Mutex%0A%20%20%20%20values%20%20%20%5B%5Dany%0A%20%20%20%20maxSize%20%20int%0A%7D%0A%0Afunc%20NewAccumulatorNode(maxSize%20int)%20*AccumulatorNode%20%7B%0A%20%20%20%20return%20%26AccumulatorNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20values%3A%20%20%20make(%5B%5Dany%2C%200%2C%20maxSize)%2C%0A%20%20%20%20%20%20%20%20maxSize%3A%20%20maxSize%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*AccumulatorNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20n.mu.Lock()%0A%20%20%20%20defer%20n.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Add%20to%20accumulator%0A%20%20%20%20n.values%20%3D%20append(n.values%2C%20prepResult)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Check%20if%20buffer%20is%20full%0A%20%20%20%20if%20len(n.values)%20%3E%3D%20n.maxSize%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Process%20batch%0A%20%20%20%20%20%20%20%20result%20%3A%3D%20n.processBatch(n.values)%0A%20%20%20%20%20%20%20%20n.values%20%3D%20n.values%5B%3A0%5D%20%2F%2F%20Clear%20buffer%0A%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20nil%2C%20nil%0A%7D%0A%0Afunc%20(n%20*AccumulatorNode)%20processBatch(values%20%5B%5Dany)%20any%20%7B%0A%20%20%20%20%2F%2F%20Process%20accumulated%20values%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22count%22%3A%20len(values)%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%20values%2C%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Resource-Managing%20Nodes%0A%0AHandle%20external%20resources%3A%0A%0A%60%60%60go%0Atype%20DatabaseNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20pool%20%20%20%20%20*sql.DB%0A%20%20%20%20prepared%20map%5Bstring%5D*sql.Stmt%0A%20%20%20%20mu%20%20%20%20%20%20%20sync.RWMutex%0A%7D%0A%0Afunc%20NewDatabaseNode(dsn%20string)%20(*DatabaseNode%2C%20error)%20%7B%0A%20%20%20%20db%2C%20err%20%3A%3D%20sql.Open(%22postgres%22%2C%20dsn)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20db.SetMaxOpenConns(25)%0A%20%20%20%20db.SetMaxIdleConns(5)%0A%20%20%20%20%0A%20%20%20%20return%20%26DatabaseNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20pool%3A%20%20%20%20%20db%2C%0A%20%20%20%20%20%20%20%20prepared%3A%20make(map%5Bstring%5D*sql.Stmt)%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%0Afunc%20(n%20*DatabaseNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20query%20%3A%3D%20prepResult.(QueryRequest)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Use%20prepared%20statement%20if%20available%0A%20%20%20%20stmt%2C%20err%20%3A%3D%20n.getOrPrepare(query.SQL)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20rows%2C%20err%20%3A%3D%20stmt.QueryContext(ctx%2C%20query.Args...)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20defer%20rows.Close()%0A%20%20%20%20%0A%20%20%20%20return%20n.scanResults(rows)%0A%7D%0A%0Afunc%20(n%20*DatabaseNode)%20getOrPrepare(sql%20string)%20(*sql.Stmt%2C%20error)%20%7B%0A%20%20%20%20n.mu.RLock()%0A%20%20%20%20stmt%2C%20exists%20%3A%3D%20n.prepared%5Bsql%5D%0A%20%20%20%20n.mu.RUnlock()%0A%20%20%20%20%0A%20%20%20%20if%20exists%20%7B%0A%20%20%20%20%20%20%20%20return%20stmt%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20n.mu.Lock()%0A%20%20%20%20defer%20n.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Double-check%20after%20acquiring%20write%20lock%0A%20%20%20%20if%20stmt%2C%20exists%20%3A%3D%20n.prepared%5Bsql%5D%3B%20exists%20%7B%0A%20%20%20%20%20%20%20%20return%20stmt%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20stmt%2C%20err%20%3A%3D%20n.pool.Prepare(sql)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20n.prepared%5Bsql%5D%20%3D%20stmt%0A%20%20%20%20return%20stmt%2C%20nil%0A%7D%0A%0Afunc%20(n%20*DatabaseNode)%20Close()%20error%20%7B%0A%20%20%20%20n.mu.Lock()%0A%20%20%20%20defer%20n.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20stmt%20%3A%3D%20range%20n.prepared%20%7B%0A%20%20%20%20%20%20%20%20stmt.Close()%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20n.pool.Close()%0A%7D%0A%60%60%60%0A%0A%23%23%20RetryableNode%20Implementation%0A%0ACustom%20retry%20logic%3A%0A%0A%60%60%60go%0Atype%20SmartRetryNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20attempts%20%20%20%20%20%20int%0A%20%20%20%20lastError%20%20%20%20%20error%0A%20%20%20%20backoffFactor%20float64%0A%7D%0A%0Afunc%20NewSmartRetryNode()%20*SmartRetryNode%20%7B%0A%20%20%20%20return%20%26SmartRetryNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20%20%20%20%20%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20backoffFactor%3A%201.5%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*SmartRetryNode)%20GetMaxRetries()%20int%20%7B%0A%20%20%20%20%2F%2F%20Dynamic%20retry%20count%20based%20on%20error%20type%0A%20%20%20%20if%20n.lastError%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20switch%20%7B%0A%20%20%20%20%20%20%20%20case%20isNetworkError(n.lastError)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%205%20%20%2F%2F%20More%20retries%20for%20network%20issues%0A%20%20%20%20%20%20%20%20case%20isRateLimitError(n.lastError)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%203%20%20%2F%2F%20Fewer%20retries%20for%20rate%20limits%0A%20%20%20%20%20%20%20%20case%20isAuthError(n.lastError)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%200%20%20%2F%2F%20No%20retries%20for%20auth%20errors%0A%20%20%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%202%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20return%203%0A%7D%0A%0Afunc%20(n%20*SmartRetryNode)%20GetWait()%20time.Duration%20%7B%0A%20%20%20%20if%20n.lastError%20!%3D%20nil%20%26%26%20isRateLimitError(n.lastError)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Extract%20retry-after%20from%20error%20if%20available%0A%20%20%20%20%20%20%20%20if%20retryAfter%20%3A%3D%20extractRetryAfter(n.lastError)%3B%20retryAfter%20%3E%200%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20retryAfter%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Exponential%20backoff%20with%20jitter%0A%20%20%20%20base%20%3A%3D%20math.Pow(n.backoffFactor%2C%20float64(n.attempts))%0A%20%20%20%20jitter%20%3A%3D%20rand.Float64()%20*%200.3%20*%20base%20%20%2F%2F%2030%25%20jitter%0A%20%20%20%20return%20time.Duration((base%20%2B%20jitter)%20*%20float64(time.Second))%0A%7D%0A%0Afunc%20(n%20*SmartRetryNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20n.attempts%2B%2B%0A%20%20%20%20%0A%20%20%20%20result%2C%20err%20%3A%3D%20n.performOperation(ctx%2C%20prepResult)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20n.lastError%20%3D%20err%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Reset%20on%20success%0A%20%20%20%20n.attempts%20%3D%200%0A%20%20%20%20n.lastError%20%3D%20nil%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Composite%20Nodes%0A%0ACombine%20multiple%20operations%3A%0A%0A%60%60%60go%0Atype%20PipelineNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20stages%20%5B%5Dfunc(context.Context%2C%20any)%20(any%2C%20error)%0A%7D%0A%0Afunc%20NewPipelineNode(stages%20...func(context.Context%2C%20any)%20(any%2C%20error))%20*PipelineNode%20%7B%0A%20%20%20%20return%20%26PipelineNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20stages%3A%20%20%20stages%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*PipelineNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20result%20%3A%3D%20prepResult%0A%20%20%20%20%0A%20%20%20%20for%20i%2C%20stage%20%3A%3D%20range%20n.stages%20%7B%0A%20%20%20%20%20%20%20%20select%20%7B%0A%20%20%20%20%20%20%20%20case%20%3C-ctx.Done()%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20ctx.Err()%0A%20%20%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20var%20err%20error%0A%20%20%20%20%20%20%20%20result%2C%20err%20%3D%20stage(ctx%2C%20result)%0A%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22stage%20%25d%20failed%3A%20%25w%22%2C%20i%2C%20err)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Monitoring%20Nodes%0A%0AAdd%20observability%3A%0A%0A%60%60%60go%0Atype%20MonitoredNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20name%20%20%20%20string%0A%20%20%20%20metrics%20*Metrics%0A%7D%0A%0Atype%20Metrics%20struct%20%7B%0A%20%20%20%20executions%20%20%20int64%0A%20%20%20%20successes%20%20%20%20int64%0A%20%20%20%20failures%20%20%20%20%20int64%0A%20%20%20%20totalLatency%20int64%0A%7D%0A%0Afunc%20NewMonitoredNode(name%20string%2C%20baseNode%20flyt.Node)%20*MonitoredNode%20%7B%0A%20%20%20%20return%20%26MonitoredNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20baseNode.(*flyt.BaseNode)%2C%0A%20%20%20%20%20%20%20%20name%3A%20%20%20%20%20name%2C%0A%20%20%20%20%20%20%20%20metrics%3A%20%20%26Metrics%7B%7D%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*MonitoredNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20start%20%3A%3D%20time.Now()%0A%20%20%20%20atomic.AddInt64(%26n.metrics.executions%2C%201)%0A%20%20%20%20%0A%20%20%20%20result%2C%20err%20%3A%3D%20n.BaseNode.Exec(ctx%2C%20prepResult)%0A%20%20%20%20%0A%20%20%20%20latency%20%3A%3D%20time.Since(start).Milliseconds()%0A%20%20%20%20atomic.AddInt64(%26n.metrics.totalLatency%2C%20latency)%0A%20%20%20%20%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20atomic.AddInt64(%26n.metrics.failures%2C%201)%0A%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Execution%20failed%3A%20%25v%20(latency%3A%20%25dms)%22%2C%20n.name%2C%20err%2C%20latency)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20atomic.AddInt64(%26n.metrics.successes%2C%201)%0A%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Execution%20succeeded%20(latency%3A%20%25dms)%22%2C%20n.name%2C%20latency)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20result%2C%20err%0A%7D%0A%0Afunc%20(n%20*MonitoredNode)%20GetMetrics()%20map%5Bstring%5Dany%20%7B%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22executions%22%3A%20%20%20%20atomic.LoadInt64(%26n.metrics.executions)%2C%0A%20%20%20%20%20%20%20%20%22successes%22%3A%20%20%20%20%20atomic.LoadInt64(%26n.metrics.successes)%2C%0A%20%20%20%20%20%20%20%20%22failures%22%3A%20%20%20%20%20%20atomic.LoadInt64(%26n.metrics.failures)%2C%0A%20%20%20%20%20%20%20%20%22avg_latency%22%3A%20%20%20n.getAverageLatency()%2C%0A%20%20%20%20%20%20%20%20%22success_rate%22%3A%20%20n.getSuccessRate()%2C%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Async%20Nodes%0A%0AHandle%20asynchronous%20operations%3A%0A%0A%60%60%60go%0Atype%20AsyncNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20workers%20int%0A%20%20%20%20queue%20%20%20chan%20Task%0A%20%20%20%20wg%20%20%20%20%20%20sync.WaitGroup%0A%7D%0A%0Afunc%20NewAsyncNode(workers%20int)%20*AsyncNode%20%7B%0A%20%20%20%20n%20%3A%3D%20%26AsyncNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20workers%3A%20%20workers%2C%0A%20%20%20%20%20%20%20%20queue%3A%20%20%20%20make(chan%20Task%2C%20workers*2)%2C%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Start%20workers%0A%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20workers%3B%20i%2B%2B%20%7B%0A%20%20%20%20%20%20%20%20go%20n.worker()%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20n%0A%7D%0A%0Afunc%20(n%20*AsyncNode)%20worker()%20%7B%0A%20%20%20%20for%20task%20%3A%3D%20range%20n.queue%20%7B%0A%20%20%20%20%20%20%20%20n.processTask(task)%0A%20%20%20%20%20%20%20%20n.wg.Done()%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*AsyncNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20tasks%20%3A%3D%20prepResult.(%5B%5DTask)%0A%20%20%20%20results%20%3A%3D%20make(%5B%5DResult%2C%20len(tasks))%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Submit%20all%20tasks%0A%20%20%20%20for%20i%2C%20task%20%3A%3D%20range%20tasks%20%7B%0A%20%20%20%20%20%20%20%20n.wg.Add(1)%0A%20%20%20%20%20%20%20%20task.Index%20%3D%20i%0A%20%20%20%20%20%20%20%20task.Results%20%3D%20%26results%0A%20%20%20%20%20%20%20%20n.queue%20%3C-%20task%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Wait%20for%20completion%0A%20%20%20%20done%20%3A%3D%20make(chan%20struct%7B%7D)%0A%20%20%20%20go%20func()%20%7B%0A%20%20%20%20%20%20%20%20n.wg.Wait()%0A%20%20%20%20%20%20%20%20close(done)%0A%20%20%20%20%7D()%0A%20%20%20%20%0A%20%20%20%20select%20%7B%0A%20%20%20%20case%20%3C-ctx.Done()%3A%0A%20%20%20%20%20%20%20%20return%20nil%2C%20ctx.Err()%0A%20%20%20%20case%20%3C-done%3A%0A%20%20%20%20%20%20%20%20return%20results%2C%20nil%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*AsyncNode)%20Close()%20%7B%0A%20%20%20%20close(n.queue)%0A%7D%0A%60%60%60%0A%0A%23%23%20Validation%20Nodes%0A%0AEnsure%20data%20integrity%3A%0A%0A%60%60%60go%0Atype%20ValidationNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20rules%20%5B%5DValidationRule%0A%7D%0A%0Atype%20ValidationRule%20interface%20%7B%0A%20%20%20%20Validate(any)%20error%0A%20%20%20%20Name()%20string%0A%7D%0A%0Afunc%20NewValidationNode(rules%20...ValidationRule)%20*ValidationNode%20%7B%0A%20%20%20%20return%20%26ValidationNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20rules%3A%20%20%20%20rules%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*ValidationNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20var%20errors%20%5B%5Dstring%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20rule%20%3A%3D%20range%20n.rules%20%7B%0A%20%20%20%20%20%20%20%20if%20err%20%3A%3D%20rule.Validate(prepResult)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20errors%20%3D%20append(errors%2C%20fmt.Sprintf(%22%25s%3A%20%25v%22%2C%20rule.Name()%2C%20err))%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20if%20len(errors)%20%3E%200%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22validation%20failed%3A%20%25s%22%2C%20strings.Join(errors%2C%20%22%3B%20%22))%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20prepResult%2C%20nil%0A%7D%0A%0Afunc%20(n%20*ValidationNode)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20if%20execResult%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20%22invalid%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20%22valid%22%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Clear%20Interfaces**%3A%20Define%20clear%20interfaces%20for%20custom%20nodes%0A2.%20**Thread%20Safety**%3A%20Ensure%20nodes%20are%20thread-safe%20for%20concurrent%20use%0A3.%20**Resource%20Management**%3A%20Properly%20manage%20external%20resources%0A4.%20**Error%20Handling**%3A%20Provide%20detailed%20error%20information%0A5.%20**Testing**%3A%20Write%20comprehensive%20tests%20for%20custom%20logic%0A6.%20**Documentation**%3A%20Document%20node%20behavior%20and%20requirements%0A7.%20**Monitoring**%3A%20Add%20metrics%20and%20logging%20for%20observability%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BRetryableNode%20Interface%5D(%2Fconcepts%2Fnodes%23retryablenode-interface)%20-%20Custom%20retry%20logic%0A-%20%5BFallbackNode%20Interface%5D(%2Fpatterns%2Ffallback)%20-%20Graceful%20degradation%0A-%20%5BWorker%20Pool%5D(%2Fadvanced%2Fworker-pool)%20-%20Concurrent%20task%20management", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/custom-nodes-mdDGHKaI.js"), path: "/advanced/custom-nodes.html", type: "mdx", filePath: "advanced/custom-nodes.mdx", content: "%23%20Custom%20Node%20Types%0A%0ACreate%20sophisticated%20nodes%20with%20custom%20behavior%2C%20state%20management%2C%20and%20advanced%20features.%0A%0A%23%23%20Basic%20Custom%20Node%0A%0AExtend%20BaseNode%20for%20custom%20functionality%3A%0A%0A%60%60%60go%0Atype%20CustomNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20config%20Config%0A%20%20%20%20state%20%20State%0A%7D%0A%0Afunc%20NewCustomNode(config%20Config)%20*CustomNode%20%7B%0A%20%20%20%20return%20%26CustomNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20config%3A%20%20%20config%2C%0A%20%20%20%20%20%20%20%20state%3A%20%20%20%20NewState()%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*CustomNode)%20Prep(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Custom%20preparation%20logic%0A%20%20%20%20input%2C%20_%20%3A%3D%20shared.Get(%22input%22)%0A%20%20%20%20n.state.Prepare(input)%0A%20%20%20%20return%20input%2C%20nil%0A%7D%0A%0Afunc%20(n%20*CustomNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Custom%20execution%20logic%0A%20%20%20%20result%20%3A%3D%20n.processWithConfig(prepResult%2C%20n.config)%0A%20%20%20%20n.state.Update(result)%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%0Afunc%20(n%20*CustomNode)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Custom%20post-processing%0A%20%20%20%20shared.Set(%22state%22%2C%20n.state)%0A%20%20%20%20%0A%20%20%20%20if%20n.state.IsComplete()%20%7B%0A%20%20%20%20%20%20%20%20return%20%22complete%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20%22continue%22%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Stateful%20Nodes%0A%0AMaintain%20state%20across%20executions%3A%0A%0A%60%60%60go%0Atype%20AccumulatorNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20mu%20%20%20%20%20%20%20sync.Mutex%0A%20%20%20%20values%20%20%20%5B%5Dany%0A%20%20%20%20maxSize%20%20int%0A%7D%0A%0Afunc%20NewAccumulatorNode(maxSize%20int)%20*AccumulatorNode%20%7B%0A%20%20%20%20return%20%26AccumulatorNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20values%3A%20%20%20make(%5B%5Dany%2C%200%2C%20maxSize)%2C%0A%20%20%20%20%20%20%20%20maxSize%3A%20%20maxSize%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*AccumulatorNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20n.mu.Lock()%0A%20%20%20%20defer%20n.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Add%20to%20accumulator%0A%20%20%20%20n.values%20%3D%20append(n.values%2C%20prepResult)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Check%20if%20buffer%20is%20full%0A%20%20%20%20if%20len(n.values)%20%3E%3D%20n.maxSize%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Process%20batch%0A%20%20%20%20%20%20%20%20result%20%3A%3D%20n.processBatch(n.values)%0A%20%20%20%20%20%20%20%20n.values%20%3D%20n.values%5B%3A0%5D%20%2F%2F%20Clear%20buffer%0A%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20nil%2C%20nil%0A%7D%0A%0Afunc%20(n%20*AccumulatorNode)%20processBatch(values%20%5B%5Dany)%20any%20%7B%0A%20%20%20%20%2F%2F%20Process%20accumulated%20values%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22count%22%3A%20len(values)%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%20values%2C%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Resource-Managing%20Nodes%0A%0AHandle%20external%20resources%3A%0A%0A%60%60%60go%0Atype%20DatabaseNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20pool%20%20%20%20%20*sql.DB%0A%20%20%20%20prepared%20map%5Bstring%5D*sql.Stmt%0A%20%20%20%20mu%20%20%20%20%20%20%20sync.RWMutex%0A%7D%0A%0Afunc%20NewDatabaseNode(dsn%20string)%20(*DatabaseNode%2C%20error)%20%7B%0A%20%20%20%20db%2C%20err%20%3A%3D%20sql.Open(%22postgres%22%2C%20dsn)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20db.SetMaxOpenConns(25)%0A%20%20%20%20db.SetMaxIdleConns(5)%0A%20%20%20%20%0A%20%20%20%20return%20%26DatabaseNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20pool%3A%20%20%20%20%20db%2C%0A%20%20%20%20%20%20%20%20prepared%3A%20make(map%5Bstring%5D*sql.Stmt)%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%0Afunc%20(n%20*DatabaseNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20query%20%3A%3D%20prepResult.(QueryRequest)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Use%20prepared%20statement%20if%20available%0A%20%20%20%20stmt%2C%20err%20%3A%3D%20n.getOrPrepare(query.SQL)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20rows%2C%20err%20%3A%3D%20stmt.QueryContext(ctx%2C%20query.Args...)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20defer%20rows.Close()%0A%20%20%20%20%0A%20%20%20%20return%20n.scanResults(rows)%0A%7D%0A%0Afunc%20(n%20*DatabaseNode)%20getOrPrepare(sql%20string)%20(*sql.Stmt%2C%20error)%20%7B%0A%20%20%20%20n.mu.RLock()%0A%20%20%20%20stmt%2C%20exists%20%3A%3D%20n.prepared%5Bsql%5D%0A%20%20%20%20n.mu.RUnlock()%0A%20%20%20%20%0A%20%20%20%20if%20exists%20%7B%0A%20%20%20%20%20%20%20%20return%20stmt%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20n.mu.Lock()%0A%20%20%20%20defer%20n.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Double-check%20after%20acquiring%20write%20lock%0A%20%20%20%20if%20stmt%2C%20exists%20%3A%3D%20n.prepared%5Bsql%5D%3B%20exists%20%7B%0A%20%20%20%20%20%20%20%20return%20stmt%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20stmt%2C%20err%20%3A%3D%20n.pool.Prepare(sql)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20n.prepared%5Bsql%5D%20%3D%20stmt%0A%20%20%20%20return%20stmt%2C%20nil%0A%7D%0A%0Afunc%20(n%20*DatabaseNode)%20Close()%20error%20%7B%0A%20%20%20%20n.mu.Lock()%0A%20%20%20%20defer%20n.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20stmt%20%3A%3D%20range%20n.prepared%20%7B%0A%20%20%20%20%20%20%20%20stmt.Close()%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20n.pool.Close()%0A%7D%0A%60%60%60%0A%0A%23%23%20RetryableNode%20Implementation%0A%0ACustom%20retry%20logic%3A%0A%0A%60%60%60go%0Atype%20SmartRetryNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20attempts%20%20%20%20%20%20int%0A%20%20%20%20lastError%20%20%20%20%20error%0A%20%20%20%20backoffFactor%20float64%0A%7D%0A%0Afunc%20NewSmartRetryNode()%20*SmartRetryNode%20%7B%0A%20%20%20%20return%20%26SmartRetryNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20%20%20%20%20%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20backoffFactor%3A%201.5%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*SmartRetryNode)%20GetMaxRetries()%20int%20%7B%0A%20%20%20%20%2F%2F%20Dynamic%20retry%20count%20based%20on%20error%20type%0A%20%20%20%20if%20n.lastError%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20switch%20%7B%0A%20%20%20%20%20%20%20%20case%20isNetworkError(n.lastError)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%205%20%20%2F%2F%20More%20retries%20for%20network%20issues%0A%20%20%20%20%20%20%20%20case%20isRateLimitError(n.lastError)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%203%20%20%2F%2F%20Fewer%20retries%20for%20rate%20limits%0A%20%20%20%20%20%20%20%20case%20isAuthError(n.lastError)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%200%20%20%2F%2F%20No%20retries%20for%20auth%20errors%0A%20%20%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%202%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20return%203%0A%7D%0A%0Afunc%20(n%20*SmartRetryNode)%20GetWait()%20time.Duration%20%7B%0A%20%20%20%20if%20n.lastError%20!%3D%20nil%20%26%26%20isRateLimitError(n.lastError)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Extract%20retry-after%20from%20error%20if%20available%0A%20%20%20%20%20%20%20%20if%20retryAfter%20%3A%3D%20extractRetryAfter(n.lastError)%3B%20retryAfter%20%3E%200%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20retryAfter%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Exponential%20backoff%20with%20jitter%0A%20%20%20%20base%20%3A%3D%20math.Pow(n.backoffFactor%2C%20float64(n.attempts))%0A%20%20%20%20jitter%20%3A%3D%20rand.Float64()%20*%200.3%20*%20base%20%20%2F%2F%2030%25%20jitter%0A%20%20%20%20return%20time.Duration((base%20%2B%20jitter)%20*%20float64(time.Second))%0A%7D%0A%0Afunc%20(n%20*SmartRetryNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20n.attempts%2B%2B%0A%20%20%20%20%0A%20%20%20%20result%2C%20err%20%3A%3D%20n.performOperation(ctx%2C%20prepResult)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20n.lastError%20%3D%20err%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Reset%20on%20success%0A%20%20%20%20n.attempts%20%3D%200%0A%20%20%20%20n.lastError%20%3D%20nil%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Composite%20Nodes%0A%0ACombine%20multiple%20operations%3A%0A%0A%60%60%60go%0Atype%20PipelineNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20stages%20%5B%5Dfunc(context.Context%2C%20any)%20(any%2C%20error)%0A%7D%0A%0Afunc%20NewPipelineNode(stages%20...func(context.Context%2C%20any)%20(any%2C%20error))%20*PipelineNode%20%7B%0A%20%20%20%20return%20%26PipelineNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20stages%3A%20%20%20stages%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*PipelineNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20result%20%3A%3D%20prepResult%0A%20%20%20%20%0A%20%20%20%20for%20i%2C%20stage%20%3A%3D%20range%20n.stages%20%7B%0A%20%20%20%20%20%20%20%20select%20%7B%0A%20%20%20%20%20%20%20%20case%20%3C-ctx.Done()%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20ctx.Err()%0A%20%20%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20var%20err%20error%0A%20%20%20%20%20%20%20%20result%2C%20err%20%3D%20stage(ctx%2C%20result)%0A%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22stage%20%25d%20failed%3A%20%25w%22%2C%20i%2C%20err)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Monitoring%20Nodes%0A%0AAdd%20observability%3A%0A%0A%60%60%60go%0Atype%20MonitoredNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20name%20%20%20%20string%0A%20%20%20%20metrics%20*Metrics%0A%7D%0A%0Atype%20Metrics%20struct%20%7B%0A%20%20%20%20executions%20%20%20int64%0A%20%20%20%20successes%20%20%20%20int64%0A%20%20%20%20failures%20%20%20%20%20int64%0A%20%20%20%20totalLatency%20int64%0A%7D%0A%0Afunc%20NewMonitoredNode(name%20string%2C%20baseNode%20flyt.Node)%20*MonitoredNode%20%7B%0A%20%20%20%20return%20%26MonitoredNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20baseNode.(*flyt.BaseNode)%2C%0A%20%20%20%20%20%20%20%20name%3A%20%20%20%20%20name%2C%0A%20%20%20%20%20%20%20%20metrics%3A%20%20%26Metrics%7B%7D%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*MonitoredNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20start%20%3A%3D%20time.Now()%0A%20%20%20%20atomic.AddInt64(%26n.metrics.executions%2C%201)%0A%20%20%20%20%0A%20%20%20%20result%2C%20err%20%3A%3D%20n.BaseNode.Exec(ctx%2C%20prepResult)%0A%20%20%20%20%0A%20%20%20%20latency%20%3A%3D%20time.Since(start).Milliseconds()%0A%20%20%20%20atomic.AddInt64(%26n.metrics.totalLatency%2C%20latency)%0A%20%20%20%20%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20atomic.AddInt64(%26n.metrics.failures%2C%201)%0A%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Execution%20failed%3A%20%25v%20(latency%3A%20%25dms)%22%2C%20n.name%2C%20err%2C%20latency)%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20atomic.AddInt64(%26n.metrics.successes%2C%201)%0A%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Execution%20succeeded%20(latency%3A%20%25dms)%22%2C%20n.name%2C%20latency)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20result%2C%20err%0A%7D%0A%0Afunc%20(n%20*MonitoredNode)%20GetMetrics()%20map%5Bstring%5Dany%20%7B%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22executions%22%3A%20%20%20%20atomic.LoadInt64(%26n.metrics.executions)%2C%0A%20%20%20%20%20%20%20%20%22successes%22%3A%20%20%20%20%20atomic.LoadInt64(%26n.metrics.successes)%2C%0A%20%20%20%20%20%20%20%20%22failures%22%3A%20%20%20%20%20%20atomic.LoadInt64(%26n.metrics.failures)%2C%0A%20%20%20%20%20%20%20%20%22avg_latency%22%3A%20%20%20n.getAverageLatency()%2C%0A%20%20%20%20%20%20%20%20%22success_rate%22%3A%20%20n.getSuccessRate()%2C%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Async%20Nodes%0A%0AHandle%20asynchronous%20operations%3A%0A%0A%60%60%60go%0Atype%20AsyncNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20workers%20int%0A%20%20%20%20queue%20%20%20chan%20Task%0A%20%20%20%20wg%20%20%20%20%20%20sync.WaitGroup%0A%7D%0A%0Afunc%20NewAsyncNode(workers%20int)%20*AsyncNode%20%7B%0A%20%20%20%20n%20%3A%3D%20%26AsyncNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20workers%3A%20%20workers%2C%0A%20%20%20%20%20%20%20%20queue%3A%20%20%20%20make(chan%20Task%2C%20workers*2)%2C%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Start%20workers%0A%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20workers%3B%20i%2B%2B%20%7B%0A%20%20%20%20%20%20%20%20go%20n.worker()%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20n%0A%7D%0A%0Afunc%20(n%20*AsyncNode)%20worker()%20%7B%0A%20%20%20%20for%20task%20%3A%3D%20range%20n.queue%20%7B%0A%20%20%20%20%20%20%20%20n.processTask(task)%0A%20%20%20%20%20%20%20%20n.wg.Done()%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*AsyncNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20tasks%20%3A%3D%20prepResult.(%5B%5DTask)%0A%20%20%20%20results%20%3A%3D%20make(%5B%5DResult%2C%20len(tasks))%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Submit%20all%20tasks%0A%20%20%20%20for%20i%2C%20task%20%3A%3D%20range%20tasks%20%7B%0A%20%20%20%20%20%20%20%20n.wg.Add(1)%0A%20%20%20%20%20%20%20%20task.Index%20%3D%20i%0A%20%20%20%20%20%20%20%20task.Results%20%3D%20%26results%0A%20%20%20%20%20%20%20%20n.queue%20%3C-%20task%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Wait%20for%20completion%0A%20%20%20%20done%20%3A%3D%20make(chan%20struct%7B%7D)%0A%20%20%20%20go%20func()%20%7B%0A%20%20%20%20%20%20%20%20n.wg.Wait()%0A%20%20%20%20%20%20%20%20close(done)%0A%20%20%20%20%7D()%0A%20%20%20%20%0A%20%20%20%20select%20%7B%0A%20%20%20%20case%20%3C-ctx.Done()%3A%0A%20%20%20%20%20%20%20%20return%20nil%2C%20ctx.Err()%0A%20%20%20%20case%20%3C-done%3A%0A%20%20%20%20%20%20%20%20return%20results%2C%20nil%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*AsyncNode)%20Close()%20%7B%0A%20%20%20%20close(n.queue)%0A%7D%0A%60%60%60%0A%0A%23%23%20Validation%20Nodes%0A%0AEnsure%20data%20integrity%3A%0A%0A%60%60%60go%0Atype%20ValidationNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20rules%20%5B%5DValidationRule%0A%7D%0A%0Atype%20ValidationRule%20interface%20%7B%0A%20%20%20%20Validate(any)%20error%0A%20%20%20%20Name()%20string%0A%7D%0A%0Afunc%20NewValidationNode(rules%20...ValidationRule)%20*ValidationNode%20%7B%0A%20%20%20%20return%20%26ValidationNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20rules%3A%20%20%20%20rules%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*ValidationNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20var%20errors%20%5B%5Dstring%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20rule%20%3A%3D%20range%20n.rules%20%7B%0A%20%20%20%20%20%20%20%20if%20err%20%3A%3D%20rule.Validate(prepResult)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20errors%20%3D%20append(errors%2C%20fmt.Sprintf(%22%25s%3A%20%25v%22%2C%20rule.Name()%2C%20err))%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20if%20len(errors)%20%3E%200%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22validation%20failed%3A%20%25s%22%2C%20strings.Join(errors%2C%20%22%3B%20%22))%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20prepResult%2C%20nil%0A%7D%0A%0Afunc%20(n%20*ValidationNode)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20if%20execResult%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20%22invalid%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20%22valid%22%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Clear%20Interfaces**%3A%20Define%20clear%20interfaces%20for%20custom%20nodes%0A2.%20**Thread%20Safety**%3A%20Ensure%20nodes%20are%20thread-safe%20for%20concurrent%20use%0A3.%20**Resource%20Management**%3A%20Properly%20manage%20external%20resources%0A4.%20**Error%20Handling**%3A%20Provide%20detailed%20error%20information%0A5.%20**Testing**%3A%20Write%20comprehensive%20tests%20for%20custom%20logic%0A6.%20**Documentation**%3A%20Document%20node%20behavior%20and%20requirements%0A7.%20**Monitoring**%3A%20Add%20metrics%20and%20logging%20for%20observability%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BRetryableNode%20Interface%5D(%2Fconcepts%2Fnodes%23retryablenode-interface)%20-%20Custom%20retry%20logic%0A-%20%5BFallbackNode%20Interface%5D(%2Fpatterns%2Ffallback)%20-%20Graceful%20degradation%0A-%20%5BWorker%20Pool%5D(%2Fadvanced%2Fworker-pool)%20-%20Concurrent%20task%20management", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/flow-as-node-CspkbMpX.js"), path: "/advanced/flow-as-node", type: "mdx", filePath: "advanced/flow-as-node.mdx", content: "%23%20Flow%20as%20Node%0A%0AFlows%20implement%20the%20Node%20interface%2C%20allowing%20them%20to%20be%20used%20anywhere%20a%20node%20is%20expected.%20This%20enables%20powerful%20composition%20patterns.%0A%0A%23%23%20The%20Node%20Interface%0A%0AFlows%20implement%20all%20Node%20methods%3A%0A%0A%60%60%60go%0Atype%20Node%20interface%20%7B%0A%20%20%20%20Prep(ctx%20context.Context%2C%20shared%20*SharedStore)%20(any%2C%20error)%0A%20%20%20%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%0A%20%20%20%20Post(ctx%20context.Context%2C%20shared%20*SharedStore%2C%20prepResult%2C%20execResult%20any)%20(Action%2C%20error)%0A%7D%0A%0A%2F%2F%20Flow%20implements%20Node%0Avar%20_%20Node%20%3D%20(*Flow)(nil)%0A%60%60%60%0A%0A%23%23%20Basic%20Usage%0A%0AUse%20a%20flow%20wherever%20a%20node%20is%20expected%3A%0A%0A%60%60%60go%0A%2F%2F%20Create%20a%20reusable%20flow%0AprocessingFlow%20%3A%3D%20flyt.NewFlow(validateNode)%0AprocessingFlow.Connect(validateNode%2C%20%22valid%22%2C%20transformNode)%0AprocessingFlow.Connect(transformNode%2C%20flyt.DefaultAction%2C%20enrichNode)%0A%0A%2F%2F%20Use%20the%20flow%20as%20a%20node%0AmainFlow%20%3A%3D%20flyt.NewFlow(fetchNode)%0AmainFlow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20processingFlow)%20%2F%2F%20Flow%20used%20as%20node%0AmainFlow.Connect(processingFlow%2C%20flyt.DefaultAction%2C%20saveNode)%0A%60%60%60%0A%0A%23%23%20Flow%20Lifecycle%20as%20Node%0A%0AUnderstanding%20how%20flows%20behave%20as%20nodes%3A%0A%0A%60%60%60go%0A%2F%2F%20When%20a%20flow%20is%20used%20as%20a%20node%3A%0A%2F%2F%201.%20Prep%3A%20Prepares%20the%20flow's%20start%20node%0A%2F%2F%202.%20Exec%3A%20Runs%20the%20entire%20flow%0A%2F%2F%203.%20Post%3A%20Returns%20the%20final%20action%20from%20the%20flow%0A%0Afunc%20demonstrateFlowLifecycle()%20%7B%0A%20%20%20%20subFlow%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20subFlow.Connect(startNode%2C%20flyt.DefaultAction%2C%20endNode)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20When%20mainFlow%20executes%20subFlow%3A%0A%20%20%20%20%2F%2F%20-%20subFlow.Prep()%20calls%20startNode.Prep()%0A%20%20%20%20%2F%2F%20-%20subFlow.Exec()%20runs%20the%20entire%20sub-flow%0A%20%20%20%20%2F%2F%20-%20subFlow.Post()%20returns%20the%20final%20action%0A%20%20%20%20%0A%20%20%20%20mainFlow%20%3A%3D%20flyt.NewFlow(initNode)%0A%20%20%20%20mainFlow.Connect(initNode%2C%20flyt.DefaultAction%2C%20subFlow)%0A%7D%0A%60%60%60%0A%0A%23%23%20Composable%20Workflows%0A%0ABuild%20complex%20workflows%20from%20simpler%20ones%3A%0A%0A%60%60%60go%0A%2F%2F%20Level%201%3A%20Basic%20operations%0Afunc%20createValidationFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20schemaNode%20%3A%3D%20createSchemaValidationNode()%0A%20%20%20%20businessNode%20%3A%3D%20createBusinessValidationNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(schemaNode)%0A%20%20%20%20flow.Connect(schemaNode%2C%20%22valid%22%2C%20businessNode)%0A%20%20%20%20return%20flow%0A%7D%0A%0Afunc%20createEnrichmentFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20fetchNode%20%3A%3D%20createDataFetchNode()%0A%20%20%20%20mergeNode%20%3A%3D%20createDataMergeNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(fetchNode)%0A%20%20%20%20flow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20mergeNode)%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Level%202%3A%20Combine%20basic%20flows%0Afunc%20createProcessingPipeline()%20*flyt.Flow%20%7B%0A%20%20%20%20validation%20%3A%3D%20createValidationFlow()%0A%20%20%20%20enrichment%20%3A%3D%20createEnrichmentFlow()%0A%20%20%20%20%0A%20%20%20%20pipeline%20%3A%3D%20flyt.NewFlow(validation)%0A%20%20%20%20pipeline.Connect(validation%2C%20flyt.DefaultAction%2C%20enrichment)%0A%20%20%20%20return%20pipeline%0A%7D%0A%0A%2F%2F%20Level%203%3A%20Use%20in%20application%0Afunc%20createApplicationFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20auth%20%3A%3D%20createAuthFlow()%0A%20%20%20%20pipeline%20%3A%3D%20createProcessingPipeline()%0A%20%20%20%20audit%20%3A%3D%20createAuditFlow()%0A%20%20%20%20%0A%20%20%20%20app%20%3A%3D%20flyt.NewFlow(auth)%0A%20%20%20%20app.Connect(auth%2C%20flyt.DefaultAction%2C%20pipeline)%0A%20%20%20%20app.Connect(pipeline%2C%20flyt.DefaultAction%2C%20audit)%0A%20%20%20%20return%20app%0A%7D%0A%60%60%60%0A%0A%23%23%20Dynamic%20Flow%20Selection%0A%0AChoose%20flows%20at%20runtime%3A%0A%0A%60%60%60go%0Atype%20FlowSelector%20struct%20%7B%0A%20%20%20%20flows%20map%5Bstring%5D*flyt.Flow%0A%7D%0A%0Afunc%20(fs%20*FlowSelector)%20CreateSelectorNode()%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20flowType%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flowType%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0Afunc%20(fs%20*FlowSelector)%20BuildDynamicFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20selector%20%3A%3D%20fs.CreateSelectorNode()%0A%20%20%20%20mainFlow%20%3A%3D%20flyt.NewFlow(selector)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Connect%20different%20flows%20based%20on%20selection%0A%20%20%20%20for%20name%2C%20flow%20%3A%3D%20range%20fs.flows%20%7B%0A%20%20%20%20%20%20%20%20mainFlow.Connect(selector%2C%20flyt.Action(name)%2C%20flow)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20mainFlow%0A%7D%0A%0A%2F%2F%20Usage%0Aselector%20%3A%3D%20%26FlowSelector%7B%0A%20%20%20%20flows%3A%20map%5Bstring%5D*flyt.Flow%7B%0A%20%20%20%20%20%20%20%20%22simple%22%3A%20%20createSimpleFlow()%2C%0A%20%20%20%20%20%20%20%20%22complex%22%3A%20createComplexFlow()%2C%0A%20%20%20%20%20%20%20%20%22custom%22%3A%20%20createCustomFlow()%2C%0A%20%20%20%20%7D%2C%0A%7D%0A%0AdynamicFlow%20%3A%3D%20selector.BuildDynamicFlow()%0A%60%60%60%0A%0A%23%23%20Flow%20Factories%0A%0ACreate%20flows%20on%20demand%3A%0A%0A%60%60%60go%0Atype%20FlowFactory%20interface%20%7B%0A%20%20%20%20CreateFlow(config%20FlowConfig)%20*flyt.Flow%0A%7D%0A%0Atype%20ProcessingFlowFactory%20struct%7B%7D%0A%0Afunc%20(f%20*ProcessingFlowFactory)%20CreateFlow(config%20FlowConfig)%20*flyt.Flow%20%7B%0A%20%20%20%20%2F%2F%20Create%20nodes%20based%20on%20configuration%0A%20%20%20%20var%20nodes%20%5B%5Dflyt.Node%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20nodeConfig%20%3A%3D%20range%20config.Nodes%20%7B%0A%20%20%20%20%20%20%20%20node%20%3A%3D%20createNodeFromConfig(nodeConfig)%0A%20%20%20%20%20%20%20%20nodes%20%3D%20append(nodes%2C%20node)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Build%20flow%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(nodes%5B0%5D)%0A%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20len(nodes)-1%3B%20i%2B%2B%20%7B%0A%20%20%20%20%20%20%20%20flow.Connect(nodes%5Bi%5D%2C%20flyt.DefaultAction%2C%20nodes%5Bi%2B1%5D)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Use%20factory-created%20flows%20as%20nodes%0Afunc%20createDynamicPipeline(factory%20FlowFactory%2C%20configs%20%5B%5DFlowConfig)%20*flyt.Flow%20%7B%0A%20%20%20%20pipeline%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20previous%20%3A%3D%20flyt.Node(startNode)%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20config%20%3A%3D%20range%20configs%20%7B%0A%20%20%20%20%20%20%20%20flow%20%3A%3D%20factory.CreateFlow(config)%0A%20%20%20%20%20%20%20%20pipeline.Connect(previous%2C%20flyt.DefaultAction%2C%20flow)%0A%20%20%20%20%20%20%20%20previous%20%3D%20flow%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20pipeline%0A%7D%0A%60%60%60%0A%0A%23%23%20Recursive%20Flow%20Patterns%0A%0AFlows%20containing%20themselves%3A%0A%0A%60%60%60go%0Afunc%20createRecursiveProcessingFlow(maxDepth%20int)%20*flyt.Flow%20%7B%0A%20%20%20%20var%20flow%20*flyt.Flow%0A%20%20%20%20%0A%20%20%20%20depthCheck%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%2C%20_%20%3A%3D%20shared.Get(%22recursion_depth%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20depth%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20depth%20%3D%200%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20depth.(int)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%20%3A%3D%20prepResult.(int)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20depth%20%3E%3D%20maxDepth%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%22terminate%22%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22recurse%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20execResult.(string)%20%3D%3D%20%22recurse%22%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20depth%20%3A%3D%20prepResult.(int)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22recursion_depth%22%2C%20depth%2B1)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20processNode%20%3A%3D%20createProcessNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3D%20flyt.NewFlow(depthCheck)%0A%20%20%20%20flow.Connect(depthCheck%2C%20%22recurse%22%2C%20processNode)%0A%20%20%20%20flow.Connect(processNode%2C%20flyt.DefaultAction%2C%20flow)%20%2F%2F%20Recursive%20reference%0A%20%20%20%20flow.Connect(depthCheck%2C%20%22terminate%22%2C%20nil)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Flow%20Middleware%0A%0AWrap%20flows%20with%20additional%20behavior%3A%0A%0A%60%60%60go%0Afunc%20withLogging(name%20string%2C%20flow%20*flyt.Flow)%20*flyt.Flow%20%7B%0A%20%20%20%20logStart%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Flow%20starting%22%2C%20name)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20prepResult%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20logEnd%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Flow%20completed%22%2C%20name)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20prepResult%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20wrapped%20%3A%3D%20flyt.NewFlow(logStart)%0A%20%20%20%20wrapped.Connect(logStart%2C%20flyt.DefaultAction%2C%20flow)%0A%20%20%20%20wrapped.Connect(flow%2C%20flyt.DefaultAction%2C%20logEnd)%0A%20%20%20%20%0A%20%20%20%20return%20wrapped%0A%7D%0A%0A%2F%2F%20Usage%0AprocessFlow%20%3A%3D%20createProcessingFlow()%0AloggedFlow%20%3A%3D%20withLogging(%22ProcessingPipeline%22%2C%20processFlow)%0A%60%60%60%0A%0A%23%23%20Testing%20Flows%20as%20Nodes%0A%0ATest%20flow%20behavior%20when%20used%20as%20nodes%3A%0A%0A%60%60%60go%0Afunc%20TestFlowAsNode(t%20*testing.T)%20%7B%0A%20%20%20%20%2F%2F%20Create%20a%20simple%20flow%0A%20%20%20%20innerFlow%20%3A%3D%20flyt.NewFlow(%0A%20%20%20%20%20%20%20%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%22inner_result%22%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Test%20the%20flow%20directly%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Call%20flow%20methods%20as%20if%20it%20were%20a%20node%0A%20%20%20%20prepResult%2C%20err%20%3A%3D%20innerFlow.Prep(ctx%2C%20shared)%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%20%20%20%20%0A%20%20%20%20execResult%2C%20err%20%3A%3D%20innerFlow.Exec(ctx%2C%20prepResult)%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%20%20%20%20%0A%20%20%20%20action%2C%20err%20%3A%3D%20innerFlow.Post(ctx%2C%20shared%2C%20prepResult%2C%20execResult)%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%20%20%20%20assert.Equal(t%2C%20flyt.DefaultAction%2C%20action)%0A%7D%0A%60%60%60%0A%0A%23%23%20Performance%20Considerations%0A%0AUsing%20flows%20as%20nodes%3A%0A%0A%60%60%60go%0A%2F%2F%20Lightweight%20flow%20-%20good%20as%20node%0Afunc%20createLightweightFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Simple%20operation%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20transform(prepResult)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20return%20flyt.NewFlow(node)%0A%7D%0A%0A%2F%2F%20Heavy%20flow%20-%20consider%20alternatives%0Afunc%20createHeavyFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20%2F%2F%20Many%20nodes%2C%20complex%20logic%0A%20%20%20%20%2F%2F%20Consider%20breaking%20into%20smaller%20flows%0A%20%20%20%20%2F%2F%20or%20using%20batch%20processing%0A%7D%0A%0A%2F%2F%20Alternative%3A%20Use%20node%20with%20embedded%20logic%0Afunc%20createOptimizedNode()%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Inline%20the%20flow%20logic%20for%20performance%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3A%3D%20step1(prepResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%20step2(result)%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%20step3(result)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Keep%20Flows%20Focused**%3A%20Flows%20used%20as%20nodes%20should%20have%20clear%2C%20single%20purposes%0A2.%20**Document%20Behavior**%3A%20Clearly%20document%20what%20the%20flow%20expects%20and%20returns%0A3.%20**Test%20Thoroughly**%3A%20Test%20flows%20both%20standalone%20and%20as%20nodes%0A4.%20**Consider%20Performance**%3A%20Be%20mindful%20of%20overhead%20when%20nesting%20many%20flows%0A5.%20**Use%20Meaningful%20Names**%3A%20Name%20flows%20to%20indicate%20they're%20used%20as%20nodes%0A6.%20**Handle%20Errors**%3A%20Ensure%20proper%20error%20propagation%20through%20nested%20flows%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BNested%20Flows%5D(%2Fadvanced%2Fnested-flows)%20-%20Complex%20flow%20composition%0A-%20%5BNodes%5D(%2Fconcepts%2Fnodes)%20-%20Node%20interface%20details%0A-%20%5BFlows%5D(%2Fconcepts%2Fflows)%20-%20Flow%20fundamentals", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/flow-as-node-CspkbMpX.js"), path: "/advanced/flow-as-node.html", type: "mdx", filePath: "advanced/flow-as-node.mdx", content: "%23%20Flow%20as%20Node%0A%0AFlows%20implement%20the%20Node%20interface%2C%20allowing%20them%20to%20be%20used%20anywhere%20a%20node%20is%20expected.%20This%20enables%20powerful%20composition%20patterns.%0A%0A%23%23%20The%20Node%20Interface%0A%0AFlows%20implement%20all%20Node%20methods%3A%0A%0A%60%60%60go%0Atype%20Node%20interface%20%7B%0A%20%20%20%20Prep(ctx%20context.Context%2C%20shared%20*SharedStore)%20(any%2C%20error)%0A%20%20%20%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%0A%20%20%20%20Post(ctx%20context.Context%2C%20shared%20*SharedStore%2C%20prepResult%2C%20execResult%20any)%20(Action%2C%20error)%0A%7D%0A%0A%2F%2F%20Flow%20implements%20Node%0Avar%20_%20Node%20%3D%20(*Flow)(nil)%0A%60%60%60%0A%0A%23%23%20Basic%20Usage%0A%0AUse%20a%20flow%20wherever%20a%20node%20is%20expected%3A%0A%0A%60%60%60go%0A%2F%2F%20Create%20a%20reusable%20flow%0AprocessingFlow%20%3A%3D%20flyt.NewFlow(validateNode)%0AprocessingFlow.Connect(validateNode%2C%20%22valid%22%2C%20transformNode)%0AprocessingFlow.Connect(transformNode%2C%20flyt.DefaultAction%2C%20enrichNode)%0A%0A%2F%2F%20Use%20the%20flow%20as%20a%20node%0AmainFlow%20%3A%3D%20flyt.NewFlow(fetchNode)%0AmainFlow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20processingFlow)%20%2F%2F%20Flow%20used%20as%20node%0AmainFlow.Connect(processingFlow%2C%20flyt.DefaultAction%2C%20saveNode)%0A%60%60%60%0A%0A%23%23%20Flow%20Lifecycle%20as%20Node%0A%0AUnderstanding%20how%20flows%20behave%20as%20nodes%3A%0A%0A%60%60%60go%0A%2F%2F%20When%20a%20flow%20is%20used%20as%20a%20node%3A%0A%2F%2F%201.%20Prep%3A%20Prepares%20the%20flow's%20start%20node%0A%2F%2F%202.%20Exec%3A%20Runs%20the%20entire%20flow%0A%2F%2F%203.%20Post%3A%20Returns%20the%20final%20action%20from%20the%20flow%0A%0Afunc%20demonstrateFlowLifecycle()%20%7B%0A%20%20%20%20subFlow%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20subFlow.Connect(startNode%2C%20flyt.DefaultAction%2C%20endNode)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20When%20mainFlow%20executes%20subFlow%3A%0A%20%20%20%20%2F%2F%20-%20subFlow.Prep()%20calls%20startNode.Prep()%0A%20%20%20%20%2F%2F%20-%20subFlow.Exec()%20runs%20the%20entire%20sub-flow%0A%20%20%20%20%2F%2F%20-%20subFlow.Post()%20returns%20the%20final%20action%0A%20%20%20%20%0A%20%20%20%20mainFlow%20%3A%3D%20flyt.NewFlow(initNode)%0A%20%20%20%20mainFlow.Connect(initNode%2C%20flyt.DefaultAction%2C%20subFlow)%0A%7D%0A%60%60%60%0A%0A%23%23%20Composable%20Workflows%0A%0ABuild%20complex%20workflows%20from%20simpler%20ones%3A%0A%0A%60%60%60go%0A%2F%2F%20Level%201%3A%20Basic%20operations%0Afunc%20createValidationFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20schemaNode%20%3A%3D%20createSchemaValidationNode()%0A%20%20%20%20businessNode%20%3A%3D%20createBusinessValidationNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(schemaNode)%0A%20%20%20%20flow.Connect(schemaNode%2C%20%22valid%22%2C%20businessNode)%0A%20%20%20%20return%20flow%0A%7D%0A%0Afunc%20createEnrichmentFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20fetchNode%20%3A%3D%20createDataFetchNode()%0A%20%20%20%20mergeNode%20%3A%3D%20createDataMergeNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(fetchNode)%0A%20%20%20%20flow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20mergeNode)%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Level%202%3A%20Combine%20basic%20flows%0Afunc%20createProcessingPipeline()%20*flyt.Flow%20%7B%0A%20%20%20%20validation%20%3A%3D%20createValidationFlow()%0A%20%20%20%20enrichment%20%3A%3D%20createEnrichmentFlow()%0A%20%20%20%20%0A%20%20%20%20pipeline%20%3A%3D%20flyt.NewFlow(validation)%0A%20%20%20%20pipeline.Connect(validation%2C%20flyt.DefaultAction%2C%20enrichment)%0A%20%20%20%20return%20pipeline%0A%7D%0A%0A%2F%2F%20Level%203%3A%20Use%20in%20application%0Afunc%20createApplicationFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20auth%20%3A%3D%20createAuthFlow()%0A%20%20%20%20pipeline%20%3A%3D%20createProcessingPipeline()%0A%20%20%20%20audit%20%3A%3D%20createAuditFlow()%0A%20%20%20%20%0A%20%20%20%20app%20%3A%3D%20flyt.NewFlow(auth)%0A%20%20%20%20app.Connect(auth%2C%20flyt.DefaultAction%2C%20pipeline)%0A%20%20%20%20app.Connect(pipeline%2C%20flyt.DefaultAction%2C%20audit)%0A%20%20%20%20return%20app%0A%7D%0A%60%60%60%0A%0A%23%23%20Dynamic%20Flow%20Selection%0A%0AChoose%20flows%20at%20runtime%3A%0A%0A%60%60%60go%0Atype%20FlowSelector%20struct%20%7B%0A%20%20%20%20flows%20map%5Bstring%5D*flyt.Flow%0A%7D%0A%0Afunc%20(fs%20*FlowSelector)%20CreateSelectorNode()%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20flowType%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flowType%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0Afunc%20(fs%20*FlowSelector)%20BuildDynamicFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20selector%20%3A%3D%20fs.CreateSelectorNode()%0A%20%20%20%20mainFlow%20%3A%3D%20flyt.NewFlow(selector)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Connect%20different%20flows%20based%20on%20selection%0A%20%20%20%20for%20name%2C%20flow%20%3A%3D%20range%20fs.flows%20%7B%0A%20%20%20%20%20%20%20%20mainFlow.Connect(selector%2C%20flyt.Action(name)%2C%20flow)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20mainFlow%0A%7D%0A%0A%2F%2F%20Usage%0Aselector%20%3A%3D%20%26FlowSelector%7B%0A%20%20%20%20flows%3A%20map%5Bstring%5D*flyt.Flow%7B%0A%20%20%20%20%20%20%20%20%22simple%22%3A%20%20createSimpleFlow()%2C%0A%20%20%20%20%20%20%20%20%22complex%22%3A%20createComplexFlow()%2C%0A%20%20%20%20%20%20%20%20%22custom%22%3A%20%20createCustomFlow()%2C%0A%20%20%20%20%7D%2C%0A%7D%0A%0AdynamicFlow%20%3A%3D%20selector.BuildDynamicFlow()%0A%60%60%60%0A%0A%23%23%20Flow%20Factories%0A%0ACreate%20flows%20on%20demand%3A%0A%0A%60%60%60go%0Atype%20FlowFactory%20interface%20%7B%0A%20%20%20%20CreateFlow(config%20FlowConfig)%20*flyt.Flow%0A%7D%0A%0Atype%20ProcessingFlowFactory%20struct%7B%7D%0A%0Afunc%20(f%20*ProcessingFlowFactory)%20CreateFlow(config%20FlowConfig)%20*flyt.Flow%20%7B%0A%20%20%20%20%2F%2F%20Create%20nodes%20based%20on%20configuration%0A%20%20%20%20var%20nodes%20%5B%5Dflyt.Node%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20nodeConfig%20%3A%3D%20range%20config.Nodes%20%7B%0A%20%20%20%20%20%20%20%20node%20%3A%3D%20createNodeFromConfig(nodeConfig)%0A%20%20%20%20%20%20%20%20nodes%20%3D%20append(nodes%2C%20node)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Build%20flow%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(nodes%5B0%5D)%0A%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20len(nodes)-1%3B%20i%2B%2B%20%7B%0A%20%20%20%20%20%20%20%20flow.Connect(nodes%5Bi%5D%2C%20flyt.DefaultAction%2C%20nodes%5Bi%2B1%5D)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Use%20factory-created%20flows%20as%20nodes%0Afunc%20createDynamicPipeline(factory%20FlowFactory%2C%20configs%20%5B%5DFlowConfig)%20*flyt.Flow%20%7B%0A%20%20%20%20pipeline%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20previous%20%3A%3D%20flyt.Node(startNode)%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20config%20%3A%3D%20range%20configs%20%7B%0A%20%20%20%20%20%20%20%20flow%20%3A%3D%20factory.CreateFlow(config)%0A%20%20%20%20%20%20%20%20pipeline.Connect(previous%2C%20flyt.DefaultAction%2C%20flow)%0A%20%20%20%20%20%20%20%20previous%20%3D%20flow%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20pipeline%0A%7D%0A%60%60%60%0A%0A%23%23%20Recursive%20Flow%20Patterns%0A%0AFlows%20containing%20themselves%3A%0A%0A%60%60%60go%0Afunc%20createRecursiveProcessingFlow(maxDepth%20int)%20*flyt.Flow%20%7B%0A%20%20%20%20var%20flow%20*flyt.Flow%0A%20%20%20%20%0A%20%20%20%20depthCheck%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%2C%20_%20%3A%3D%20shared.Get(%22recursion_depth%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20depth%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20depth%20%3D%200%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20depth.(int)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%20%3A%3D%20prepResult.(int)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20depth%20%3E%3D%20maxDepth%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%22terminate%22%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22recurse%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20execResult.(string)%20%3D%3D%20%22recurse%22%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20depth%20%3A%3D%20prepResult.(int)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22recursion_depth%22%2C%20depth%2B1)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20processNode%20%3A%3D%20createProcessNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3D%20flyt.NewFlow(depthCheck)%0A%20%20%20%20flow.Connect(depthCheck%2C%20%22recurse%22%2C%20processNode)%0A%20%20%20%20flow.Connect(processNode%2C%20flyt.DefaultAction%2C%20flow)%20%2F%2F%20Recursive%20reference%0A%20%20%20%20flow.Connect(depthCheck%2C%20%22terminate%22%2C%20nil)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Flow%20Middleware%0A%0AWrap%20flows%20with%20additional%20behavior%3A%0A%0A%60%60%60go%0Afunc%20withLogging(name%20string%2C%20flow%20*flyt.Flow)%20*flyt.Flow%20%7B%0A%20%20%20%20logStart%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Flow%20starting%22%2C%20name)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20prepResult%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20logEnd%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Flow%20completed%22%2C%20name)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20prepResult%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20wrapped%20%3A%3D%20flyt.NewFlow(logStart)%0A%20%20%20%20wrapped.Connect(logStart%2C%20flyt.DefaultAction%2C%20flow)%0A%20%20%20%20wrapped.Connect(flow%2C%20flyt.DefaultAction%2C%20logEnd)%0A%20%20%20%20%0A%20%20%20%20return%20wrapped%0A%7D%0A%0A%2F%2F%20Usage%0AprocessFlow%20%3A%3D%20createProcessingFlow()%0AloggedFlow%20%3A%3D%20withLogging(%22ProcessingPipeline%22%2C%20processFlow)%0A%60%60%60%0A%0A%23%23%20Testing%20Flows%20as%20Nodes%0A%0ATest%20flow%20behavior%20when%20used%20as%20nodes%3A%0A%0A%60%60%60go%0Afunc%20TestFlowAsNode(t%20*testing.T)%20%7B%0A%20%20%20%20%2F%2F%20Create%20a%20simple%20flow%0A%20%20%20%20innerFlow%20%3A%3D%20flyt.NewFlow(%0A%20%20%20%20%20%20%20%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%22inner_result%22%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Test%20the%20flow%20directly%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Call%20flow%20methods%20as%20if%20it%20were%20a%20node%0A%20%20%20%20prepResult%2C%20err%20%3A%3D%20innerFlow.Prep(ctx%2C%20shared)%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%20%20%20%20%0A%20%20%20%20execResult%2C%20err%20%3A%3D%20innerFlow.Exec(ctx%2C%20prepResult)%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%20%20%20%20%0A%20%20%20%20action%2C%20err%20%3A%3D%20innerFlow.Post(ctx%2C%20shared%2C%20prepResult%2C%20execResult)%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%20%20%20%20assert.Equal(t%2C%20flyt.DefaultAction%2C%20action)%0A%7D%0A%60%60%60%0A%0A%23%23%20Performance%20Considerations%0A%0AUsing%20flows%20as%20nodes%3A%0A%0A%60%60%60go%0A%2F%2F%20Lightweight%20flow%20-%20good%20as%20node%0Afunc%20createLightweightFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Simple%20operation%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20transform(prepResult)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20return%20flyt.NewFlow(node)%0A%7D%0A%0A%2F%2F%20Heavy%20flow%20-%20consider%20alternatives%0Afunc%20createHeavyFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20%2F%2F%20Many%20nodes%2C%20complex%20logic%0A%20%20%20%20%2F%2F%20Consider%20breaking%20into%20smaller%20flows%0A%20%20%20%20%2F%2F%20or%20using%20batch%20processing%0A%7D%0A%0A%2F%2F%20Alternative%3A%20Use%20node%20with%20embedded%20logic%0Afunc%20createOptimizedNode()%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Inline%20the%20flow%20logic%20for%20performance%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3A%3D%20step1(prepResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%20step2(result)%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%20step3(result)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Keep%20Flows%20Focused**%3A%20Flows%20used%20as%20nodes%20should%20have%20clear%2C%20single%20purposes%0A2.%20**Document%20Behavior**%3A%20Clearly%20document%20what%20the%20flow%20expects%20and%20returns%0A3.%20**Test%20Thoroughly**%3A%20Test%20flows%20both%20standalone%20and%20as%20nodes%0A4.%20**Consider%20Performance**%3A%20Be%20mindful%20of%20overhead%20when%20nesting%20many%20flows%0A5.%20**Use%20Meaningful%20Names**%3A%20Name%20flows%20to%20indicate%20they're%20used%20as%20nodes%0A6.%20**Handle%20Errors**%3A%20Ensure%20proper%20error%20propagation%20through%20nested%20flows%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BNested%20Flows%5D(%2Fadvanced%2Fnested-flows)%20-%20Complex%20flow%20composition%0A-%20%5BNodes%5D(%2Fconcepts%2Fnodes)%20-%20Node%20interface%20details%0A-%20%5BFlows%5D(%2Fconcepts%2Fflows)%20-%20Flow%20fundamentals", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/nested-flows-C0_gKNWT.js"), path: "/advanced/nested-flows", type: "mdx", filePath: "advanced/nested-flows.mdx", content: "%23%20Nested%20Flows%0A%0ACompose%20complex%20workflows%20by%20nesting%20flows%20within%20flows%2C%20creating%20modular%20and%20reusable%20workflow%20components.%0A%0A%23%23%20Basic%20Nested%20Flow%0A%0AUse%20a%20flow%20as%20a%20node%20in%20another%20flow%3A%0A%0A%60%60%60go%0A%2F%2F%20Create%20a%20sub-flow%20for%20validation%0AvalidationFlow%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20schemaCheck%20%3A%3D%20createSchemaCheckNode()%0A%20%20%20%20businessRules%20%3A%3D%20createBusinessRulesNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(schemaCheck)%0A%20%20%20%20flow.Connect(schemaCheck%2C%20%22valid%22%2C%20businessRules)%0A%20%20%20%20flow.Connect(schemaCheck%2C%20%22invalid%22%2C%20nil)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D()%0A%0A%2F%2F%20Use%20in%20main%20flow%0AmainFlow%20%3A%3D%20flyt.NewFlow(fetchNode)%0AmainFlow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20validationFlow)%0AmainFlow.Connect(validationFlow%2C%20flyt.DefaultAction%2C%20processNode)%0A%60%60%60%0A%0A%23%23%20Reusable%20Flow%20Components%0A%0ACreate%20modular%20flow%20components%3A%0A%0A%60%60%60go%0A%2F%2F%20Reusable%20authentication%20flow%0Afunc%20createAuthFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20checkToken%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20token%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20validateToken(token)%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20refreshToken%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20refreshAuthToken()%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(checkToken)%0A%20%20%20%20flow.Connect(checkToken%2C%20%22expired%22%2C%20refreshToken)%0A%20%20%20%20flow.Connect(checkToken%2C%20%22valid%22%2C%20nil)%0A%20%20%20%20flow.Connect(refreshToken%2C%20flyt.DefaultAction%2C%20nil)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Use%20in%20multiple%20places%0AapiFlow%20%3A%3D%20flyt.NewFlow(startNode)%0AapiFlow.Connect(startNode%2C%20flyt.DefaultAction%2C%20createAuthFlow())%0A%0AadminFlow%20%3A%3D%20flyt.NewFlow(adminNode)%0AadminFlow.Connect(adminNode%2C%20flyt.DefaultAction%2C%20createAuthFlow())%0A%60%60%60%0A%0A%23%23%20Hierarchical%20Workflows%0A%0ABuild%20multi-level%20workflow%20hierarchies%3A%0A%0A%60%60%60go%0A%2F%2F%20Level%203%3A%20Atomic%20operations%0Afunc%20createDatabaseOperation()%20*flyt.Flow%20%7B%0A%20%20%20%20connect%20%3A%3D%20createConnectNode()%0A%20%20%20%20query%20%3A%3D%20createQueryNode()%0A%20%20%20%20disconnect%20%3A%3D%20createDisconnectNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(connect)%0A%20%20%20%20flow.Connect(connect%2C%20flyt.DefaultAction%2C%20query)%0A%20%20%20%20flow.Connect(query%2C%20flyt.DefaultAction%2C%20disconnect)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Level%202%3A%20Business%20operations%0Afunc%20createUserOperation()%20*flyt.Flow%20%7B%0A%20%20%20%20validate%20%3A%3D%20createValidateUserNode()%0A%20%20%20%20dbOp%20%3A%3D%20createDatabaseOperation()%0A%20%20%20%20notify%20%3A%3D%20createNotificationNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(validate)%0A%20%20%20%20flow.Connect(validate%2C%20%22valid%22%2C%20dbOp)%0A%20%20%20%20flow.Connect(dbOp%2C%20flyt.DefaultAction%2C%20notify)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Level%201%3A%20Application%20flow%0Afunc%20createApplicationFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20auth%20%3A%3D%20createAuthFlow()%0A%20%20%20%20userOp%20%3A%3D%20createUserOperation()%0A%20%20%20%20audit%20%3A%3D%20createAuditFlow()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(auth)%0A%20%20%20%20flow.Connect(auth%2C%20flyt.DefaultAction%2C%20userOp)%0A%20%20%20%20flow.Connect(userOp%2C%20flyt.DefaultAction%2C%20audit)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Conditional%20Nesting%0A%0ADynamically%20choose%20nested%20flows%3A%0A%0A%60%60%60go%0ArouterNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20request%20%3A%3D%20prepResult.(Request)%0A%20%20%20%20%20%20%20%20return%20request.Type%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0AmainFlow%20%3A%3D%20flyt.NewFlow(routerNode)%0AmainFlow.Connect(routerNode%2C%20%22user%22%2C%20createUserFlow())%0AmainFlow.Connect(routerNode%2C%20%22admin%22%2C%20createAdminFlow())%0AmainFlow.Connect(routerNode%2C%20%22api%22%2C%20createAPIFlow())%0A%60%60%60%0A%0A%23%23%20Shared%20Context%20in%20Nested%20Flows%0A%0APass%20context%20through%20nested%20flows%3A%0A%0A%60%60%60go%0Afunc%20createNestedFlowWithContext(parentContext%20map%5Bstring%5Dany)%20*flyt.Flow%20%7B%0A%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Access%20parent%20context%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20k%2C%20v%20%3A%3D%20range%20parentContext%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(k%2C%20v)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Get%20data%20from%20parent%20flow%0A%20%20%20%20%20%20%20%20%20%20%20%20parentData%2C%20_%20%3A%3D%20shared.Get(%22parent_data%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20parentData%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Process%20with%20parent%20context%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20processWithContext(prepResult%2C%20parentContext)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewFlow(node)%0A%7D%0A%60%60%60%0A%0A%23%23%20Error%20Propagation%0A%0AHandle%20errors%20across%20nested%20flows%3A%0A%0A%60%60%60go%0Afunc%20createErrorHandlingFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20subFlow%20%3A%3D%20createSubFlow()%0A%20%20%20%20errorHandler%20%3A%3D%20createErrorHandlerNode()%0A%20%20%20%20%0A%20%20%20%20mainFlow%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20mainFlow.Connect(startNode%2C%20flyt.DefaultAction%2C%20subFlow)%0A%20%20%20%20mainFlow.Connect(subFlow%2C%20%22error%22%2C%20errorHandler)%0A%20%20%20%20mainFlow.Connect(subFlow%2C%20flyt.DefaultAction%2C%20successNode)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Error%20handler%20can%20retry%20or%20recover%0A%20%20%20%20mainFlow.Connect(errorHandler%2C%20%22retry%22%2C%20subFlow)%0A%20%20%20%20mainFlow.Connect(errorHandler%2C%20%22abort%22%2C%20nil)%0A%20%20%20%20%0A%20%20%20%20return%20mainFlow%0A%7D%0A%60%60%60%0A%0A%23%23%20Recursive%20Flows%0A%0ACreate%20recursive%20workflow%20patterns%3A%0A%0A%60%60%60go%0Afunc%20createRecursiveFlow(maxDepth%20int)%20*flyt.Flow%20%7B%0A%20%20%20%20checkDepth%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%2C%20_%20%3A%3D%20shared.Get(%22depth%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20depth%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20depth%20%3D%200%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20depth.(int)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%20%3A%3D%20prepResult.(int)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20depth%20%3E%3D%20maxDepth%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%22max_depth%22%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22continue%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20execResult.(string)%20%3D%3D%20%22continue%22%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20depth%20%3A%3D%20prepResult.(int)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22depth%22%2C%20depth%2B1)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20processNode%20%3A%3D%20createProcessNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(checkDepth)%0A%20%20%20%20flow.Connect(checkDepth%2C%20%22continue%22%2C%20processNode)%0A%20%20%20%20flow.Connect(processNode%2C%20flyt.DefaultAction%2C%20flow)%20%2F%2F%20Recursive%20connection%0A%20%20%20%20flow.Connect(checkDepth%2C%20%22max_depth%22%2C%20nil)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Parallel%20Nested%20Flows%0A%0AExecute%20nested%20flows%20in%20parallel%3A%0A%0A%60%60%60go%0Afunc%20createParallelNestedFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20splitNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Split%20data%20for%20parallel%20processing%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(Data)%0A%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22part1%22%2C%20data.Part1)%0A%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22part2%22%2C%20data.Part2)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Create%20parallel%20sub-flows%0A%20%20%20%20flow1%20%3A%3D%20createProcessingFlow1()%0A%20%20%20%20flow2%20%3A%3D%20createProcessingFlow2()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Merge%20results%0A%20%20%20%20mergeNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result1%2C%20_%20%3A%3D%20shared.Get(%22result1%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20result2%2C%20_%20%3A%3D%20shared.Get(%22result2%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22result1%22%3A%20result1%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22result2%22%3A%20result2%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Connect%20with%20parallel%20execution%0A%20%20%20%20mainFlow%20%3A%3D%20flyt.NewFlow(splitNode)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Both%20flows%20execute%20after%20split%0A%20%20%20%20mainFlow.Connect(splitNode%2C%20%22flow1%22%2C%20flow1)%0A%20%20%20%20mainFlow.Connect(splitNode%2C%20%22flow2%22%2C%20flow2)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Both%20must%20complete%20before%20merge%0A%20%20%20%20mainFlow.Connect(flow1%2C%20flyt.DefaultAction%2C%20mergeNode)%0A%20%20%20%20mainFlow.Connect(flow2%2C%20flyt.DefaultAction%2C%20mergeNode)%0A%20%20%20%20%0A%20%20%20%20return%20mainFlow%0A%7D%0A%60%60%60%0A%0A%23%23%20Dynamic%20Flow%20Composition%0A%0ABuild%20flows%20at%20runtime%3A%0A%0A%60%60%60go%0Afunc%20createDynamicFlow(config%20FlowConfig)%20*flyt.Flow%20%7B%0A%20%20%20%20startNode%20%3A%3D%20createStartNode()%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20%0A%20%20%20%20previousNode%20%3A%3D%20flyt.Node(startNode)%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20step%20%3A%3D%20range%20config.Steps%20%7B%0A%20%20%20%20%20%20%20%20var%20stepFlow%20*flyt.Flow%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20switch%20step.Type%20%7B%0A%20%20%20%20%20%20%20%20case%20%22validate%22%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20stepFlow%20%3D%20createValidationFlow(step.Config)%0A%20%20%20%20%20%20%20%20case%20%22process%22%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20stepFlow%20%3D%20createProcessingFlow(step.Config)%0A%20%20%20%20%20%20%20%20case%20%22save%22%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20stepFlow%20%3D%20createSaveFlow(step.Config)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20stepFlow%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20flow.Connect(previousNode%2C%20flyt.DefaultAction%2C%20stepFlow)%0A%20%20%20%20%20%20%20%20%20%20%20%20previousNode%20%3D%20stepFlow%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Testing%20Nested%20Flows%0A%0ATest%20nested%20flows%20in%20isolation%3A%0A%0A%60%60%60go%0Afunc%20TestNestedFlow(t%20*testing.T)%20%7B%0A%20%20%20%20%2F%2F%20Test%20sub-flow%20independently%0A%20%20%20%20subFlow%20%3A%3D%20createSubFlow()%0A%20%20%20%20subShared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20subShared.Set(%22test_input%22%2C%20%22data%22)%0A%20%20%20%20%0A%20%20%20%20err%20%3A%3D%20subFlow.Run(context.Background()%2C%20subShared)%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Test%20main%20flow%20with%20mocked%20sub-flow%0A%20%20%20%20mockSubFlow%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22mocked_result%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20mainFlow%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20mainFlow.Connect(startNode%2C%20flyt.DefaultAction%2C%20mockSubFlow)%0A%20%20%20%20%0A%20%20%20%20err%20%3D%20mainFlow.Run(context.Background()%2C%20flyt.NewSharedStore())%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Keep%20Flows%20Focused**%3A%20Each%20flow%20should%20have%20a%20single%2C%20clear%20purpose%0A2.%20**Minimize%20Coupling**%3A%20Flows%20should%20communicate%20through%20well-defined%20interfaces%0A3.%20**Document%20Dependencies**%3A%20Clearly%20document%20what%20each%20nested%20flow%20expects%0A4.%20**Test%20in%20Isolation**%3A%20Test%20nested%20flows%20independently%0A5.%20**Avoid%20Deep%20Nesting**%3A%20Too%20many%20levels%20make%20debugging%20difficult%0A6.%20**Use%20Meaningful%20Names**%3A%20Name%20flows%20based%20on%20their%20business%20function%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BFlow%20as%20Node%5D(%2Fadvanced%2Fflow-as-node)%20-%20Flows%20implementing%20Node%20interface%0A-%20%5BBatch%20Flows%5D(%2Fadvanced%2Fbatch-flows)%20-%20Running%20flows%20in%20batches%0A-%20%5BFlows%5D(%2Fconcepts%2Fflows)%20-%20Flow%20fundamentals", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/nested-flows-C0_gKNWT.js"), path: "/advanced/nested-flows.html", type: "mdx", filePath: "advanced/nested-flows.mdx", content: "%23%20Nested%20Flows%0A%0ACompose%20complex%20workflows%20by%20nesting%20flows%20within%20flows%2C%20creating%20modular%20and%20reusable%20workflow%20components.%0A%0A%23%23%20Basic%20Nested%20Flow%0A%0AUse%20a%20flow%20as%20a%20node%20in%20another%20flow%3A%0A%0A%60%60%60go%0A%2F%2F%20Create%20a%20sub-flow%20for%20validation%0AvalidationFlow%20%3A%3D%20func()%20*flyt.Flow%20%7B%0A%20%20%20%20schemaCheck%20%3A%3D%20createSchemaCheckNode()%0A%20%20%20%20businessRules%20%3A%3D%20createBusinessRulesNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(schemaCheck)%0A%20%20%20%20flow.Connect(schemaCheck%2C%20%22valid%22%2C%20businessRules)%0A%20%20%20%20flow.Connect(schemaCheck%2C%20%22invalid%22%2C%20nil)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D()%0A%0A%2F%2F%20Use%20in%20main%20flow%0AmainFlow%20%3A%3D%20flyt.NewFlow(fetchNode)%0AmainFlow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20validationFlow)%0AmainFlow.Connect(validationFlow%2C%20flyt.DefaultAction%2C%20processNode)%0A%60%60%60%0A%0A%23%23%20Reusable%20Flow%20Components%0A%0ACreate%20modular%20flow%20components%3A%0A%0A%60%60%60go%0A%2F%2F%20Reusable%20authentication%20flow%0Afunc%20createAuthFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20checkToken%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20token%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20validateToken(token)%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20refreshToken%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20refreshAuthToken()%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(checkToken)%0A%20%20%20%20flow.Connect(checkToken%2C%20%22expired%22%2C%20refreshToken)%0A%20%20%20%20flow.Connect(checkToken%2C%20%22valid%22%2C%20nil)%0A%20%20%20%20flow.Connect(refreshToken%2C%20flyt.DefaultAction%2C%20nil)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Use%20in%20multiple%20places%0AapiFlow%20%3A%3D%20flyt.NewFlow(startNode)%0AapiFlow.Connect(startNode%2C%20flyt.DefaultAction%2C%20createAuthFlow())%0A%0AadminFlow%20%3A%3D%20flyt.NewFlow(adminNode)%0AadminFlow.Connect(adminNode%2C%20flyt.DefaultAction%2C%20createAuthFlow())%0A%60%60%60%0A%0A%23%23%20Hierarchical%20Workflows%0A%0ABuild%20multi-level%20workflow%20hierarchies%3A%0A%0A%60%60%60go%0A%2F%2F%20Level%203%3A%20Atomic%20operations%0Afunc%20createDatabaseOperation()%20*flyt.Flow%20%7B%0A%20%20%20%20connect%20%3A%3D%20createConnectNode()%0A%20%20%20%20query%20%3A%3D%20createQueryNode()%0A%20%20%20%20disconnect%20%3A%3D%20createDisconnectNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(connect)%0A%20%20%20%20flow.Connect(connect%2C%20flyt.DefaultAction%2C%20query)%0A%20%20%20%20flow.Connect(query%2C%20flyt.DefaultAction%2C%20disconnect)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Level%202%3A%20Business%20operations%0Afunc%20createUserOperation()%20*flyt.Flow%20%7B%0A%20%20%20%20validate%20%3A%3D%20createValidateUserNode()%0A%20%20%20%20dbOp%20%3A%3D%20createDatabaseOperation()%0A%20%20%20%20notify%20%3A%3D%20createNotificationNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(validate)%0A%20%20%20%20flow.Connect(validate%2C%20%22valid%22%2C%20dbOp)%0A%20%20%20%20flow.Connect(dbOp%2C%20flyt.DefaultAction%2C%20notify)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%0A%2F%2F%20Level%201%3A%20Application%20flow%0Afunc%20createApplicationFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20auth%20%3A%3D%20createAuthFlow()%0A%20%20%20%20userOp%20%3A%3D%20createUserOperation()%0A%20%20%20%20audit%20%3A%3D%20createAuditFlow()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(auth)%0A%20%20%20%20flow.Connect(auth%2C%20flyt.DefaultAction%2C%20userOp)%0A%20%20%20%20flow.Connect(userOp%2C%20flyt.DefaultAction%2C%20audit)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Conditional%20Nesting%0A%0ADynamically%20choose%20nested%20flows%3A%0A%0A%60%60%60go%0ArouterNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20request%20%3A%3D%20prepResult.(Request)%0A%20%20%20%20%20%20%20%20return%20request.Type%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0AmainFlow%20%3A%3D%20flyt.NewFlow(routerNode)%0AmainFlow.Connect(routerNode%2C%20%22user%22%2C%20createUserFlow())%0AmainFlow.Connect(routerNode%2C%20%22admin%22%2C%20createAdminFlow())%0AmainFlow.Connect(routerNode%2C%20%22api%22%2C%20createAPIFlow())%0A%60%60%60%0A%0A%23%23%20Shared%20Context%20in%20Nested%20Flows%0A%0APass%20context%20through%20nested%20flows%3A%0A%0A%60%60%60go%0Afunc%20createNestedFlowWithContext(parentContext%20map%5Bstring%5Dany)%20*flyt.Flow%20%7B%0A%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Access%20parent%20context%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20k%2C%20v%20%3A%3D%20range%20parentContext%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(k%2C%20v)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Get%20data%20from%20parent%20flow%0A%20%20%20%20%20%20%20%20%20%20%20%20parentData%2C%20_%20%3A%3D%20shared.Get(%22parent_data%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20parentData%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Process%20with%20parent%20context%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20processWithContext(prepResult%2C%20parentContext)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewFlow(node)%0A%7D%0A%60%60%60%0A%0A%23%23%20Error%20Propagation%0A%0AHandle%20errors%20across%20nested%20flows%3A%0A%0A%60%60%60go%0Afunc%20createErrorHandlingFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20subFlow%20%3A%3D%20createSubFlow()%0A%20%20%20%20errorHandler%20%3A%3D%20createErrorHandlerNode()%0A%20%20%20%20%0A%20%20%20%20mainFlow%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20mainFlow.Connect(startNode%2C%20flyt.DefaultAction%2C%20subFlow)%0A%20%20%20%20mainFlow.Connect(subFlow%2C%20%22error%22%2C%20errorHandler)%0A%20%20%20%20mainFlow.Connect(subFlow%2C%20flyt.DefaultAction%2C%20successNode)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Error%20handler%20can%20retry%20or%20recover%0A%20%20%20%20mainFlow.Connect(errorHandler%2C%20%22retry%22%2C%20subFlow)%0A%20%20%20%20mainFlow.Connect(errorHandler%2C%20%22abort%22%2C%20nil)%0A%20%20%20%20%0A%20%20%20%20return%20mainFlow%0A%7D%0A%60%60%60%0A%0A%23%23%20Recursive%20Flows%0A%0ACreate%20recursive%20workflow%20patterns%3A%0A%0A%60%60%60go%0Afunc%20createRecursiveFlow(maxDepth%20int)%20*flyt.Flow%20%7B%0A%20%20%20%20checkDepth%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%2C%20_%20%3A%3D%20shared.Get(%22depth%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20depth%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20depth%20%3D%200%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20depth.(int)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20depth%20%3A%3D%20prepResult.(int)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20depth%20%3E%3D%20maxDepth%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%22max_depth%22%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22continue%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20execResult.(string)%20%3D%3D%20%22continue%22%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20depth%20%3A%3D%20prepResult.(int)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22depth%22%2C%20depth%2B1)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20processNode%20%3A%3D%20createProcessNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(checkDepth)%0A%20%20%20%20flow.Connect(checkDepth%2C%20%22continue%22%2C%20processNode)%0A%20%20%20%20flow.Connect(processNode%2C%20flyt.DefaultAction%2C%20flow)%20%2F%2F%20Recursive%20connection%0A%20%20%20%20flow.Connect(checkDepth%2C%20%22max_depth%22%2C%20nil)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Parallel%20Nested%20Flows%0A%0AExecute%20nested%20flows%20in%20parallel%3A%0A%0A%60%60%60go%0Afunc%20createParallelNestedFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20splitNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Split%20data%20for%20parallel%20processing%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(Data)%0A%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22part1%22%2C%20data.Part1)%0A%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22part2%22%2C%20data.Part2)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Create%20parallel%20sub-flows%0A%20%20%20%20flow1%20%3A%3D%20createProcessingFlow1()%0A%20%20%20%20flow2%20%3A%3D%20createProcessingFlow2()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Merge%20results%0A%20%20%20%20mergeNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result1%2C%20_%20%3A%3D%20shared.Get(%22result1%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20result2%2C%20_%20%3A%3D%20shared.Get(%22result2%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22result1%22%3A%20result1%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22result2%22%3A%20result2%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Connect%20with%20parallel%20execution%0A%20%20%20%20mainFlow%20%3A%3D%20flyt.NewFlow(splitNode)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Both%20flows%20execute%20after%20split%0A%20%20%20%20mainFlow.Connect(splitNode%2C%20%22flow1%22%2C%20flow1)%0A%20%20%20%20mainFlow.Connect(splitNode%2C%20%22flow2%22%2C%20flow2)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Both%20must%20complete%20before%20merge%0A%20%20%20%20mainFlow.Connect(flow1%2C%20flyt.DefaultAction%2C%20mergeNode)%0A%20%20%20%20mainFlow.Connect(flow2%2C%20flyt.DefaultAction%2C%20mergeNode)%0A%20%20%20%20%0A%20%20%20%20return%20mainFlow%0A%7D%0A%60%60%60%0A%0A%23%23%20Dynamic%20Flow%20Composition%0A%0ABuild%20flows%20at%20runtime%3A%0A%0A%60%60%60go%0Afunc%20createDynamicFlow(config%20FlowConfig)%20*flyt.Flow%20%7B%0A%20%20%20%20startNode%20%3A%3D%20createStartNode()%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20%0A%20%20%20%20previousNode%20%3A%3D%20flyt.Node(startNode)%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20step%20%3A%3D%20range%20config.Steps%20%7B%0A%20%20%20%20%20%20%20%20var%20stepFlow%20*flyt.Flow%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20switch%20step.Type%20%7B%0A%20%20%20%20%20%20%20%20case%20%22validate%22%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20stepFlow%20%3D%20createValidationFlow(step.Config)%0A%20%20%20%20%20%20%20%20case%20%22process%22%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20stepFlow%20%3D%20createProcessingFlow(step.Config)%0A%20%20%20%20%20%20%20%20case%20%22save%22%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20stepFlow%20%3D%20createSaveFlow(step.Config)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20stepFlow%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20flow.Connect(previousNode%2C%20flyt.DefaultAction%2C%20stepFlow)%0A%20%20%20%20%20%20%20%20%20%20%20%20previousNode%20%3D%20stepFlow%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Testing%20Nested%20Flows%0A%0ATest%20nested%20flows%20in%20isolation%3A%0A%0A%60%60%60go%0Afunc%20TestNestedFlow(t%20*testing.T)%20%7B%0A%20%20%20%20%2F%2F%20Test%20sub-flow%20independently%0A%20%20%20%20subFlow%20%3A%3D%20createSubFlow()%0A%20%20%20%20subShared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20subShared.Set(%22test_input%22%2C%20%22data%22)%0A%20%20%20%20%0A%20%20%20%20err%20%3A%3D%20subFlow.Run(context.Background()%2C%20subShared)%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Test%20main%20flow%20with%20mocked%20sub-flow%0A%20%20%20%20mockSubFlow%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22mocked_result%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20mainFlow%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20mainFlow.Connect(startNode%2C%20flyt.DefaultAction%2C%20mockSubFlow)%0A%20%20%20%20%0A%20%20%20%20err%20%3D%20mainFlow.Run(context.Background()%2C%20flyt.NewSharedStore())%0A%20%20%20%20assert.NoError(t%2C%20err)%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Keep%20Flows%20Focused**%3A%20Each%20flow%20should%20have%20a%20single%2C%20clear%20purpose%0A2.%20**Minimize%20Coupling**%3A%20Flows%20should%20communicate%20through%20well-defined%20interfaces%0A3.%20**Document%20Dependencies**%3A%20Clearly%20document%20what%20each%20nested%20flow%20expects%0A4.%20**Test%20in%20Isolation**%3A%20Test%20nested%20flows%20independently%0A5.%20**Avoid%20Deep%20Nesting**%3A%20Too%20many%20levels%20make%20debugging%20difficult%0A6.%20**Use%20Meaningful%20Names**%3A%20Name%20flows%20based%20on%20their%20business%20function%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BFlow%20as%20Node%5D(%2Fadvanced%2Fflow-as-node)%20-%20Flows%20implementing%20Node%20interface%0A-%20%5BBatch%20Flows%5D(%2Fadvanced%2Fbatch-flows)%20-%20Running%20flows%20in%20batches%0A-%20%5BFlows%5D(%2Fconcepts%2Fflows)%20-%20Flow%20fundamentals", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/utilities-DrOUkt7L.js"), path: "/advanced/utilities", type: "mdx", filePath: "advanced/utilities.mdx", content: "%23%20Utilities%0A%0AHelper%20functions%20and%20utilities%20to%20simplify%20common%20tasks%20in%20Flyt%20workflows.%0A%0A%23%23%20ToSlice%0A%0AConvert%20various%20types%20to%20slices%20for%20batch%20processing%3A%0A%0A%60%60%60go%0A%2F%2F%20Convert%20different%20types%20to%20%5B%5Dany%0AstringSlice%20%3A%3D%20flyt.ToSlice(%5B%5Dstring%7B%22a%22%2C%20%22b%22%2C%20%22c%22%7D)%0AintSlice%20%3A%3D%20flyt.ToSlice(%5B%5Dint%7B1%2C%202%2C%203%7D)%0AsingleItem%20%3A%3D%20flyt.ToSlice(%22single%20item%22)%20%2F%2F%20Returns%20%5B%5Dany%7B%22single%20item%22%7D%0AnilValue%20%3A%3D%20flyt.ToSlice(nil)%20%2F%2F%20Returns%20empty%20%5B%5Dany%7B%7D%0A%0A%2F%2F%20Useful%20for%20batch%20processing%0Ashared.Set(%22items%22%2C%20flyt.ToSlice(data))%0A%60%60%60%0A%0A%23%23%23%20Implementation%20Details%0A%0A%60%60%60go%0Afunc%20ToSlice(v%20any)%20%5B%5Dany%20%7B%0A%20%20%20%20if%20v%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20%5B%5Dany%7B%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20rv%20%3A%3D%20reflect.ValueOf(v)%0A%20%20%20%20if%20rv.Kind()%20%3D%3D%20reflect.Slice%20%7B%0A%20%20%20%20%20%20%20%20result%20%3A%3D%20make(%5B%5Dany%2C%20rv.Len())%0A%20%20%20%20%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20rv.Len()%3B%20i%2B%2B%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%5Bi%5D%20%3D%20rv.Index(i).Interface()%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20result%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Single%20item%0A%20%20%20%20return%20%5B%5Dany%7Bv%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Custom%20Utility%20Functions%0A%0ACreate%20your%20own%20utilities%3A%0A%0A%23%23%23%20Retry%20Helper%0A%0A%60%60%60go%0Afunc%20RetryOperation(operation%20func()%20error%2C%20maxRetries%20int%2C%20backoff%20time.Duration)%20error%20%7B%0A%20%20%20%20var%20lastErr%20error%0A%20%20%20%20%0A%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20maxRetries%3B%20i%2B%2B%20%7B%0A%20%20%20%20%20%20%20%20if%20err%20%3A%3D%20operation()%3B%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%0A%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20lastErr%20%3D%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20i%20%3C%20maxRetries-1%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20time.Sleep(backoff%20*%20time.Duration(i%2B1))%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20fmt.Errorf(%22operation%20failed%20after%20%25d%20retries%3A%20%25w%22%2C%20maxRetries%2C%20lastErr)%0A%7D%0A%0A%2F%2F%20Usage%20in%20node%0Afunc%20(n%20*MyNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20var%20result%20any%0A%20%20%20%20%0A%20%20%20%20err%20%3A%3D%20RetryOperation(func()%20error%20%7B%0A%20%20%20%20%20%20%20%20var%20err%20error%0A%20%20%20%20%20%20%20%20result%2C%20err%20%3D%20callAPI(prepResult)%0A%20%20%20%20%20%20%20%20return%20err%0A%20%20%20%20%7D%2C%203%2C%20time.Second)%0A%20%20%20%20%0A%20%20%20%20return%20result%2C%20err%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Parallel%20Map%0A%0A%60%60%60go%0Afunc%20ParallelMap%5BT%20any%2C%20R%20any%5D(items%20%5B%5DT%2C%20fn%20func(T)%20R%2C%20workers%20int)%20%5B%5DR%20%7B%0A%20%20%20%20results%20%3A%3D%20make(%5B%5DR%2C%20len(items))%0A%20%20%20%20%0A%20%20%20%20var%20wg%20sync.WaitGroup%0A%20%20%20%20semaphore%20%3A%3D%20make(chan%20struct%7B%7D%2C%20workers)%0A%20%20%20%20%0A%20%20%20%20for%20i%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20wg.Add(1)%0A%20%20%20%20%20%20%20%20go%20func(index%20int%2C%20data%20T)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20wg.Done()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20semaphore%20%3C-%20struct%7B%7D%7B%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20func()%20%7B%20%3C-semaphore%20%7D()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20results%5Bindex%5D%20%3D%20fn(data)%0A%20%20%20%20%20%20%20%20%7D(i%2C%20item)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20wg.Wait()%0A%20%20%20%20return%20results%0A%7D%0A%0A%2F%2F%20Usage%0Aresults%20%3A%3D%20ParallelMap(items%2C%20processItem%2C%2010)%0A%60%60%60%0A%0A%23%23%23%20Safe%20Type%20Assertion%0A%0A%60%60%60go%0Afunc%20SafeGet%5BT%20any%5D(shared%20*flyt.SharedStore%2C%20key%20string)%20(T%2C%20bool)%20%7B%0A%20%20%20%20var%20zero%20T%0A%20%20%20%20%0A%20%20%20%20value%2C%20exists%20%3A%3D%20shared.Get(key)%0A%20%20%20%20if%20!exists%20%7B%0A%20%20%20%20%20%20%20%20return%20zero%2C%20false%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20typed%2C%20ok%20%3A%3D%20value.(T)%0A%20%20%20%20if%20!ok%20%7B%0A%20%20%20%20%20%20%20%20return%20zero%2C%20false%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20typed%2C%20true%0A%7D%0A%0A%2F%2F%20Usage%0Aif%20userID%2C%20ok%20%3A%3D%20SafeGet%5Bint%5D(shared%2C%20%22user_id%22)%3B%20ok%20%7B%0A%20%20%20%20%2F%2F%20Use%20userID%20safely%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Chunk%20Slice%0A%0A%60%60%60go%0Afunc%20ChunkSlice%5BT%20any%5D(slice%20%5B%5DT%2C%20chunkSize%20int)%20%5B%5D%5B%5DT%20%7B%0A%20%20%20%20var%20chunks%20%5B%5D%5B%5DT%0A%20%20%20%20%0A%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20len(slice)%3B%20i%20%2B%3D%20chunkSize%20%7B%0A%20%20%20%20%20%20%20%20end%20%3A%3D%20i%20%2B%20chunkSize%0A%20%20%20%20%20%20%20%20if%20end%20%3E%20len(slice)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20%3D%20len(slice)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20chunks%20%3D%20append(chunks%2C%20slice%5Bi%3Aend%5D)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20chunks%0A%7D%0A%0A%2F%2F%20Usage%20in%20batch%20processing%0Achunks%20%3A%3D%20ChunkSlice(items%2C%20100)%0Afor%20_%2C%20chunk%20%3A%3D%20range%20chunks%20%7B%0A%20%20%20%20processChunk(chunk)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Merge%20Maps%0A%0A%60%60%60go%0Afunc%20MergeMaps(maps%20...map%5Bstring%5Dany)%20map%5Bstring%5Dany%20%7B%0A%20%20%20%20result%20%3A%3D%20make(map%5Bstring%5Dany)%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20m%20%3A%3D%20range%20maps%20%7B%0A%20%20%20%20%20%20%20%20for%20k%2C%20v%20%3A%3D%20range%20m%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%5Bk%5D%20%3D%20v%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20result%0A%7D%0A%0A%2F%2F%20Usage%0Aconfig%20%3A%3D%20MergeMaps(defaultConfig%2C%20userConfig%2C%20overrides)%0A%60%60%60%0A%0A%23%23%23%20Filter%20Slice%0A%0A%60%60%60go%0Afunc%20FilterSlice%5BT%20any%5D(slice%20%5B%5DT%2C%20predicate%20func(T)%20bool)%20%5B%5DT%20%7B%0A%20%20%20%20result%20%3A%3D%20make(%5B%5DT%2C%200)%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20item%20%3A%3D%20range%20slice%20%7B%0A%20%20%20%20%20%20%20%20if%20predicate(item)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%20append(result%2C%20item)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20result%0A%7D%0A%0A%2F%2F%20Usage%0AvalidItems%20%3A%3D%20FilterSlice(items%2C%20func(item%20Item)%20bool%20%7B%0A%20%20%20%20return%20item.IsValid()%0A%7D)%0A%60%60%60%0A%0A%23%23%23%20Timeout%20Wrapper%0A%0A%60%60%60go%0Afunc%20WithTimeout%5BT%20any%5D(ctx%20context.Context%2C%20timeout%20time.Duration%2C%20fn%20func(context.Context)%20(T%2C%20error))%20(T%2C%20error)%20%7B%0A%20%20%20%20ctx%2C%20cancel%20%3A%3D%20context.WithTimeout(ctx%2C%20timeout)%0A%20%20%20%20defer%20cancel()%0A%20%20%20%20%0A%20%20%20%20type%20result%20struct%20%7B%0A%20%20%20%20%20%20%20%20value%20T%0A%20%20%20%20%20%20%20%20err%20%20%20error%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20done%20%3A%3D%20make(chan%20result%2C%201)%0A%20%20%20%20%0A%20%20%20%20go%20func()%20%7B%0A%20%20%20%20%20%20%20%20value%2C%20err%20%3A%3D%20fn(ctx)%0A%20%20%20%20%20%20%20%20done%20%3C-%20result%7Bvalue%2C%20err%7D%0A%20%20%20%20%7D()%0A%20%20%20%20%0A%20%20%20%20select%20%7B%0A%20%20%20%20case%20res%20%3A%3D%20%3C-done%3A%0A%20%20%20%20%20%20%20%20return%20res.value%2C%20res.err%0A%20%20%20%20case%20%3C-ctx.Done()%3A%0A%20%20%20%20%20%20%20%20var%20zero%20T%0A%20%20%20%20%20%20%20%20return%20zero%2C%20ctx.Err()%0A%20%20%20%20%7D%0A%7D%0A%0A%2F%2F%20Usage%0Aresult%2C%20err%20%3A%3D%20WithTimeout(ctx%2C%205*time.Second%2C%20func(ctx%20context.Context)%20(string%2C%20error)%20%7B%0A%20%20%20%20return%20fetchData(ctx)%0A%7D)%0A%60%60%60%0A%0A%23%23%23%20Pipeline%20Builder%0A%0A%60%60%60go%0Atype%20Pipeline%5BT%20any%5D%20struct%20%7B%0A%20%20%20%20stages%20%5B%5Dfunc(T)%20T%0A%7D%0A%0Afunc%20NewPipeline%5BT%20any%5D()%20*Pipeline%5BT%5D%20%7B%0A%20%20%20%20return%20%26Pipeline%5BT%5D%7B%0A%20%20%20%20%20%20%20%20stages%3A%20make(%5B%5Dfunc(T)%20T%2C%200)%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(p%20*Pipeline%5BT%5D)%20Add(stage%20func(T)%20T)%20*Pipeline%5BT%5D%20%7B%0A%20%20%20%20p.stages%20%3D%20append(p.stages%2C%20stage)%0A%20%20%20%20return%20p%0A%7D%0A%0Afunc%20(p%20*Pipeline%5BT%5D)%20Execute(input%20T)%20T%20%7B%0A%20%20%20%20result%20%3A%3D%20input%0A%20%20%20%20for%20_%2C%20stage%20%3A%3D%20range%20p.stages%20%7B%0A%20%20%20%20%20%20%20%20result%20%3D%20stage(result)%0A%20%20%20%20%7D%0A%20%20%20%20return%20result%0A%7D%0A%0A%2F%2F%20Usage%0Apipeline%20%3A%3D%20NewPipeline%5Bstring%5D().%0A%20%20%20%20Add(strings.TrimSpace).%0A%20%20%20%20Add(strings.ToLower).%0A%20%20%20%20Add(func(s%20string)%20string%20%7B%0A%20%20%20%20%20%20%20%20return%20strings.ReplaceAll(s%2C%20%22%20%22%2C%20%22_%22)%0A%20%20%20%20%7D)%0A%0Aresult%20%3A%3D%20pipeline.Execute(%22%20%20Hello%20World%20%20%22)%0A%2F%2F%20Result%3A%20%22hello_world%22%0A%60%60%60%0A%0A%23%23%23%20Error%20Aggregator%0A%0A%60%60%60go%0Atype%20ErrorAggregator%20struct%20%7B%0A%20%20%20%20errors%20%5B%5Derror%0A%20%20%20%20mu%20%20%20%20%20sync.Mutex%0A%7D%0A%0Afunc%20(e%20*ErrorAggregator)%20Add(err%20error)%20%7B%0A%20%20%20%20if%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20e.mu.Lock()%0A%20%20%20%20e.errors%20%3D%20append(e.errors%2C%20err)%0A%20%20%20%20e.mu.Unlock()%0A%7D%0A%0Afunc%20(e%20*ErrorAggregator)%20Error()%20error%20%7B%0A%20%20%20%20e.mu.Lock()%0A%20%20%20%20defer%20e.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20if%20len(e.errors)%20%3D%3D%200%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20if%20len(e.errors)%20%3D%3D%201%20%7B%0A%20%20%20%20%20%20%20%20return%20e.errors%5B0%5D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20fmt.Errorf(%22multiple%20errors%20(%25d)%3A%20%25v%22%2C%20len(e.errors)%2C%20e.errors)%0A%7D%0A%0A%2F%2F%20Usage%0Aaggregator%20%3A%3D%20%26ErrorAggregator%7B%7D%0A%0Afor%20_%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20if%20err%20%3A%3D%20processItem(item)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20aggregator.Add(err)%0A%20%20%20%20%7D%0A%7D%0A%0Aif%20err%20%3A%3D%20aggregator.Error()%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20return%20nil%2C%20err%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Context%20Values%20Helper%0A%0A%60%60%60go%0Atype%20ContextKey%20string%0A%0Aconst%20(%0A%20%20%20%20RequestIDKey%20ContextKey%20%3D%20%22request_id%22%0A%20%20%20%20UserIDKey%20%20%20%20ContextKey%20%3D%20%22user_id%22%0A)%0A%0Afunc%20WithRequestID(ctx%20context.Context%2C%20requestID%20string)%20context.Context%20%7B%0A%20%20%20%20return%20context.WithValue(ctx%2C%20RequestIDKey%2C%20requestID)%0A%7D%0A%0Afunc%20GetRequestID(ctx%20context.Context)%20(string%2C%20bool)%20%7B%0A%20%20%20%20id%2C%20ok%20%3A%3D%20ctx.Value(RequestIDKey).(string)%0A%20%20%20%20return%20id%2C%20ok%0A%7D%0A%0A%2F%2F%20Usage%20in%20nodes%0Afunc%20(n%20*LoggingNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20requestID%2C%20_%20%3A%3D%20GetRequestID(ctx)%0A%20%20%20%20log.Printf(%22%5B%25s%5D%20Processing%3A%20%25v%22%2C%20requestID%2C%20prepResult)%0A%20%20%20%20%0A%20%20%20%20return%20process(prepResult)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Debounce%20Function%0A%0A%60%60%60go%0Afunc%20Debounce(fn%20func()%2C%20delay%20time.Duration)%20func()%20%7B%0A%20%20%20%20var%20timer%20*time.Timer%0A%20%20%20%20var%20mu%20sync.Mutex%0A%20%20%20%20%0A%20%20%20%20return%20func()%20%7B%0A%20%20%20%20%20%20%20%20mu.Lock()%0A%20%20%20%20%20%20%20%20defer%20mu.Unlock()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20timer%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20timer.Stop()%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20timer%20%3D%20time.AfterFunc(delay%2C%20fn)%0A%20%20%20%20%7D%0A%7D%0A%0A%2F%2F%20Usage%0AsaveDebounced%20%3A%3D%20Debounce(func()%20%7B%0A%20%20%20%20saveToDatabase()%0A%7D%2C%205*time.Second)%0A%0A%2F%2F%20Call%20multiple%20times%2C%20only%20last%20one%20executes%0AsaveDebounced()%0AsaveDebounced()%0AsaveDebounced()%0A%60%60%60%0A%0A%23%23%20Testing%20Utilities%0A%0A%23%23%23%20Mock%20SharedStore%0A%0A%60%60%60go%0Atype%20MockSharedStore%20struct%20%7B%0A%20%20%20%20data%20map%5Bstring%5Dany%0A%20%20%20%20mu%20%20%20sync.RWMutex%0A%7D%0A%0Afunc%20NewMockSharedStore(initial%20map%5Bstring%5Dany)%20*MockSharedStore%20%7B%0A%20%20%20%20return%20%26MockSharedStore%7B%0A%20%20%20%20%20%20%20%20data%3A%20initial%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(m%20*MockSharedStore)%20Get(key%20string)%20(any%2C%20bool)%20%7B%0A%20%20%20%20m.mu.RLock()%0A%20%20%20%20defer%20m.mu.RUnlock()%0A%20%20%20%20val%2C%20ok%20%3A%3D%20m.data%5Bkey%5D%0A%20%20%20%20return%20val%2C%20ok%0A%7D%0A%0Afunc%20(m%20*MockSharedStore)%20Set(key%20string%2C%20value%20any)%20%7B%0A%20%20%20%20m.mu.Lock()%0A%20%20%20%20defer%20m.mu.Unlock()%0A%20%20%20%20m.data%5Bkey%5D%20%3D%20value%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Test%20Node%20Builder%0A%0A%60%60%60go%0Afunc%20TestNode(execFn%20func(context.Context%2C%20any)%20(any%2C%20error))%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(execFn)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Usage%20in%20tests%0Anode%20%3A%3D%20TestNode(func(ctx%20context.Context%2C%20input%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20return%20%22test_result%22%2C%20nil%0A%7D)%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Keep%20Utilities%20Generic**%3A%20Make%20them%20reusable%20across%20projects%0A2.%20**Document%20Usage**%3A%20Provide%20clear%20examples%0A3.%20**Test%20Thoroughly**%3A%20Utilities%20should%20be%20well-tested%0A4.%20**Handle%20Edge%20Cases**%3A%20Consider%20nil%20values%20and%20empty%20inputs%0A5.%20**Use%20Type%20Parameters**%3A%20Leverage%20Go%20generics%20where%20appropriate%0A6.%20**Thread%20Safety**%3A%20Ensure%20utilities%20are%20safe%20for%20concurrent%20use%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BCustom%20Nodes%5D(%2Fadvanced%2Fcustom-nodes)%20-%20Build%20sophisticated%20nodes%0A-%20%5BBest%20Practices%5D(%2Fbest-practices)%20-%20General%20guidelines%0A-%20%5BExamples%5D(https%3A%2F%2Fgithub.com%2Fmark3labs%2Fflyt%2Ftree%2Fmain%2Fcookbook)%20-%20See%20utilities%20in%20action", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/utilities-DrOUkt7L.js"), path: "/advanced/utilities.html", type: "mdx", filePath: "advanced/utilities.mdx", content: "%23%20Utilities%0A%0AHelper%20functions%20and%20utilities%20to%20simplify%20common%20tasks%20in%20Flyt%20workflows.%0A%0A%23%23%20ToSlice%0A%0AConvert%20various%20types%20to%20slices%20for%20batch%20processing%3A%0A%0A%60%60%60go%0A%2F%2F%20Convert%20different%20types%20to%20%5B%5Dany%0AstringSlice%20%3A%3D%20flyt.ToSlice(%5B%5Dstring%7B%22a%22%2C%20%22b%22%2C%20%22c%22%7D)%0AintSlice%20%3A%3D%20flyt.ToSlice(%5B%5Dint%7B1%2C%202%2C%203%7D)%0AsingleItem%20%3A%3D%20flyt.ToSlice(%22single%20item%22)%20%2F%2F%20Returns%20%5B%5Dany%7B%22single%20item%22%7D%0AnilValue%20%3A%3D%20flyt.ToSlice(nil)%20%2F%2F%20Returns%20empty%20%5B%5Dany%7B%7D%0A%0A%2F%2F%20Useful%20for%20batch%20processing%0Ashared.Set(%22items%22%2C%20flyt.ToSlice(data))%0A%60%60%60%0A%0A%23%23%23%20Implementation%20Details%0A%0A%60%60%60go%0Afunc%20ToSlice(v%20any)%20%5B%5Dany%20%7B%0A%20%20%20%20if%20v%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20%5B%5Dany%7B%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20rv%20%3A%3D%20reflect.ValueOf(v)%0A%20%20%20%20if%20rv.Kind()%20%3D%3D%20reflect.Slice%20%7B%0A%20%20%20%20%20%20%20%20result%20%3A%3D%20make(%5B%5Dany%2C%20rv.Len())%0A%20%20%20%20%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20rv.Len()%3B%20i%2B%2B%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%5Bi%5D%20%3D%20rv.Index(i).Interface()%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20result%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Single%20item%0A%20%20%20%20return%20%5B%5Dany%7Bv%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Custom%20Utility%20Functions%0A%0ACreate%20your%20own%20utilities%3A%0A%0A%23%23%23%20Retry%20Helper%0A%0A%60%60%60go%0Afunc%20RetryOperation(operation%20func()%20error%2C%20maxRetries%20int%2C%20backoff%20time.Duration)%20error%20%7B%0A%20%20%20%20var%20lastErr%20error%0A%20%20%20%20%0A%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20maxRetries%3B%20i%2B%2B%20%7B%0A%20%20%20%20%20%20%20%20if%20err%20%3A%3D%20operation()%3B%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%0A%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20lastErr%20%3D%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20i%20%3C%20maxRetries-1%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20time.Sleep(backoff%20*%20time.Duration(i%2B1))%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20fmt.Errorf(%22operation%20failed%20after%20%25d%20retries%3A%20%25w%22%2C%20maxRetries%2C%20lastErr)%0A%7D%0A%0A%2F%2F%20Usage%20in%20node%0Afunc%20(n%20*MyNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20var%20result%20any%0A%20%20%20%20%0A%20%20%20%20err%20%3A%3D%20RetryOperation(func()%20error%20%7B%0A%20%20%20%20%20%20%20%20var%20err%20error%0A%20%20%20%20%20%20%20%20result%2C%20err%20%3D%20callAPI(prepResult)%0A%20%20%20%20%20%20%20%20return%20err%0A%20%20%20%20%7D%2C%203%2C%20time.Second)%0A%20%20%20%20%0A%20%20%20%20return%20result%2C%20err%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Parallel%20Map%0A%0A%60%60%60go%0Afunc%20ParallelMap%5BT%20any%2C%20R%20any%5D(items%20%5B%5DT%2C%20fn%20func(T)%20R%2C%20workers%20int)%20%5B%5DR%20%7B%0A%20%20%20%20results%20%3A%3D%20make(%5B%5DR%2C%20len(items))%0A%20%20%20%20%0A%20%20%20%20var%20wg%20sync.WaitGroup%0A%20%20%20%20semaphore%20%3A%3D%20make(chan%20struct%7B%7D%2C%20workers)%0A%20%20%20%20%0A%20%20%20%20for%20i%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20wg.Add(1)%0A%20%20%20%20%20%20%20%20go%20func(index%20int%2C%20data%20T)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20wg.Done()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20semaphore%20%3C-%20struct%7B%7D%7B%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20func()%20%7B%20%3C-semaphore%20%7D()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20results%5Bindex%5D%20%3D%20fn(data)%0A%20%20%20%20%20%20%20%20%7D(i%2C%20item)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20wg.Wait()%0A%20%20%20%20return%20results%0A%7D%0A%0A%2F%2F%20Usage%0Aresults%20%3A%3D%20ParallelMap(items%2C%20processItem%2C%2010)%0A%60%60%60%0A%0A%23%23%23%20Safe%20Type%20Assertion%0A%0A%60%60%60go%0Afunc%20SafeGet%5BT%20any%5D(shared%20*flyt.SharedStore%2C%20key%20string)%20(T%2C%20bool)%20%7B%0A%20%20%20%20var%20zero%20T%0A%20%20%20%20%0A%20%20%20%20value%2C%20exists%20%3A%3D%20shared.Get(key)%0A%20%20%20%20if%20!exists%20%7B%0A%20%20%20%20%20%20%20%20return%20zero%2C%20false%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20typed%2C%20ok%20%3A%3D%20value.(T)%0A%20%20%20%20if%20!ok%20%7B%0A%20%20%20%20%20%20%20%20return%20zero%2C%20false%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20typed%2C%20true%0A%7D%0A%0A%2F%2F%20Usage%0Aif%20userID%2C%20ok%20%3A%3D%20SafeGet%5Bint%5D(shared%2C%20%22user_id%22)%3B%20ok%20%7B%0A%20%20%20%20%2F%2F%20Use%20userID%20safely%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Chunk%20Slice%0A%0A%60%60%60go%0Afunc%20ChunkSlice%5BT%20any%5D(slice%20%5B%5DT%2C%20chunkSize%20int)%20%5B%5D%5B%5DT%20%7B%0A%20%20%20%20var%20chunks%20%5B%5D%5B%5DT%0A%20%20%20%20%0A%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20len(slice)%3B%20i%20%2B%3D%20chunkSize%20%7B%0A%20%20%20%20%20%20%20%20end%20%3A%3D%20i%20%2B%20chunkSize%0A%20%20%20%20%20%20%20%20if%20end%20%3E%20len(slice)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20end%20%3D%20len(slice)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20chunks%20%3D%20append(chunks%2C%20slice%5Bi%3Aend%5D)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20chunks%0A%7D%0A%0A%2F%2F%20Usage%20in%20batch%20processing%0Achunks%20%3A%3D%20ChunkSlice(items%2C%20100)%0Afor%20_%2C%20chunk%20%3A%3D%20range%20chunks%20%7B%0A%20%20%20%20processChunk(chunk)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Merge%20Maps%0A%0A%60%60%60go%0Afunc%20MergeMaps(maps%20...map%5Bstring%5Dany)%20map%5Bstring%5Dany%20%7B%0A%20%20%20%20result%20%3A%3D%20make(map%5Bstring%5Dany)%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20m%20%3A%3D%20range%20maps%20%7B%0A%20%20%20%20%20%20%20%20for%20k%2C%20v%20%3A%3D%20range%20m%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%5Bk%5D%20%3D%20v%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20result%0A%7D%0A%0A%2F%2F%20Usage%0Aconfig%20%3A%3D%20MergeMaps(defaultConfig%2C%20userConfig%2C%20overrides)%0A%60%60%60%0A%0A%23%23%23%20Filter%20Slice%0A%0A%60%60%60go%0Afunc%20FilterSlice%5BT%20any%5D(slice%20%5B%5DT%2C%20predicate%20func(T)%20bool)%20%5B%5DT%20%7B%0A%20%20%20%20result%20%3A%3D%20make(%5B%5DT%2C%200)%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20item%20%3A%3D%20range%20slice%20%7B%0A%20%20%20%20%20%20%20%20if%20predicate(item)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%20append(result%2C%20item)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20result%0A%7D%0A%0A%2F%2F%20Usage%0AvalidItems%20%3A%3D%20FilterSlice(items%2C%20func(item%20Item)%20bool%20%7B%0A%20%20%20%20return%20item.IsValid()%0A%7D)%0A%60%60%60%0A%0A%23%23%23%20Timeout%20Wrapper%0A%0A%60%60%60go%0Afunc%20WithTimeout%5BT%20any%5D(ctx%20context.Context%2C%20timeout%20time.Duration%2C%20fn%20func(context.Context)%20(T%2C%20error))%20(T%2C%20error)%20%7B%0A%20%20%20%20ctx%2C%20cancel%20%3A%3D%20context.WithTimeout(ctx%2C%20timeout)%0A%20%20%20%20defer%20cancel()%0A%20%20%20%20%0A%20%20%20%20type%20result%20struct%20%7B%0A%20%20%20%20%20%20%20%20value%20T%0A%20%20%20%20%20%20%20%20err%20%20%20error%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20done%20%3A%3D%20make(chan%20result%2C%201)%0A%20%20%20%20%0A%20%20%20%20go%20func()%20%7B%0A%20%20%20%20%20%20%20%20value%2C%20err%20%3A%3D%20fn(ctx)%0A%20%20%20%20%20%20%20%20done%20%3C-%20result%7Bvalue%2C%20err%7D%0A%20%20%20%20%7D()%0A%20%20%20%20%0A%20%20%20%20select%20%7B%0A%20%20%20%20case%20res%20%3A%3D%20%3C-done%3A%0A%20%20%20%20%20%20%20%20return%20res.value%2C%20res.err%0A%20%20%20%20case%20%3C-ctx.Done()%3A%0A%20%20%20%20%20%20%20%20var%20zero%20T%0A%20%20%20%20%20%20%20%20return%20zero%2C%20ctx.Err()%0A%20%20%20%20%7D%0A%7D%0A%0A%2F%2F%20Usage%0Aresult%2C%20err%20%3A%3D%20WithTimeout(ctx%2C%205*time.Second%2C%20func(ctx%20context.Context)%20(string%2C%20error)%20%7B%0A%20%20%20%20return%20fetchData(ctx)%0A%7D)%0A%60%60%60%0A%0A%23%23%23%20Pipeline%20Builder%0A%0A%60%60%60go%0Atype%20Pipeline%5BT%20any%5D%20struct%20%7B%0A%20%20%20%20stages%20%5B%5Dfunc(T)%20T%0A%7D%0A%0Afunc%20NewPipeline%5BT%20any%5D()%20*Pipeline%5BT%5D%20%7B%0A%20%20%20%20return%20%26Pipeline%5BT%5D%7B%0A%20%20%20%20%20%20%20%20stages%3A%20make(%5B%5Dfunc(T)%20T%2C%200)%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(p%20*Pipeline%5BT%5D)%20Add(stage%20func(T)%20T)%20*Pipeline%5BT%5D%20%7B%0A%20%20%20%20p.stages%20%3D%20append(p.stages%2C%20stage)%0A%20%20%20%20return%20p%0A%7D%0A%0Afunc%20(p%20*Pipeline%5BT%5D)%20Execute(input%20T)%20T%20%7B%0A%20%20%20%20result%20%3A%3D%20input%0A%20%20%20%20for%20_%2C%20stage%20%3A%3D%20range%20p.stages%20%7B%0A%20%20%20%20%20%20%20%20result%20%3D%20stage(result)%0A%20%20%20%20%7D%0A%20%20%20%20return%20result%0A%7D%0A%0A%2F%2F%20Usage%0Apipeline%20%3A%3D%20NewPipeline%5Bstring%5D().%0A%20%20%20%20Add(strings.TrimSpace).%0A%20%20%20%20Add(strings.ToLower).%0A%20%20%20%20Add(func(s%20string)%20string%20%7B%0A%20%20%20%20%20%20%20%20return%20strings.ReplaceAll(s%2C%20%22%20%22%2C%20%22_%22)%0A%20%20%20%20%7D)%0A%0Aresult%20%3A%3D%20pipeline.Execute(%22%20%20Hello%20World%20%20%22)%0A%2F%2F%20Result%3A%20%22hello_world%22%0A%60%60%60%0A%0A%23%23%23%20Error%20Aggregator%0A%0A%60%60%60go%0Atype%20ErrorAggregator%20struct%20%7B%0A%20%20%20%20errors%20%5B%5Derror%0A%20%20%20%20mu%20%20%20%20%20sync.Mutex%0A%7D%0A%0Afunc%20(e%20*ErrorAggregator)%20Add(err%20error)%20%7B%0A%20%20%20%20if%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20e.mu.Lock()%0A%20%20%20%20e.errors%20%3D%20append(e.errors%2C%20err)%0A%20%20%20%20e.mu.Unlock()%0A%7D%0A%0Afunc%20(e%20*ErrorAggregator)%20Error()%20error%20%7B%0A%20%20%20%20e.mu.Lock()%0A%20%20%20%20defer%20e.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20if%20len(e.errors)%20%3D%3D%200%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20if%20len(e.errors)%20%3D%3D%201%20%7B%0A%20%20%20%20%20%20%20%20return%20e.errors%5B0%5D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20fmt.Errorf(%22multiple%20errors%20(%25d)%3A%20%25v%22%2C%20len(e.errors)%2C%20e.errors)%0A%7D%0A%0A%2F%2F%20Usage%0Aaggregator%20%3A%3D%20%26ErrorAggregator%7B%7D%0A%0Afor%20_%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20if%20err%20%3A%3D%20processItem(item)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20aggregator.Add(err)%0A%20%20%20%20%7D%0A%7D%0A%0Aif%20err%20%3A%3D%20aggregator.Error()%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20return%20nil%2C%20err%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Context%20Values%20Helper%0A%0A%60%60%60go%0Atype%20ContextKey%20string%0A%0Aconst%20(%0A%20%20%20%20RequestIDKey%20ContextKey%20%3D%20%22request_id%22%0A%20%20%20%20UserIDKey%20%20%20%20ContextKey%20%3D%20%22user_id%22%0A)%0A%0Afunc%20WithRequestID(ctx%20context.Context%2C%20requestID%20string)%20context.Context%20%7B%0A%20%20%20%20return%20context.WithValue(ctx%2C%20RequestIDKey%2C%20requestID)%0A%7D%0A%0Afunc%20GetRequestID(ctx%20context.Context)%20(string%2C%20bool)%20%7B%0A%20%20%20%20id%2C%20ok%20%3A%3D%20ctx.Value(RequestIDKey).(string)%0A%20%20%20%20return%20id%2C%20ok%0A%7D%0A%0A%2F%2F%20Usage%20in%20nodes%0Afunc%20(n%20*LoggingNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20requestID%2C%20_%20%3A%3D%20GetRequestID(ctx)%0A%20%20%20%20log.Printf(%22%5B%25s%5D%20Processing%3A%20%25v%22%2C%20requestID%2C%20prepResult)%0A%20%20%20%20%0A%20%20%20%20return%20process(prepResult)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Debounce%20Function%0A%0A%60%60%60go%0Afunc%20Debounce(fn%20func()%2C%20delay%20time.Duration)%20func()%20%7B%0A%20%20%20%20var%20timer%20*time.Timer%0A%20%20%20%20var%20mu%20sync.Mutex%0A%20%20%20%20%0A%20%20%20%20return%20func()%20%7B%0A%20%20%20%20%20%20%20%20mu.Lock()%0A%20%20%20%20%20%20%20%20defer%20mu.Unlock()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20timer%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20timer.Stop()%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20timer%20%3D%20time.AfterFunc(delay%2C%20fn)%0A%20%20%20%20%7D%0A%7D%0A%0A%2F%2F%20Usage%0AsaveDebounced%20%3A%3D%20Debounce(func()%20%7B%0A%20%20%20%20saveToDatabase()%0A%7D%2C%205*time.Second)%0A%0A%2F%2F%20Call%20multiple%20times%2C%20only%20last%20one%20executes%0AsaveDebounced()%0AsaveDebounced()%0AsaveDebounced()%0A%60%60%60%0A%0A%23%23%20Testing%20Utilities%0A%0A%23%23%23%20Mock%20SharedStore%0A%0A%60%60%60go%0Atype%20MockSharedStore%20struct%20%7B%0A%20%20%20%20data%20map%5Bstring%5Dany%0A%20%20%20%20mu%20%20%20sync.RWMutex%0A%7D%0A%0Afunc%20NewMockSharedStore(initial%20map%5Bstring%5Dany)%20*MockSharedStore%20%7B%0A%20%20%20%20return%20%26MockSharedStore%7B%0A%20%20%20%20%20%20%20%20data%3A%20initial%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(m%20*MockSharedStore)%20Get(key%20string)%20(any%2C%20bool)%20%7B%0A%20%20%20%20m.mu.RLock()%0A%20%20%20%20defer%20m.mu.RUnlock()%0A%20%20%20%20val%2C%20ok%20%3A%3D%20m.data%5Bkey%5D%0A%20%20%20%20return%20val%2C%20ok%0A%7D%0A%0Afunc%20(m%20*MockSharedStore)%20Set(key%20string%2C%20value%20any)%20%7B%0A%20%20%20%20m.mu.Lock()%0A%20%20%20%20defer%20m.mu.Unlock()%0A%20%20%20%20m.data%5Bkey%5D%20%3D%20value%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Test%20Node%20Builder%0A%0A%60%60%60go%0Afunc%20TestNode(execFn%20func(context.Context%2C%20any)%20(any%2C%20error))%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(execFn)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Usage%20in%20tests%0Anode%20%3A%3D%20TestNode(func(ctx%20context.Context%2C%20input%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20return%20%22test_result%22%2C%20nil%0A%7D)%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Keep%20Utilities%20Generic**%3A%20Make%20them%20reusable%20across%20projects%0A2.%20**Document%20Usage**%3A%20Provide%20clear%20examples%0A3.%20**Test%20Thoroughly**%3A%20Utilities%20should%20be%20well-tested%0A4.%20**Handle%20Edge%20Cases**%3A%20Consider%20nil%20values%20and%20empty%20inputs%0A5.%20**Use%20Type%20Parameters**%3A%20Leverage%20Go%20generics%20where%20appropriate%0A6.%20**Thread%20Safety**%3A%20Ensure%20utilities%20are%20safe%20for%20concurrent%20use%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BCustom%20Nodes%5D(%2Fadvanced%2Fcustom-nodes)%20-%20Build%20sophisticated%20nodes%0A-%20%5BBest%20Practices%5D(%2Fbest-practices)%20-%20General%20guidelines%0A-%20%5BExamples%5D(https%3A%2F%2Fgithub.com%2Fmark3labs%2Fflyt%2Ftree%2Fmain%2Fcookbook)%20-%20See%20utilities%20in%20action", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/worker-pool-DsQ8FyDM.js"), path: "/advanced/worker-pool", type: "mdx", filePath: "advanced/worker-pool.mdx", content: "%23%20Worker%20Pool%0A%0AManage%20concurrent%20task%20execution%20with%20fine-grained%20control%20using%20the%20WorkerPool%20utility.%0A%0A%23%23%20Basic%20Worker%20Pool%0A%0ACreate%20and%20use%20a%20worker%20pool%3A%0A%0A%60%60%60go%0A%2F%2F%20Create%20a%20pool%20with%2010%20workers%0Apool%20%3A%3D%20flyt.NewWorkerPool(10)%0A%0A%2F%2F%20Submit%20tasks%0Afor%20i%20%3A%3D%200%3B%20i%20%3C%20100%3B%20i%2B%2B%20%7B%0A%20%20%20%20taskID%20%3A%3D%20i%0A%20%20%20%20pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Process%20task%0A%20%20%20%20%20%20%20%20result%20%3A%3D%20processTask(taskID)%0A%20%20%20%20%20%20%20%20fmt.Printf(%22Task%20%25d%20completed%3A%20%25v%5Cn%22%2C%20taskID%2C%20result)%0A%20%20%20%20%7D)%0A%7D%0A%0A%2F%2F%20Wait%20for%20all%20tasks%20to%20complete%0Apool.Wait()%0A%0A%2F%2F%20Clean%20up%0Apool.Close()%0A%60%60%60%0A%0A%23%23%20Worker%20Pool%20with%20Results%0A%0ACollect%20results%20from%20worker%20pool%3A%0A%0A%60%60%60go%0Atype%20ResultCollector%20struct%20%7B%0A%20%20%20%20mu%20%20%20%20%20%20sync.Mutex%0A%20%20%20%20results%20%5B%5DResult%0A%7D%0A%0Afunc%20processWithWorkerPool(items%20%5B%5DItem)%20%5B%5DResult%20%7B%0A%20%20%20%20pool%20%3A%3D%20flyt.NewWorkerPool(5)%0A%20%20%20%20collector%20%3A%3D%20%26ResultCollector%7B%0A%20%20%20%20%20%20%20%20results%3A%20make(%5B%5DResult%2C%20len(items))%2C%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20for%20i%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20index%20%3A%3D%20i%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20item%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3A%3D%20processItem(data)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20collector.mu.Lock()%0A%20%20%20%20%20%20%20%20%20%20%20%20collector.results%5Bindex%5D%20%3D%20result%0A%20%20%20%20%20%20%20%20%20%20%20%20collector.mu.Unlock()%0A%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20pool.Wait()%0A%20%20%20%20pool.Close()%0A%20%20%20%20%0A%20%20%20%20return%20collector.results%0A%7D%0A%60%60%60%0A%0A%23%23%20Dynamic%20Worker%20Scaling%0A%0AAdjust%20worker%20count%20based%20on%20load%3A%0A%0A%60%60%60go%0Atype%20DynamicWorkerPool%20struct%20%7B%0A%20%20%20%20minWorkers%20int%0A%20%20%20%20maxWorkers%20int%0A%20%20%20%20pool%20%20%20%20%20%20%20*flyt.WorkerPool%0A%20%20%20%20load%20%20%20%20%20%20%20int32%0A%20%20%20%20mu%20%20%20%20%20%20%20%20%20sync.RWMutex%0A%7D%0A%0Afunc%20NewDynamicWorkerPool(min%2C%20max%20int)%20*DynamicWorkerPool%20%7B%0A%20%20%20%20return%20%26DynamicWorkerPool%7B%0A%20%20%20%20%20%20%20%20minWorkers%3A%20min%2C%0A%20%20%20%20%20%20%20%20maxWorkers%3A%20max%2C%0A%20%20%20%20%20%20%20%20pool%3A%20%20%20%20%20%20%20flyt.NewWorkerPool(min)%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(p%20*DynamicWorkerPool)%20Submit(task%20func())%20%7B%0A%20%20%20%20currentLoad%20%3A%3D%20atomic.AddInt32(%26p.load%2C%201)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Scale%20up%20if%20needed%0A%20%20%20%20if%20currentLoad%20%3E%20int32(p.getCurrentWorkers()*2)%20%7B%0A%20%20%20%20%20%20%20%20p.scaleUp()%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20p.pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20task()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20newLoad%20%3A%3D%20atomic.AddInt32(%26p.load%2C%20-1)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%2F%2F%20Scale%20down%20if%20idle%0A%20%20%20%20%20%20%20%20if%20newLoad%20%3C%20int32(p.getCurrentWorkers()%2F2)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20p.scaleDown()%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%0A%7D%0A%0Afunc%20(p%20*DynamicWorkerPool)%20scaleUp()%20%7B%0A%20%20%20%20p.mu.Lock()%0A%20%20%20%20defer%20p.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20current%20%3A%3D%20p.getCurrentWorkers()%0A%20%20%20%20if%20current%20%3C%20p.maxWorkers%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Create%20new%20pool%20with%20more%20workers%0A%20%20%20%20%20%20%20%20newPool%20%3A%3D%20flyt.NewWorkerPool(min(current*2%2C%20p.maxWorkers))%0A%20%20%20%20%20%20%20%20p.pool.Close()%0A%20%20%20%20%20%20%20%20p.pool%20%3D%20newPool%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Rate-Limited%20Worker%20Pool%0A%0AControl%20processing%20rate%3A%0A%0A%60%60%60go%0Afunc%20createRateLimitedPool(workers%20int%2C%20rps%20int)%20*RateLimitedPool%20%7B%0A%20%20%20%20limiter%20%3A%3D%20rate.NewLimiter(rate.Limit(rps)%2C%201)%0A%20%20%20%20pool%20%3A%3D%20flyt.NewWorkerPool(workers)%0A%20%20%20%20%0A%20%20%20%20return%20%26RateLimitedPool%7B%0A%20%20%20%20%20%20%20%20pool%3A%20%20%20%20pool%2C%0A%20%20%20%20%20%20%20%20limiter%3A%20limiter%2C%0A%20%20%20%20%7D%0A%7D%0A%0Atype%20RateLimitedPool%20struct%20%7B%0A%20%20%20%20pool%20%20%20%20*flyt.WorkerPool%0A%20%20%20%20limiter%20*rate.Limiter%0A%7D%0A%0Afunc%20(p%20*RateLimitedPool)%20Submit(ctx%20context.Context%2C%20task%20func())%20error%20%7B%0A%20%20%20%20%2F%2F%20Wait%20for%20rate%20limit%0A%20%20%20%20if%20err%20%3A%3D%20p.limiter.Wait(ctx)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20p.pool.Submit(task)%0A%20%20%20%20return%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Priority%20Queue%20Worker%20Pool%0A%0AProcess%20tasks%20by%20priority%3A%0A%0A%60%60%60go%0Atype%20PriorityTask%20struct%20%7B%0A%20%20%20%20Priority%20int%0A%20%20%20%20Task%20%20%20%20%20func()%0A%20%20%20%20ID%20%20%20%20%20%20%20string%0A%7D%0A%0Atype%20PriorityWorkerPool%20struct%20%7B%0A%20%20%20%20workers%20int%0A%20%20%20%20queue%20%20%20*PriorityQueue%0A%20%20%20%20pool%20%20%20%20*flyt.WorkerPool%0A%20%20%20%20running%20bool%0A%20%20%20%20mu%20%20%20%20%20%20sync.Mutex%0A%7D%0A%0Afunc%20NewPriorityWorkerPool(workers%20int)%20*PriorityWorkerPool%20%7B%0A%20%20%20%20p%20%3A%3D%20%26PriorityWorkerPool%7B%0A%20%20%20%20%20%20%20%20workers%3A%20workers%2C%0A%20%20%20%20%20%20%20%20queue%3A%20%20%20NewPriorityQueue()%2C%0A%20%20%20%20%20%20%20%20pool%3A%20%20%20%20flyt.NewWorkerPool(workers)%2C%0A%20%20%20%20%20%20%20%20running%3A%20true%2C%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Start%20dispatcher%0A%20%20%20%20go%20p.dispatch()%0A%20%20%20%20%0A%20%20%20%20return%20p%0A%7D%0A%0Afunc%20(p%20*PriorityWorkerPool)%20Submit(priority%20int%2C%20task%20func())%20%7B%0A%20%20%20%20p.queue.Push(PriorityTask%7B%0A%20%20%20%20%20%20%20%20Priority%3A%20priority%2C%0A%20%20%20%20%20%20%20%20Task%3A%20%20%20%20%20task%2C%0A%20%20%20%20%20%20%20%20ID%3A%20%20%20%20%20%20%20generateID()%2C%0A%20%20%20%20%7D)%0A%7D%0A%0Afunc%20(p%20*PriorityWorkerPool)%20dispatch()%20%7B%0A%20%20%20%20for%20p.running%20%7B%0A%20%20%20%20%20%20%20%20task%20%3A%3D%20p.queue.Pop()%20%2F%2F%20Blocks%20until%20task%20available%0A%20%20%20%20%20%20%20%20if%20task%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20p.pool.Submit(task.Task)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Worker%20Pool%20with%20Timeout%0A%0AHandle%20task%20timeouts%3A%0A%0A%60%60%60go%0Afunc%20createTimeoutPool(workers%20int%2C%20timeout%20time.Duration)%20*TimeoutPool%20%7B%0A%20%20%20%20return%20%26TimeoutPool%7B%0A%20%20%20%20%20%20%20%20pool%3A%20%20%20%20flyt.NewWorkerPool(workers)%2C%0A%20%20%20%20%20%20%20%20timeout%3A%20timeout%2C%0A%20%20%20%20%7D%0A%7D%0A%0Atype%20TimeoutPool%20struct%20%7B%0A%20%20%20%20pool%20%20%20%20*flyt.WorkerPool%0A%20%20%20%20timeout%20time.Duration%0A%7D%0A%0Afunc%20(p%20*TimeoutPool)%20Submit(task%20func()%20error)%20error%20%7B%0A%20%20%20%20errChan%20%3A%3D%20make(chan%20error%2C%201)%0A%20%20%20%20%0A%20%20%20%20p.pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20done%20%3A%3D%20make(chan%20error%2C%201)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20go%20func()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C-%20task()%0A%20%20%20%20%20%20%20%20%7D()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20select%20%7B%0A%20%20%20%20%20%20%20%20case%20err%20%3A%3D%20%3C-done%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20errChan%20%3C-%20err%0A%20%20%20%20%20%20%20%20case%20%3C-time.After(p.timeout)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20errChan%20%3C-%20fmt.Errorf(%22task%20timeout%20after%20%25v%22%2C%20p.timeout)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%0A%20%20%20%20%0A%20%20%20%20return%20%3C-errChan%0A%7D%0A%60%60%60%0A%0A%23%23%20Worker%20Pool%20in%20Nodes%0A%0AUse%20worker%20pools%20within%20nodes%3A%0A%0A%60%60%60go%0Atype%20ParallelProcessingNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20pool%20*flyt.WorkerPool%0A%7D%0A%0Afunc%20NewParallelProcessingNode(workers%20int)%20*ParallelProcessingNode%20%7B%0A%20%20%20%20return%20%26ParallelProcessingNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20pool%3A%20%20%20%20%20flyt.NewWorkerPool(workers)%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*ParallelProcessingNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20items%20%3A%3D%20prepResult.(%5B%5DItem)%0A%20%20%20%20results%20%3A%3D%20make(%5B%5DResult%2C%20len(items))%0A%20%20%20%20errors%20%3A%3D%20make(%5B%5Derror%2C%20len(items))%0A%20%20%20%20%0A%20%20%20%20var%20wg%20sync.WaitGroup%0A%20%20%20%20%0A%20%20%20%20for%20i%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20wg.Add(1)%0A%20%20%20%20%20%20%20%20index%20%3A%3D%20i%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20item%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20n.pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20wg.Done()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20processItem(data)%0A%20%20%20%20%20%20%20%20%20%20%20%20results%5Bindex%5D%20%3D%20result%0A%20%20%20%20%20%20%20%20%20%20%20%20errors%5Bindex%5D%20%3D%20err%0A%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Wait%20with%20context%0A%20%20%20%20done%20%3A%3D%20make(chan%20struct%7B%7D)%0A%20%20%20%20go%20func()%20%7B%0A%20%20%20%20%20%20%20%20wg.Wait()%0A%20%20%20%20%20%20%20%20close(done)%0A%20%20%20%20%7D()%0A%20%20%20%20%0A%20%20%20%20select%20%7B%0A%20%20%20%20case%20%3C-ctx.Done()%3A%0A%20%20%20%20%20%20%20%20return%20nil%2C%20ctx.Err()%0A%20%20%20%20case%20%3C-done%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20Check%20for%20errors%0A%20%20%20%20%20%20%20%20for%20_%2C%20err%20%3A%3D%20range%20errors%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20results%2C%20fmt.Errorf(%22processing%20failed%3A%20%25w%22%2C%20err)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20results%2C%20nil%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*ParallelProcessingNode)%20Close()%20%7B%0A%20%20%20%20n.pool.Close()%0A%7D%0A%60%60%60%0A%0A%23%23%20Batch%20Processing%20with%20Worker%20Pool%0A%0AProcess%20batches%20efficiently%3A%0A%0A%60%60%60go%0Afunc%20processBatchesWithPool(items%20%5B%5DItem%2C%20batchSize%20int%2C%20workers%20int)%20%5B%5DResult%20%7B%0A%20%20%20%20pool%20%3A%3D%20flyt.NewWorkerPool(workers)%0A%20%20%20%20results%20%3A%3D%20make(%5B%5DResult%2C%20len(items))%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Process%20in%20batches%0A%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20len(items)%3B%20i%20%2B%3D%20batchSize%20%7B%0A%20%20%20%20%20%20%20%20end%20%3A%3D%20min(i%2BbatchSize%2C%20len(items))%0A%20%20%20%20%20%20%20%20batch%20%3A%3D%20items%5Bi%3Aend%5D%0A%20%20%20%20%20%20%20%20batchStart%20%3A%3D%20i%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20batchResults%20%3A%3D%20processBatch(batch)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Store%20results%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20j%2C%20result%20%3A%3D%20range%20batchResults%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20results%5BbatchStart%2Bj%5D%20%3D%20result%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20pool.Wait()%0A%20%20%20%20pool.Close()%0A%20%20%20%20%0A%20%20%20%20return%20results%0A%7D%0A%60%60%60%0A%0A%23%23%20Monitoring%20Worker%20Pool%0A%0ATrack%20pool%20performance%3A%0A%0A%60%60%60go%0Atype%20MonitoredPool%20struct%20%7B%0A%20%20%20%20pool%20%20%20%20%20%20*flyt.WorkerPool%0A%20%20%20%20submitted%20int64%0A%20%20%20%20completed%20int64%0A%20%20%20%20failed%20%20%20%20int64%0A%20%20%20%20totalTime%20int64%0A%7D%0A%0Afunc%20(p%20*MonitoredPool)%20Submit(task%20func()%20error)%20%7B%0A%20%20%20%20atomic.AddInt64(%26p.submitted%2C%201)%0A%20%20%20%20%0A%20%20%20%20p.pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20start%20%3A%3D%20time.Now()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20err%20%3A%3D%20task()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20duration%20%3A%3D%20time.Since(start)%0A%20%20%20%20%20%20%20%20atomic.AddInt64(%26p.totalTime%2C%20int64(duration))%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic.AddInt64(%26p.failed%2C%201)%0A%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic.AddInt64(%26p.completed%2C%201)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%0A%7D%0A%0Afunc%20(p%20*MonitoredPool)%20GetStats()%20map%5Bstring%5Dint64%20%7B%0A%20%20%20%20return%20map%5Bstring%5Dint64%7B%0A%20%20%20%20%20%20%20%20%22submitted%22%3A%20%20%20%20%20atomic.LoadInt64(%26p.submitted)%2C%0A%20%20%20%20%20%20%20%20%22completed%22%3A%20%20%20%20%20atomic.LoadInt64(%26p.completed)%2C%0A%20%20%20%20%20%20%20%20%22failed%22%3A%20%20%20%20%20%20%20%20atomic.LoadInt64(%26p.failed)%2C%0A%20%20%20%20%20%20%20%20%22avg_time_ms%22%3A%20%20%20p.getAverageTime()%2C%0A%20%20%20%20%20%20%20%20%22pending%22%3A%20%20%20%20%20%20%20p.getPendingCount()%2C%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Circuit%20Breaker%20Pool%0A%0APrevent%20overload%20with%20circuit%20breaker%3A%0A%0A%60%60%60go%0Atype%20CircuitBreakerPool%20struct%20%7B%0A%20%20%20%20pool%20%20%20%20%20%20%20%20*flyt.WorkerPool%0A%20%20%20%20failures%20%20%20%20int32%0A%20%20%20%20threshold%20%20%20int32%0A%20%20%20%20resetTime%20%20%20time.Duration%0A%20%20%20%20lastFailure%20time.Time%0A%20%20%20%20mu%20%20%20%20%20%20%20%20%20%20sync.RWMutex%0A%7D%0A%0Afunc%20(p%20*CircuitBreakerPool)%20Submit(task%20func()%20error)%20error%20%7B%0A%20%20%20%20if%20p.isOpen()%20%7B%0A%20%20%20%20%20%20%20%20return%20fmt.Errorf(%22circuit%20breaker%20open%22)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20p.pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20err%20%3A%3D%20task()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20failures%20%3A%3D%20atomic.AddInt32(%26p.failures%2C%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20failures%20%3E%3D%20p.threshold%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20p.mu.Lock()%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20p.lastFailure%20%3D%20time.Now()%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20p.mu.Unlock()%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Reset%20on%20success%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic.StoreInt32(%26p.failures%2C%200)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%0A%20%20%20%20%0A%20%20%20%20return%20nil%0A%7D%0A%0Afunc%20(p%20*CircuitBreakerPool)%20isOpen()%20bool%20%7B%0A%20%20%20%20p.mu.RLock()%0A%20%20%20%20defer%20p.mu.RUnlock()%0A%20%20%20%20%0A%20%20%20%20if%20atomic.LoadInt32(%26p.failures)%20%3E%3D%20p.threshold%20%7B%0A%20%20%20%20%20%20%20%20if%20time.Since(p.lastFailure)%20%3C%20p.resetTime%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20true%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20Reset%20after%20timeout%0A%20%20%20%20%20%20%20%20atomic.StoreInt32(%26p.failures%2C%200)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20false%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Size%20Appropriately**%3A%20Set%20worker%20count%20based%20on%20workload%20and%20resources%0A2.%20**Handle%20Panics**%3A%20Recover%20from%20panics%20in%20worker%20goroutines%0A3.%20**Clean%20Up**%3A%20Always%20close%20pools%20when%20done%0A4.%20**Monitor%20Performance**%3A%20Track%20metrics%20for%20optimization%0A5.%20**Avoid%20Blocking**%3A%20Don't%20block%20workers%20with%20long%20waits%0A6.%20**Test%20Concurrency**%3A%20Test%20with%20various%20worker%20counts%20and%20loads%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BBatch%20Processing%5D(%2Fadvanced%2Fbatch-processing)%20-%20High-level%20batch%20operations%0A-%20%5BCustom%20Nodes%5D(%2Fadvanced%2Fcustom-nodes)%20-%20Build%20nodes%20with%20worker%20pools%0A-%20%5BBest%20Practices%5D(%2Fbest-practices)%20-%20General%20guidelines", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/worker-pool-DsQ8FyDM.js"), path: "/advanced/worker-pool.html", type: "mdx", filePath: "advanced/worker-pool.mdx", content: "%23%20Worker%20Pool%0A%0AManage%20concurrent%20task%20execution%20with%20fine-grained%20control%20using%20the%20WorkerPool%20utility.%0A%0A%23%23%20Basic%20Worker%20Pool%0A%0ACreate%20and%20use%20a%20worker%20pool%3A%0A%0A%60%60%60go%0A%2F%2F%20Create%20a%20pool%20with%2010%20workers%0Apool%20%3A%3D%20flyt.NewWorkerPool(10)%0A%0A%2F%2F%20Submit%20tasks%0Afor%20i%20%3A%3D%200%3B%20i%20%3C%20100%3B%20i%2B%2B%20%7B%0A%20%20%20%20taskID%20%3A%3D%20i%0A%20%20%20%20pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Process%20task%0A%20%20%20%20%20%20%20%20result%20%3A%3D%20processTask(taskID)%0A%20%20%20%20%20%20%20%20fmt.Printf(%22Task%20%25d%20completed%3A%20%25v%5Cn%22%2C%20taskID%2C%20result)%0A%20%20%20%20%7D)%0A%7D%0A%0A%2F%2F%20Wait%20for%20all%20tasks%20to%20complete%0Apool.Wait()%0A%0A%2F%2F%20Clean%20up%0Apool.Close()%0A%60%60%60%0A%0A%23%23%20Worker%20Pool%20with%20Results%0A%0ACollect%20results%20from%20worker%20pool%3A%0A%0A%60%60%60go%0Atype%20ResultCollector%20struct%20%7B%0A%20%20%20%20mu%20%20%20%20%20%20sync.Mutex%0A%20%20%20%20results%20%5B%5DResult%0A%7D%0A%0Afunc%20processWithWorkerPool(items%20%5B%5DItem)%20%5B%5DResult%20%7B%0A%20%20%20%20pool%20%3A%3D%20flyt.NewWorkerPool(5)%0A%20%20%20%20collector%20%3A%3D%20%26ResultCollector%7B%0A%20%20%20%20%20%20%20%20results%3A%20make(%5B%5DResult%2C%20len(items))%2C%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20for%20i%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20index%20%3A%3D%20i%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20item%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20result%20%3A%3D%20processItem(data)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20collector.mu.Lock()%0A%20%20%20%20%20%20%20%20%20%20%20%20collector.results%5Bindex%5D%20%3D%20result%0A%20%20%20%20%20%20%20%20%20%20%20%20collector.mu.Unlock()%0A%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20pool.Wait()%0A%20%20%20%20pool.Close()%0A%20%20%20%20%0A%20%20%20%20return%20collector.results%0A%7D%0A%60%60%60%0A%0A%23%23%20Dynamic%20Worker%20Scaling%0A%0AAdjust%20worker%20count%20based%20on%20load%3A%0A%0A%60%60%60go%0Atype%20DynamicWorkerPool%20struct%20%7B%0A%20%20%20%20minWorkers%20int%0A%20%20%20%20maxWorkers%20int%0A%20%20%20%20pool%20%20%20%20%20%20%20*flyt.WorkerPool%0A%20%20%20%20load%20%20%20%20%20%20%20int32%0A%20%20%20%20mu%20%20%20%20%20%20%20%20%20sync.RWMutex%0A%7D%0A%0Afunc%20NewDynamicWorkerPool(min%2C%20max%20int)%20*DynamicWorkerPool%20%7B%0A%20%20%20%20return%20%26DynamicWorkerPool%7B%0A%20%20%20%20%20%20%20%20minWorkers%3A%20min%2C%0A%20%20%20%20%20%20%20%20maxWorkers%3A%20max%2C%0A%20%20%20%20%20%20%20%20pool%3A%20%20%20%20%20%20%20flyt.NewWorkerPool(min)%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(p%20*DynamicWorkerPool)%20Submit(task%20func())%20%7B%0A%20%20%20%20currentLoad%20%3A%3D%20atomic.AddInt32(%26p.load%2C%201)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Scale%20up%20if%20needed%0A%20%20%20%20if%20currentLoad%20%3E%20int32(p.getCurrentWorkers()*2)%20%7B%0A%20%20%20%20%20%20%20%20p.scaleUp()%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20p.pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20task()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20newLoad%20%3A%3D%20atomic.AddInt32(%26p.load%2C%20-1)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%2F%2F%20Scale%20down%20if%20idle%0A%20%20%20%20%20%20%20%20if%20newLoad%20%3C%20int32(p.getCurrentWorkers()%2F2)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20p.scaleDown()%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%0A%7D%0A%0Afunc%20(p%20*DynamicWorkerPool)%20scaleUp()%20%7B%0A%20%20%20%20p.mu.Lock()%0A%20%20%20%20defer%20p.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20current%20%3A%3D%20p.getCurrentWorkers()%0A%20%20%20%20if%20current%20%3C%20p.maxWorkers%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Create%20new%20pool%20with%20more%20workers%0A%20%20%20%20%20%20%20%20newPool%20%3A%3D%20flyt.NewWorkerPool(min(current*2%2C%20p.maxWorkers))%0A%20%20%20%20%20%20%20%20p.pool.Close()%0A%20%20%20%20%20%20%20%20p.pool%20%3D%20newPool%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Rate-Limited%20Worker%20Pool%0A%0AControl%20processing%20rate%3A%0A%0A%60%60%60go%0Afunc%20createRateLimitedPool(workers%20int%2C%20rps%20int)%20*RateLimitedPool%20%7B%0A%20%20%20%20limiter%20%3A%3D%20rate.NewLimiter(rate.Limit(rps)%2C%201)%0A%20%20%20%20pool%20%3A%3D%20flyt.NewWorkerPool(workers)%0A%20%20%20%20%0A%20%20%20%20return%20%26RateLimitedPool%7B%0A%20%20%20%20%20%20%20%20pool%3A%20%20%20%20pool%2C%0A%20%20%20%20%20%20%20%20limiter%3A%20limiter%2C%0A%20%20%20%20%7D%0A%7D%0A%0Atype%20RateLimitedPool%20struct%20%7B%0A%20%20%20%20pool%20%20%20%20*flyt.WorkerPool%0A%20%20%20%20limiter%20*rate.Limiter%0A%7D%0A%0Afunc%20(p%20*RateLimitedPool)%20Submit(ctx%20context.Context%2C%20task%20func())%20error%20%7B%0A%20%20%20%20%2F%2F%20Wait%20for%20rate%20limit%0A%20%20%20%20if%20err%20%3A%3D%20p.limiter.Wait(ctx)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20p.pool.Submit(task)%0A%20%20%20%20return%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Priority%20Queue%20Worker%20Pool%0A%0AProcess%20tasks%20by%20priority%3A%0A%0A%60%60%60go%0Atype%20PriorityTask%20struct%20%7B%0A%20%20%20%20Priority%20int%0A%20%20%20%20Task%20%20%20%20%20func()%0A%20%20%20%20ID%20%20%20%20%20%20%20string%0A%7D%0A%0Atype%20PriorityWorkerPool%20struct%20%7B%0A%20%20%20%20workers%20int%0A%20%20%20%20queue%20%20%20*PriorityQueue%0A%20%20%20%20pool%20%20%20%20*flyt.WorkerPool%0A%20%20%20%20running%20bool%0A%20%20%20%20mu%20%20%20%20%20%20sync.Mutex%0A%7D%0A%0Afunc%20NewPriorityWorkerPool(workers%20int)%20*PriorityWorkerPool%20%7B%0A%20%20%20%20p%20%3A%3D%20%26PriorityWorkerPool%7B%0A%20%20%20%20%20%20%20%20workers%3A%20workers%2C%0A%20%20%20%20%20%20%20%20queue%3A%20%20%20NewPriorityQueue()%2C%0A%20%20%20%20%20%20%20%20pool%3A%20%20%20%20flyt.NewWorkerPool(workers)%2C%0A%20%20%20%20%20%20%20%20running%3A%20true%2C%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Start%20dispatcher%0A%20%20%20%20go%20p.dispatch()%0A%20%20%20%20%0A%20%20%20%20return%20p%0A%7D%0A%0Afunc%20(p%20*PriorityWorkerPool)%20Submit(priority%20int%2C%20task%20func())%20%7B%0A%20%20%20%20p.queue.Push(PriorityTask%7B%0A%20%20%20%20%20%20%20%20Priority%3A%20priority%2C%0A%20%20%20%20%20%20%20%20Task%3A%20%20%20%20%20task%2C%0A%20%20%20%20%20%20%20%20ID%3A%20%20%20%20%20%20%20generateID()%2C%0A%20%20%20%20%7D)%0A%7D%0A%0Afunc%20(p%20*PriorityWorkerPool)%20dispatch()%20%7B%0A%20%20%20%20for%20p.running%20%7B%0A%20%20%20%20%20%20%20%20task%20%3A%3D%20p.queue.Pop()%20%2F%2F%20Blocks%20until%20task%20available%0A%20%20%20%20%20%20%20%20if%20task%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20p.pool.Submit(task.Task)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Worker%20Pool%20with%20Timeout%0A%0AHandle%20task%20timeouts%3A%0A%0A%60%60%60go%0Afunc%20createTimeoutPool(workers%20int%2C%20timeout%20time.Duration)%20*TimeoutPool%20%7B%0A%20%20%20%20return%20%26TimeoutPool%7B%0A%20%20%20%20%20%20%20%20pool%3A%20%20%20%20flyt.NewWorkerPool(workers)%2C%0A%20%20%20%20%20%20%20%20timeout%3A%20timeout%2C%0A%20%20%20%20%7D%0A%7D%0A%0Atype%20TimeoutPool%20struct%20%7B%0A%20%20%20%20pool%20%20%20%20*flyt.WorkerPool%0A%20%20%20%20timeout%20time.Duration%0A%7D%0A%0Afunc%20(p%20*TimeoutPool)%20Submit(task%20func()%20error)%20error%20%7B%0A%20%20%20%20errChan%20%3A%3D%20make(chan%20error%2C%201)%0A%20%20%20%20%0A%20%20%20%20p.pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20done%20%3A%3D%20make(chan%20error%2C%201)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20go%20func()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20done%20%3C-%20task()%0A%20%20%20%20%20%20%20%20%7D()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20select%20%7B%0A%20%20%20%20%20%20%20%20case%20err%20%3A%3D%20%3C-done%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20errChan%20%3C-%20err%0A%20%20%20%20%20%20%20%20case%20%3C-time.After(p.timeout)%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20errChan%20%3C-%20fmt.Errorf(%22task%20timeout%20after%20%25v%22%2C%20p.timeout)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%0A%20%20%20%20%0A%20%20%20%20return%20%3C-errChan%0A%7D%0A%60%60%60%0A%0A%23%23%20Worker%20Pool%20in%20Nodes%0A%0AUse%20worker%20pools%20within%20nodes%3A%0A%0A%60%60%60go%0Atype%20ParallelProcessingNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20pool%20*flyt.WorkerPool%0A%7D%0A%0Afunc%20NewParallelProcessingNode(workers%20int)%20*ParallelProcessingNode%20%7B%0A%20%20%20%20return%20%26ParallelProcessingNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20pool%3A%20%20%20%20%20flyt.NewWorkerPool(workers)%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*ParallelProcessingNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20items%20%3A%3D%20prepResult.(%5B%5DItem)%0A%20%20%20%20results%20%3A%3D%20make(%5B%5DResult%2C%20len(items))%0A%20%20%20%20errors%20%3A%3D%20make(%5B%5Derror%2C%20len(items))%0A%20%20%20%20%0A%20%20%20%20var%20wg%20sync.WaitGroup%0A%20%20%20%20%0A%20%20%20%20for%20i%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20wg.Add(1)%0A%20%20%20%20%20%20%20%20index%20%3A%3D%20i%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20item%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20n.pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20wg.Done()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20processItem(data)%0A%20%20%20%20%20%20%20%20%20%20%20%20results%5Bindex%5D%20%3D%20result%0A%20%20%20%20%20%20%20%20%20%20%20%20errors%5Bindex%5D%20%3D%20err%0A%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Wait%20with%20context%0A%20%20%20%20done%20%3A%3D%20make(chan%20struct%7B%7D)%0A%20%20%20%20go%20func()%20%7B%0A%20%20%20%20%20%20%20%20wg.Wait()%0A%20%20%20%20%20%20%20%20close(done)%0A%20%20%20%20%7D()%0A%20%20%20%20%0A%20%20%20%20select%20%7B%0A%20%20%20%20case%20%3C-ctx.Done()%3A%0A%20%20%20%20%20%20%20%20return%20nil%2C%20ctx.Err()%0A%20%20%20%20case%20%3C-done%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20Check%20for%20errors%0A%20%20%20%20%20%20%20%20for%20_%2C%20err%20%3A%3D%20range%20errors%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20results%2C%20fmt.Errorf(%22processing%20failed%3A%20%25w%22%2C%20err)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20results%2C%20nil%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*ParallelProcessingNode)%20Close()%20%7B%0A%20%20%20%20n.pool.Close()%0A%7D%0A%60%60%60%0A%0A%23%23%20Batch%20Processing%20with%20Worker%20Pool%0A%0AProcess%20batches%20efficiently%3A%0A%0A%60%60%60go%0Afunc%20processBatchesWithPool(items%20%5B%5DItem%2C%20batchSize%20int%2C%20workers%20int)%20%5B%5DResult%20%7B%0A%20%20%20%20pool%20%3A%3D%20flyt.NewWorkerPool(workers)%0A%20%20%20%20results%20%3A%3D%20make(%5B%5DResult%2C%20len(items))%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Process%20in%20batches%0A%20%20%20%20for%20i%20%3A%3D%200%3B%20i%20%3C%20len(items)%3B%20i%20%2B%3D%20batchSize%20%7B%0A%20%20%20%20%20%20%20%20end%20%3A%3D%20min(i%2BbatchSize%2C%20len(items))%0A%20%20%20%20%20%20%20%20batch%20%3A%3D%20items%5Bi%3Aend%5D%0A%20%20%20%20%20%20%20%20batchStart%20%3A%3D%20i%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20batchResults%20%3A%3D%20processBatch(batch)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Store%20results%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20j%2C%20result%20%3A%3D%20range%20batchResults%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20results%5BbatchStart%2Bj%5D%20%3D%20result%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20pool.Wait()%0A%20%20%20%20pool.Close()%0A%20%20%20%20%0A%20%20%20%20return%20results%0A%7D%0A%60%60%60%0A%0A%23%23%20Monitoring%20Worker%20Pool%0A%0ATrack%20pool%20performance%3A%0A%0A%60%60%60go%0Atype%20MonitoredPool%20struct%20%7B%0A%20%20%20%20pool%20%20%20%20%20%20*flyt.WorkerPool%0A%20%20%20%20submitted%20int64%0A%20%20%20%20completed%20int64%0A%20%20%20%20failed%20%20%20%20int64%0A%20%20%20%20totalTime%20int64%0A%7D%0A%0Afunc%20(p%20*MonitoredPool)%20Submit(task%20func()%20error)%20%7B%0A%20%20%20%20atomic.AddInt64(%26p.submitted%2C%201)%0A%20%20%20%20%0A%20%20%20%20p.pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20start%20%3A%3D%20time.Now()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20err%20%3A%3D%20task()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20duration%20%3A%3D%20time.Since(start)%0A%20%20%20%20%20%20%20%20atomic.AddInt64(%26p.totalTime%2C%20int64(duration))%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic.AddInt64(%26p.failed%2C%201)%0A%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic.AddInt64(%26p.completed%2C%201)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%0A%7D%0A%0Afunc%20(p%20*MonitoredPool)%20GetStats()%20map%5Bstring%5Dint64%20%7B%0A%20%20%20%20return%20map%5Bstring%5Dint64%7B%0A%20%20%20%20%20%20%20%20%22submitted%22%3A%20%20%20%20%20atomic.LoadInt64(%26p.submitted)%2C%0A%20%20%20%20%20%20%20%20%22completed%22%3A%20%20%20%20%20atomic.LoadInt64(%26p.completed)%2C%0A%20%20%20%20%20%20%20%20%22failed%22%3A%20%20%20%20%20%20%20%20atomic.LoadInt64(%26p.failed)%2C%0A%20%20%20%20%20%20%20%20%22avg_time_ms%22%3A%20%20%20p.getAverageTime()%2C%0A%20%20%20%20%20%20%20%20%22pending%22%3A%20%20%20%20%20%20%20p.getPendingCount()%2C%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Circuit%20Breaker%20Pool%0A%0APrevent%20overload%20with%20circuit%20breaker%3A%0A%0A%60%60%60go%0Atype%20CircuitBreakerPool%20struct%20%7B%0A%20%20%20%20pool%20%20%20%20%20%20%20%20*flyt.WorkerPool%0A%20%20%20%20failures%20%20%20%20int32%0A%20%20%20%20threshold%20%20%20int32%0A%20%20%20%20resetTime%20%20%20time.Duration%0A%20%20%20%20lastFailure%20time.Time%0A%20%20%20%20mu%20%20%20%20%20%20%20%20%20%20sync.RWMutex%0A%7D%0A%0Afunc%20(p%20*CircuitBreakerPool)%20Submit(task%20func()%20error)%20error%20%7B%0A%20%20%20%20if%20p.isOpen()%20%7B%0A%20%20%20%20%20%20%20%20return%20fmt.Errorf(%22circuit%20breaker%20open%22)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20p.pool.Submit(func()%20%7B%0A%20%20%20%20%20%20%20%20err%20%3A%3D%20task()%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20failures%20%3A%3D%20atomic.AddInt32(%26p.failures%2C%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20failures%20%3E%3D%20p.threshold%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20p.mu.Lock()%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20p.lastFailure%20%3D%20time.Now()%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20p.mu.Unlock()%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Reset%20on%20success%0A%20%20%20%20%20%20%20%20%20%20%20%20atomic.StoreInt32(%26p.failures%2C%200)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%0A%20%20%20%20%0A%20%20%20%20return%20nil%0A%7D%0A%0Afunc%20(p%20*CircuitBreakerPool)%20isOpen()%20bool%20%7B%0A%20%20%20%20p.mu.RLock()%0A%20%20%20%20defer%20p.mu.RUnlock()%0A%20%20%20%20%0A%20%20%20%20if%20atomic.LoadInt32(%26p.failures)%20%3E%3D%20p.threshold%20%7B%0A%20%20%20%20%20%20%20%20if%20time.Since(p.lastFailure)%20%3C%20p.resetTime%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20true%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20Reset%20after%20timeout%0A%20%20%20%20%20%20%20%20atomic.StoreInt32(%26p.failures%2C%200)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20false%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Size%20Appropriately**%3A%20Set%20worker%20count%20based%20on%20workload%20and%20resources%0A2.%20**Handle%20Panics**%3A%20Recover%20from%20panics%20in%20worker%20goroutines%0A3.%20**Clean%20Up**%3A%20Always%20close%20pools%20when%20done%0A4.%20**Monitor%20Performance**%3A%20Track%20metrics%20for%20optimization%0A5.%20**Avoid%20Blocking**%3A%20Don't%20block%20workers%20with%20long%20waits%0A6.%20**Test%20Concurrency**%3A%20Test%20with%20various%20worker%20counts%20and%20loads%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BBatch%20Processing%5D(%2Fadvanced%2Fbatch-processing)%20-%20High-level%20batch%20operations%0A-%20%5BCustom%20Nodes%5D(%2Fadvanced%2Fcustom-nodes)%20-%20Build%20nodes%20with%20worker%20pools%0A-%20%5BBest%20Practices%5D(%2Fbest-practices)%20-%20General%20guidelines", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/actions-v5NXZGFv.js"), path: "/concepts/actions", type: "mdx", filePath: "concepts/actions.mdx", content: "%23%20Actions%0A%0AActions%20are%20strings%20returned%20by%20a%20node's%20Post%20phase%20that%20determine%20the%20next%20step%20in%20a%20workflow.%20They%20provide%20dynamic%2C%20runtime%20control%20over%20flow%20execution.%0A%0A%23%23%20How%20Actions%20Work%0A%0AWhen%20a%20node%20completes%2C%20its%20Post%20phase%20returns%20an%20action%3A%0A%0A%60%60%60go%0Afunc%20(n%20*MyNode)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20if%20success%20%7B%0A%20%20%20%20%20%20%20%20return%20%22continue%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20%22retry%22%2C%20nil%0A%7D%0A%60%60%60%0A%0AThe%20flow%20then%20routes%20to%20the%20node%20connected%20with%20that%20action%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(startNode)%0Aflow.Connect(startNode%2C%20%22continue%22%2C%20processNode)%0Aflow.Connect(startNode%2C%20%22retry%22%2C%20retryNode)%0A%60%60%60%0A%0A%23%23%20Default%20Action%0A%0AThe%20most%20common%20action%20is%20%60flyt.DefaultAction%60%3A%0A%0A%60%60%60go%0A%2F%2F%20Using%20the%20constant%0Areturn%20flyt.DefaultAction%2C%20nil%20%20%2F%2F%20Returns%20%22default%22%0A%0A%2F%2F%20In%20flow%20connections%0Aflow.Connect(node1%2C%20flyt.DefaultAction%2C%20node2)%0A%60%60%60%0A%0A%23%23%20Action-Based%20Routing%0A%0A%23%23%23%20Simple%20Branching%0A%0A%60%60%60go%0AvalidationNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20return%20len(data)%20%3E%200%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20if%20execResult.(bool)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22valid%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%22invalid%22%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0Aflow%20%3A%3D%20flyt.NewFlow(validationNode)%0Aflow.Connect(validationNode%2C%20%22valid%22%2C%20processNode)%0Aflow.Connect(validationNode%2C%20%22invalid%22%2C%20errorNode)%0A%60%60%60%0A%0A%23%23%23%20Multi-Way%20Branching%0A%0A%60%60%60go%0AcategoryNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20value%20%3A%3D%20prepResult.(int)%0A%20%20%20%20%20%20%20%20if%20value%20%3C%2010%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22small%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%20else%20if%20value%20%3C%20100%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22medium%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%22large%22%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0Aflow%20%3A%3D%20flyt.NewFlow(categoryNode)%0Aflow.Connect(categoryNode%2C%20%22small%22%2C%20smallHandler)%0Aflow.Connect(categoryNode%2C%20%22medium%22%2C%20mediumHandler)%0Aflow.Connect(categoryNode%2C%20%22large%22%2C%20largeHandler)%0A%60%60%60%0A%0A%23%23%20Flow%20Termination%0A%0AIf%20no%20connection%20exists%20for%20an%20action%2C%20the%20flow%20terminates%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(node1)%0Aflow.Connect(node1%2C%20%22continue%22%2C%20node2)%0A%2F%2F%20If%20node1%20returns%20%22stop%22%2C%20flow%20ends%20(no%20connection%20for%20%22stop%22)%0A%60%60%60%0A%0AExplicitly%20terminate%20by%20connecting%20to%20nil%3A%0A%0A%60%60%60go%0Aflow.Connect(finalNode%2C%20%22done%22%2C%20nil)%0A%60%60%60%0A%0A%23%23%20Common%20Patterns%0A%0A%23%23%23%20Success%2FFailure%20Pattern%0A%0A%60%60%60go%0Afunc%20makeDecisionPost(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20if%20err%20%3A%3D%20execResult.(error)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20%22failure%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20%22success%22%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Retry%20Pattern%0A%0A%60%60%60go%0Afunc%20retryablePost(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20attempts%2C%20_%20%3A%3D%20shared.Get(%22attempts%22)%0A%20%20%20%20count%20%3A%3D%20attempts.(int)%0A%20%20%20%20%0A%20%20%20%20if%20execResult%20%3D%3D%20nil%20%26%26%20count%20%3C%203%20%7B%0A%20%20%20%20%20%20%20%20shared.Set(%22attempts%22%2C%20count%20%2B%201)%0A%20%20%20%20%20%20%20%20return%20%22retry%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20%22continue%22%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%20State%20Machine%20Pattern%0A%0A%60%60%60go%0Afunc%20statePost(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20currentState%2C%20_%20%3A%3D%20shared.Get(%22state%22)%0A%20%20%20%20%0A%20%20%20%20switch%20currentState.(string)%20%7B%0A%20%20%20%20case%20%22init%22%3A%0A%20%20%20%20%20%20%20%20shared.Set(%22state%22%2C%20%22processing%22)%0A%20%20%20%20%20%20%20%20return%20%22process%22%2C%20nil%0A%20%20%20%20case%20%22processing%22%3A%0A%20%20%20%20%20%20%20%20shared.Set(%22state%22%2C%20%22complete%22)%0A%20%20%20%20%20%20%20%20return%20%22finalize%22%2C%20nil%0A%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20return%20%22done%22%2C%20nil%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Dynamic%20Actions%0A%0AActions%20can%20be%20computed%20at%20runtime%3A%0A%0A%60%60%60go%0Afunc%20dynamicPost(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20result%20%3A%3D%20execResult.(map%5Bstring%5Dany)%0A%20%20%20%20nextAction%20%3A%3D%20result%5B%22next_action%22%5D.(string)%0A%20%20%20%20return%20flyt.Action(nextAction)%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Use%20Descriptive%20Names**%3A%20Actions%20should%20clearly%20indicate%20their%20purpose%0A2.%20**Document%20Actions**%3A%20List%20all%20possible%20actions%20a%20node%20can%20return%0A3.%20**Handle%20All%20Cases**%3A%20Ensure%20all%20possible%20actions%20have%20connections%20or%20intentionally%20terminate%0A4.%20**Consistent%20Naming**%3A%20Use%20a%20consistent%20naming%20scheme%20across%20your%20application%0A5.%20**Avoid%20Magic%20Strings**%3A%20Define%20action%20constants%20for%20reusability%0A%0A%60%60%60go%0Aconst%20(%0A%20%20%20%20ActionValidate%20%3D%20flyt.Action(%22validate%22)%0A%20%20%20%20ActionProcess%20%20%3D%20flyt.Action(%22process%22)%0A%20%20%20%20ActionComplete%20%3D%20flyt.Action(%22complete%22)%0A%20%20%20%20ActionError%20%20%20%20%3D%20flyt.Action(%22error%22)%0A)%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BFlows%5D(%2Fconcepts%2Fflows)%20-%20Connect%20nodes%20with%20actions%0A-%20%5BConditional%20Branching%5D(%2Fpatterns%2Fbranching)%20-%20Advanced%20routing%20patterns%0A-%20%5BNested%20Flows%5D(%2Fadvanced%2Fnested-flows)%20-%20Compose%20complex%20workflows", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/actions-v5NXZGFv.js"), path: "/concepts/actions.html", type: "mdx", filePath: "concepts/actions.mdx", content: "%23%20Actions%0A%0AActions%20are%20strings%20returned%20by%20a%20node's%20Post%20phase%20that%20determine%20the%20next%20step%20in%20a%20workflow.%20They%20provide%20dynamic%2C%20runtime%20control%20over%20flow%20execution.%0A%0A%23%23%20How%20Actions%20Work%0A%0AWhen%20a%20node%20completes%2C%20its%20Post%20phase%20returns%20an%20action%3A%0A%0A%60%60%60go%0Afunc%20(n%20*MyNode)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20if%20success%20%7B%0A%20%20%20%20%20%20%20%20return%20%22continue%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20%22retry%22%2C%20nil%0A%7D%0A%60%60%60%0A%0AThe%20flow%20then%20routes%20to%20the%20node%20connected%20with%20that%20action%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(startNode)%0Aflow.Connect(startNode%2C%20%22continue%22%2C%20processNode)%0Aflow.Connect(startNode%2C%20%22retry%22%2C%20retryNode)%0A%60%60%60%0A%0A%23%23%20Default%20Action%0A%0AThe%20most%20common%20action%20is%20%60flyt.DefaultAction%60%3A%0A%0A%60%60%60go%0A%2F%2F%20Using%20the%20constant%0Areturn%20flyt.DefaultAction%2C%20nil%20%20%2F%2F%20Returns%20%22default%22%0A%0A%2F%2F%20In%20flow%20connections%0Aflow.Connect(node1%2C%20flyt.DefaultAction%2C%20node2)%0A%60%60%60%0A%0A%23%23%20Action-Based%20Routing%0A%0A%23%23%23%20Simple%20Branching%0A%0A%60%60%60go%0AvalidationNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20return%20len(data)%20%3E%200%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20if%20execResult.(bool)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22valid%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%22invalid%22%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0Aflow%20%3A%3D%20flyt.NewFlow(validationNode)%0Aflow.Connect(validationNode%2C%20%22valid%22%2C%20processNode)%0Aflow.Connect(validationNode%2C%20%22invalid%22%2C%20errorNode)%0A%60%60%60%0A%0A%23%23%23%20Multi-Way%20Branching%0A%0A%60%60%60go%0AcategoryNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20value%20%3A%3D%20prepResult.(int)%0A%20%20%20%20%20%20%20%20if%20value%20%3C%2010%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22small%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%20else%20if%20value%20%3C%20100%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22medium%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%22large%22%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0Aflow%20%3A%3D%20flyt.NewFlow(categoryNode)%0Aflow.Connect(categoryNode%2C%20%22small%22%2C%20smallHandler)%0Aflow.Connect(categoryNode%2C%20%22medium%22%2C%20mediumHandler)%0Aflow.Connect(categoryNode%2C%20%22large%22%2C%20largeHandler)%0A%60%60%60%0A%0A%23%23%20Flow%20Termination%0A%0AIf%20no%20connection%20exists%20for%20an%20action%2C%20the%20flow%20terminates%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(node1)%0Aflow.Connect(node1%2C%20%22continue%22%2C%20node2)%0A%2F%2F%20If%20node1%20returns%20%22stop%22%2C%20flow%20ends%20(no%20connection%20for%20%22stop%22)%0A%60%60%60%0A%0AExplicitly%20terminate%20by%20connecting%20to%20nil%3A%0A%0A%60%60%60go%0Aflow.Connect(finalNode%2C%20%22done%22%2C%20nil)%0A%60%60%60%0A%0A%23%23%20Common%20Patterns%0A%0A%23%23%23%20Success%2FFailure%20Pattern%0A%0A%60%60%60go%0Afunc%20makeDecisionPost(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20if%20err%20%3A%3D%20execResult.(error)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20%22failure%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20%22success%22%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Retry%20Pattern%0A%0A%60%60%60go%0Afunc%20retryablePost(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20attempts%2C%20_%20%3A%3D%20shared.Get(%22attempts%22)%0A%20%20%20%20count%20%3A%3D%20attempts.(int)%0A%20%20%20%20%0A%20%20%20%20if%20execResult%20%3D%3D%20nil%20%26%26%20count%20%3C%203%20%7B%0A%20%20%20%20%20%20%20%20shared.Set(%22attempts%22%2C%20count%20%2B%201)%0A%20%20%20%20%20%20%20%20return%20%22retry%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20%22continue%22%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%20State%20Machine%20Pattern%0A%0A%60%60%60go%0Afunc%20statePost(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20currentState%2C%20_%20%3A%3D%20shared.Get(%22state%22)%0A%20%20%20%20%0A%20%20%20%20switch%20currentState.(string)%20%7B%0A%20%20%20%20case%20%22init%22%3A%0A%20%20%20%20%20%20%20%20shared.Set(%22state%22%2C%20%22processing%22)%0A%20%20%20%20%20%20%20%20return%20%22process%22%2C%20nil%0A%20%20%20%20case%20%22processing%22%3A%0A%20%20%20%20%20%20%20%20shared.Set(%22state%22%2C%20%22complete%22)%0A%20%20%20%20%20%20%20%20return%20%22finalize%22%2C%20nil%0A%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20return%20%22done%22%2C%20nil%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Dynamic%20Actions%0A%0AActions%20can%20be%20computed%20at%20runtime%3A%0A%0A%60%60%60go%0Afunc%20dynamicPost(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20result%20%3A%3D%20execResult.(map%5Bstring%5Dany)%0A%20%20%20%20nextAction%20%3A%3D%20result%5B%22next_action%22%5D.(string)%0A%20%20%20%20return%20flyt.Action(nextAction)%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Use%20Descriptive%20Names**%3A%20Actions%20should%20clearly%20indicate%20their%20purpose%0A2.%20**Document%20Actions**%3A%20List%20all%20possible%20actions%20a%20node%20can%20return%0A3.%20**Handle%20All%20Cases**%3A%20Ensure%20all%20possible%20actions%20have%20connections%20or%20intentionally%20terminate%0A4.%20**Consistent%20Naming**%3A%20Use%20a%20consistent%20naming%20scheme%20across%20your%20application%0A5.%20**Avoid%20Magic%20Strings**%3A%20Define%20action%20constants%20for%20reusability%0A%0A%60%60%60go%0Aconst%20(%0A%20%20%20%20ActionValidate%20%3D%20flyt.Action(%22validate%22)%0A%20%20%20%20ActionProcess%20%20%3D%20flyt.Action(%22process%22)%0A%20%20%20%20ActionComplete%20%3D%20flyt.Action(%22complete%22)%0A%20%20%20%20ActionError%20%20%20%20%3D%20flyt.Action(%22error%22)%0A)%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BFlows%5D(%2Fconcepts%2Fflows)%20-%20Connect%20nodes%20with%20actions%0A-%20%5BConditional%20Branching%5D(%2Fpatterns%2Fbranching)%20-%20Advanced%20routing%20patterns%0A-%20%5BNested%20Flows%5D(%2Fadvanced%2Fnested-flows)%20-%20Compose%20complex%20workflows", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/flows-BQu44ts5.js"), path: "/concepts/flows", type: "mdx", filePath: "concepts/flows.mdx", content: "%23%20Flows%0A%0AFlows%20connect%20nodes%20together%20to%20create%20workflows.%20They%20define%20the%20execution%20path%20based%20on%20actions%20returned%20by%20nodes.%0A%0A%23%23%20Creating%20Flows%0A%0AStart%20with%20a%20single%20node%20and%20build%20connections%3A%0A%0A%60%60%60go%0A%2F%2F%20Create%20nodes%0AstartNode%20%3A%3D%20createStartNode()%0AprocessNode%20%3A%3D%20createProcessNode()%0AendNode%20%3A%3D%20createEndNode()%0A%0A%2F%2F%20Build%20flow%0Aflow%20%3A%3D%20flyt.NewFlow(startNode)%0Aflow.Connect(startNode%2C%20flyt.DefaultAction%2C%20processNode)%0Aflow.Connect(processNode%2C%20flyt.DefaultAction%2C%20endNode)%0A%60%60%60%0A%0A%23%23%20Running%20Flows%0A%0AExecute%20a%20flow%20with%20a%20context%20and%20SharedStore%3A%0A%0A%60%60%60go%0Actx%20%3A%3D%20context.Background()%0Ashared%20%3A%3D%20flyt.NewSharedStore()%0A%0A%2F%2F%20Add%20initial%20data%0Ashared.Set(%22input%22%2C%20%22data%20to%20process%22)%0A%0A%2F%2F%20Run%20the%20flow%0Aerr%20%3A%3D%20flow.Run(ctx%2C%20shared)%0Aif%20err%20!%3D%20nil%20%7B%0A%20%20%20%20log.Fatal(err)%0A%7D%0A%0A%2F%2F%20Get%20results%0Aresult%2C%20_%20%3A%3D%20shared.Get(%22output%22)%0A%60%60%60%0A%0A%23%23%20Flow%20Connections%0A%0A%23%23%23%20Linear%20Flow%0A%0ASimple%20sequential%20execution%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(node1)%0Aflow.Connect(node1%2C%20flyt.DefaultAction%2C%20node2)%0Aflow.Connect(node2%2C%20flyt.DefaultAction%2C%20node3)%0Aflow.Connect(node3%2C%20flyt.DefaultAction%2C%20nil)%20%2F%2F%20Terminate%0A%60%60%60%0A%0A%23%23%23%20Branching%20Flow%0A%0AMultiple%20paths%20based%20on%20actions%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(decisionNode)%0Aflow.Connect(decisionNode%2C%20%22path_a%22%2C%20nodeA)%0Aflow.Connect(decisionNode%2C%20%22path_b%22%2C%20nodeB)%0Aflow.Connect(nodeA%2C%20flyt.DefaultAction%2C%20mergeNode)%0Aflow.Connect(nodeB%2C%20flyt.DefaultAction%2C%20mergeNode)%0A%60%60%60%0A%0A%23%23%23%20Loop%20Flow%0A%0ACreate%20cycles%20for%20retry%20or%20iteration%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(startNode)%0Aflow.Connect(startNode%2C%20flyt.DefaultAction%2C%20processNode)%0Aflow.Connect(processNode%2C%20%22retry%22%2C%20startNode)%20%20%20%20%2F%2F%20Loop%20back%0Aflow.Connect(processNode%2C%20%22success%22%2C%20endNode)%0A%60%60%60%0A%0A%23%23%20Flow%20as%20Node%0A%0AFlows%20implement%20the%20Node%20interface%20and%20can%20be%20used%20as%20nodes%3A%0A%0A%60%60%60go%0A%2F%2F%20Create%20a%20sub-flow%0AsubFlow%20%3A%3D%20flyt.NewFlow(validateNode)%0AsubFlow.Connect(validateNode%2C%20flyt.DefaultAction%2C%20transformNode)%0A%0A%2F%2F%20Use%20sub-flow%20in%20main%20flow%0AmainFlow%20%3A%3D%20flyt.NewFlow(fetchNode)%0AmainFlow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20subFlow)%0AmainFlow.Connect(subFlow%2C%20flyt.DefaultAction%2C%20saveNode)%0A%60%60%60%0A%0A%23%23%20Complex%20Flow%20Patterns%0A%0A%23%23%23%20Diamond%20Pattern%0A%0ASplit%20and%20merge%20execution%20paths%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(splitNode)%0Aflow.Connect(splitNode%2C%20%22path1%22%2C%20process1)%0Aflow.Connect(splitNode%2C%20%22path2%22%2C%20process2)%0Aflow.Connect(process1%2C%20flyt.DefaultAction%2C%20mergeNode)%0Aflow.Connect(process2%2C%20flyt.DefaultAction%2C%20mergeNode)%0A%60%60%60%0A%0A%23%23%23%20Error%20Handling%20Flow%0A%0ACentralized%20error%20handling%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(startNode)%0Aflow.Connect(startNode%2C%20%22error%22%2C%20errorHandler)%0Aflow.Connect(startNode%2C%20flyt.DefaultAction%2C%20processNode)%0Aflow.Connect(processNode%2C%20%22error%22%2C%20errorHandler)%0Aflow.Connect(processNode%2C%20flyt.DefaultAction%2C%20saveNode)%0Aflow.Connect(saveNode%2C%20%22error%22%2C%20errorHandler)%0A%60%60%60%0A%0A%23%23%23%20Pipeline%20Pattern%0A%0AData%20transformation%20pipeline%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(fetchNode)%0Aflow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20validateNode)%0Aflow.Connect(validateNode%2C%20%22valid%22%2C%20transformNode)%0Aflow.Connect(validateNode%2C%20%22invalid%22%2C%20rejectNode)%0Aflow.Connect(transformNode%2C%20flyt.DefaultAction%2C%20enrichNode)%0Aflow.Connect(enrichNode%2C%20flyt.DefaultAction%2C%20saveNode)%0A%60%60%60%0A%0A%23%23%20Flow%20Composition%0A%0ABuild%20complex%20flows%20from%20simpler%20ones%3A%0A%0A%60%60%60go%0Afunc%20createValidationFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20checkFormat%20%3A%3D%20createFormatChecker()%0A%20%20%20%20checkBusiness%20%3A%3D%20createBusinessRules()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(checkFormat)%0A%20%20%20%20flow.Connect(checkFormat%2C%20%22valid%22%2C%20checkBusiness)%0A%20%20%20%20return%20flow%0A%7D%0A%0Afunc%20createMainFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20fetch%20%3A%3D%20createFetchNode()%0A%20%20%20%20validation%20%3A%3D%20createValidationFlow()%0A%20%20%20%20process%20%3A%3D%20createProcessNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(fetch)%0A%20%20%20%20flow.Connect(fetch%2C%20flyt.DefaultAction%2C%20validation)%0A%20%20%20%20flow.Connect(validation%2C%20flyt.DefaultAction%2C%20process)%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Debugging%20Flows%0A%0AAdd%20logging%20nodes%20for%20debugging%3A%0A%0A%60%60%60go%0Afunc%20createLoggingNode(name%20string)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Prep%3A%20SharedStore%20keys%3A%20%25v%22%2C%20name%2C%20shared.GetAll())%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Exec%22%2C%20name)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20prepResult%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Post%3A%20Result%3A%20%25v%22%2C%20name%2C%20execResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Insert%20between%20nodes%20for%20debugging%0Aflow.Connect(node1%2C%20flyt.DefaultAction%2C%20createLoggingNode(%22debug%22))%0Aflow.Connect(createLoggingNode(%22debug%22)%2C%20flyt.DefaultAction%2C%20node2)%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Start%20Simple**%3A%20Build%20flows%20incrementally%2C%20testing%20as%20you%20go%0A2.%20**Name%20Nodes**%3A%20Give%20nodes%20descriptive%20names%20for%20easier%20debugging%0A3.%20**Document%20Flows**%3A%20Create%20diagrams%20or%20comments%20explaining%20flow%20logic%0A4.%20**Reuse%20Flows**%3A%20Extract%20common%20patterns%20into%20reusable%20sub-flows%0A5.%20**Test%20Flows**%3A%20Write%20tests%20for%20different%20execution%20paths%0A%0A%23%23%20Visualizing%20Flows%0A%0ADocument%20your%20flows%20with%20clear%20structure%3A%0A%0A%60%60%60go%0A%2F%2F%20Flow%20structure%3A%0A%2F%2F%20Start%20-%3E%20Validate%20-%3E%20Process%20-%3E%20Save%0A%2F%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%3E%20Error%20(on%20invalid)%0A%0Aflow%20%3A%3D%20flyt.NewFlow(startNode)%0Aflow.Connect(startNode%2C%20flyt.DefaultAction%2C%20validateNode)%0Aflow.Connect(validateNode%2C%20%22valid%22%2C%20processNode)%0Aflow.Connect(validateNode%2C%20%22invalid%22%2C%20errorNode)%0Aflow.Connect(processNode%2C%20flyt.DefaultAction%2C%20saveNode)%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BShared%20Store%5D(%2Fconcepts%2Fshared-store)%20-%20Share%20data%20between%20nodes%0A-%20%5BNested%20Flows%5D(%2Fadvanced%2Fnested-flows)%20-%20Advanced%20composition%0A-%20%5BBatch%20Flows%5D(%2Fadvanced%2Fbatch-flows)%20-%20Process%20multiple%20inputs", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/flows-BQu44ts5.js"), path: "/concepts/flows.html", type: "mdx", filePath: "concepts/flows.mdx", content: "%23%20Flows%0A%0AFlows%20connect%20nodes%20together%20to%20create%20workflows.%20They%20define%20the%20execution%20path%20based%20on%20actions%20returned%20by%20nodes.%0A%0A%23%23%20Creating%20Flows%0A%0AStart%20with%20a%20single%20node%20and%20build%20connections%3A%0A%0A%60%60%60go%0A%2F%2F%20Create%20nodes%0AstartNode%20%3A%3D%20createStartNode()%0AprocessNode%20%3A%3D%20createProcessNode()%0AendNode%20%3A%3D%20createEndNode()%0A%0A%2F%2F%20Build%20flow%0Aflow%20%3A%3D%20flyt.NewFlow(startNode)%0Aflow.Connect(startNode%2C%20flyt.DefaultAction%2C%20processNode)%0Aflow.Connect(processNode%2C%20flyt.DefaultAction%2C%20endNode)%0A%60%60%60%0A%0A%23%23%20Running%20Flows%0A%0AExecute%20a%20flow%20with%20a%20context%20and%20SharedStore%3A%0A%0A%60%60%60go%0Actx%20%3A%3D%20context.Background()%0Ashared%20%3A%3D%20flyt.NewSharedStore()%0A%0A%2F%2F%20Add%20initial%20data%0Ashared.Set(%22input%22%2C%20%22data%20to%20process%22)%0A%0A%2F%2F%20Run%20the%20flow%0Aerr%20%3A%3D%20flow.Run(ctx%2C%20shared)%0Aif%20err%20!%3D%20nil%20%7B%0A%20%20%20%20log.Fatal(err)%0A%7D%0A%0A%2F%2F%20Get%20results%0Aresult%2C%20_%20%3A%3D%20shared.Get(%22output%22)%0A%60%60%60%0A%0A%23%23%20Flow%20Connections%0A%0A%23%23%23%20Linear%20Flow%0A%0ASimple%20sequential%20execution%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(node1)%0Aflow.Connect(node1%2C%20flyt.DefaultAction%2C%20node2)%0Aflow.Connect(node2%2C%20flyt.DefaultAction%2C%20node3)%0Aflow.Connect(node3%2C%20flyt.DefaultAction%2C%20nil)%20%2F%2F%20Terminate%0A%60%60%60%0A%0A%23%23%23%20Branching%20Flow%0A%0AMultiple%20paths%20based%20on%20actions%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(decisionNode)%0Aflow.Connect(decisionNode%2C%20%22path_a%22%2C%20nodeA)%0Aflow.Connect(decisionNode%2C%20%22path_b%22%2C%20nodeB)%0Aflow.Connect(nodeA%2C%20flyt.DefaultAction%2C%20mergeNode)%0Aflow.Connect(nodeB%2C%20flyt.DefaultAction%2C%20mergeNode)%0A%60%60%60%0A%0A%23%23%23%20Loop%20Flow%0A%0ACreate%20cycles%20for%20retry%20or%20iteration%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(startNode)%0Aflow.Connect(startNode%2C%20flyt.DefaultAction%2C%20processNode)%0Aflow.Connect(processNode%2C%20%22retry%22%2C%20startNode)%20%20%20%20%2F%2F%20Loop%20back%0Aflow.Connect(processNode%2C%20%22success%22%2C%20endNode)%0A%60%60%60%0A%0A%23%23%20Flow%20as%20Node%0A%0AFlows%20implement%20the%20Node%20interface%20and%20can%20be%20used%20as%20nodes%3A%0A%0A%60%60%60go%0A%2F%2F%20Create%20a%20sub-flow%0AsubFlow%20%3A%3D%20flyt.NewFlow(validateNode)%0AsubFlow.Connect(validateNode%2C%20flyt.DefaultAction%2C%20transformNode)%0A%0A%2F%2F%20Use%20sub-flow%20in%20main%20flow%0AmainFlow%20%3A%3D%20flyt.NewFlow(fetchNode)%0AmainFlow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20subFlow)%0AmainFlow.Connect(subFlow%2C%20flyt.DefaultAction%2C%20saveNode)%0A%60%60%60%0A%0A%23%23%20Complex%20Flow%20Patterns%0A%0A%23%23%23%20Diamond%20Pattern%0A%0ASplit%20and%20merge%20execution%20paths%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(splitNode)%0Aflow.Connect(splitNode%2C%20%22path1%22%2C%20process1)%0Aflow.Connect(splitNode%2C%20%22path2%22%2C%20process2)%0Aflow.Connect(process1%2C%20flyt.DefaultAction%2C%20mergeNode)%0Aflow.Connect(process2%2C%20flyt.DefaultAction%2C%20mergeNode)%0A%60%60%60%0A%0A%23%23%23%20Error%20Handling%20Flow%0A%0ACentralized%20error%20handling%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(startNode)%0Aflow.Connect(startNode%2C%20%22error%22%2C%20errorHandler)%0Aflow.Connect(startNode%2C%20flyt.DefaultAction%2C%20processNode)%0Aflow.Connect(processNode%2C%20%22error%22%2C%20errorHandler)%0Aflow.Connect(processNode%2C%20flyt.DefaultAction%2C%20saveNode)%0Aflow.Connect(saveNode%2C%20%22error%22%2C%20errorHandler)%0A%60%60%60%0A%0A%23%23%23%20Pipeline%20Pattern%0A%0AData%20transformation%20pipeline%3A%0A%0A%60%60%60go%0Aflow%20%3A%3D%20flyt.NewFlow(fetchNode)%0Aflow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20validateNode)%0Aflow.Connect(validateNode%2C%20%22valid%22%2C%20transformNode)%0Aflow.Connect(validateNode%2C%20%22invalid%22%2C%20rejectNode)%0Aflow.Connect(transformNode%2C%20flyt.DefaultAction%2C%20enrichNode)%0Aflow.Connect(enrichNode%2C%20flyt.DefaultAction%2C%20saveNode)%0A%60%60%60%0A%0A%23%23%20Flow%20Composition%0A%0ABuild%20complex%20flows%20from%20simpler%20ones%3A%0A%0A%60%60%60go%0Afunc%20createValidationFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20checkFormat%20%3A%3D%20createFormatChecker()%0A%20%20%20%20checkBusiness%20%3A%3D%20createBusinessRules()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(checkFormat)%0A%20%20%20%20flow.Connect(checkFormat%2C%20%22valid%22%2C%20checkBusiness)%0A%20%20%20%20return%20flow%0A%7D%0A%0Afunc%20createMainFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20fetch%20%3A%3D%20createFetchNode()%0A%20%20%20%20validation%20%3A%3D%20createValidationFlow()%0A%20%20%20%20process%20%3A%3D%20createProcessNode()%0A%20%20%20%20%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(fetch)%0A%20%20%20%20flow.Connect(fetch%2C%20flyt.DefaultAction%2C%20validation)%0A%20%20%20%20flow.Connect(validation%2C%20flyt.DefaultAction%2C%20process)%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Debugging%20Flows%0A%0AAdd%20logging%20nodes%20for%20debugging%3A%0A%0A%60%60%60go%0Afunc%20createLoggingNode(name%20string)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Prep%3A%20SharedStore%20keys%3A%20%25v%22%2C%20name%2C%20shared.GetAll())%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Exec%22%2C%20name)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20prepResult%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Post%3A%20Result%3A%20%25v%22%2C%20name%2C%20execResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Insert%20between%20nodes%20for%20debugging%0Aflow.Connect(node1%2C%20flyt.DefaultAction%2C%20createLoggingNode(%22debug%22))%0Aflow.Connect(createLoggingNode(%22debug%22)%2C%20flyt.DefaultAction%2C%20node2)%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Start%20Simple**%3A%20Build%20flows%20incrementally%2C%20testing%20as%20you%20go%0A2.%20**Name%20Nodes**%3A%20Give%20nodes%20descriptive%20names%20for%20easier%20debugging%0A3.%20**Document%20Flows**%3A%20Create%20diagrams%20or%20comments%20explaining%20flow%20logic%0A4.%20**Reuse%20Flows**%3A%20Extract%20common%20patterns%20into%20reusable%20sub-flows%0A5.%20**Test%20Flows**%3A%20Write%20tests%20for%20different%20execution%20paths%0A%0A%23%23%20Visualizing%20Flows%0A%0ADocument%20your%20flows%20with%20clear%20structure%3A%0A%0A%60%60%60go%0A%2F%2F%20Flow%20structure%3A%0A%2F%2F%20Start%20-%3E%20Validate%20-%3E%20Process%20-%3E%20Save%0A%2F%2F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%3E%20Error%20(on%20invalid)%0A%0Aflow%20%3A%3D%20flyt.NewFlow(startNode)%0Aflow.Connect(startNode%2C%20flyt.DefaultAction%2C%20validateNode)%0Aflow.Connect(validateNode%2C%20%22valid%22%2C%20processNode)%0Aflow.Connect(validateNode%2C%20%22invalid%22%2C%20errorNode)%0Aflow.Connect(processNode%2C%20flyt.DefaultAction%2C%20saveNode)%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BShared%20Store%5D(%2Fconcepts%2Fshared-store)%20-%20Share%20data%20between%20nodes%0A-%20%5BNested%20Flows%5D(%2Fadvanced%2Fnested-flows)%20-%20Advanced%20composition%0A-%20%5BBatch%20Flows%5D(%2Fadvanced%2Fbatch-flows)%20-%20Process%20multiple%20inputs", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/nodes-CGADTI_7.js"), path: "/concepts/nodes", type: "mdx", filePath: "concepts/nodes.mdx", content: "%23%20Nodes%0A%0ANodes%20are%20the%20fundamental%20building%20blocks%20of%20Flyt%20workflows.%20Each%20node%20represents%20a%20single%20unit%20of%20work%20with%20a%20well-defined%20lifecycle.%0A%0A%23%23%20Node%20Lifecycle%0A%0AEvery%20node%20has%20three%20phases%20that%20execute%20in%20order%3A%0A%0A%23%23%23%201.%20Prep%20Phase%0A%0AThe%20preparation%20phase%20reads%20from%20the%20SharedStore%20and%20prepares%20data%20for%20execution.%0A%0A%60%60%60go%0Afunc%20(n%20*MyNode)%20Prep(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Read%20configuration%20or%20input%20data%0A%20%20%20%20config%2C%20_%20%3A%3D%20shared.Get(%22config%22)%0A%20%20%20%20input%2C%20_%20%3A%3D%20shared.Get(%22input_data%22)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Prepare%20and%20return%20data%20for%20Exec%20phase%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22config%22%3A%20config%2C%0A%20%20%20%20%20%20%20%20%22input%22%3A%20input%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%202.%20Exec%20Phase%0A%0AThe%20execution%20phase%20performs%20the%20main%20work.%20This%20phase%20can%20be%20retried%20on%20failure.%0A%0A%60%60%60go%0Afunc%20(n%20*MyNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20data%20%3A%3D%20prepResult.(map%5Bstring%5Dany)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Perform%20the%20main%20operation%0A%20%20%20%20result%2C%20err%20%3A%3D%20processData(data%5B%22input%22%5D)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%20%2F%2F%20Will%20trigger%20retry%20if%20configured%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%203.%20Post%20Phase%0A%0AThe%20post-processing%20phase%20handles%20results%20and%20determines%20the%20next%20action.%0A%0A%60%60%60go%0Afunc%20(n%20*MyNode)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Store%20results%0A%20%20%20%20shared.Set(%22output%22%2C%20execResult)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Determine%20next%20action%20based%20on%20results%0A%20%20%20%20if%20isValid(execResult)%20%7B%0A%20%20%20%20%20%20%20%20return%20%22success%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20%22failure%22%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Creating%20Nodes%0A%0A%23%23%23%20Using%20Helper%20Functions%0A%0AThe%20simplest%20way%20to%20create%20a%20node%3A%0A%0A%60%60%60go%0Anode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Prep%20logic%0A%20%20%20%20%20%20%20%20return%20prepData%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Exec%20logic%0A%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Post%20logic%0A%20%20%20%20%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%60%60%60%0A%0A%23%23%23%20Custom%20Node%20Types%0A%0AFor%20complex%20nodes%20with%20state%3A%0A%0A%60%60%60go%0Atype%20DatabaseNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20db%20*sql.DB%0A%7D%0A%0Afunc%20NewDatabaseNode(db%20*sql.DB)%20*DatabaseNode%20%7B%0A%20%20%20%20return%20%26DatabaseNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20db%3A%20db%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*DatabaseNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20query%20%3A%3D%20prepResult.(string)%0A%20%20%20%20rows%2C%20err%20%3A%3D%20n.db.QueryContext(ctx%2C%20query)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20defer%20rows.Close()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Process%20rows...%0A%20%20%20%20return%20results%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Node%20Options%0A%0AConfigure%20node%20behavior%20with%20options%3A%0A%0A%60%60%60go%0Anode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(execFunc)%2C%0A%20%20%20%20flyt.WithMaxRetries(3)%2C%20%20%20%20%20%20%20%20%2F%2F%20Retry%20up%20to%203%20times%0A%20%20%20%20flyt.WithWait(time.Second%20*%202)%2C%20%2F%2F%20Wait%202%20seconds%20between%20retries%0A)%0A%60%60%60%0A%0A%23%23%20BaseNode%0A%0AThe%20%60BaseNode%60%20provides%20default%20implementations%3A%0A%0A%60%60%60go%0Atype%20MyNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20%2F%2F%20Add%20custom%20fields%0A%7D%0A%0Afunc%20NewMyNode()%20*MyNode%20%7B%0A%20%20%20%20return%20%26MyNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode(%0A%20%20%20%20%20%20%20%20%20%20%20%20flyt.WithMaxRetries(5)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20flyt.WithWait(time.Second)%2C%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A%7D%0A%0A%2F%2F%20Override%20only%20the%20methods%20you%20need%0Afunc%20(n%20*MyNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Custom%20exec%20logic%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Thread%20Safety%0A%0ANodes%20should%20be%20thread-safe%20if%20used%20in%20concurrent%20batch%20operations%3A%0A%0A%60%60%60go%0Atype%20SafeNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20mu%20%20%20%20%20%20sync.Mutex%0A%20%20%20%20counter%20int%0A%7D%0A%0Afunc%20(n%20*SafeNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20n.mu.Lock()%0A%20%20%20%20n.counter%2B%2B%0A%20%20%20%20count%20%3A%3D%20n.counter%0A%20%20%20%20n.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20return%20fmt.Sprintf(%22Execution%20%23%25d%22%2C%20count)%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Single%20Responsibility**%3A%20Each%20node%20should%20do%20one%20thing%20well%0A2.%20**Idempotency**%3A%20Design%20nodes%20to%20be%20safely%20retryable%0A3.%20**Context%20Handling**%3A%20Always%20respect%20context%20cancellation%0A4.%20**Error%20Handling**%3A%20Return%20clear%2C%20actionable%20errors%0A5.%20**Resource%20Management**%3A%20Clean%20up%20resources%20in%20defer%20blocks%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BActions%5D(%2Fconcepts%2Factions)%20-%20Control%20flow%20with%20actions%0A-%20%5BFlows%5D(%2Fconcepts%2Fflows)%20-%20Connect%20nodes%20into%20workflows%0A-%20%5BCustom%20Node%20Types%5D(%2Fadvanced%2Fcustom-nodes)%20-%20Advanced%20node%20patterns", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/nodes-CGADTI_7.js"), path: "/concepts/nodes.html", type: "mdx", filePath: "concepts/nodes.mdx", content: "%23%20Nodes%0A%0ANodes%20are%20the%20fundamental%20building%20blocks%20of%20Flyt%20workflows.%20Each%20node%20represents%20a%20single%20unit%20of%20work%20with%20a%20well-defined%20lifecycle.%0A%0A%23%23%20Node%20Lifecycle%0A%0AEvery%20node%20has%20three%20phases%20that%20execute%20in%20order%3A%0A%0A%23%23%23%201.%20Prep%20Phase%0A%0AThe%20preparation%20phase%20reads%20from%20the%20SharedStore%20and%20prepares%20data%20for%20execution.%0A%0A%60%60%60go%0Afunc%20(n%20*MyNode)%20Prep(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Read%20configuration%20or%20input%20data%0A%20%20%20%20config%2C%20_%20%3A%3D%20shared.Get(%22config%22)%0A%20%20%20%20input%2C%20_%20%3A%3D%20shared.Get(%22input_data%22)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Prepare%20and%20return%20data%20for%20Exec%20phase%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22config%22%3A%20config%2C%0A%20%20%20%20%20%20%20%20%22input%22%3A%20input%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%202.%20Exec%20Phase%0A%0AThe%20execution%20phase%20performs%20the%20main%20work.%20This%20phase%20can%20be%20retried%20on%20failure.%0A%0A%60%60%60go%0Afunc%20(n%20*MyNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20data%20%3A%3D%20prepResult.(map%5Bstring%5Dany)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Perform%20the%20main%20operation%0A%20%20%20%20result%2C%20err%20%3A%3D%20processData(data%5B%22input%22%5D)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%20%2F%2F%20Will%20trigger%20retry%20if%20configured%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%203.%20Post%20Phase%0A%0AThe%20post-processing%20phase%20handles%20results%20and%20determines%20the%20next%20action.%0A%0A%60%60%60go%0Afunc%20(n%20*MyNode)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Store%20results%0A%20%20%20%20shared.Set(%22output%22%2C%20execResult)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Determine%20next%20action%20based%20on%20results%0A%20%20%20%20if%20isValid(execResult)%20%7B%0A%20%20%20%20%20%20%20%20return%20%22success%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20%22failure%22%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Creating%20Nodes%0A%0A%23%23%23%20Using%20Helper%20Functions%0A%0AThe%20simplest%20way%20to%20create%20a%20node%3A%0A%0A%60%60%60go%0Anode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Prep%20logic%0A%20%20%20%20%20%20%20%20return%20prepData%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Exec%20logic%0A%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Post%20logic%0A%20%20%20%20%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%60%60%60%0A%0A%23%23%23%20Custom%20Node%20Types%0A%0AFor%20complex%20nodes%20with%20state%3A%0A%0A%60%60%60go%0Atype%20DatabaseNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20db%20*sql.DB%0A%7D%0A%0Afunc%20NewDatabaseNode(db%20*sql.DB)%20*DatabaseNode%20%7B%0A%20%20%20%20return%20%26DatabaseNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20db%3A%20db%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*DatabaseNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20query%20%3A%3D%20prepResult.(string)%0A%20%20%20%20rows%2C%20err%20%3A%3D%20n.db.QueryContext(ctx%2C%20query)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20defer%20rows.Close()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Process%20rows...%0A%20%20%20%20return%20results%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Node%20Options%0A%0AConfigure%20node%20behavior%20with%20options%3A%0A%0A%60%60%60go%0Anode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(execFunc)%2C%0A%20%20%20%20flyt.WithMaxRetries(3)%2C%20%20%20%20%20%20%20%20%2F%2F%20Retry%20up%20to%203%20times%0A%20%20%20%20flyt.WithWait(time.Second%20*%202)%2C%20%2F%2F%20Wait%202%20seconds%20between%20retries%0A)%0A%60%60%60%0A%0A%23%23%20BaseNode%0A%0AThe%20%60BaseNode%60%20provides%20default%20implementations%3A%0A%0A%60%60%60go%0Atype%20MyNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20%2F%2F%20Add%20custom%20fields%0A%7D%0A%0Afunc%20NewMyNode()%20*MyNode%20%7B%0A%20%20%20%20return%20%26MyNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode(%0A%20%20%20%20%20%20%20%20%20%20%20%20flyt.WithMaxRetries(5)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20flyt.WithWait(time.Second)%2C%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A%7D%0A%0A%2F%2F%20Override%20only%20the%20methods%20you%20need%0Afunc%20(n%20*MyNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Custom%20exec%20logic%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Thread%20Safety%0A%0ANodes%20should%20be%20thread-safe%20if%20used%20in%20concurrent%20batch%20operations%3A%0A%0A%60%60%60go%0Atype%20SafeNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20mu%20%20%20%20%20%20sync.Mutex%0A%20%20%20%20counter%20int%0A%7D%0A%0Afunc%20(n%20*SafeNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20n.mu.Lock()%0A%20%20%20%20n.counter%2B%2B%0A%20%20%20%20count%20%3A%3D%20n.counter%0A%20%20%20%20n.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20return%20fmt.Sprintf(%22Execution%20%23%25d%22%2C%20count)%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Single%20Responsibility**%3A%20Each%20node%20should%20do%20one%20thing%20well%0A2.%20**Idempotency**%3A%20Design%20nodes%20to%20be%20safely%20retryable%0A3.%20**Context%20Handling**%3A%20Always%20respect%20context%20cancellation%0A4.%20**Error%20Handling**%3A%20Return%20clear%2C%20actionable%20errors%0A5.%20**Resource%20Management**%3A%20Clean%20up%20resources%20in%20defer%20blocks%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BActions%5D(%2Fconcepts%2Factions)%20-%20Control%20flow%20with%20actions%0A-%20%5BFlows%5D(%2Fconcepts%2Fflows)%20-%20Connect%20nodes%20into%20workflows%0A-%20%5BCustom%20Node%20Types%5D(%2Fadvanced%2Fcustom-nodes)%20-%20Advanced%20node%20patterns", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/shared-store-DX1_JvZT.js"), path: "/concepts/shared-store", type: "mdx", filePath: "concepts/shared-store.mdx", content: "%23%20Shared%20Store%0A%0AThe%20SharedStore%20provides%20thread-safe%20data%20sharing%20between%20nodes%20in%20a%20flow.%20It%20acts%20as%20a%20key-value%20store%20that%20persists%20throughout%20flow%20execution.%0A%0A%23%23%20Creating%20a%20SharedStore%0A%0A%60%60%60go%0Ashared%20%3A%3D%20flyt.NewSharedStore()%0A%60%60%60%0A%0A%23%23%20Basic%20Operations%0A%0A%23%23%23%20Set%20and%20Get%0A%0AStore%20and%20retrieve%20individual%20values%3A%0A%0A%60%60%60go%0A%2F%2F%20Set%20a%20value%0Ashared.Set(%22user_id%22%2C%20123)%0Ashared.Set(%22config%22%2C%20map%5Bstring%5Dany%7B%22timeout%22%3A%2030%7D)%0A%0A%2F%2F%20Get%20a%20value%0Aif%20value%2C%20ok%20%3A%3D%20shared.Get(%22user_id%22)%3B%20ok%20%7B%0A%20%20%20%20userID%20%3A%3D%20value.(int)%0A%20%20%20%20fmt.Printf(%22User%20ID%3A%20%25d%5Cn%22%2C%20userID)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20GetAll%0A%0AGet%20a%20copy%20of%20all%20stored%20data%3A%0A%0A%60%60%60go%0AallData%20%3A%3D%20shared.GetAll()%0Afor%20key%2C%20value%20%3A%3D%20range%20allData%20%7B%0A%20%20%20%20fmt.Printf(%22%25s%3A%20%25v%5Cn%22%2C%20key%2C%20value)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Merge%0A%0AMerge%20multiple%20values%20at%20once%3A%0A%0A%60%60%60go%0Ashared.Merge(map%5Bstring%5Dany%7B%0A%20%20%20%20%22status%22%3A%20%22active%22%2C%0A%20%20%20%20%22timestamp%22%3A%20time.Now()%2C%0A%20%20%20%20%22metadata%22%3A%20map%5Bstring%5Dstring%7B%0A%20%20%20%20%20%20%20%20%22version%22%3A%20%221.0%22%2C%0A%20%20%20%20%20%20%20%20%22env%22%3A%20%22production%22%2C%0A%20%20%20%20%7D%2C%0A%7D)%0A%60%60%60%0A%0A%23%23%20Thread%20Safety%0A%0ASharedStore%20is%20safe%20for%20concurrent%20access%3A%0A%0A%60%60%60go%0Avar%20wg%20sync.WaitGroup%0A%0A%2F%2F%20Multiple%20goroutines%20can%20safely%20access%0Afor%20i%20%3A%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B%20%7B%0A%20%20%20%20wg.Add(1)%0A%20%20%20%20go%20func(id%20int)%20%7B%0A%20%20%20%20%20%20%20%20defer%20wg.Done()%0A%20%20%20%20%20%20%20%20shared.Set(fmt.Sprintf(%22worker_%25d%22%2C%20id)%2C%20%22done%22)%0A%20%20%20%20%7D(i)%0A%7D%0A%0Awg.Wait()%0A%60%60%60%0A%0A%23%23%20Common%20Patterns%0A%0A%23%23%23%20Configuration%20Storage%0A%0AStore%20configuration%20that%20multiple%20nodes%20need%3A%0A%0A%60%60%60go%0A%2F%2F%20In%20main%20or%20initial%20node%0Ashared.Set(%22api_config%22%2C%20map%5Bstring%5Dstring%7B%0A%20%20%20%20%22base_url%22%3A%20%22https%3A%2F%2Fapi.example.com%22%2C%0A%20%20%20%20%22api_key%22%3A%20os.Getenv(%22API_KEY%22)%2C%0A%20%20%20%20%22timeout%22%3A%20%2230s%22%2C%0A%7D)%0A%0A%2F%2F%20In%20any%20node%0Afunc%20(n%20*APINode)%20Prep(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20config%2C%20_%20%3A%3D%20shared.Get(%22api_config%22)%0A%20%20%20%20return%20config%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Accumulating%20Results%0A%0ACollect%20results%20from%20multiple%20nodes%3A%0A%0A%60%60%60go%0A%2F%2F%20Node%201%0Afunc%20(n%20*Node1)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20results%2C%20_%20%3A%3D%20shared.Get(%22results%22)%0A%20%20%20%20if%20results%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20results%20%3D%20%5B%5Dany%7B%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20resultList%20%3A%3D%20results.(%5B%5Dany)%0A%20%20%20%20resultList%20%3D%20append(resultList%2C%20execResult)%0A%20%20%20%20shared.Set(%22results%22%2C%20resultList)%0A%20%20%20%20%0A%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%20State%20Management%0A%0ATrack%20workflow%20state%3A%0A%0A%60%60%60go%0A%2F%2F%20Initialize%20state%0Ashared.Set(%22workflow_state%22%2C%20%22initialized%22)%0Ashared.Set(%22retry_count%22%2C%200)%0Ashared.Set(%22start_time%22%2C%20time.Now())%0A%0A%2F%2F%20Update%20state%20in%20nodes%0Afunc%20updateState(shared%20*flyt.SharedStore%2C%20newState%20string)%20%7B%0A%20%20%20%20shared.Set(%22workflow_state%22%2C%20newState)%0A%20%20%20%20shared.Set(%22last_update%22%2C%20time.Now())%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Error%20Context%0A%0AStore%20error%20information%20for%20debugging%3A%0A%0A%60%60%60go%0Afunc%20(n%20*ErrorHandler)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20if%20err%20%3A%3D%20execResult.(error)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20shared.Set(%22last_error%22%2C%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20err.Error()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22node%22%3A%20%22ProcessNode%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22timestamp%22%3A%20time.Now()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22input%22%3A%20prepResult%2C%0A%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%20%20%20%20return%20%22error%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Batch%20Processing%0A%0ASharedStore%20in%20batch%20operations%3A%0A%0A%60%60%60go%0A%2F%2F%20Store%20items%20to%20process%0Ashared.Set(%22items%22%2C%20%5B%5Dstring%7B%22item1%22%2C%20%22item2%22%2C%20%22item3%22%7D)%0A%0A%2F%2F%20Store%20batch%20configuration%0Ashared.Set(%22batch_config%22%2C%20map%5Bstring%5Dany%7B%0A%20%20%20%20%22batch_size%22%3A%2010%2C%0A%20%20%20%20%22concurrent%22%3A%20true%2C%0A%20%20%20%20%22timeout%22%3A%2060%2C%0A%7D)%0A%0A%2F%2F%20After%20batch%20processing%0Aresults%2C%20_%20%3A%3D%20shared.Get(%22results%22)%0Aerrors%2C%20_%20%3A%3D%20shared.Get(%22errors%22)%0A%60%60%60%0A%0A%23%23%20Isolation%20in%20Batch%20Flows%0A%0AEach%20flow%20in%20a%20batch%20has%20its%20own%20SharedStore%3A%0A%0A%60%60%60go%0AbatchFunc%20%3A%3D%20func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(%5B%5Dflyt.FlowInputs%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20This%20shared%20is%20from%20the%20parent%0A%20%20%20%20baseConfig%2C%20_%20%3A%3D%20shared.Get(%22base_config%22)%0A%20%20%20%20%0A%20%20%20%20return%20%5B%5Dflyt.FlowInputs%7B%0A%20%20%20%20%20%20%20%20%7B%22id%22%3A%201%2C%20%22config%22%3A%20baseConfig%7D%2C%20%2F%2F%20Each%20gets%20own%20SharedStore%0A%20%20%20%20%20%20%20%20%7B%22id%22%3A%202%2C%20%22config%22%3A%20baseConfig%7D%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A%23%23%23%201.%20Type%20Safety%0A%0AUse%20type%20assertions%20carefully%3A%0A%0A%60%60%60go%0A%2F%2F%20Safe%20type%20assertion%0Aif%20value%2C%20ok%20%3A%3D%20shared.Get(%22count%22)%3B%20ok%20%7B%0A%20%20%20%20if%20count%2C%20ok%20%3A%3D%20value.(int)%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Use%20count%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Handle%20type%20mismatch%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%202.%20Key%20Naming%0A%0AUse%20consistent%2C%20descriptive%20keys%3A%0A%0A%60%60%60go%0Aconst%20(%0A%20%20%20%20KeyUserID%20%20%20%20%20%3D%20%22user_id%22%0A%20%20%20%20KeyAuthToken%20%20%3D%20%22auth_token%22%0A%20%20%20%20KeyResults%20%20%20%20%3D%20%22processing_results%22%0A%20%20%20%20KeyErrorCount%20%3D%20%22error_count%22%0A)%0A%60%60%60%0A%0A%23%23%23%203.%20Data%20Structure%0A%0AStore%20structured%20data%20for%20clarity%3A%0A%0A%60%60%60go%0Atype%20WorkflowContext%20struct%20%7B%0A%20%20%20%20RequestID%20string%0A%20%20%20%20UserID%20%20%20%20int%0A%20%20%20%20StartTime%20time.Time%0A%20%20%20%20Metadata%20%20map%5Bstring%5Dstring%0A%7D%0A%0Ashared.Set(%22context%22%2C%20WorkflowContext%7B%0A%20%20%20%20RequestID%3A%20%22req-123%22%2C%0A%20%20%20%20UserID%3A%20%20%20%20456%2C%0A%20%20%20%20StartTime%3A%20time.Now()%2C%0A%20%20%20%20Metadata%3A%20%20map%5Bstring%5Dstring%7B%22source%22%3A%20%22api%22%7D%2C%0A%7D)%0A%60%60%60%0A%0A%23%23%23%204.%20Cleanup%0A%0AClear%20sensitive%20data%20when%20done%3A%0A%0A%60%60%60go%0Adefer%20func()%20%7B%0A%20%20%20%20%2F%2F%20Clear%20sensitive%20data%0A%20%20%20%20shared.Set(%22auth_token%22%2C%20nil)%0A%20%20%20%20shared.Set(%22api_key%22%2C%20nil)%0A%7D()%0A%60%60%60%0A%0A%23%23%23%205.%20Documentation%0A%0ADocument%20expected%20keys%3A%0A%0A%60%60%60go%0A%2F%2F%20SharedStore%20keys%20used%20by%20this%20flow%3A%0A%2F%2F%20-%20%22input_file%22%3A%20string%20-%20Path%20to%20input%20file%0A%2F%2F%20-%20%22output_dir%22%3A%20string%20-%20Output%20directory%20path%0A%2F%2F%20-%20%22processed_count%22%3A%20int%20-%20Number%20of%20processed%20items%0A%2F%2F%20-%20%22errors%22%3A%20%5B%5Derror%20-%20Collection%20of%20errors%0A%60%60%60%0A%0A%23%23%20Debugging%0A%0AUse%20GetAll%20for%20debugging%3A%0A%0A%60%60%60go%0Afunc%20debugSharedStore(shared%20*flyt.SharedStore)%20%7B%0A%20%20%20%20data%20%3A%3D%20shared.GetAll()%0A%20%20%20%20fmt.Println(%22%3D%3D%3D%20SharedStore%20Contents%20%3D%3D%3D%22)%0A%20%20%20%20for%20k%2C%20v%20%3A%3D%20range%20data%20%7B%0A%20%20%20%20%20%20%20%20fmt.Printf(%22%25s%3A%20%25T%20%3D%20%25v%5Cn%22%2C%20k%2C%20v%2C%20v)%0A%20%20%20%20%7D%0A%20%20%20%20fmt.Println(%22%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%22)%0A%7D%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BNodes%5D(%2Fconcepts%2Fnodes)%20-%20Use%20SharedStore%20in%20node%20lifecycle%0A-%20%5BBatch%20Processing%5D(%2Fadvanced%2Fbatch-processing)%20-%20SharedStore%20in%20batch%20operations%0A-%20%5BBest%20Practices%5D(%2Fbest-practices)%20-%20General%20Flyt%20best%20practices", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/shared-store-DX1_JvZT.js"), path: "/concepts/shared-store.html", type: "mdx", filePath: "concepts/shared-store.mdx", content: "%23%20Shared%20Store%0A%0AThe%20SharedStore%20provides%20thread-safe%20data%20sharing%20between%20nodes%20in%20a%20flow.%20It%20acts%20as%20a%20key-value%20store%20that%20persists%20throughout%20flow%20execution.%0A%0A%23%23%20Creating%20a%20SharedStore%0A%0A%60%60%60go%0Ashared%20%3A%3D%20flyt.NewSharedStore()%0A%60%60%60%0A%0A%23%23%20Basic%20Operations%0A%0A%23%23%23%20Set%20and%20Get%0A%0AStore%20and%20retrieve%20individual%20values%3A%0A%0A%60%60%60go%0A%2F%2F%20Set%20a%20value%0Ashared.Set(%22user_id%22%2C%20123)%0Ashared.Set(%22config%22%2C%20map%5Bstring%5Dany%7B%22timeout%22%3A%2030%7D)%0A%0A%2F%2F%20Get%20a%20value%0Aif%20value%2C%20ok%20%3A%3D%20shared.Get(%22user_id%22)%3B%20ok%20%7B%0A%20%20%20%20userID%20%3A%3D%20value.(int)%0A%20%20%20%20fmt.Printf(%22User%20ID%3A%20%25d%5Cn%22%2C%20userID)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20GetAll%0A%0AGet%20a%20copy%20of%20all%20stored%20data%3A%0A%0A%60%60%60go%0AallData%20%3A%3D%20shared.GetAll()%0Afor%20key%2C%20value%20%3A%3D%20range%20allData%20%7B%0A%20%20%20%20fmt.Printf(%22%25s%3A%20%25v%5Cn%22%2C%20key%2C%20value)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Merge%0A%0AMerge%20multiple%20values%20at%20once%3A%0A%0A%60%60%60go%0Ashared.Merge(map%5Bstring%5Dany%7B%0A%20%20%20%20%22status%22%3A%20%22active%22%2C%0A%20%20%20%20%22timestamp%22%3A%20time.Now()%2C%0A%20%20%20%20%22metadata%22%3A%20map%5Bstring%5Dstring%7B%0A%20%20%20%20%20%20%20%20%22version%22%3A%20%221.0%22%2C%0A%20%20%20%20%20%20%20%20%22env%22%3A%20%22production%22%2C%0A%20%20%20%20%7D%2C%0A%7D)%0A%60%60%60%0A%0A%23%23%20Thread%20Safety%0A%0ASharedStore%20is%20safe%20for%20concurrent%20access%3A%0A%0A%60%60%60go%0Avar%20wg%20sync.WaitGroup%0A%0A%2F%2F%20Multiple%20goroutines%20can%20safely%20access%0Afor%20i%20%3A%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B%20%7B%0A%20%20%20%20wg.Add(1)%0A%20%20%20%20go%20func(id%20int)%20%7B%0A%20%20%20%20%20%20%20%20defer%20wg.Done()%0A%20%20%20%20%20%20%20%20shared.Set(fmt.Sprintf(%22worker_%25d%22%2C%20id)%2C%20%22done%22)%0A%20%20%20%20%7D(i)%0A%7D%0A%0Awg.Wait()%0A%60%60%60%0A%0A%23%23%20Common%20Patterns%0A%0A%23%23%23%20Configuration%20Storage%0A%0AStore%20configuration%20that%20multiple%20nodes%20need%3A%0A%0A%60%60%60go%0A%2F%2F%20In%20main%20or%20initial%20node%0Ashared.Set(%22api_config%22%2C%20map%5Bstring%5Dstring%7B%0A%20%20%20%20%22base_url%22%3A%20%22https%3A%2F%2Fapi.example.com%22%2C%0A%20%20%20%20%22api_key%22%3A%20os.Getenv(%22API_KEY%22)%2C%0A%20%20%20%20%22timeout%22%3A%20%2230s%22%2C%0A%7D)%0A%0A%2F%2F%20In%20any%20node%0Afunc%20(n%20*APINode)%20Prep(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20config%2C%20_%20%3A%3D%20shared.Get(%22api_config%22)%0A%20%20%20%20return%20config%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Accumulating%20Results%0A%0ACollect%20results%20from%20multiple%20nodes%3A%0A%0A%60%60%60go%0A%2F%2F%20Node%201%0Afunc%20(n%20*Node1)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20results%2C%20_%20%3A%3D%20shared.Get(%22results%22)%0A%20%20%20%20if%20results%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20results%20%3D%20%5B%5Dany%7B%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20resultList%20%3A%3D%20results.(%5B%5Dany)%0A%20%20%20%20resultList%20%3D%20append(resultList%2C%20execResult)%0A%20%20%20%20shared.Set(%22results%22%2C%20resultList)%0A%20%20%20%20%0A%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%23%20State%20Management%0A%0ATrack%20workflow%20state%3A%0A%0A%60%60%60go%0A%2F%2F%20Initialize%20state%0Ashared.Set(%22workflow_state%22%2C%20%22initialized%22)%0Ashared.Set(%22retry_count%22%2C%200)%0Ashared.Set(%22start_time%22%2C%20time.Now())%0A%0A%2F%2F%20Update%20state%20in%20nodes%0Afunc%20updateState(shared%20*flyt.SharedStore%2C%20newState%20string)%20%7B%0A%20%20%20%20shared.Set(%22workflow_state%22%2C%20newState)%0A%20%20%20%20shared.Set(%22last_update%22%2C%20time.Now())%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Error%20Context%0A%0AStore%20error%20information%20for%20debugging%3A%0A%0A%60%60%60go%0Afunc%20(n%20*ErrorHandler)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20if%20err%20%3A%3D%20execResult.(error)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20shared.Set(%22last_error%22%2C%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20err.Error()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22node%22%3A%20%22ProcessNode%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22timestamp%22%3A%20time.Now()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22input%22%3A%20prepResult%2C%0A%20%20%20%20%20%20%20%20%7D)%0A%20%20%20%20%20%20%20%20return%20%22error%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Batch%20Processing%0A%0ASharedStore%20in%20batch%20operations%3A%0A%0A%60%60%60go%0A%2F%2F%20Store%20items%20to%20process%0Ashared.Set(%22items%22%2C%20%5B%5Dstring%7B%22item1%22%2C%20%22item2%22%2C%20%22item3%22%7D)%0A%0A%2F%2F%20Store%20batch%20configuration%0Ashared.Set(%22batch_config%22%2C%20map%5Bstring%5Dany%7B%0A%20%20%20%20%22batch_size%22%3A%2010%2C%0A%20%20%20%20%22concurrent%22%3A%20true%2C%0A%20%20%20%20%22timeout%22%3A%2060%2C%0A%7D)%0A%0A%2F%2F%20After%20batch%20processing%0Aresults%2C%20_%20%3A%3D%20shared.Get(%22results%22)%0Aerrors%2C%20_%20%3A%3D%20shared.Get(%22errors%22)%0A%60%60%60%0A%0A%23%23%20Isolation%20in%20Batch%20Flows%0A%0AEach%20flow%20in%20a%20batch%20has%20its%20own%20SharedStore%3A%0A%0A%60%60%60go%0AbatchFunc%20%3A%3D%20func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(%5B%5Dflyt.FlowInputs%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20This%20shared%20is%20from%20the%20parent%0A%20%20%20%20baseConfig%2C%20_%20%3A%3D%20shared.Get(%22base_config%22)%0A%20%20%20%20%0A%20%20%20%20return%20%5B%5Dflyt.FlowInputs%7B%0A%20%20%20%20%20%20%20%20%7B%22id%22%3A%201%2C%20%22config%22%3A%20baseConfig%7D%2C%20%2F%2F%20Each%20gets%20own%20SharedStore%0A%20%20%20%20%20%20%20%20%7B%22id%22%3A%202%2C%20%22config%22%3A%20baseConfig%7D%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A%23%23%23%201.%20Type%20Safety%0A%0AUse%20type%20assertions%20carefully%3A%0A%0A%60%60%60go%0A%2F%2F%20Safe%20type%20assertion%0Aif%20value%2C%20ok%20%3A%3D%20shared.Get(%22count%22)%3B%20ok%20%7B%0A%20%20%20%20if%20count%2C%20ok%20%3A%3D%20value.(int)%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Use%20count%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Handle%20type%20mismatch%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%23%202.%20Key%20Naming%0A%0AUse%20consistent%2C%20descriptive%20keys%3A%0A%0A%60%60%60go%0Aconst%20(%0A%20%20%20%20KeyUserID%20%20%20%20%20%3D%20%22user_id%22%0A%20%20%20%20KeyAuthToken%20%20%3D%20%22auth_token%22%0A%20%20%20%20KeyResults%20%20%20%20%3D%20%22processing_results%22%0A%20%20%20%20KeyErrorCount%20%3D%20%22error_count%22%0A)%0A%60%60%60%0A%0A%23%23%23%203.%20Data%20Structure%0A%0AStore%20structured%20data%20for%20clarity%3A%0A%0A%60%60%60go%0Atype%20WorkflowContext%20struct%20%7B%0A%20%20%20%20RequestID%20string%0A%20%20%20%20UserID%20%20%20%20int%0A%20%20%20%20StartTime%20time.Time%0A%20%20%20%20Metadata%20%20map%5Bstring%5Dstring%0A%7D%0A%0Ashared.Set(%22context%22%2C%20WorkflowContext%7B%0A%20%20%20%20RequestID%3A%20%22req-123%22%2C%0A%20%20%20%20UserID%3A%20%20%20%20456%2C%0A%20%20%20%20StartTime%3A%20time.Now()%2C%0A%20%20%20%20Metadata%3A%20%20map%5Bstring%5Dstring%7B%22source%22%3A%20%22api%22%7D%2C%0A%7D)%0A%60%60%60%0A%0A%23%23%23%204.%20Cleanup%0A%0AClear%20sensitive%20data%20when%20done%3A%0A%0A%60%60%60go%0Adefer%20func()%20%7B%0A%20%20%20%20%2F%2F%20Clear%20sensitive%20data%0A%20%20%20%20shared.Set(%22auth_token%22%2C%20nil)%0A%20%20%20%20shared.Set(%22api_key%22%2C%20nil)%0A%7D()%0A%60%60%60%0A%0A%23%23%23%205.%20Documentation%0A%0ADocument%20expected%20keys%3A%0A%0A%60%60%60go%0A%2F%2F%20SharedStore%20keys%20used%20by%20this%20flow%3A%0A%2F%2F%20-%20%22input_file%22%3A%20string%20-%20Path%20to%20input%20file%0A%2F%2F%20-%20%22output_dir%22%3A%20string%20-%20Output%20directory%20path%0A%2F%2F%20-%20%22processed_count%22%3A%20int%20-%20Number%20of%20processed%20items%0A%2F%2F%20-%20%22errors%22%3A%20%5B%5Derror%20-%20Collection%20of%20errors%0A%60%60%60%0A%0A%23%23%20Debugging%0A%0AUse%20GetAll%20for%20debugging%3A%0A%0A%60%60%60go%0Afunc%20debugSharedStore(shared%20*flyt.SharedStore)%20%7B%0A%20%20%20%20data%20%3A%3D%20shared.GetAll()%0A%20%20%20%20fmt.Println(%22%3D%3D%3D%20SharedStore%20Contents%20%3D%3D%3D%22)%0A%20%20%20%20for%20k%2C%20v%20%3A%3D%20range%20data%20%7B%0A%20%20%20%20%20%20%20%20fmt.Printf(%22%25s%3A%20%25T%20%3D%20%25v%5Cn%22%2C%20k%2C%20v%2C%20v)%0A%20%20%20%20%7D%0A%20%20%20%20fmt.Println(%22%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%22)%0A%7D%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BNodes%5D(%2Fconcepts%2Fnodes)%20-%20Use%20SharedStore%20in%20node%20lifecycle%0A-%20%5BBatch%20Processing%5D(%2Fadvanced%2Fbatch-processing)%20-%20SharedStore%20in%20batch%20operations%0A-%20%5BBest%20Practices%5D(%2Fbest-practices)%20-%20General%20Flyt%20best%20practices", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/installation-zcbADPAr.js"), path: "/getting-started/installation", type: "mdx", filePath: "getting-started/installation.mdx", content: "%23%20Installation%0A%0AFlyt%20requires%20Go%201.21%20or%20later.%0A%0A%23%23%20Install%20with%20go%20get%0A%0A%60%60%60bash%0Ago%20get%20github.com%2Fmark3labs%2Fflyt%0A%60%60%60%0A%0A%23%23%20Import%20in%20your%20code%0A%0A%60%60%60go%0Aimport%20%22github.com%2Fmark3labs%2Fflyt%22%0A%60%60%60%0A%0A%23%23%20Verify%20installation%0A%0ACreate%20a%20simple%20test%20file%20to%20verify%20the%20installation%3A%0A%0A%60%60%60go%0Apackage%20main%0A%0Aimport%20(%0A%20%20%20%20%22fmt%22%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A)%0A%0Afunc%20main()%20%7B%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20shared.Set(%22test%22%2C%20%22success%22)%0A%20%20%20%20%0A%20%20%20%20if%20val%2C%20ok%20%3A%3D%20shared.Get(%22test%22)%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20fmt.Printf(%22Flyt%20installed%20successfully!%20Value%3A%20%25v%5Cn%22%2C%20val)%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0ARun%20it%3A%0A%0A%60%60%60bash%0Ago%20run%20main.go%0A%60%60%60%0A%0AYou%20should%20see%3A%0A%60%60%60%0AFlyt%20installed%20successfully!%20Value%3A%20success%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BQuick%20Start%20Guide%5D(%2Fgetting-started%2Fquick-start)%20-%20Build%20your%20first%20workflow%0A-%20%5BProject%20Template%5D(%2Fgetting-started%2Ftemplate)%20-%20Start%20with%20a%20pre-configured%20project%0A-%20%5BCore%20Concepts%5D(%2Fconcepts%2Fnodes)%20-%20Understand%20the%20fundamentals", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/installation-zcbADPAr.js"), path: "/getting-started/installation.html", type: "mdx", filePath: "getting-started/installation.mdx", content: "%23%20Installation%0A%0AFlyt%20requires%20Go%201.21%20or%20later.%0A%0A%23%23%20Install%20with%20go%20get%0A%0A%60%60%60bash%0Ago%20get%20github.com%2Fmark3labs%2Fflyt%0A%60%60%60%0A%0A%23%23%20Import%20in%20your%20code%0A%0A%60%60%60go%0Aimport%20%22github.com%2Fmark3labs%2Fflyt%22%0A%60%60%60%0A%0A%23%23%20Verify%20installation%0A%0ACreate%20a%20simple%20test%20file%20to%20verify%20the%20installation%3A%0A%0A%60%60%60go%0Apackage%20main%0A%0Aimport%20(%0A%20%20%20%20%22fmt%22%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A)%0A%0Afunc%20main()%20%7B%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20shared.Set(%22test%22%2C%20%22success%22)%0A%20%20%20%20%0A%20%20%20%20if%20val%2C%20ok%20%3A%3D%20shared.Get(%22test%22)%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20fmt.Printf(%22Flyt%20installed%20successfully!%20Value%3A%20%25v%5Cn%22%2C%20val)%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0ARun%20it%3A%0A%0A%60%60%60bash%0Ago%20run%20main.go%0A%60%60%60%0A%0AYou%20should%20see%3A%0A%60%60%60%0AFlyt%20installed%20successfully!%20Value%3A%20success%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BQuick%20Start%20Guide%5D(%2Fgetting-started%2Fquick-start)%20-%20Build%20your%20first%20workflow%0A-%20%5BProject%20Template%5D(%2Fgetting-started%2Ftemplate)%20-%20Start%20with%20a%20pre-configured%20project%0A-%20%5BCore%20Concepts%5D(%2Fconcepts%2Fnodes)%20-%20Understand%20the%20fundamentals", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/quick-start-CLt5Mrku.js"), path: "/getting-started/quick-start", type: "mdx", filePath: "getting-started/quick-start.mdx", content: "%23%20Quick%20Start%0A%0AThis%20guide%20will%20help%20you%20build%20your%20first%20Flyt%20workflow%20in%205%20minutes.%0A%0A%23%23%20Your%20First%20Node%0A%0ALet's%20start%20with%20a%20simple%20node%20that%20processes%20data%3A%0A%0A%60%60%60go%0Apackage%20main%0A%0Aimport%20(%0A%20%20%20%20%22context%22%0A%20%20%20%20%22fmt%22%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A)%0A%0Afunc%20main()%20%7B%0A%20%20%20%20%2F%2F%20Create%20a%20node%20with%20just%20an%20Exec%20function%0A%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Println(%22Processing%20data...%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22Hello%2C%20Flyt!%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%0A%20%20%20%20%2F%2F%20Create%20shared%20store%20and%20context%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%0A%20%20%20%20%2F%2F%20Run%20the%20node%0A%20%20%20%20action%2C%20err%20%3A%3D%20flyt.Run(ctx%2C%20node%2C%20shared)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20panic(err)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fmt.Printf(%22Completed%20with%20action%3A%20%25s%5Cn%22%2C%20action)%0A%7D%0A%60%60%60%0A%0A%23%23%20Building%20a%20Flow%0A%0ANow%20let's%20create%20a%20simple%20workflow%20with%20multiple%20nodes%3A%0A%0A%60%60%60go%0Apackage%20main%0A%0Aimport%20(%0A%20%20%20%20%22context%22%0A%20%20%20%20%22fmt%22%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A)%0A%0Afunc%20main()%20%7B%0A%20%20%20%20%2F%2F%20Create%20nodes%0A%20%20%20%20fetchNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Println(%22Fetching%20data...%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dstring%7B%22data%22%3A%20%22important%20info%22%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22fetched_data%22%2C%20execResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%0A%20%20%20%20processNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20data%2C%20_%20%3A%3D%20shared.Get(%22fetched_data%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(map%5Bstring%5Dstring)%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Printf(%22Processing%3A%20%25v%5Cn%22%2C%20data%5B%22data%22%5D)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22processed%3A%20%22%20%2B%20data%5B%22data%22%5D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%0A%20%20%20%20%2F%2F%20Build%20the%20flow%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(fetchNode)%0A%20%20%20%20flow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20processNode)%0A%0A%20%20%20%20%2F%2F%20Run%20the%20flow%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%20%20%20%20%0A%20%20%20%20err%20%3A%3D%20flow.Run(ctx%2C%20shared)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20panic(err)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fmt.Println(%22Flow%20completed%20successfully!%22)%0A%7D%0A%60%60%60%0A%0A%23%23%20Adding%20Error%20Handling%0A%0ALet's%20add%20retry%20logic%20and%20error%20handling%3A%0A%0A%60%60%60go%0Afunc%20createRobustNode()%20flyt.Node%20%7B%0A%20%20%20%20attempts%20%3A%3D%200%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20attempts%2B%2B%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Printf(%22Attempt%20%25d...%5Cn%22%2C%20attempts)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Simulate%20flaky%20operation%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20attempts%20%3C%202%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22temporary%20failure%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22Success!%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithMaxRetries(3)%2C%0A%20%20%20%20%20%20%20%20flyt.WithWait(time.Second)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Using%20Shared%20Store%0A%0AThe%20SharedStore%20allows%20nodes%20to%20communicate%3A%0A%0A%60%60%60go%0Afunc%20main()%20%7B%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Set%20initial%20data%0A%20%20%20%20shared.Set(%22config%22%2C%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22timeout%22%3A%2030%2C%0A%20%20%20%20%20%20%20%20%22retries%22%3A%203%2C%0A%20%20%20%20%7D)%0A%20%20%20%20%0A%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20config%2C%20_%20%3A%3D%20shared.Get(%22config%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20config%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20config%20%3A%3D%20prepResult.(map%5Bstring%5Dany)%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Printf(%22Using%20config%3A%20%25v%5Cn%22%2C%20config)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22configured%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%20%20%20%20flyt.Run(ctx%2C%20node%2C%20shared)%0A%7D%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0ANow%20that%20you've%20built%20your%20first%20workflow%2C%20explore%3A%0A%0A-%20%5BNodes%5D(%2Fconcepts%2Fnodes)%20-%20Deep%20dive%20into%20node%20lifecycle%0A-%20%5BActions%5D(%2Fconcepts%2Factions)%20-%20Control%20flow%20with%20actions%0A-%20%5BError%20Handling%5D(%2Fpatterns%2Ferror-handling)%20-%20Build%20resilient%20workflows%0A-%20%5BExamples%5D(https%3A%2F%2Fgithub.com%2Fmark3labs%2Fflyt%2Ftree%2Fmain%2Fcookbook)%20-%20Real-world%20use%20cases", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/quick-start-CLt5Mrku.js"), path: "/getting-started/quick-start.html", type: "mdx", filePath: "getting-started/quick-start.mdx", content: "%23%20Quick%20Start%0A%0AThis%20guide%20will%20help%20you%20build%20your%20first%20Flyt%20workflow%20in%205%20minutes.%0A%0A%23%23%20Your%20First%20Node%0A%0ALet's%20start%20with%20a%20simple%20node%20that%20processes%20data%3A%0A%0A%60%60%60go%0Apackage%20main%0A%0Aimport%20(%0A%20%20%20%20%22context%22%0A%20%20%20%20%22fmt%22%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A)%0A%0Afunc%20main()%20%7B%0A%20%20%20%20%2F%2F%20Create%20a%20node%20with%20just%20an%20Exec%20function%0A%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Println(%22Processing%20data...%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22Hello%2C%20Flyt!%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%0A%20%20%20%20%2F%2F%20Create%20shared%20store%20and%20context%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%0A%20%20%20%20%2F%2F%20Run%20the%20node%0A%20%20%20%20action%2C%20err%20%3A%3D%20flyt.Run(ctx%2C%20node%2C%20shared)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20panic(err)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fmt.Printf(%22Completed%20with%20action%3A%20%25s%5Cn%22%2C%20action)%0A%7D%0A%60%60%60%0A%0A%23%23%20Building%20a%20Flow%0A%0ANow%20let's%20create%20a%20simple%20workflow%20with%20multiple%20nodes%3A%0A%0A%60%60%60go%0Apackage%20main%0A%0Aimport%20(%0A%20%20%20%20%22context%22%0A%20%20%20%20%22fmt%22%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A)%0A%0Afunc%20main()%20%7B%0A%20%20%20%20%2F%2F%20Create%20nodes%0A%20%20%20%20fetchNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Println(%22Fetching%20data...%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dstring%7B%22data%22%3A%20%22important%20info%22%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22fetched_data%22%2C%20execResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%0A%20%20%20%20processNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20data%2C%20_%20%3A%3D%20shared.Get(%22fetched_data%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(map%5Bstring%5Dstring)%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Printf(%22Processing%3A%20%25v%5Cn%22%2C%20data%5B%22data%22%5D)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22processed%3A%20%22%20%2B%20data%5B%22data%22%5D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%0A%20%20%20%20%2F%2F%20Build%20the%20flow%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(fetchNode)%0A%20%20%20%20flow.Connect(fetchNode%2C%20flyt.DefaultAction%2C%20processNode)%0A%0A%20%20%20%20%2F%2F%20Run%20the%20flow%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%20%20%20%20%0A%20%20%20%20err%20%3A%3D%20flow.Run(ctx%2C%20shared)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20panic(err)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20fmt.Println(%22Flow%20completed%20successfully!%22)%0A%7D%0A%60%60%60%0A%0A%23%23%20Adding%20Error%20Handling%0A%0ALet's%20add%20retry%20logic%20and%20error%20handling%3A%0A%0A%60%60%60go%0Afunc%20createRobustNode()%20flyt.Node%20%7B%0A%20%20%20%20attempts%20%3A%3D%200%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20attempts%2B%2B%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Printf(%22Attempt%20%25d...%5Cn%22%2C%20attempts)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Simulate%20flaky%20operation%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20attempts%20%3C%202%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22temporary%20failure%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22Success!%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithMaxRetries(3)%2C%0A%20%20%20%20%20%20%20%20flyt.WithWait(time.Second)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Using%20Shared%20Store%0A%0AThe%20SharedStore%20allows%20nodes%20to%20communicate%3A%0A%0A%60%60%60go%0Afunc%20main()%20%7B%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Set%20initial%20data%0A%20%20%20%20shared.Set(%22config%22%2C%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22timeout%22%3A%2030%2C%0A%20%20%20%20%20%20%20%20%22retries%22%3A%203%2C%0A%20%20%20%20%7D)%0A%20%20%20%20%0A%20%20%20%20node%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20config%2C%20_%20%3A%3D%20shared.Get(%22config%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20config%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20config%20%3A%3D%20prepResult.(map%5Bstring%5Dany)%0A%20%20%20%20%20%20%20%20%20%20%20%20fmt.Printf(%22Using%20config%3A%20%25v%5Cn%22%2C%20config)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22configured%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%20%20%20%20%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%20%20%20%20flyt.Run(ctx%2C%20node%2C%20shared)%0A%7D%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0ANow%20that%20you've%20built%20your%20first%20workflow%2C%20explore%3A%0A%0A-%20%5BNodes%5D(%2Fconcepts%2Fnodes)%20-%20Deep%20dive%20into%20node%20lifecycle%0A-%20%5BActions%5D(%2Fconcepts%2Factions)%20-%20Control%20flow%20with%20actions%0A-%20%5BError%20Handling%5D(%2Fpatterns%2Ferror-handling)%20-%20Build%20resilient%20workflows%0A-%20%5BExamples%5D(https%3A%2F%2Fgithub.com%2Fmark3labs%2Fflyt%2Ftree%2Fmain%2Fcookbook)%20-%20Real-world%20use%20cases", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/template-DHpfj1mL.js"), path: "/getting-started/template", type: "mdx", filePath: "getting-started/template.mdx", content: "%23%20Project%20Template%0A%0AThe%20fastest%20way%20to%20start%20a%20new%20Flyt%20project%20is%20using%20the%20official%20template.%0A%0A%23%23%20Quick%20Setup%0A%0A%60%60%60bash%0A%23%20Clone%20the%20template%0Agit%20clone%20https%3A%2F%2Fgithub.com%2Fmark3labs%2Fflyt-project-template%20my-flyt-project%0Acd%20my-flyt-project%0A%0A%23%20Remove%20template%20git%20history%0Arm%20-rf%20.git%0Agit%20init%0A%0A%23%20Install%20dependencies%0Ago%20mod%20tidy%0A%0A%23%20Run%20the%20example%0Ago%20run%20main.go%0A%60%60%60%0A%0A%23%23%20What's%20Included%0A%0AThe%20template%20provides%3A%0A%0A%23%23%23%20Project%20Structure%0A%0A%60%60%60%0Amy-flyt-project%2F%0A%E2%94%9C%E2%94%80%E2%94%80%20main.go%20%20%20%20%20%20%20%20%20%20%20%23%20Entry%20point%20with%20example%20workflow%0A%E2%94%9C%E2%94%80%E2%94%80%20nodes%2F%20%20%20%20%20%20%20%20%20%20%20%20%23%20Custom%20node%20implementations%0A%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20fetch.go%20%20%20%20%20%20%23%20Example%20fetch%20node%0A%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20process.go%20%20%20%20%23%20Example%20processing%20node%0A%E2%94%82%20%20%20%E2%94%94%E2%94%80%E2%94%80%20validate.go%20%20%20%23%20Example%20validation%20node%0A%E2%94%9C%E2%94%80%E2%94%80%20flows%2F%20%20%20%20%20%20%20%20%20%20%20%20%23%20Reusable%20flow%20definitions%0A%E2%94%82%20%20%20%E2%94%94%E2%94%80%E2%94%80%20example.go%20%20%20%20%23%20Example%20flow%20composition%0A%E2%94%9C%E2%94%80%E2%94%80%20go.mod%20%20%20%20%20%20%20%20%20%20%20%20%23%20Go%20module%20file%0A%E2%94%94%E2%94%80%E2%94%80%20README.md%20%20%20%20%20%20%20%20%20%23%20Project%20documentation%0A%60%60%60%0A%0A%23%23%23%20Example%20Code%0A%0AThe%20template%20includes%20a%20working%20example%20that%20demonstrates%3A%0A%0A-%20Creating%20custom%20nodes%0A-%20Building%20flows%0A-%20Using%20the%20SharedStore%0A-%20Error%20handling%20with%20retries%0A-%20Action-based%20routing%0A%0A%23%23%23%20main.go%0A%0A%60%60%60go%0Apackage%20main%0A%0Aimport%20(%0A%20%20%20%20%22context%22%0A%20%20%20%20%22log%22%0A%20%20%20%20%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A%20%20%20%20%22myproject%2Fflows%22%0A)%0A%0Afunc%20main()%20%7B%0A%20%20%20%20%2F%2F%20Create%20shared%20store%20with%20initial%20data%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20shared.Set(%22api_key%22%2C%20%22your-api-key%22)%0A%20%20%20%20shared.Set(%22base_url%22%2C%20%22https%3A%2F%2Fapi.example.com%22)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Create%20and%20run%20the%20example%20flow%0A%20%20%20%20flow%20%3A%3D%20flows.CreateExampleFlow()%0A%20%20%20%20%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%20%20%20%20if%20err%20%3A%3D%20flow.Run(ctx%2C%20shared)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20log.Fatal(err)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Get%20results%0A%20%20%20%20if%20result%2C%20ok%20%3A%3D%20shared.Get(%22final_result%22)%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22Success!%20Result%3A%20%25v%5Cn%22%2C%20result)%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Customizing%20the%20Template%0A%0A%23%23%23%20Adding%20New%20Nodes%0A%0ACreate%20a%20new%20file%20in%20the%20%60nodes%2F%60%20directory%3A%0A%0A%60%60%60go%0A%2F%2F%20nodes%2Fcustom.go%0Apackage%20nodes%0A%0Aimport%20(%0A%20%20%20%20%22context%22%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A)%0A%0Afunc%20CreateCustomNode()%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Your%20custom%20logic%20here%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22custom%20result%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Creating%20New%20Flows%0A%0AAdd%20flows%20to%20the%20%60flows%2F%60%20directory%3A%0A%0A%60%60%60go%0A%2F%2F%20flows%2Fcustom.go%0Apackage%20flows%0A%0Aimport%20(%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A%20%20%20%20%22myproject%2Fnodes%22%0A)%0A%0Afunc%20CreateCustomFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20%2F%2F%20Create%20nodes%0A%20%20%20%20startNode%20%3A%3D%20nodes.CreateCustomNode()%0A%20%20%20%20processNode%20%3A%3D%20nodes.CreateProcessNode()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Build%20flow%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20flow.Connect(startNode%2C%20flyt.DefaultAction%2C%20processNode)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0AWhen%20using%20the%20template%3A%0A%0A1.%20**Organize%20by%20Feature**%3A%20Group%20related%20nodes%20and%20flows%20together%0A2.%20**Use%20Configuration**%3A%20Store%20config%20in%20SharedStore%20or%20environment%20variables%0A3.%20**Add%20Tests**%3A%20Create%20%60*_test.go%60%20files%20for%20your%20nodes%20and%20flows%0A4.%20**Document%20Your%20Nodes**%3A%20Add%20comments%20explaining%20what%20each%20node%20does%0A5.%20**Version%20Control**%3A%20Initialize%20git%20and%20commit%20regularly%0A%0A%23%23%20Deployment%0A%0AThe%20template%20is%20ready%20for%20deployment%3A%0A%0A%60%60%60bash%0A%23%20Build%20the%20binary%0Ago%20build%20-o%20myapp%0A%0A%23%20Run%20in%20production%0A.%2Fmyapp%0A%0A%23%20Or%20use%20Docker%0Adocker%20build%20-t%20myapp%20.%0Adocker%20run%20myapp%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BCore%20Concepts%5D(%2Fconcepts%2Fnodes)%20-%20Understand%20Flyt%20fundamentals%0A-%20%5BPatterns%5D(%2Fpatterns%2Fclosures)%20-%20Learn%20common%20patterns%0A-%20%5BExamples%5D(https%3A%2F%2Fgithub.com%2Fmark3labs%2Fflyt%2Ftree%2Fmain%2Fcookbook)%20-%20See%20real-world%20implementations", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/template-DHpfj1mL.js"), path: "/getting-started/template.html", type: "mdx", filePath: "getting-started/template.mdx", content: "%23%20Project%20Template%0A%0AThe%20fastest%20way%20to%20start%20a%20new%20Flyt%20project%20is%20using%20the%20official%20template.%0A%0A%23%23%20Quick%20Setup%0A%0A%60%60%60bash%0A%23%20Clone%20the%20template%0Agit%20clone%20https%3A%2F%2Fgithub.com%2Fmark3labs%2Fflyt-project-template%20my-flyt-project%0Acd%20my-flyt-project%0A%0A%23%20Remove%20template%20git%20history%0Arm%20-rf%20.git%0Agit%20init%0A%0A%23%20Install%20dependencies%0Ago%20mod%20tidy%0A%0A%23%20Run%20the%20example%0Ago%20run%20main.go%0A%60%60%60%0A%0A%23%23%20What's%20Included%0A%0AThe%20template%20provides%3A%0A%0A%23%23%23%20Project%20Structure%0A%0A%60%60%60%0Amy-flyt-project%2F%0A%E2%94%9C%E2%94%80%E2%94%80%20main.go%20%20%20%20%20%20%20%20%20%20%20%23%20Entry%20point%20with%20example%20workflow%0A%E2%94%9C%E2%94%80%E2%94%80%20nodes%2F%20%20%20%20%20%20%20%20%20%20%20%20%23%20Custom%20node%20implementations%0A%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20fetch.go%20%20%20%20%20%20%23%20Example%20fetch%20node%0A%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20process.go%20%20%20%20%23%20Example%20processing%20node%0A%E2%94%82%20%20%20%E2%94%94%E2%94%80%E2%94%80%20validate.go%20%20%20%23%20Example%20validation%20node%0A%E2%94%9C%E2%94%80%E2%94%80%20flows%2F%20%20%20%20%20%20%20%20%20%20%20%20%23%20Reusable%20flow%20definitions%0A%E2%94%82%20%20%20%E2%94%94%E2%94%80%E2%94%80%20example.go%20%20%20%20%23%20Example%20flow%20composition%0A%E2%94%9C%E2%94%80%E2%94%80%20go.mod%20%20%20%20%20%20%20%20%20%20%20%20%23%20Go%20module%20file%0A%E2%94%94%E2%94%80%E2%94%80%20README.md%20%20%20%20%20%20%20%20%20%23%20Project%20documentation%0A%60%60%60%0A%0A%23%23%23%20Example%20Code%0A%0AThe%20template%20includes%20a%20working%20example%20that%20demonstrates%3A%0A%0A-%20Creating%20custom%20nodes%0A-%20Building%20flows%0A-%20Using%20the%20SharedStore%0A-%20Error%20handling%20with%20retries%0A-%20Action-based%20routing%0A%0A%23%23%23%20main.go%0A%0A%60%60%60go%0Apackage%20main%0A%0Aimport%20(%0A%20%20%20%20%22context%22%0A%20%20%20%20%22log%22%0A%20%20%20%20%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A%20%20%20%20%22myproject%2Fflows%22%0A)%0A%0Afunc%20main()%20%7B%0A%20%20%20%20%2F%2F%20Create%20shared%20store%20with%20initial%20data%0A%20%20%20%20shared%20%3A%3D%20flyt.NewSharedStore()%0A%20%20%20%20shared.Set(%22api_key%22%2C%20%22your-api-key%22)%0A%20%20%20%20shared.Set(%22base_url%22%2C%20%22https%3A%2F%2Fapi.example.com%22)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Create%20and%20run%20the%20example%20flow%0A%20%20%20%20flow%20%3A%3D%20flows.CreateExampleFlow()%0A%20%20%20%20%0A%20%20%20%20ctx%20%3A%3D%20context.Background()%0A%20%20%20%20if%20err%20%3A%3D%20flow.Run(ctx%2C%20shared)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20log.Fatal(err)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Get%20results%0A%20%20%20%20if%20result%2C%20ok%20%3A%3D%20shared.Get(%22final_result%22)%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22Success!%20Result%3A%20%25v%5Cn%22%2C%20result)%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Customizing%20the%20Template%0A%0A%23%23%23%20Adding%20New%20Nodes%0A%0ACreate%20a%20new%20file%20in%20the%20%60nodes%2F%60%20directory%3A%0A%0A%60%60%60go%0A%2F%2F%20nodes%2Fcustom.go%0Apackage%20nodes%0A%0Aimport%20(%0A%20%20%20%20%22context%22%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A)%0A%0Afunc%20CreateCustomNode()%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Your%20custom%20logic%20here%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22custom%20result%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%23%20Creating%20New%20Flows%0A%0AAdd%20flows%20to%20the%20%60flows%2F%60%20directory%3A%0A%0A%60%60%60go%0A%2F%2F%20flows%2Fcustom.go%0Apackage%20flows%0A%0Aimport%20(%0A%20%20%20%20%22github.com%2Fmark3labs%2Fflyt%22%0A%20%20%20%20%22myproject%2Fnodes%22%0A)%0A%0Afunc%20CreateCustomFlow()%20*flyt.Flow%20%7B%0A%20%20%20%20%2F%2F%20Create%20nodes%0A%20%20%20%20startNode%20%3A%3D%20nodes.CreateCustomNode()%0A%20%20%20%20processNode%20%3A%3D%20nodes.CreateProcessNode()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Build%20flow%0A%20%20%20%20flow%20%3A%3D%20flyt.NewFlow(startNode)%0A%20%20%20%20flow.Connect(startNode%2C%20flyt.DefaultAction%2C%20processNode)%0A%20%20%20%20%0A%20%20%20%20return%20flow%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0AWhen%20using%20the%20template%3A%0A%0A1.%20**Organize%20by%20Feature**%3A%20Group%20related%20nodes%20and%20flows%20together%0A2.%20**Use%20Configuration**%3A%20Store%20config%20in%20SharedStore%20or%20environment%20variables%0A3.%20**Add%20Tests**%3A%20Create%20%60*_test.go%60%20files%20for%20your%20nodes%20and%20flows%0A4.%20**Document%20Your%20Nodes**%3A%20Add%20comments%20explaining%20what%20each%20node%20does%0A5.%20**Version%20Control**%3A%20Initialize%20git%20and%20commit%20regularly%0A%0A%23%23%20Deployment%0A%0AThe%20template%20is%20ready%20for%20deployment%3A%0A%0A%60%60%60bash%0A%23%20Build%20the%20binary%0Ago%20build%20-o%20myapp%0A%0A%23%20Run%20in%20production%0A.%2Fmyapp%0A%0A%23%20Or%20use%20Docker%0Adocker%20build%20-t%20myapp%20.%0Adocker%20run%20myapp%0A%60%60%60%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BCore%20Concepts%5D(%2Fconcepts%2Fnodes)%20-%20Understand%20Flyt%20fundamentals%0A-%20%5BPatterns%5D(%2Fpatterns%2Fclosures)%20-%20Learn%20common%20patterns%0A-%20%5BExamples%5D(https%3A%2F%2Fgithub.com%2Fmark3labs%2Fflyt%2Ftree%2Fmain%2Fcookbook)%20-%20See%20real-world%20implementations", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/branching-Dxoclpmz.js"), path: "/patterns/branching", type: "mdx", filePath: "patterns/branching.mdx", content: "%23%20Conditional%20Branching%0A%0AControl%20flow%20execution%20dynamically%20based%20on%20runtime%20conditions%20using%20action-based%20routing.%0A%0A%23%23%20Simple%20Binary%20Branching%0A%0AMake%20yes%2Fno%20decisions%3A%0A%0A%60%60%60go%0AvalidationNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20isValid%20%3A%3D%20len(data)%20%3E%200%20%26%26%20len(data)%20%3C%20100%0A%20%20%20%20%20%20%20%20return%20isValid%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20if%20execResult.(bool)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22valid%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%22invalid%22%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0Aflow%20%3A%3D%20flyt.NewFlow(validationNode)%0Aflow.Connect(validationNode%2C%20%22valid%22%2C%20processNode)%0Aflow.Connect(validationNode%2C%20%22invalid%22%2C%20errorNode)%0A%60%60%60%0A%0A%23%23%20Multi-Way%20Branching%0A%0ARoute%20to%20multiple%20paths%3A%0A%0A%60%60%60go%0AcategoryNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20value%20%3A%3D%20prepResult.(float64)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20switch%20%7B%0A%20%20%20%20%20%20%20%20case%20value%20%3C%2010%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22small%22%2C%20nil%0A%20%20%20%20%20%20%20%20case%20value%20%3C%20100%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22medium%22%2C%20nil%0A%20%20%20%20%20%20%20%20case%20value%20%3C%201000%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22large%22%2C%20nil%0A%20%20%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22xlarge%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0Aflow%20%3A%3D%20flyt.NewFlow(categoryNode)%0Aflow.Connect(categoryNode%2C%20%22small%22%2C%20smallHandler)%0Aflow.Connect(categoryNode%2C%20%22medium%22%2C%20mediumHandler)%0Aflow.Connect(categoryNode%2C%20%22large%22%2C%20largeHandler)%0Aflow.Connect(categoryNode%2C%20%22xlarge%22%2C%20xlargeHandler)%0A%60%60%60%0A%0A%23%23%20State%20Machine%20Pattern%0A%0AImplement%20state%20transitions%3A%0A%0A%60%60%60go%0Atype%20StateMachine%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%7D%0A%0Afunc%20(n%20*StateMachine)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20currentState%2C%20_%20%3A%3D%20shared.Get(%22state%22)%0A%20%20%20%20if%20currentState%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20currentState%20%3D%20%22init%22%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20state%20%3A%3D%20currentState.(string)%0A%20%20%20%20event%20%3A%3D%20execResult.(string)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20State%20transition%20logic%0A%20%20%20%20nextState%20%3A%3D%20n.transition(state%2C%20event)%0A%20%20%20%20shared.Set(%22state%22%2C%20nextState)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Return%20action%20based%20on%20new%20state%0A%20%20%20%20return%20flyt.Action(nextState)%2C%20nil%0A%7D%0A%0Afunc%20(n%20*StateMachine)%20transition(state%2C%20event%20string)%20string%20%7B%0A%20%20%20%20transitions%20%3A%3D%20map%5Bstring%5Dmap%5Bstring%5Dstring%7B%0A%20%20%20%20%20%20%20%20%22init%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22start%22%3A%20%22processing%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22cancel%22%3A%20%22cancelled%22%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%22processing%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22complete%22%3A%20%22done%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20%22failed%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22pause%22%3A%20%22paused%22%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%22paused%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22resume%22%3A%20%22processing%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22cancel%22%3A%20%22cancelled%22%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20if%20stateTransitions%2C%20ok%20%3A%3D%20transitions%5Bstate%5D%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20if%20nextState%2C%20ok%20%3A%3D%20stateTransitions%5Bevent%5D%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nextState%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20state%20%2F%2F%20No%20transition%0A%7D%0A%60%60%60%0A%0A%23%23%20Dynamic%20Routing%0A%0ARoute%20based%20on%20external%20configuration%3A%0A%0A%60%60%60go%0Atype%20DynamicRouter%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20routes%20map%5Bstring%5Dstring%0A%7D%0A%0Afunc%20NewDynamicRouter(configPath%20string)%20*DynamicRouter%20%7B%0A%20%20%20%20%2F%2F%20Load%20routing%20configuration%0A%20%20%20%20data%2C%20_%20%3A%3D%20os.ReadFile(configPath)%0A%20%20%20%20var%20routes%20map%5Bstring%5Dstring%0A%20%20%20%20json.Unmarshal(data%2C%20%26routes)%0A%20%20%20%20%0A%20%20%20%20return%20%26DynamicRouter%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20routes%3A%20%20%20routes%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*DynamicRouter)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20result%20%3A%3D%20execResult.(string)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Look%20up%20route%20in%20configuration%0A%20%20%20%20if%20action%2C%20ok%20%3A%3D%20n.routes%5Bresult%5D%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20return%20flyt.Action(action)%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Default%20route%0A%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Weighted%20Routing%0A%0ADistribute%20load%20across%20paths%3A%0A%0A%60%60%60go%0Atype%20LoadBalancer%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20weights%20%20map%5Bstring%5Dint%0A%20%20%20%20counter%20%20int%0A%20%20%20%20mu%20%20%20%20%20%20%20sync.Mutex%0A%7D%0A%0Afunc%20NewLoadBalancer(weights%20map%5Bstring%5Dint)%20*LoadBalancer%20%7B%0A%20%20%20%20return%20%26LoadBalancer%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20weights%3A%20%20weights%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*LoadBalancer)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20n.mu.Lock()%0A%20%20%20%20defer%20n.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20n.counter%2B%2B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Calculate%20total%20weight%0A%20%20%20%20totalWeight%20%3A%3D%200%0A%20%20%20%20for%20_%2C%20weight%20%3A%3D%20range%20n.weights%20%7B%0A%20%20%20%20%20%20%20%20totalWeight%20%2B%3D%20weight%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Determine%20which%20path%20based%20on%20counter%0A%20%20%20%20position%20%3A%3D%20n.counter%20%25%20totalWeight%0A%20%20%20%20currentWeight%20%3A%3D%200%0A%20%20%20%20%0A%20%20%20%20for%20action%2C%20weight%20%3A%3D%20range%20n.weights%20%7B%0A%20%20%20%20%20%20%20%20currentWeight%20%2B%3D%20weight%0A%20%20%20%20%20%20%20%20if%20position%20%3C%20currentWeight%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.Action(action)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%7D%0A%0A%2F%2F%20Usage%0Abalancer%20%3A%3D%20NewLoadBalancer(map%5Bstring%5Dint%7B%0A%20%20%20%20%22server1%22%3A%203%2C%20%20%2F%2F%2030%25%20of%20traffic%0A%20%20%20%20%22server2%22%3A%205%2C%20%20%2F%2F%2050%25%20of%20traffic%0A%20%20%20%20%22server3%22%3A%202%2C%20%20%2F%2F%2020%25%20of%20traffic%0A%7D)%0A%60%60%60%0A%0A%23%23%20Conditional%20Loops%0A%0ACreate%20loops%20with%20exit%20conditions%3A%0A%0A%60%60%60go%0AretryNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20attempts%2C%20_%20%3A%3D%20shared.Get(%22attempts%22)%0A%20%20%20%20%20%20%20%20if%20attempts%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20attempts%20%3D%200%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20attempts.(int)%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20attempts%20%3A%3D%20prepResult.(int)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%2F%2F%20Try%20operation%0A%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20performOperation()%0A%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22success%22%3A%20false%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22attempts%22%3A%20attempts%20%2B%201%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20err.Error()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22success%22%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22result%22%3A%20result%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20result%20%3A%3D%20execResult.(map%5Bstring%5Dany)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20result%5B%22success%22%5D.(bool)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22success%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20attempts%20%3A%3D%20result%5B%22attempts%22%5D.(int)%0A%20%20%20%20%20%20%20%20shared.Set(%22attempts%22%2C%20attempts)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20attempts%20%3C%203%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22retry%22%2C%20nil%20%20%2F%2F%20Loop%20back%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20return%20%22failed%22%2C%20nil%20%20%2F%2F%20Exit%20loop%0A%20%20%20%20%7D)%2C%0A)%0A%0Aflow%20%3A%3D%20flyt.NewFlow(retryNode)%0Aflow.Connect(retryNode%2C%20%22retry%22%2C%20retryNode)%20%20%2F%2F%20Loop%20back%20to%20self%0Aflow.Connect(retryNode%2C%20%22success%22%2C%20successNode)%0Aflow.Connect(retryNode%2C%20%22failed%22%2C%20failureNode)%0A%60%60%60%0A%0A%23%23%20Pipeline%20Branching%0A%0ABranch%20and%20merge%20pipelines%3A%0A%0A%60%60%60go%0A%2F%2F%20Split%20node%20decides%20which%20pipeline(s)%20to%20execute%0AsplitNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(map%5Bstring%5Dany)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20needsValidation%20%3A%3D%20data%5B%22validate%22%5D.(bool)%0A%20%20%20%20%20%20%20%20needsEnrichment%20%3A%3D%20data%5B%22enrich%22%5D.(bool)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20needsValidation%20%26%26%20needsEnrichment%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22both%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%20else%20if%20needsValidation%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22validate_only%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%20else%20if%20needsEnrichment%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22enrich_only%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%22skip%22%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0A%2F%2F%20Build%20flow%20with%20different%20pipelines%0Aflow%20%3A%3D%20flyt.NewFlow(splitNode)%0A%0A%2F%2F%20Both%20pipelines%0Aflow.Connect(splitNode%2C%20%22both%22%2C%20validateNode)%0Aflow.Connect(validateNode%2C%20flyt.DefaultAction%2C%20enrichNode)%0Aflow.Connect(enrichNode%2C%20flyt.DefaultAction%2C%20mergeNode)%0A%0A%2F%2F%20Validation%20only%0Aflow.Connect(splitNode%2C%20%22validate_only%22%2C%20validateNode)%0Aflow.Connect(validateNode%2C%20%22skip_enrich%22%2C%20mergeNode)%0A%0A%2F%2F%20Enrichment%20only%0Aflow.Connect(splitNode%2C%20%22enrich_only%22%2C%20enrichNode)%0Aflow.Connect(enrichNode%2C%20%22skip_validate%22%2C%20mergeNode)%0A%0A%2F%2F%20Skip%20both%0Aflow.Connect(splitNode%2C%20%22skip%22%2C%20mergeNode)%0A%60%60%60%0A%0A%23%23%20Feature%20Flags%0A%0AControl%20flow%20with%20feature%20toggles%3A%0A%0A%60%60%60go%0Atype%20FeatureFlagNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20flags%20map%5Bstring%5Dbool%0A%7D%0A%0Afunc%20(n%20*FeatureFlagNode)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20feature%20%3A%3D%20execResult.(string)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Check%20if%20feature%20is%20enabled%0A%20%20%20%20if%20enabled%2C%20ok%20%3A%3D%20n.flags%5Bfeature%5D%3B%20ok%20%26%26%20enabled%20%7B%0A%20%20%20%20%20%20%20%20return%20flyt.Action(feature%20%2B%20%22_enabled%22)%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.Action(feature%20%2B%20%22_disabled%22)%2C%20nil%0A%7D%0A%0A%2F%2F%20Usage%0AflagNode%20%3A%3D%20%26FeatureFlagNode%7B%0A%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20flags%3A%20map%5Bstring%5Dbool%7B%0A%20%20%20%20%20%20%20%20%22new_algorithm%22%3A%20true%2C%0A%20%20%20%20%20%20%20%20%22beta_feature%22%3A%20false%2C%0A%20%20%20%20%20%20%20%20%22experimental%22%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%7D%0A%0Aflow%20%3A%3D%20flyt.NewFlow(flagNode)%0Aflow.Connect(flagNode%2C%20%22new_algorithm_enabled%22%2C%20newAlgorithmNode)%0Aflow.Connect(flagNode%2C%20%22new_algorithm_disabled%22%2C%20oldAlgorithmNode)%0A%60%60%60%0A%0A%23%23%20A%2FB%20Testing%0A%0ARoute%20based%20on%20experiment%20groups%3A%0A%0A%60%60%60go%0Afunc%20createABTestNode(testName%20string%2C%20distribution%20map%5Bstring%5Dint)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20userID%2C%20_%20%3A%3D%20shared.Get(%22user_id%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20userID%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20userID%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Hash%20user%20ID%20for%20consistent%20assignment%0A%20%20%20%20%20%20%20%20%20%20%20%20h%20%3A%3D%20fnv.New32a()%0A%20%20%20%20%20%20%20%20%20%20%20%20h.Write(%5B%5Dbyte(userID%20%2B%20testName))%0A%20%20%20%20%20%20%20%20%20%20%20%20hash%20%3A%3D%20h.Sum32()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Determine%20variant%20based%20on%20distribution%0A%20%20%20%20%20%20%20%20%20%20%20%20bucket%20%3A%3D%20int(hash%20%25%20100)%0A%20%20%20%20%20%20%20%20%20%20%20%20cumulative%20%3A%3D%200%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20variant%2C%20percentage%20%3A%3D%20range%20distribution%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cumulative%20%2B%3D%20percentage%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20bucket%20%3C%20cumulative%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20variant%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22control%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20variant%20%3A%3D%20execResult.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22ab_variant%22%2C%20variant)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.Action(variant)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Usage%0AabNode%20%3A%3D%20createABTestNode(%22checkout_flow%22%2C%20map%5Bstring%5Dint%7B%0A%20%20%20%20%22variant_a%22%3A%2033%2C%20%20%2F%2F%2033%25%20of%20users%0A%20%20%20%20%22variant_b%22%3A%2033%2C%20%20%2F%2F%2033%25%20of%20users%0A%20%20%20%20%22control%22%3A%20%20%2034%2C%20%20%2F%2F%2034%25%20of%20users%0A%7D)%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Clear%20Action%20Names**%3A%20Use%20descriptive%20action%20names%20that%20indicate%20the%20path%0A2.%20**Document%20Branches**%3A%20Comment%20all%20possible%20branches%20and%20their%20conditions%0A3.%20**Handle%20All%20Cases**%3A%20Ensure%20all%20possible%20actions%20have%20connections%0A4.%20**Avoid%20Deep%20Nesting**%3A%20Keep%20branching%20logic%20simple%20and%20readable%0A5.%20**Test%20All%20Paths**%3A%20Write%20tests%20for%20each%20branch%20condition%0A6.%20**Monitor%20Branch%20Usage**%3A%20Track%20which%20paths%20are%20taken%20most%20frequently%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BActions%5D(%2Fconcepts%2Factions)%20-%20Deep%20dive%20into%20action%20system%0A-%20%5BFlows%5D(%2Fconcepts%2Fflows)%20-%20Building%20complex%20workflows%0A-%20%5BState%20Machines%5D(%2Fpatterns%2Fbranching%23state-machine-pattern)%20-%20Advanced%20state%20management", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/branching-Dxoclpmz.js"), path: "/patterns/branching.html", type: "mdx", filePath: "patterns/branching.mdx", content: "%23%20Conditional%20Branching%0A%0AControl%20flow%20execution%20dynamically%20based%20on%20runtime%20conditions%20using%20action-based%20routing.%0A%0A%23%23%20Simple%20Binary%20Branching%0A%0AMake%20yes%2Fno%20decisions%3A%0A%0A%60%60%60go%0AvalidationNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20isValid%20%3A%3D%20len(data)%20%3E%200%20%26%26%20len(data)%20%3C%20100%0A%20%20%20%20%20%20%20%20return%20isValid%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20if%20execResult.(bool)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22valid%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%22invalid%22%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0Aflow%20%3A%3D%20flyt.NewFlow(validationNode)%0Aflow.Connect(validationNode%2C%20%22valid%22%2C%20processNode)%0Aflow.Connect(validationNode%2C%20%22invalid%22%2C%20errorNode)%0A%60%60%60%0A%0A%23%23%20Multi-Way%20Branching%0A%0ARoute%20to%20multiple%20paths%3A%0A%0A%60%60%60go%0AcategoryNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20value%20%3A%3D%20prepResult.(float64)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20switch%20%7B%0A%20%20%20%20%20%20%20%20case%20value%20%3C%2010%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22small%22%2C%20nil%0A%20%20%20%20%20%20%20%20case%20value%20%3C%20100%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22medium%22%2C%20nil%0A%20%20%20%20%20%20%20%20case%20value%20%3C%201000%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22large%22%2C%20nil%0A%20%20%20%20%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22xlarge%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0Aflow%20%3A%3D%20flyt.NewFlow(categoryNode)%0Aflow.Connect(categoryNode%2C%20%22small%22%2C%20smallHandler)%0Aflow.Connect(categoryNode%2C%20%22medium%22%2C%20mediumHandler)%0Aflow.Connect(categoryNode%2C%20%22large%22%2C%20largeHandler)%0Aflow.Connect(categoryNode%2C%20%22xlarge%22%2C%20xlargeHandler)%0A%60%60%60%0A%0A%23%23%20State%20Machine%20Pattern%0A%0AImplement%20state%20transitions%3A%0A%0A%60%60%60go%0Atype%20StateMachine%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%7D%0A%0Afunc%20(n%20*StateMachine)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20currentState%2C%20_%20%3A%3D%20shared.Get(%22state%22)%0A%20%20%20%20if%20currentState%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20currentState%20%3D%20%22init%22%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20state%20%3A%3D%20currentState.(string)%0A%20%20%20%20event%20%3A%3D%20execResult.(string)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20State%20transition%20logic%0A%20%20%20%20nextState%20%3A%3D%20n.transition(state%2C%20event)%0A%20%20%20%20shared.Set(%22state%22%2C%20nextState)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Return%20action%20based%20on%20new%20state%0A%20%20%20%20return%20flyt.Action(nextState)%2C%20nil%0A%7D%0A%0Afunc%20(n%20*StateMachine)%20transition(state%2C%20event%20string)%20string%20%7B%0A%20%20%20%20transitions%20%3A%3D%20map%5Bstring%5Dmap%5Bstring%5Dstring%7B%0A%20%20%20%20%20%20%20%20%22init%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22start%22%3A%20%22processing%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22cancel%22%3A%20%22cancelled%22%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%22processing%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22complete%22%3A%20%22done%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20%22failed%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22pause%22%3A%20%22paused%22%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%22paused%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22resume%22%3A%20%22processing%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22cancel%22%3A%20%22cancelled%22%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20if%20stateTransitions%2C%20ok%20%3A%3D%20transitions%5Bstate%5D%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20if%20nextState%2C%20ok%20%3A%3D%20stateTransitions%5Bevent%5D%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nextState%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20state%20%2F%2F%20No%20transition%0A%7D%0A%60%60%60%0A%0A%23%23%20Dynamic%20Routing%0A%0ARoute%20based%20on%20external%20configuration%3A%0A%0A%60%60%60go%0Atype%20DynamicRouter%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20routes%20map%5Bstring%5Dstring%0A%7D%0A%0Afunc%20NewDynamicRouter(configPath%20string)%20*DynamicRouter%20%7B%0A%20%20%20%20%2F%2F%20Load%20routing%20configuration%0A%20%20%20%20data%2C%20_%20%3A%3D%20os.ReadFile(configPath)%0A%20%20%20%20var%20routes%20map%5Bstring%5Dstring%0A%20%20%20%20json.Unmarshal(data%2C%20%26routes)%0A%20%20%20%20%0A%20%20%20%20return%20%26DynamicRouter%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20routes%3A%20%20%20routes%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*DynamicRouter)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20result%20%3A%3D%20execResult.(string)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Look%20up%20route%20in%20configuration%0A%20%20%20%20if%20action%2C%20ok%20%3A%3D%20n.routes%5Bresult%5D%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20return%20flyt.Action(action)%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Default%20route%0A%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Weighted%20Routing%0A%0ADistribute%20load%20across%20paths%3A%0A%0A%60%60%60go%0Atype%20LoadBalancer%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20weights%20%20map%5Bstring%5Dint%0A%20%20%20%20counter%20%20int%0A%20%20%20%20mu%20%20%20%20%20%20%20sync.Mutex%0A%7D%0A%0Afunc%20NewLoadBalancer(weights%20map%5Bstring%5Dint)%20*LoadBalancer%20%7B%0A%20%20%20%20return%20%26LoadBalancer%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20weights%3A%20%20weights%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*LoadBalancer)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20n.mu.Lock()%0A%20%20%20%20defer%20n.mu.Unlock()%0A%20%20%20%20%0A%20%20%20%20n.counter%2B%2B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Calculate%20total%20weight%0A%20%20%20%20totalWeight%20%3A%3D%200%0A%20%20%20%20for%20_%2C%20weight%20%3A%3D%20range%20n.weights%20%7B%0A%20%20%20%20%20%20%20%20totalWeight%20%2B%3D%20weight%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Determine%20which%20path%20based%20on%20counter%0A%20%20%20%20position%20%3A%3D%20n.counter%20%25%20totalWeight%0A%20%20%20%20currentWeight%20%3A%3D%200%0A%20%20%20%20%0A%20%20%20%20for%20action%2C%20weight%20%3A%3D%20range%20n.weights%20%7B%0A%20%20%20%20%20%20%20%20currentWeight%20%2B%3D%20weight%0A%20%20%20%20%20%20%20%20if%20position%20%3C%20currentWeight%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.Action(action)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%7D%0A%0A%2F%2F%20Usage%0Abalancer%20%3A%3D%20NewLoadBalancer(map%5Bstring%5Dint%7B%0A%20%20%20%20%22server1%22%3A%203%2C%20%20%2F%2F%2030%25%20of%20traffic%0A%20%20%20%20%22server2%22%3A%205%2C%20%20%2F%2F%2050%25%20of%20traffic%0A%20%20%20%20%22server3%22%3A%202%2C%20%20%2F%2F%2020%25%20of%20traffic%0A%7D)%0A%60%60%60%0A%0A%23%23%20Conditional%20Loops%0A%0ACreate%20loops%20with%20exit%20conditions%3A%0A%0A%60%60%60go%0AretryNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20attempts%2C%20_%20%3A%3D%20shared.Get(%22attempts%22)%0A%20%20%20%20%20%20%20%20if%20attempts%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20attempts%20%3D%200%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20attempts.(int)%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20attempts%20%3A%3D%20prepResult.(int)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%2F%2F%20Try%20operation%0A%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20performOperation()%0A%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22success%22%3A%20false%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22attempts%22%3A%20attempts%20%2B%201%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20err.Error()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22success%22%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22result%22%3A%20result%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20result%20%3A%3D%20execResult.(map%5Bstring%5Dany)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20result%5B%22success%22%5D.(bool)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22success%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20attempts%20%3A%3D%20result%5B%22attempts%22%5D.(int)%0A%20%20%20%20%20%20%20%20shared.Set(%22attempts%22%2C%20attempts)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20attempts%20%3C%203%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22retry%22%2C%20nil%20%20%2F%2F%20Loop%20back%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20return%20%22failed%22%2C%20nil%20%20%2F%2F%20Exit%20loop%0A%20%20%20%20%7D)%2C%0A)%0A%0Aflow%20%3A%3D%20flyt.NewFlow(retryNode)%0Aflow.Connect(retryNode%2C%20%22retry%22%2C%20retryNode)%20%20%2F%2F%20Loop%20back%20to%20self%0Aflow.Connect(retryNode%2C%20%22success%22%2C%20successNode)%0Aflow.Connect(retryNode%2C%20%22failed%22%2C%20failureNode)%0A%60%60%60%0A%0A%23%23%20Pipeline%20Branching%0A%0ABranch%20and%20merge%20pipelines%3A%0A%0A%60%60%60go%0A%2F%2F%20Split%20node%20decides%20which%20pipeline(s)%20to%20execute%0AsplitNode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(map%5Bstring%5Dany)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20needsValidation%20%3A%3D%20data%5B%22validate%22%5D.(bool)%0A%20%20%20%20%20%20%20%20needsEnrichment%20%3A%3D%20data%5B%22enrich%22%5D.(bool)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20needsValidation%20%26%26%20needsEnrichment%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22both%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%20else%20if%20needsValidation%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22validate_only%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%20else%20if%20needsEnrichment%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22enrich_only%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%22skip%22%2C%20nil%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20return%20flyt.Action(execResult.(string))%2C%20nil%0A%20%20%20%20%7D)%2C%0A)%0A%0A%2F%2F%20Build%20flow%20with%20different%20pipelines%0Aflow%20%3A%3D%20flyt.NewFlow(splitNode)%0A%0A%2F%2F%20Both%20pipelines%0Aflow.Connect(splitNode%2C%20%22both%22%2C%20validateNode)%0Aflow.Connect(validateNode%2C%20flyt.DefaultAction%2C%20enrichNode)%0Aflow.Connect(enrichNode%2C%20flyt.DefaultAction%2C%20mergeNode)%0A%0A%2F%2F%20Validation%20only%0Aflow.Connect(splitNode%2C%20%22validate_only%22%2C%20validateNode)%0Aflow.Connect(validateNode%2C%20%22skip_enrich%22%2C%20mergeNode)%0A%0A%2F%2F%20Enrichment%20only%0Aflow.Connect(splitNode%2C%20%22enrich_only%22%2C%20enrichNode)%0Aflow.Connect(enrichNode%2C%20%22skip_validate%22%2C%20mergeNode)%0A%0A%2F%2F%20Skip%20both%0Aflow.Connect(splitNode%2C%20%22skip%22%2C%20mergeNode)%0A%60%60%60%0A%0A%23%23%20Feature%20Flags%0A%0AControl%20flow%20with%20feature%20toggles%3A%0A%0A%60%60%60go%0Atype%20FeatureFlagNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20flags%20map%5Bstring%5Dbool%0A%7D%0A%0Afunc%20(n%20*FeatureFlagNode)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20feature%20%3A%3D%20execResult.(string)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Check%20if%20feature%20is%20enabled%0A%20%20%20%20if%20enabled%2C%20ok%20%3A%3D%20n.flags%5Bfeature%5D%3B%20ok%20%26%26%20enabled%20%7B%0A%20%20%20%20%20%20%20%20return%20flyt.Action(feature%20%2B%20%22_enabled%22)%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.Action(feature%20%2B%20%22_disabled%22)%2C%20nil%0A%7D%0A%0A%2F%2F%20Usage%0AflagNode%20%3A%3D%20%26FeatureFlagNode%7B%0A%20%20%20%20BaseNode%3A%20flyt.NewBaseNode()%2C%0A%20%20%20%20flags%3A%20map%5Bstring%5Dbool%7B%0A%20%20%20%20%20%20%20%20%22new_algorithm%22%3A%20true%2C%0A%20%20%20%20%20%20%20%20%22beta_feature%22%3A%20false%2C%0A%20%20%20%20%20%20%20%20%22experimental%22%3A%20true%2C%0A%20%20%20%20%7D%2C%0A%7D%0A%0Aflow%20%3A%3D%20flyt.NewFlow(flagNode)%0Aflow.Connect(flagNode%2C%20%22new_algorithm_enabled%22%2C%20newAlgorithmNode)%0Aflow.Connect(flagNode%2C%20%22new_algorithm_disabled%22%2C%20oldAlgorithmNode)%0A%60%60%60%0A%0A%23%23%20A%2FB%20Testing%0A%0ARoute%20based%20on%20experiment%20groups%3A%0A%0A%60%60%60go%0Afunc%20createABTestNode(testName%20string%2C%20distribution%20map%5Bstring%5Dint)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20userID%2C%20_%20%3A%3D%20shared.Get(%22user_id%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20userID%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20userID%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Hash%20user%20ID%20for%20consistent%20assignment%0A%20%20%20%20%20%20%20%20%20%20%20%20h%20%3A%3D%20fnv.New32a()%0A%20%20%20%20%20%20%20%20%20%20%20%20h.Write(%5B%5Dbyte(userID%20%2B%20testName))%0A%20%20%20%20%20%20%20%20%20%20%20%20hash%20%3A%3D%20h.Sum32()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Determine%20variant%20based%20on%20distribution%0A%20%20%20%20%20%20%20%20%20%20%20%20bucket%20%3A%3D%20int(hash%20%25%20100)%0A%20%20%20%20%20%20%20%20%20%20%20%20cumulative%20%3A%3D%200%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20variant%2C%20percentage%20%3A%3D%20range%20distribution%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cumulative%20%2B%3D%20percentage%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20bucket%20%3C%20cumulative%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20variant%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22control%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20variant%20%3A%3D%20execResult.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20shared.Set(%22ab_variant%22%2C%20variant)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20flyt.Action(variant)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Usage%0AabNode%20%3A%3D%20createABTestNode(%22checkout_flow%22%2C%20map%5Bstring%5Dint%7B%0A%20%20%20%20%22variant_a%22%3A%2033%2C%20%20%2F%2F%2033%25%20of%20users%0A%20%20%20%20%22variant_b%22%3A%2033%2C%20%20%2F%2F%2033%25%20of%20users%0A%20%20%20%20%22control%22%3A%20%20%2034%2C%20%20%2F%2F%2034%25%20of%20users%0A%7D)%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Clear%20Action%20Names**%3A%20Use%20descriptive%20action%20names%20that%20indicate%20the%20path%0A2.%20**Document%20Branches**%3A%20Comment%20all%20possible%20branches%20and%20their%20conditions%0A3.%20**Handle%20All%20Cases**%3A%20Ensure%20all%20possible%20actions%20have%20connections%0A4.%20**Avoid%20Deep%20Nesting**%3A%20Keep%20branching%20logic%20simple%20and%20readable%0A5.%20**Test%20All%20Paths**%3A%20Write%20tests%20for%20each%20branch%20condition%0A6.%20**Monitor%20Branch%20Usage**%3A%20Track%20which%20paths%20are%20taken%20most%20frequently%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BActions%5D(%2Fconcepts%2Factions)%20-%20Deep%20dive%20into%20action%20system%0A-%20%5BFlows%5D(%2Fconcepts%2Fflows)%20-%20Building%20complex%20workflows%0A-%20%5BState%20Machines%5D(%2Fpatterns%2Fbranching%23state-machine-pattern)%20-%20Advanced%20state%20management", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/closures-BrZk-jZH.js"), path: "/patterns/closures", type: "mdx", filePath: "patterns/closures.mdx", content: "%23%20Configuration%20via%20Closures%0A%0AUse%20closures%20to%20create%20configurable%2C%20reusable%20nodes%20with%20encapsulated%20state%20and%20configuration.%0A%0A%23%23%20Basic%20Closure%20Pattern%0A%0APass%20configuration%20to%20nodes%20using%20closures%3A%0A%0A%60%60%60go%0Afunc%20createAPINode(apiKey%20string%2C%20baseURL%20string)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20apiKey%20and%20baseURL%20are%20captured%20in%20the%20closure%0A%20%20%20%20%20%20%20%20%20%20%20%20url%20%3A%3D%20fmt.Sprintf(%22%25s%2Fdata%22%2C%20baseURL)%0A%20%20%20%20%20%20%20%20%20%20%20%20req%2C%20_%20%3A%3D%20http.NewRequest(%22GET%22%2C%20url%2C%20nil)%0A%20%20%20%20%20%20%20%20%20%20%20%20req.Header.Set(%22Authorization%22%2C%20fmt.Sprintf(%22Bearer%20%25s%22%2C%20apiKey))%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20client%20%3A%3D%20%26http.Client%7BTimeout%3A%2030%20*%20time.Second%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20resp%2C%20err%20%3A%3D%20client.Do(req)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20resp.Body.Close()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20data%20map%5Bstring%5Dany%0A%20%20%20%20%20%20%20%20%20%20%20%20json.NewDecoder(resp.Body).Decode(%26data)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Usage%0AapiNode%20%3A%3D%20createAPINode(%22secret-key-123%22%2C%20%22https%3A%2F%2Fapi.example.com%22)%0A%60%60%60%0A%0A%23%23%20Stateful%20Nodes%0A%0AMaintain%20state%20across%20executions%3A%0A%0A%60%60%60go%0Afunc%20createCounterNode()%20flyt.Node%20%7B%0A%20%20%20%20count%20%3A%3D%200%0A%20%20%20%20mu%20%3A%3D%20%26sync.Mutex%7B%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20mu.Lock()%0A%20%20%20%20%20%20%20%20%20%20%20%20count%2B%2B%0A%20%20%20%20%20%20%20%20%20%20%20%20current%20%3A%3D%20count%0A%20%20%20%20%20%20%20%20%20%20%20%20mu.Unlock()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20fmt.Sprintf(%22Execution%20%23%25d%22%2C%20current)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Configuration%20Objects%0A%0AUse%20structs%20for%20complex%20configuration%3A%0A%0A%60%60%60go%0Atype%20DatabaseConfig%20struct%20%7B%0A%20%20%20%20Host%20%20%20%20%20string%0A%20%20%20%20Port%20%20%20%20%20int%0A%20%20%20%20User%20%20%20%20%20string%0A%20%20%20%20Password%20string%0A%20%20%20%20Database%20string%0A%20%20%20%20MaxConns%20int%0A%7D%0A%0Afunc%20createDatabaseNode(config%20DatabaseConfig)%20flyt.Node%20%7B%0A%20%20%20%20%2F%2F%20Create%20connection%20pool%20once%0A%20%20%20%20dsn%20%3A%3D%20fmt.Sprintf(%22%25s%3A%25s%40tcp(%25s%3A%25d)%2F%25s%22%2C%0A%20%20%20%20%20%20%20%20config.User%2C%20config.Password%2C%20config.Host%2C%20config.Port%2C%20config.Database)%0A%20%20%20%20%0A%20%20%20%20db%2C%20_%20%3A%3D%20sql.Open(%22mysql%22%2C%20dsn)%0A%20%20%20%20db.SetMaxOpenConns(config.MaxConns)%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20query%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20rows%2C%20err%20%3A%3D%20db.QueryContext(ctx%2C%20query)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20rows.Close()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20results%20%5B%5Dmap%5Bstring%5Dany%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Process%20rows...%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20results%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Usage%0AdbNode%20%3A%3D%20createDatabaseNode(DatabaseConfig%7B%0A%20%20%20%20Host%3A%20%20%20%20%20%22localhost%22%2C%0A%20%20%20%20Port%3A%20%20%20%20%203306%2C%0A%20%20%20%20User%3A%20%20%20%20%20%22app%22%2C%0A%20%20%20%20Password%3A%20%22secret%22%2C%0A%20%20%20%20Database%3A%20%22myapp%22%2C%0A%20%20%20%20MaxConns%3A%2010%2C%0A%7D)%0A%60%60%60%0A%0A%23%23%20Factory%20Functions%0A%0ACreate%20specialized%20node%20variants%3A%0A%0A%60%60%60go%0Afunc%20createHTTPNode(method%20string%2C%20headers%20map%5Bstring%5Dstring)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20url%2C%20_%20%3A%3D%20shared.Get(%22url%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20body%2C%20_%20%3A%3D%20shared.Get(%22body%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%22url%22%3A%20url%2C%20%22body%22%3A%20body%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(map%5Bstring%5Dany)%0A%20%20%20%20%20%20%20%20%20%20%20%20url%20%3A%3D%20data%5B%22url%22%5D.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20bodyReader%20io.Reader%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20body%2C%20ok%20%3A%3D%20data%5B%22body%22%5D%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bodyBytes%2C%20_%20%3A%3D%20json.Marshal(body)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bodyReader%20%3D%20bytes.NewReader(bodyBytes)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20req%2C%20_%20%3A%3D%20http.NewRequest(method%2C%20url%2C%20bodyReader)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Apply%20configured%20headers%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20key%2C%20value%20%3A%3D%20range%20headers%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20req.Header.Set(key%2C%20value)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20client%20%3A%3D%20%26http.Client%7B%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20resp%2C%20err%20%3A%3D%20client.Do(req)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20resp.Body.Close()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20result%20map%5Bstring%5Dany%0A%20%20%20%20%20%20%20%20%20%20%20%20json.NewDecoder(resp.Body).Decode(%26result)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Create%20specialized%20nodes%0AgetNode%20%3A%3D%20createHTTPNode(%22GET%22%2C%20map%5Bstring%5Dstring%7B%0A%20%20%20%20%22Accept%22%3A%20%22application%2Fjson%22%2C%0A%7D)%0A%0ApostNode%20%3A%3D%20createHTTPNode(%22POST%22%2C%20map%5Bstring%5Dstring%7B%0A%20%20%20%20%22Content-Type%22%3A%20%22application%2Fjson%22%2C%0A%20%20%20%20%22Accept%22%3A%20%22application%2Fjson%22%2C%0A%7D)%0A%60%60%60%0A%0A%23%23%20Resource%20Management%0A%0AManage%20shared%20resources%3A%0A%0A%60%60%60go%0Afunc%20createFileProcessorNode(bufferSize%20int)%20flyt.Node%20%7B%0A%20%20%20%20%2F%2F%20Pre-allocate%20buffer%0A%20%20%20%20buffer%20%3A%3D%20make(%5B%5Dbyte%2C%20bufferSize)%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20filePath%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20file%2C%20err%20%3A%3D%20os.Open(filePath)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20file.Close()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Reuse%20buffer%0A%20%20%20%20%20%20%20%20%20%20%20%20n%2C%20err%20%3A%3D%20file.Read(buffer)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%26%26%20err%20!%3D%20io.EOF%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Process%20buffer%5B%3An%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20processData(buffer%5B%3An%5D)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Middleware%20Pattern%0A%0AWrap%20nodes%20with%20additional%20behavior%3A%0A%0A%60%60%60go%0Afunc%20withLogging(name%20string%2C%20node%20flyt.Node)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Starting%20prep%22%2C%20name)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20node.Prep(ctx%2C%20shared)%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20start%20%3A%3D%20time.Now()%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20node.Exec(ctx%2C%20prepResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Exec%20took%20%25v%22%2C%20name%2C%20time.Since(start))%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20err%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20action%2C%20err%20%3A%3D%20node.Post(ctx%2C%20shared%2C%20prepResult%2C%20execResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Returning%20action%3A%20%25s%22%2C%20name%2C%20action)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20action%2C%20err%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Usage%0AprocessNode%20%3A%3D%20withLogging(%22processor%22%2C%20createProcessNode())%0A%60%60%60%0A%0A%23%23%20Dynamic%20Configuration%0A%0ALoad%20configuration%20at%20runtime%3A%0A%0A%60%60%60go%0Afunc%20createConfigurableNode(configPath%20string)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Load%20config%20file%0A%20%20%20%20%20%20%20%20%20%20%20%20data%2C%20err%20%3A%3D%20os.ReadFile(configPath)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20config%20map%5Bstring%5Dany%0A%20%20%20%20%20%20%20%20%20%20%20%20json.Unmarshal(data%2C%20%26config)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20config%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20config%20%3A%3D%20prepResult.(map%5Bstring%5Dany)%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Use%20configuration%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20processWithConfig(config)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Dependency%20Injection%0A%0AInject%20dependencies%20through%20closures%3A%0A%0A%60%60%60go%0Atype%20Dependencies%20struct%20%7B%0A%20%20%20%20DB%20%20%20%20%20%20%20*sql.DB%0A%20%20%20%20Cache%20%20%20%20*redis.Client%0A%20%20%20%20Logger%20%20%20*log.Logger%0A%20%20%20%20Metrics%20%20*prometheus.Registry%0A%7D%0A%0Afunc%20createServiceNode(deps%20Dependencies)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Use%20injected%20dependencies%0A%20%20%20%20%20%20%20%20%20%20%20%20deps.Logger.Println(%22Processing%20request%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Check%20cache%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20cached%2C%20err%20%3A%3D%20deps.Cache.Get(ctx%2C%20%22key%22).Result()%3B%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deps.Metrics.Inc(%22cache_hits%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20cached%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Query%20database%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20queryDB(deps.DB%2C%20prepResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deps.Logger.Printf(%22DB%20error%3A%20%25v%22%2C%20err)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Update%20cache%0A%20%20%20%20%20%20%20%20%20%20%20%20deps.Cache.Set(ctx%2C%20%22key%22%2C%20result%2C%20time.Hour)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Immutable%20Configuration**%3A%20Don't%20modify%20captured%20variables%20after%20node%20creation%0A2.%20**Thread%20Safety**%3A%20Use%20mutexes%20for%20shared%20state%20in%20concurrent%20scenarios%0A3.%20**Resource%20Cleanup**%3A%20Ensure%20resources%20are%20properly%20closed%0A4.%20**Error%20Handling**%3A%20Handle%20configuration%20errors%20gracefully%0A5.%20**Documentation**%3A%20Document%20required%20configuration%20clearly%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BError%20Handling%5D(%2Fpatterns%2Ferror-handling)%20-%20Build%20resilient%20nodes%0A-%20%5BCustom%20Node%20Types%5D(%2Fadvanced%2Fcustom-nodes)%20-%20Advanced%20node%20patterns%0A-%20%5BBest%20Practices%5D(%2Fbest-practices)%20-%20General%20guidelines", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/closures-BrZk-jZH.js"), path: "/patterns/closures.html", type: "mdx", filePath: "patterns/closures.mdx", content: "%23%20Configuration%20via%20Closures%0A%0AUse%20closures%20to%20create%20configurable%2C%20reusable%20nodes%20with%20encapsulated%20state%20and%20configuration.%0A%0A%23%23%20Basic%20Closure%20Pattern%0A%0APass%20configuration%20to%20nodes%20using%20closures%3A%0A%0A%60%60%60go%0Afunc%20createAPINode(apiKey%20string%2C%20baseURL%20string)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20apiKey%20and%20baseURL%20are%20captured%20in%20the%20closure%0A%20%20%20%20%20%20%20%20%20%20%20%20url%20%3A%3D%20fmt.Sprintf(%22%25s%2Fdata%22%2C%20baseURL)%0A%20%20%20%20%20%20%20%20%20%20%20%20req%2C%20_%20%3A%3D%20http.NewRequest(%22GET%22%2C%20url%2C%20nil)%0A%20%20%20%20%20%20%20%20%20%20%20%20req.Header.Set(%22Authorization%22%2C%20fmt.Sprintf(%22Bearer%20%25s%22%2C%20apiKey))%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20client%20%3A%3D%20%26http.Client%7BTimeout%3A%2030%20*%20time.Second%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20resp%2C%20err%20%3A%3D%20client.Do(req)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20resp.Body.Close()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20data%20map%5Bstring%5Dany%0A%20%20%20%20%20%20%20%20%20%20%20%20json.NewDecoder(resp.Body).Decode(%26data)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Usage%0AapiNode%20%3A%3D%20createAPINode(%22secret-key-123%22%2C%20%22https%3A%2F%2Fapi.example.com%22)%0A%60%60%60%0A%0A%23%23%20Stateful%20Nodes%0A%0AMaintain%20state%20across%20executions%3A%0A%0A%60%60%60go%0Afunc%20createCounterNode()%20flyt.Node%20%7B%0A%20%20%20%20count%20%3A%3D%200%0A%20%20%20%20mu%20%3A%3D%20%26sync.Mutex%7B%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20mu.Lock()%0A%20%20%20%20%20%20%20%20%20%20%20%20count%2B%2B%0A%20%20%20%20%20%20%20%20%20%20%20%20current%20%3A%3D%20count%0A%20%20%20%20%20%20%20%20%20%20%20%20mu.Unlock()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20fmt.Sprintf(%22Execution%20%23%25d%22%2C%20current)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Configuration%20Objects%0A%0AUse%20structs%20for%20complex%20configuration%3A%0A%0A%60%60%60go%0Atype%20DatabaseConfig%20struct%20%7B%0A%20%20%20%20Host%20%20%20%20%20string%0A%20%20%20%20Port%20%20%20%20%20int%0A%20%20%20%20User%20%20%20%20%20string%0A%20%20%20%20Password%20string%0A%20%20%20%20Database%20string%0A%20%20%20%20MaxConns%20int%0A%7D%0A%0Afunc%20createDatabaseNode(config%20DatabaseConfig)%20flyt.Node%20%7B%0A%20%20%20%20%2F%2F%20Create%20connection%20pool%20once%0A%20%20%20%20dsn%20%3A%3D%20fmt.Sprintf(%22%25s%3A%25s%40tcp(%25s%3A%25d)%2F%25s%22%2C%0A%20%20%20%20%20%20%20%20config.User%2C%20config.Password%2C%20config.Host%2C%20config.Port%2C%20config.Database)%0A%20%20%20%20%0A%20%20%20%20db%2C%20_%20%3A%3D%20sql.Open(%22mysql%22%2C%20dsn)%0A%20%20%20%20db.SetMaxOpenConns(config.MaxConns)%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20query%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20rows%2C%20err%20%3A%3D%20db.QueryContext(ctx%2C%20query)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20rows.Close()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20results%20%5B%5Dmap%5Bstring%5Dany%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Process%20rows...%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20results%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Usage%0AdbNode%20%3A%3D%20createDatabaseNode(DatabaseConfig%7B%0A%20%20%20%20Host%3A%20%20%20%20%20%22localhost%22%2C%0A%20%20%20%20Port%3A%20%20%20%20%203306%2C%0A%20%20%20%20User%3A%20%20%20%20%20%22app%22%2C%0A%20%20%20%20Password%3A%20%22secret%22%2C%0A%20%20%20%20Database%3A%20%22myapp%22%2C%0A%20%20%20%20MaxConns%3A%2010%2C%0A%7D)%0A%60%60%60%0A%0A%23%23%20Factory%20Functions%0A%0ACreate%20specialized%20node%20variants%3A%0A%0A%60%60%60go%0Afunc%20createHTTPNode(method%20string%2C%20headers%20map%5Bstring%5Dstring)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20url%2C%20_%20%3A%3D%20shared.Get(%22url%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20body%2C%20_%20%3A%3D%20shared.Get(%22body%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%22url%22%3A%20url%2C%20%22body%22%3A%20body%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20data%20%3A%3D%20prepResult.(map%5Bstring%5Dany)%0A%20%20%20%20%20%20%20%20%20%20%20%20url%20%3A%3D%20data%5B%22url%22%5D.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20bodyReader%20io.Reader%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20body%2C%20ok%20%3A%3D%20data%5B%22body%22%5D%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bodyBytes%2C%20_%20%3A%3D%20json.Marshal(body)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20bodyReader%20%3D%20bytes.NewReader(bodyBytes)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20req%2C%20_%20%3A%3D%20http.NewRequest(method%2C%20url%2C%20bodyReader)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Apply%20configured%20headers%0A%20%20%20%20%20%20%20%20%20%20%20%20for%20key%2C%20value%20%3A%3D%20range%20headers%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20req.Header.Set(key%2C%20value)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20client%20%3A%3D%20%26http.Client%7B%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20resp%2C%20err%20%3A%3D%20client.Do(req)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20resp.Body.Close()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20result%20map%5Bstring%5Dany%0A%20%20%20%20%20%20%20%20%20%20%20%20json.NewDecoder(resp.Body).Decode(%26result)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Create%20specialized%20nodes%0AgetNode%20%3A%3D%20createHTTPNode(%22GET%22%2C%20map%5Bstring%5Dstring%7B%0A%20%20%20%20%22Accept%22%3A%20%22application%2Fjson%22%2C%0A%7D)%0A%0ApostNode%20%3A%3D%20createHTTPNode(%22POST%22%2C%20map%5Bstring%5Dstring%7B%0A%20%20%20%20%22Content-Type%22%3A%20%22application%2Fjson%22%2C%0A%20%20%20%20%22Accept%22%3A%20%22application%2Fjson%22%2C%0A%7D)%0A%60%60%60%0A%0A%23%23%20Resource%20Management%0A%0AManage%20shared%20resources%3A%0A%0A%60%60%60go%0Afunc%20createFileProcessorNode(bufferSize%20int)%20flyt.Node%20%7B%0A%20%20%20%20%2F%2F%20Pre-allocate%20buffer%0A%20%20%20%20buffer%20%3A%3D%20make(%5B%5Dbyte%2C%20bufferSize)%0A%20%20%20%20%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20filePath%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20file%2C%20err%20%3A%3D%20os.Open(filePath)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20defer%20file.Close()%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Reuse%20buffer%0A%20%20%20%20%20%20%20%20%20%20%20%20n%2C%20err%20%3A%3D%20file.Read(buffer)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%26%26%20err%20!%3D%20io.EOF%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Process%20buffer%5B%3An%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20processData(buffer%5B%3An%5D)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Middleware%20Pattern%0A%0AWrap%20nodes%20with%20additional%20behavior%3A%0A%0A%60%60%60go%0Afunc%20withLogging(name%20string%2C%20node%20flyt.Node)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Starting%20prep%22%2C%20name)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20node.Prep(ctx%2C%20shared)%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20start%20%3A%3D%20time.Now()%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20node.Exec(ctx%2C%20prepResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Exec%20took%20%25v%22%2C%20name%2C%20time.Since(start))%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20err%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithPostFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20action%2C%20err%20%3A%3D%20node.Post(ctx%2C%20shared%2C%20prepResult%2C%20execResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20log.Printf(%22%5B%25s%5D%20Returning%20action%3A%20%25s%22%2C%20name%2C%20action)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20action%2C%20err%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%0A%2F%2F%20Usage%0AprocessNode%20%3A%3D%20withLogging(%22processor%22%2C%20createProcessNode())%0A%60%60%60%0A%0A%23%23%20Dynamic%20Configuration%0A%0ALoad%20configuration%20at%20runtime%3A%0A%0A%60%60%60go%0Afunc%20createConfigurableNode(configPath%20string)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithPrepFunc(func(ctx%20context.Context%2C%20shared%20*flyt.SharedStore)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Load%20config%20file%0A%20%20%20%20%20%20%20%20%20%20%20%20data%2C%20err%20%3A%3D%20os.ReadFile(configPath)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20var%20config%20map%5Bstring%5Dany%0A%20%20%20%20%20%20%20%20%20%20%20%20json.Unmarshal(data%2C%20%26config)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20config%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20config%20%3A%3D%20prepResult.(map%5Bstring%5Dany)%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Use%20configuration%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20processWithConfig(config)%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Dependency%20Injection%0A%0AInject%20dependencies%20through%20closures%3A%0A%0A%60%60%60go%0Atype%20Dependencies%20struct%20%7B%0A%20%20%20%20DB%20%20%20%20%20%20%20*sql.DB%0A%20%20%20%20Cache%20%20%20%20*redis.Client%0A%20%20%20%20Logger%20%20%20*log.Logger%0A%20%20%20%20Metrics%20%20*prometheus.Registry%0A%7D%0A%0Afunc%20createServiceNode(deps%20Dependencies)%20flyt.Node%20%7B%0A%20%20%20%20return%20flyt.NewNode(%0A%20%20%20%20%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Use%20injected%20dependencies%0A%20%20%20%20%20%20%20%20%20%20%20%20deps.Logger.Println(%22Processing%20request%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Check%20cache%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20cached%2C%20err%20%3A%3D%20deps.Cache.Get(ctx%2C%20%22key%22).Result()%3B%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deps.Metrics.Inc(%22cache_hits%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20cached%2C%20nil%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Query%20database%0A%20%20%20%20%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20queryDB(deps.DB%2C%20prepResult)%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20deps.Logger.Printf(%22DB%20error%3A%20%25v%22%2C%20err)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Update%20cache%0A%20%20%20%20%20%20%20%20%20%20%20%20deps.Cache.Set(ctx%2C%20%22key%22%2C%20result%2C%20time.Hour)%0A%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20%20%20%20%20%7D)%2C%0A%20%20%20%20)%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Immutable%20Configuration**%3A%20Don't%20modify%20captured%20variables%20after%20node%20creation%0A2.%20**Thread%20Safety**%3A%20Use%20mutexes%20for%20shared%20state%20in%20concurrent%20scenarios%0A3.%20**Resource%20Cleanup**%3A%20Ensure%20resources%20are%20properly%20closed%0A4.%20**Error%20Handling**%3A%20Handle%20configuration%20errors%20gracefully%0A5.%20**Documentation**%3A%20Document%20required%20configuration%20clearly%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BError%20Handling%5D(%2Fpatterns%2Ferror-handling)%20-%20Build%20resilient%20nodes%0A-%20%5BCustom%20Node%20Types%5D(%2Fadvanced%2Fcustom-nodes)%20-%20Advanced%20node%20patterns%0A-%20%5BBest%20Practices%5D(%2Fbest-practices)%20-%20General%20guidelines", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/error-handling-BeXATXAT.js"), path: "/patterns/error-handling", type: "mdx", filePath: "patterns/error-handling.mdx", content: "%23%20Error%20Handling%20%26%20Retries%0A%0ABuild%20resilient%20workflows%20with%20proper%20error%20handling%20and%20retry%20strategies.%0A%0A%23%23%20Basic%20Retry%20Configuration%0A%0AConfigure%20retries%20at%20the%20node%20level%3A%0A%0A%60%60%60go%0Anode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20This%20will%20be%20retried%20up%20to%203%20times%0A%20%20%20%20%20%20%20%20return%20callFlakeyAPI()%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithMaxRetries(3)%2C%0A%20%20%20%20flyt.WithWait(time.Second)%2C%20%2F%2F%20Wait%201%20second%20between%20retries%0A)%0A%60%60%60%0A%0A%23%23%20Exponential%20Backoff%0A%0AImplement%20exponential%20backoff%20with%20RetryableNode%3A%0A%0A%60%60%60go%0Atype%20BackoffNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20attempt%20int%0A%7D%0A%0Afunc%20(n%20*BackoffNode)%20GetMaxRetries()%20int%20%7B%0A%20%20%20%20return%205%0A%7D%0A%0Afunc%20(n%20*BackoffNode)%20GetWait()%20time.Duration%20%7B%0A%20%20%20%20%2F%2F%20Exponential%20backoff%3A%201s%2C%202s%2C%204s%2C%208s%2C%2016s%0A%20%20%20%20return%20time.Duration(math.Pow(2%2C%20float64(n.attempt)))%20*%20time.Second%0A%7D%0A%0Afunc%20(n%20*BackoffNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20n.attempt%2B%2B%0A%20%20%20%20result%2C%20err%20%3A%3D%20callAPI()%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22Attempt%20%25d%20failed%3A%20%25v%22%2C%20n.attempt%2C%20err)%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20n.attempt%20%3D%200%20%2F%2F%20Reset%20on%20success%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Circuit%20Breaker%20Pattern%0A%0APrevent%20cascading%20failures%3A%0A%0A%60%60%60go%0Atype%20CircuitBreakerNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20failures%20%20%20%20int%0A%20%20%20%20lastFailure%20time.Time%0A%20%20%20%20threshold%20%20%20int%0A%20%20%20%20timeout%20%20%20%20%20time.Duration%0A%7D%0A%0Afunc%20NewCircuitBreakerNode()%20*CircuitBreakerNode%20%7B%0A%20%20%20%20return%20%26CircuitBreakerNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20threshold%3A%205%2C%0A%20%20%20%20%20%20%20%20timeout%3A%20%20%2030%20*%20time.Second%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*CircuitBreakerNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Check%20if%20circuit%20is%20open%0A%20%20%20%20if%20n.failures%20%3E%3D%20n.threshold%20%7B%0A%20%20%20%20%20%20%20%20if%20time.Since(n.lastFailure)%20%3C%20n.timeout%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22circuit%20breaker%20open%22)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20Reset%20after%20timeout%0A%20%20%20%20%20%20%20%20n.failures%20%3D%200%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20result%2C%20err%20%3A%3D%20callService()%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20n.failures%2B%2B%0A%20%20%20%20%20%20%20%20n.lastFailure%20%3D%20time.Now()%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20n.failures%20%3D%200%20%2F%2F%20Reset%20on%20success%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Fallback%20on%20Failure%0A%0AImplement%20the%20FallbackNode%20interface%20for%20graceful%20degradation%3A%0A%0A%60%60%60go%0Atype%20CachedAPINode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20cache%20sync.Map%0A%7D%0A%0Afunc%20(n%20*CachedAPINode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20key%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Try%20to%20fetch%20fresh%20data%0A%20%20%20%20data%2C%20err%20%3A%3D%20fetchFromAPI(key)%0A%20%20%20%20if%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Cache%20successful%20result%0A%20%20%20%20%20%20%20%20n.cache.Store(key%2C%20data)%0A%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20nil%2C%20err%0A%7D%0A%0Afunc%20(n%20*CachedAPINode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20key%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Return%20cached%20data%20on%20failure%0A%20%20%20%20if%20cached%2C%20ok%20%3A%3D%20n.cache.Load(key)%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22Returning%20cached%20data%20for%20%25s%20due%20to%20error%3A%20%25v%22%2C%20key%2C%20err)%0A%20%20%20%20%20%20%20%20return%20cached%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Return%20default%20if%20no%20cache%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22status%22%3A%20%22unavailable%22%2C%0A%20%20%20%20%20%20%20%20%22cached%22%3A%20false%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Error%20Aggregation%0A%0ACollect%20errors%20from%20batch%20operations%3A%0A%0A%60%60%60go%0Afunc%20processBatch(ctx%20context.Context%2C%20items%20%5B%5DItem)%20error%20%7B%0A%20%20%20%20var%20errs%20%5B%5Derror%0A%20%20%20%20%0A%20%20%20%20for%20i%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20if%20err%20%3A%3D%20processItem(item)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20errs%20%3D%20append(errs%2C%20fmt.Errorf(%22item%20%25d%3A%20%25w%22%2C%20i%2C%20err))%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20if%20len(errs)%20%3E%200%20%7B%0A%20%20%20%20%20%20%20%20return%20%26flyt.BatchError%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20Errors%3A%20errs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Message%3A%20fmt.Sprintf(%22%25d%2F%25d%20items%20failed%22%2C%20len(errs)%2C%20len(items))%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Retry%20with%20Jitter%0A%0AAdd%20randomization%20to%20prevent%20thundering%20herd%3A%0A%0A%60%60%60go%0Afunc%20(n%20*JitterNode)%20GetWait()%20time.Duration%20%7B%0A%20%20%20%20base%20%3A%3D%20time.Second%20*%20time.Duration(n.attempt)%0A%20%20%20%20jitter%20%3A%3D%20time.Duration(rand.Intn(1000))%20*%20time.Millisecond%0A%20%20%20%20return%20base%20%2B%20jitter%0A%7D%0A%60%60%60%0A%0A%23%23%20Selective%20Retry%0A%0AOnly%20retry%20specific%20errors%3A%0A%0A%60%60%60go%0Afunc%20(n%20*SelectiveRetryNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20result%2C%20err%20%3A%3D%20callAPI()%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Only%20retry%20on%20network%20errors%0A%20%20%20%20%20%20%20%20if%20isNetworkError(err)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%20%2F%2F%20Will%20be%20retried%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20Don't%20retry%20business%20logic%20errors%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22permanent%20error%3A%20%25w%22%2C%20err)%0A%20%20%20%20%7D%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%0Afunc%20(n%20*SelectiveRetryNode)%20GetMaxRetries()%20int%20%7B%0A%20%20%20%20%2F%2F%20Check%20error%20type%20from%20last%20execution%0A%20%20%20%20if%20n.lastError%20!%3D%20nil%20%26%26%20!isRetryable(n.lastError)%20%7B%0A%20%20%20%20%20%20%20%20return%200%20%2F%2F%20Don't%20retry%0A%20%20%20%20%7D%0A%20%20%20%20return%203%0A%7D%0A%60%60%60%0A%0A%23%23%20Error%20Context%0A%0AProvide%20context%20for%20debugging%3A%0A%0A%60%60%60go%0Atype%20ErrorContext%20struct%20%7B%0A%20%20%20%20Node%20%20%20%20%20%20string%0A%20%20%20%20Action%20%20%20%20string%0A%20%20%20%20Input%20%20%20%20%20any%0A%20%20%20%20Error%20%20%20%20%20error%0A%20%20%20%20Timestamp%20time.Time%0A%20%20%20%20Attempts%20%20int%0A%7D%0A%0Afunc%20(n%20*DetailedErrorNode)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20if%20err%2C%20ok%20%3A%3D%20execResult.(error)%3B%20ok%20%26%26%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20errorCtx%20%3A%3D%20ErrorContext%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20Node%3A%20%20%20%20%20%20%22DetailedErrorNode%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Action%3A%20%20%20%20%22process%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Input%3A%20%20%20%20%20prepResult%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Error%3A%20%20%20%20%20err%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Timestamp%3A%20time.Now()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Attempts%3A%20%20n.attempts%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20shared.Set(%22last_error%22%2C%20errorCtx)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20n.attempts%20%3C%20n.maxRetries%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22retry%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%22error%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Timeout%20Handling%0A%0APrevent%20hanging%20operations%3A%0A%0A%60%60%60go%0Afunc%20(n%20*TimeoutNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Create%20timeout%20context%0A%20%20%20%20ctx%2C%20cancel%20%3A%3D%20context.WithTimeout(ctx%2C%2030*time.Second)%0A%20%20%20%20defer%20cancel()%0A%20%20%20%20%0A%20%20%20%20resultChan%20%3A%3D%20make(chan%20any)%0A%20%20%20%20errChan%20%3A%3D%20make(chan%20error)%0A%20%20%20%20%0A%20%20%20%20go%20func()%20%7B%0A%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20longRunningOperation()%0A%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20errChan%20%3C-%20err%0A%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resultChan%20%3C-%20result%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D()%0A%20%20%20%20%0A%20%20%20%20select%20%7B%0A%20%20%20%20case%20result%20%3A%3D%20%3C-resultChan%3A%0A%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20case%20err%20%3A%3D%20%3C-errChan%3A%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20case%20%3C-ctx.Done()%3A%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22operation%20timed%20out%3A%20%25w%22%2C%20ctx.Err())%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Identify%20Transient%20vs%20Permanent%20Errors**%3A%20Only%20retry%20transient%20failures%0A2.%20**Set%20Reasonable%20Limits**%3A%20Don't%20retry%20indefinitely%0A3.%20**Use%20Backoff**%3A%20Avoid%20overwhelming%20failing%20services%0A4.%20**Log%20Failures**%3A%20Track%20retry%20attempts%20for%20debugging%0A5.%20**Provide%20Fallbacks**%3A%20Gracefully%20degrade%20when%20possible%0A6.%20**Monitor%20Retry%20Rates**%3A%20High%20retry%20rates%20indicate%20problems%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BFallback%20on%20Failure%5D(%2Fpatterns%2Ffallback)%20-%20Graceful%20degradation%0A-%20%5BBatch%20Error%20Handling%5D(%2Fadvanced%2Fbatch-processing%23batch-error-handling)%20-%20Handle%20batch%20failures%0A-%20%5BBest%20Practices%5D(%2Fbest-practices)%20-%20General%20guidelines", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/error-handling-BeXATXAT.js"), path: "/patterns/error-handling.html", type: "mdx", filePath: "patterns/error-handling.mdx", content: "%23%20Error%20Handling%20%26%20Retries%0A%0ABuild%20resilient%20workflows%20with%20proper%20error%20handling%20and%20retry%20strategies.%0A%0A%23%23%20Basic%20Retry%20Configuration%0A%0AConfigure%20retries%20at%20the%20node%20level%3A%0A%0A%60%60%60go%0Anode%20%3A%3D%20flyt.NewNode(%0A%20%20%20%20flyt.WithExecFunc(func(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20This%20will%20be%20retried%20up%20to%203%20times%0A%20%20%20%20%20%20%20%20return%20callFlakeyAPI()%0A%20%20%20%20%7D)%2C%0A%20%20%20%20flyt.WithMaxRetries(3)%2C%0A%20%20%20%20flyt.WithWait(time.Second)%2C%20%2F%2F%20Wait%201%20second%20between%20retries%0A)%0A%60%60%60%0A%0A%23%23%20Exponential%20Backoff%0A%0AImplement%20exponential%20backoff%20with%20RetryableNode%3A%0A%0A%60%60%60go%0Atype%20BackoffNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20attempt%20int%0A%7D%0A%0Afunc%20(n%20*BackoffNode)%20GetMaxRetries()%20int%20%7B%0A%20%20%20%20return%205%0A%7D%0A%0Afunc%20(n%20*BackoffNode)%20GetWait()%20time.Duration%20%7B%0A%20%20%20%20%2F%2F%20Exponential%20backoff%3A%201s%2C%202s%2C%204s%2C%208s%2C%2016s%0A%20%20%20%20return%20time.Duration(math.Pow(2%2C%20float64(n.attempt)))%20*%20time.Second%0A%7D%0A%0Afunc%20(n%20*BackoffNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20n.attempt%2B%2B%0A%20%20%20%20result%2C%20err%20%3A%3D%20callAPI()%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22Attempt%20%25d%20failed%3A%20%25v%22%2C%20n.attempt%2C%20err)%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20n.attempt%20%3D%200%20%2F%2F%20Reset%20on%20success%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Circuit%20Breaker%20Pattern%0A%0APrevent%20cascading%20failures%3A%0A%0A%60%60%60go%0Atype%20CircuitBreakerNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20failures%20%20%20%20int%0A%20%20%20%20lastFailure%20time.Time%0A%20%20%20%20threshold%20%20%20int%0A%20%20%20%20timeout%20%20%20%20%20time.Duration%0A%7D%0A%0Afunc%20NewCircuitBreakerNode()%20*CircuitBreakerNode%20%7B%0A%20%20%20%20return%20%26CircuitBreakerNode%7B%0A%20%20%20%20%20%20%20%20BaseNode%3A%20%20flyt.NewBaseNode()%2C%0A%20%20%20%20%20%20%20%20threshold%3A%205%2C%0A%20%20%20%20%20%20%20%20timeout%3A%20%20%2030%20*%20time.Second%2C%0A%20%20%20%20%7D%0A%7D%0A%0Afunc%20(n%20*CircuitBreakerNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Check%20if%20circuit%20is%20open%0A%20%20%20%20if%20n.failures%20%3E%3D%20n.threshold%20%7B%0A%20%20%20%20%20%20%20%20if%20time.Since(n.lastFailure)%20%3C%20n.timeout%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22circuit%20breaker%20open%22)%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20Reset%20after%20timeout%0A%20%20%20%20%20%20%20%20n.failures%20%3D%200%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20result%2C%20err%20%3A%3D%20callService()%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20n.failures%2B%2B%0A%20%20%20%20%20%20%20%20n.lastFailure%20%3D%20time.Now()%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20n.failures%20%3D%200%20%2F%2F%20Reset%20on%20success%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Fallback%20on%20Failure%0A%0AImplement%20the%20FallbackNode%20interface%20for%20graceful%20degradation%3A%0A%0A%60%60%60go%0Atype%20CachedAPINode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20cache%20sync.Map%0A%7D%0A%0Afunc%20(n%20*CachedAPINode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20key%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Try%20to%20fetch%20fresh%20data%0A%20%20%20%20data%2C%20err%20%3A%3D%20fetchFromAPI(key)%0A%20%20%20%20if%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Cache%20successful%20result%0A%20%20%20%20%20%20%20%20n.cache.Store(key%2C%20data)%0A%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20nil%2C%20err%0A%7D%0A%0Afunc%20(n%20*CachedAPINode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20key%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Return%20cached%20data%20on%20failure%0A%20%20%20%20if%20cached%2C%20ok%20%3A%3D%20n.cache.Load(key)%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22Returning%20cached%20data%20for%20%25s%20due%20to%20error%3A%20%25v%22%2C%20key%2C%20err)%0A%20%20%20%20%20%20%20%20return%20cached%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Return%20default%20if%20no%20cache%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22status%22%3A%20%22unavailable%22%2C%0A%20%20%20%20%20%20%20%20%22cached%22%3A%20false%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Error%20Aggregation%0A%0ACollect%20errors%20from%20batch%20operations%3A%0A%0A%60%60%60go%0Afunc%20processBatch(ctx%20context.Context%2C%20items%20%5B%5DItem)%20error%20%7B%0A%20%20%20%20var%20errs%20%5B%5Derror%0A%20%20%20%20%0A%20%20%20%20for%20i%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20if%20err%20%3A%3D%20processItem(item)%3B%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20errs%20%3D%20append(errs%2C%20fmt.Errorf(%22item%20%25d%3A%20%25w%22%2C%20i%2C%20err))%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20if%20len(errs)%20%3E%200%20%7B%0A%20%20%20%20%20%20%20%20return%20%26flyt.BatchError%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20Errors%3A%20errs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Message%3A%20fmt.Sprintf(%22%25d%2F%25d%20items%20failed%22%2C%20len(errs)%2C%20len(items))%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Retry%20with%20Jitter%0A%0AAdd%20randomization%20to%20prevent%20thundering%20herd%3A%0A%0A%60%60%60go%0Afunc%20(n%20*JitterNode)%20GetWait()%20time.Duration%20%7B%0A%20%20%20%20base%20%3A%3D%20time.Second%20*%20time.Duration(n.attempt)%0A%20%20%20%20jitter%20%3A%3D%20time.Duration(rand.Intn(1000))%20*%20time.Millisecond%0A%20%20%20%20return%20base%20%2B%20jitter%0A%7D%0A%60%60%60%0A%0A%23%23%20Selective%20Retry%0A%0AOnly%20retry%20specific%20errors%3A%0A%0A%60%60%60go%0Afunc%20(n%20*SelectiveRetryNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20result%2C%20err%20%3A%3D%20callAPI()%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Only%20retry%20on%20network%20errors%0A%20%20%20%20%20%20%20%20if%20isNetworkError(err)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20nil%2C%20err%20%2F%2F%20Will%20be%20retried%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20Don't%20retry%20business%20logic%20errors%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22permanent%20error%3A%20%25w%22%2C%20err)%0A%20%20%20%20%7D%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%0Afunc%20(n%20*SelectiveRetryNode)%20GetMaxRetries()%20int%20%7B%0A%20%20%20%20%2F%2F%20Check%20error%20type%20from%20last%20execution%0A%20%20%20%20if%20n.lastError%20!%3D%20nil%20%26%26%20!isRetryable(n.lastError)%20%7B%0A%20%20%20%20%20%20%20%20return%200%20%2F%2F%20Don't%20retry%0A%20%20%20%20%7D%0A%20%20%20%20return%203%0A%7D%0A%60%60%60%0A%0A%23%23%20Error%20Context%0A%0AProvide%20context%20for%20debugging%3A%0A%0A%60%60%60go%0Atype%20ErrorContext%20struct%20%7B%0A%20%20%20%20Node%20%20%20%20%20%20string%0A%20%20%20%20Action%20%20%20%20string%0A%20%20%20%20Input%20%20%20%20%20any%0A%20%20%20%20Error%20%20%20%20%20error%0A%20%20%20%20Timestamp%20time.Time%0A%20%20%20%20Attempts%20%20int%0A%7D%0A%0Afunc%20(n%20*DetailedErrorNode)%20Post(ctx%20context.Context%2C%20shared%20*flyt.SharedStore%2C%20prepResult%2C%20execResult%20any)%20(flyt.Action%2C%20error)%20%7B%0A%20%20%20%20if%20err%2C%20ok%20%3A%3D%20execResult.(error)%3B%20ok%20%26%26%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20errorCtx%20%3A%3D%20ErrorContext%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20Node%3A%20%20%20%20%20%20%22DetailedErrorNode%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Action%3A%20%20%20%20%22process%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Input%3A%20%20%20%20%20prepResult%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Error%3A%20%20%20%20%20err%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Timestamp%3A%20time.Now()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Attempts%3A%20%20n.attempts%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20shared.Set(%22last_error%22%2C%20errorCtx)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20if%20n.attempts%20%3C%20n.maxRetries%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%22retry%22%2C%20nil%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%22error%22%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20flyt.DefaultAction%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Timeout%20Handling%0A%0APrevent%20hanging%20operations%3A%0A%0A%60%60%60go%0Afunc%20(n%20*TimeoutNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Create%20timeout%20context%0A%20%20%20%20ctx%2C%20cancel%20%3A%3D%20context.WithTimeout(ctx%2C%2030*time.Second)%0A%20%20%20%20defer%20cancel()%0A%20%20%20%20%0A%20%20%20%20resultChan%20%3A%3D%20make(chan%20any)%0A%20%20%20%20errChan%20%3A%3D%20make(chan%20error)%0A%20%20%20%20%0A%20%20%20%20go%20func()%20%7B%0A%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20longRunningOperation()%0A%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20errChan%20%3C-%20err%0A%20%20%20%20%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20resultChan%20%3C-%20result%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D()%0A%20%20%20%20%0A%20%20%20%20select%20%7B%0A%20%20%20%20case%20result%20%3A%3D%20%3C-resultChan%3A%0A%20%20%20%20%20%20%20%20return%20result%2C%20nil%0A%20%20%20%20case%20err%20%3A%3D%20%3C-errChan%3A%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20case%20%3C-ctx.Done()%3A%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22operation%20timed%20out%3A%20%25w%22%2C%20ctx.Err())%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Identify%20Transient%20vs%20Permanent%20Errors**%3A%20Only%20retry%20transient%20failures%0A2.%20**Set%20Reasonable%20Limits**%3A%20Don't%20retry%20indefinitely%0A3.%20**Use%20Backoff**%3A%20Avoid%20overwhelming%20failing%20services%0A4.%20**Log%20Failures**%3A%20Track%20retry%20attempts%20for%20debugging%0A5.%20**Provide%20Fallbacks**%3A%20Gracefully%20degrade%20when%20possible%0A6.%20**Monitor%20Retry%20Rates**%3A%20High%20retry%20rates%20indicate%20problems%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BFallback%20on%20Failure%5D(%2Fpatterns%2Ffallback)%20-%20Graceful%20degradation%0A-%20%5BBatch%20Error%20Handling%5D(%2Fadvanced%2Fbatch-processing%23batch-error-handling)%20-%20Handle%20batch%20failures%0A-%20%5BBest%20Practices%5D(%2Fbest-practices)%20-%20General%20guidelines", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/fallback-C7QxNL5M.js"), path: "/patterns/fallback", type: "mdx", filePath: "patterns/fallback.mdx", content: "%23%20Fallback%20on%20Failure%0A%0AImplement%20graceful%20degradation%20when%20operations%20fail%2C%20ensuring%20your%20workflows%20remain%20resilient%20and%20provide%20the%20best%20possible%20user%20experience%20even%20during%20failures.%0A%0A%23%23%20FallbackNode%20Interface%0A%0AThe%20%60FallbackNode%60%20interface%20allows%20custom%20fallback%20behavior%3A%0A%0A%60%60%60go%0Atype%20FallbackNode%20interface%20%7B%0A%20%20%20%20Node%0A%20%20%20%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%0A%7D%0A%60%60%60%0A%0A%23%23%20Basic%20Fallback%0A%0AReturn%20default%20values%20on%20failure%3A%0A%0A%60%60%60go%0Atype%20DefaultValueNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%7D%0A%0Afunc%20(n%20*DefaultValueNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Try%20primary%20operation%0A%20%20%20%20result%2C%20err%20%3A%3D%20fetchFromPrimarySource()%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%20%2F%2F%20Will%20trigger%20fallback%0A%20%20%20%20%7D%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%0Afunc%20(n%20*DefaultValueNode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20log.Printf(%22Primary%20source%20failed%3A%20%25v%2C%20returning%20default%22%2C%20err)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Return%20safe%20default%20value%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22status%22%3A%20%22degraded%22%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%22default_value%22%2C%0A%20%20%20%20%20%20%20%20%22error%22%3A%20err.Error()%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Cached%20Fallback%0A%0AUse%20cached%20data%20when%20fresh%20data%20is%20unavailable%3A%0A%0A%60%60%60go%0Atype%20CachedAPINode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20cache%20map%5Bstring%5DCacheEntry%0A%20%20%20%20mu%20%20%20%20sync.RWMutex%0A%7D%0A%0Atype%20CacheEntry%20struct%20%7B%0A%20%20%20%20Data%20%20%20%20%20%20any%0A%20%20%20%20Timestamp%20time.Time%0A%7D%0A%0Afunc%20(n%20*CachedAPINode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20key%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Try%20to%20fetch%20fresh%20data%0A%20%20%20%20data%2C%20err%20%3A%3D%20fetchFromAPI(key)%0A%20%20%20%20if%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Update%20cache%20on%20success%0A%20%20%20%20%20%20%20%20n.mu.Lock()%0A%20%20%20%20%20%20%20%20n.cache%5Bkey%5D%20%3D%20CacheEntry%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20Data%3A%20%20%20%20%20%20data%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Timestamp%3A%20time.Now()%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20n.mu.Unlock()%0A%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20nil%2C%20err%0A%7D%0A%0Afunc%20(n%20*CachedAPINode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20key%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%0A%20%20%20%20n.mu.RLock()%0A%20%20%20%20entry%2C%20exists%20%3A%3D%20n.cache%5Bkey%5D%0A%20%20%20%20n.mu.RUnlock()%0A%20%20%20%20%0A%20%20%20%20if%20exists%20%7B%0A%20%20%20%20%20%20%20%20age%20%3A%3D%20time.Since(entry.Timestamp)%0A%20%20%20%20%20%20%20%20log.Printf(%22Returning%20cached%20data%20(age%3A%20%25v)%20due%20to%20error%3A%20%25v%22%2C%20age%2C%20err)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%2F%2F%20Add%20metadata%20about%20cache%20usage%0A%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22data%22%3A%20%20%20%20%20%20%20entry.Data%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22cached%22%3A%20%20%20%20%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22cache_age%22%3A%20%20age.Seconds()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20%20%20%20%20%20err.Error()%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20No%20cache%20available%0A%20%20%20%20return%20nil%2C%20fmt.Errorf(%22no%20fallback%20available%3A%20%25w%22%2C%20err)%0A%7D%0A%60%60%60%0A%0A%23%23%20Multi-Level%20Fallback%0A%0ATry%20multiple%20fallback%20strategies%3A%0A%0A%60%60%60go%0Atype%20MultiLevelFallbackNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20primaryURL%20%20%20string%0A%20%20%20%20secondaryURL%20string%0A%20%20%20%20cache%20%20%20%20%20%20%20%20sync.Map%0A%7D%0A%0Afunc%20(n%20*MultiLevelFallbackNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Try%20primary%20source%0A%20%20%20%20data%2C%20err%20%3A%3D%20fetchFromURL(n.primaryURL)%0A%20%20%20%20if%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20n.cache.Store(%22last_good%22%2C%20data)%0A%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20nil%2C%20err%0A%7D%0A%0Afunc%20(n%20*MultiLevelFallbackNode)%20ExecFallback(prepResult%20any%2C%20primaryErr%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Level%201%3A%20Try%20secondary%20source%0A%20%20%20%20data%2C%20err%20%3A%3D%20fetchFromURL(n.secondaryURL)%0A%20%20%20%20if%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22Using%20secondary%20source%20due%20to%20primary%20error%3A%20%25v%22%2C%20primaryErr)%0A%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Level%202%3A%20Try%20cache%0A%20%20%20%20if%20cached%2C%20ok%20%3A%3D%20n.cache.Load(%22last_good%22)%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22Using%20cached%20data%20due%20to%20all%20sources%20failing%22)%0A%20%20%20%20%20%20%20%20return%20cached%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Level%203%3A%20Return%20minimal%20default%0A%20%20%20%20log.Printf(%22All%20fallbacks%20exhausted%2C%20returning%20minimal%20response%22)%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22status%22%3A%20%22unavailable%22%2C%0A%20%20%20%20%20%20%20%20%22message%22%3A%20%22Service%20temporarily%20unavailable%22%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Partial%20Fallback%0A%0AReturn%20partial%20results%20when%20complete%20processing%20fails%3A%0A%0A%60%60%60go%0Atype%20BatchProcessorNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20results%20%5B%5DResult%0A%20%20%20%20errors%20%20%5B%5Derror%0A%7D%0A%0Afunc%20(n%20*BatchProcessorNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20items%20%3A%3D%20prepResult.(%5B%5DItem)%0A%20%20%20%20n.results%20%3D%20make(%5B%5DResult%2C%200%2C%20len(items))%0A%20%20%20%20n.errors%20%3D%20make(%5B%5Derror%2C%200)%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20processItem(item)%0A%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20n.errors%20%3D%20append(n.errors%2C%20err)%0A%20%20%20%20%20%20%20%20%20%20%20%20continue%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20n.results%20%3D%20append(n.results%2C%20result)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20if%20len(n.errors)%20%3E%200%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22processing%20failed%3A%20%25d%20errors%22%2C%20len(n.errors))%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20n.results%2C%20nil%0A%7D%0A%0Afunc%20(n%20*BatchProcessorNode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Return%20partial%20results%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22partial_results%22%3A%20n.results%2C%0A%20%20%20%20%20%20%20%20%22success_count%22%3A%20%20%20len(n.results)%2C%0A%20%20%20%20%20%20%20%20%22error_count%22%3A%20%20%20%20%20len(n.errors)%2C%0A%20%20%20%20%20%20%20%20%22errors%22%3A%20%20%20%20%20%20%20%20%20%20n.errors%2C%0A%20%20%20%20%20%20%20%20%22status%22%3A%20%20%20%20%20%20%20%20%20%20%22partial_success%22%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Circuit%20Breaker%20Fallback%0A%0APrevent%20cascading%20failures%3A%0A%0A%60%60%60go%0Atype%20CircuitBreakerNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20failures%20%20%20%20int%0A%20%20%20%20lastFailure%20time.Time%0A%20%20%20%20threshold%20%20%20int%0A%20%20%20%20timeout%20%20%20%20%20time.Duration%0A%20%20%20%20fallbackMsg%20string%0A%7D%0A%0Afunc%20(n%20*CircuitBreakerNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Check%20if%20circuit%20is%20open%0A%20%20%20%20if%20n.isCircuitOpen()%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22circuit%20breaker%20open%22)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20result%2C%20err%20%3A%3D%20callService(prepResult)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20n.recordFailure()%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20n.reset()%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%0Afunc%20(n%20*CircuitBreakerNode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20if%20n.isCircuitOpen()%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Return%20cached%20or%20default%20response%20immediately%0A%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22status%22%3A%20%22circuit_open%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22message%22%3A%20n.fallbackMsg%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22retry_after%22%3A%20n.timeout%20-%20time.Since(n.lastFailure)%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Circuit%20not%20open%2C%20but%20request%20failed%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22status%22%3A%20%22degraded%22%2C%0A%20%20%20%20%20%20%20%20%22message%22%3A%20%22Service%20temporarily%20unavailable%22%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%0Afunc%20(n%20*CircuitBreakerNode)%20isCircuitOpen()%20bool%20%7B%0A%20%20%20%20return%20n.failures%20%3E%3D%20n.threshold%20%26%26%20%0A%20%20%20%20%20%20%20%20%20%20%20time.Since(n.lastFailure)%20%3C%20n.timeout%0A%7D%0A%0Afunc%20(n%20*CircuitBreakerNode)%20recordFailure()%20%7B%0A%20%20%20%20n.failures%2B%2B%0A%20%20%20%20n.lastFailure%20%3D%20time.Now()%0A%7D%0A%0Afunc%20(n%20*CircuitBreakerNode)%20reset()%20%7B%0A%20%20%20%20n.failures%20%3D%200%0A%7D%0A%60%60%60%0A%0A%23%23%20Fallback%20with%20Metrics%0A%0ATrack%20fallback%20usage%3A%0A%0A%60%60%60go%0Atype%20MetricsFallbackNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20primaryCalls%20%20%20int64%0A%20%20%20%20fallbackCalls%20%20int64%0A%20%20%20%20lastFallback%20%20%20time.Time%0A%7D%0A%0Afunc%20(n%20*MetricsFallbackNode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20atomic.AddInt64(%26n.fallbackCalls%2C%201)%0A%20%20%20%20n.lastFallback%20%3D%20time.Now()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Log%20metrics%0A%20%20%20%20total%20%3A%3D%20atomic.LoadInt64(%26n.primaryCalls)%20%2B%20atomic.LoadInt64(%26n.fallbackCalls)%0A%20%20%20%20fallbackRate%20%3A%3D%20float64(n.fallbackCalls)%20%2F%20float64(total)%20*%20100%0A%20%20%20%20%0A%20%20%20%20log.Printf(%22Fallback%20metrics%20-%20Rate%3A%20%25.2f%25%25%2C%20Total%20fallbacks%3A%20%25d%22%2C%20%0A%20%20%20%20%20%20%20%20fallbackRate%2C%20n.fallbackCalls)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Return%20fallback%20data%0A%20%20%20%20return%20getDefaultResponse()%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Conditional%20Fallback%0A%0ADifferent%20fallbacks%20based%20on%20error%20type%3A%0A%0A%60%60%60go%0Afunc%20(n%20*ConditionalFallbackNode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20switch%20%7B%0A%20%20%20%20case%20errors.Is(err%2C%20ErrTimeout)%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20For%20timeouts%2C%20return%20cached%20data%0A%20%20%20%20%20%20%20%20return%20n.getCachedResponse()%2C%20nil%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20case%20errors.Is(err%2C%20ErrRateLimit)%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20For%20rate%20limits%2C%20return%20throttled%20message%0A%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20%22rate_limited%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22retry_after%22%3A%2060%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20case%20errors.Is(err%2C%20ErrNotFound)%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20For%20not%20found%2C%20return%20empty%20result%0A%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22found%22%3A%20false%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22data%22%3A%20nil%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20Generic%20fallback%0A%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22status%22%3A%20%22error%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22message%22%3A%20%22Service%20unavailable%22%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Log%20Fallback%20Usage**%3A%20Track%20when%20and%20why%20fallbacks%20are%20triggered%0A2.%20**Monitor%20Fallback%20Rates**%3A%20High%20rates%20indicate%20system%20issues%0A3.%20**Set%20Appropriate%20Timeouts**%3A%20Don't%20wait%20too%20long%20before%20falling%20back%0A4.%20**Provide%20Meaningful%20Defaults**%3A%20Fallback%20data%20should%20be%20useful%0A5.%20**Document%20Fallback%20Behavior**%3A%20Make%20it%20clear%20what%20happens%20during%20failures%0A6.%20**Test%20Fallback%20Paths**%3A%20Ensure%20fallbacks%20work%20correctly%0A7.%20**Consider%20User%20Experience**%3A%20Degraded%20service%20is%20better%20than%20no%20service%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BError%20Handling%5D(%2Fpatterns%2Ferror-handling)%20-%20Comprehensive%20error%20strategies%0A-%20%5BConditional%20Branching%5D(%2Fpatterns%2Fbranching)%20-%20Dynamic%20flow%20control%0A-%20%5BCircuit%20Breaker%20Pattern%5D(%2Fpatterns%2Ferror-handling%23circuit-breaker-pattern)%20-%20Prevent%20cascading%20failures", lastUpdatedAt: 1754306376e3 }, { lazy: () => import("./assets/fallback-C7QxNL5M.js"), path: "/patterns/fallback.html", type: "mdx", filePath: "patterns/fallback.mdx", content: "%23%20Fallback%20on%20Failure%0A%0AImplement%20graceful%20degradation%20when%20operations%20fail%2C%20ensuring%20your%20workflows%20remain%20resilient%20and%20provide%20the%20best%20possible%20user%20experience%20even%20during%20failures.%0A%0A%23%23%20FallbackNode%20Interface%0A%0AThe%20%60FallbackNode%60%20interface%20allows%20custom%20fallback%20behavior%3A%0A%0A%60%60%60go%0Atype%20FallbackNode%20interface%20%7B%0A%20%20%20%20Node%0A%20%20%20%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%0A%7D%0A%60%60%60%0A%0A%23%23%20Basic%20Fallback%0A%0AReturn%20default%20values%20on%20failure%3A%0A%0A%60%60%60go%0Atype%20DefaultValueNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%7D%0A%0Afunc%20(n%20*DefaultValueNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Try%20primary%20operation%0A%20%20%20%20result%2C%20err%20%3A%3D%20fetchFromPrimarySource()%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%20%2F%2F%20Will%20trigger%20fallback%0A%20%20%20%20%7D%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%0Afunc%20(n%20*DefaultValueNode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20log.Printf(%22Primary%20source%20failed%3A%20%25v%2C%20returning%20default%22%2C%20err)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Return%20safe%20default%20value%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22status%22%3A%20%22degraded%22%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%22default_value%22%2C%0A%20%20%20%20%20%20%20%20%22error%22%3A%20err.Error()%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Cached%20Fallback%0A%0AUse%20cached%20data%20when%20fresh%20data%20is%20unavailable%3A%0A%0A%60%60%60go%0Atype%20CachedAPINode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20cache%20map%5Bstring%5DCacheEntry%0A%20%20%20%20mu%20%20%20%20sync.RWMutex%0A%7D%0A%0Atype%20CacheEntry%20struct%20%7B%0A%20%20%20%20Data%20%20%20%20%20%20any%0A%20%20%20%20Timestamp%20time.Time%0A%7D%0A%0Afunc%20(n%20*CachedAPINode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20key%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Try%20to%20fetch%20fresh%20data%0A%20%20%20%20data%2C%20err%20%3A%3D%20fetchFromAPI(key)%0A%20%20%20%20if%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Update%20cache%20on%20success%0A%20%20%20%20%20%20%20%20n.mu.Lock()%0A%20%20%20%20%20%20%20%20n.cache%5Bkey%5D%20%3D%20CacheEntry%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20Data%3A%20%20%20%20%20%20data%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20Timestamp%3A%20time.Now()%2C%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20n.mu.Unlock()%0A%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20nil%2C%20err%0A%7D%0A%0Afunc%20(n%20*CachedAPINode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20key%20%3A%3D%20prepResult.(string)%0A%20%20%20%20%0A%20%20%20%20n.mu.RLock()%0A%20%20%20%20entry%2C%20exists%20%3A%3D%20n.cache%5Bkey%5D%0A%20%20%20%20n.mu.RUnlock()%0A%20%20%20%20%0A%20%20%20%20if%20exists%20%7B%0A%20%20%20%20%20%20%20%20age%20%3A%3D%20time.Since(entry.Timestamp)%0A%20%20%20%20%20%20%20%20log.Printf(%22Returning%20cached%20data%20(age%3A%20%25v)%20due%20to%20error%3A%20%25v%22%2C%20age%2C%20err)%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%2F%2F%20Add%20metadata%20about%20cache%20usage%0A%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22data%22%3A%20%20%20%20%20%20%20entry.Data%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22cached%22%3A%20%20%20%20%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22cache_age%22%3A%20%20age.Seconds()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20%20%20%20%20%20err.Error()%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20No%20cache%20available%0A%20%20%20%20return%20nil%2C%20fmt.Errorf(%22no%20fallback%20available%3A%20%25w%22%2C%20err)%0A%7D%0A%60%60%60%0A%0A%23%23%20Multi-Level%20Fallback%0A%0ATry%20multiple%20fallback%20strategies%3A%0A%0A%60%60%60go%0Atype%20MultiLevelFallbackNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20primaryURL%20%20%20string%0A%20%20%20%20secondaryURL%20string%0A%20%20%20%20cache%20%20%20%20%20%20%20%20sync.Map%0A%7D%0A%0Afunc%20(n%20*MultiLevelFallbackNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Try%20primary%20source%0A%20%20%20%20data%2C%20err%20%3A%3D%20fetchFromURL(n.primaryURL)%0A%20%20%20%20if%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20n.cache.Store(%22last_good%22%2C%20data)%0A%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20nil%2C%20err%0A%7D%0A%0Afunc%20(n%20*MultiLevelFallbackNode)%20ExecFallback(prepResult%20any%2C%20primaryErr%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Level%201%3A%20Try%20secondary%20source%0A%20%20%20%20data%2C%20err%20%3A%3D%20fetchFromURL(n.secondaryURL)%0A%20%20%20%20if%20err%20%3D%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22Using%20secondary%20source%20due%20to%20primary%20error%3A%20%25v%22%2C%20primaryErr)%0A%20%20%20%20%20%20%20%20return%20data%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Level%202%3A%20Try%20cache%0A%20%20%20%20if%20cached%2C%20ok%20%3A%3D%20n.cache.Load(%22last_good%22)%3B%20ok%20%7B%0A%20%20%20%20%20%20%20%20log.Printf(%22Using%20cached%20data%20due%20to%20all%20sources%20failing%22)%0A%20%20%20%20%20%20%20%20return%20cached%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Level%203%3A%20Return%20minimal%20default%0A%20%20%20%20log.Printf(%22All%20fallbacks%20exhausted%2C%20returning%20minimal%20response%22)%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22status%22%3A%20%22unavailable%22%2C%0A%20%20%20%20%20%20%20%20%22message%22%3A%20%22Service%20temporarily%20unavailable%22%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Partial%20Fallback%0A%0AReturn%20partial%20results%20when%20complete%20processing%20fails%3A%0A%0A%60%60%60go%0Atype%20BatchProcessorNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20results%20%5B%5DResult%0A%20%20%20%20errors%20%20%5B%5Derror%0A%7D%0A%0Afunc%20(n%20*BatchProcessorNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20items%20%3A%3D%20prepResult.(%5B%5DItem)%0A%20%20%20%20n.results%20%3D%20make(%5B%5DResult%2C%200%2C%20len(items))%0A%20%20%20%20n.errors%20%3D%20make(%5B%5Derror%2C%200)%0A%20%20%20%20%0A%20%20%20%20for%20_%2C%20item%20%3A%3D%20range%20items%20%7B%0A%20%20%20%20%20%20%20%20result%2C%20err%20%3A%3D%20processItem(item)%0A%20%20%20%20%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20n.errors%20%3D%20append(n.errors%2C%20err)%0A%20%20%20%20%20%20%20%20%20%20%20%20continue%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20n.results%20%3D%20append(n.results%2C%20result)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20if%20len(n.errors)%20%3E%200%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22processing%20failed%3A%20%25d%20errors%22%2C%20len(n.errors))%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20return%20n.results%2C%20nil%0A%7D%0A%0Afunc%20(n%20*BatchProcessorNode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Return%20partial%20results%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22partial_results%22%3A%20n.results%2C%0A%20%20%20%20%20%20%20%20%22success_count%22%3A%20%20%20len(n.results)%2C%0A%20%20%20%20%20%20%20%20%22error_count%22%3A%20%20%20%20%20len(n.errors)%2C%0A%20%20%20%20%20%20%20%20%22errors%22%3A%20%20%20%20%20%20%20%20%20%20n.errors%2C%0A%20%20%20%20%20%20%20%20%22status%22%3A%20%20%20%20%20%20%20%20%20%20%22partial_success%22%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Circuit%20Breaker%20Fallback%0A%0APrevent%20cascading%20failures%3A%0A%0A%60%60%60go%0Atype%20CircuitBreakerNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20failures%20%20%20%20int%0A%20%20%20%20lastFailure%20time.Time%0A%20%20%20%20threshold%20%20%20int%0A%20%20%20%20timeout%20%20%20%20%20time.Duration%0A%20%20%20%20fallbackMsg%20string%0A%7D%0A%0Afunc%20(n%20*CircuitBreakerNode)%20Exec(ctx%20context.Context%2C%20prepResult%20any)%20(any%2C%20error)%20%7B%0A%20%20%20%20%2F%2F%20Check%20if%20circuit%20is%20open%0A%20%20%20%20if%20n.isCircuitOpen()%20%7B%0A%20%20%20%20%20%20%20%20return%20nil%2C%20fmt.Errorf(%22circuit%20breaker%20open%22)%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20result%2C%20err%20%3A%3D%20callService(prepResult)%0A%20%20%20%20if%20err%20!%3D%20nil%20%7B%0A%20%20%20%20%20%20%20%20n.recordFailure()%0A%20%20%20%20%20%20%20%20return%20nil%2C%20err%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20n.reset()%0A%20%20%20%20return%20result%2C%20nil%0A%7D%0A%0Afunc%20(n%20*CircuitBreakerNode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20if%20n.isCircuitOpen()%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Return%20cached%20or%20default%20response%20immediately%0A%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22status%22%3A%20%22circuit_open%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22message%22%3A%20n.fallbackMsg%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22retry_after%22%3A%20n.timeout%20-%20time.Since(n.lastFailure)%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Circuit%20not%20open%2C%20but%20request%20failed%0A%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%22status%22%3A%20%22degraded%22%2C%0A%20%20%20%20%20%20%20%20%22message%22%3A%20%22Service%20temporarily%20unavailable%22%2C%0A%20%20%20%20%7D%2C%20nil%0A%7D%0A%0Afunc%20(n%20*CircuitBreakerNode)%20isCircuitOpen()%20bool%20%7B%0A%20%20%20%20return%20n.failures%20%3E%3D%20n.threshold%20%26%26%20%0A%20%20%20%20%20%20%20%20%20%20%20time.Since(n.lastFailure)%20%3C%20n.timeout%0A%7D%0A%0Afunc%20(n%20*CircuitBreakerNode)%20recordFailure()%20%7B%0A%20%20%20%20n.failures%2B%2B%0A%20%20%20%20n.lastFailure%20%3D%20time.Now()%0A%7D%0A%0Afunc%20(n%20*CircuitBreakerNode)%20reset()%20%7B%0A%20%20%20%20n.failures%20%3D%200%0A%7D%0A%60%60%60%0A%0A%23%23%20Fallback%20with%20Metrics%0A%0ATrack%20fallback%20usage%3A%0A%0A%60%60%60go%0Atype%20MetricsFallbackNode%20struct%20%7B%0A%20%20%20%20*flyt.BaseNode%0A%20%20%20%20primaryCalls%20%20%20int64%0A%20%20%20%20fallbackCalls%20%20int64%0A%20%20%20%20lastFallback%20%20%20time.Time%0A%7D%0A%0Afunc%20(n%20*MetricsFallbackNode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20atomic.AddInt64(%26n.fallbackCalls%2C%201)%0A%20%20%20%20n.lastFallback%20%3D%20time.Now()%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Log%20metrics%0A%20%20%20%20total%20%3A%3D%20atomic.LoadInt64(%26n.primaryCalls)%20%2B%20atomic.LoadInt64(%26n.fallbackCalls)%0A%20%20%20%20fallbackRate%20%3A%3D%20float64(n.fallbackCalls)%20%2F%20float64(total)%20*%20100%0A%20%20%20%20%0A%20%20%20%20log.Printf(%22Fallback%20metrics%20-%20Rate%3A%20%25.2f%25%25%2C%20Total%20fallbacks%3A%20%25d%22%2C%20%0A%20%20%20%20%20%20%20%20fallbackRate%2C%20n.fallbackCalls)%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Return%20fallback%20data%0A%20%20%20%20return%20getDefaultResponse()%2C%20nil%0A%7D%0A%60%60%60%0A%0A%23%23%20Conditional%20Fallback%0A%0ADifferent%20fallbacks%20based%20on%20error%20type%3A%0A%0A%60%60%60go%0Afunc%20(n%20*ConditionalFallbackNode)%20ExecFallback(prepResult%20any%2C%20err%20error)%20(any%2C%20error)%20%7B%0A%20%20%20%20switch%20%7B%0A%20%20%20%20case%20errors.Is(err%2C%20ErrTimeout)%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20For%20timeouts%2C%20return%20cached%20data%0A%20%20%20%20%20%20%20%20return%20n.getCachedResponse()%2C%20nil%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20case%20errors.Is(err%2C%20ErrRateLimit)%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20For%20rate%20limits%2C%20return%20throttled%20message%0A%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22error%22%3A%20%22rate_limited%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22retry_after%22%3A%2060%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20case%20errors.Is(err%2C%20ErrNotFound)%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20For%20not%20found%2C%20return%20empty%20result%0A%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22found%22%3A%20false%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22data%22%3A%20nil%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20default%3A%0A%20%20%20%20%20%20%20%20%2F%2F%20Generic%20fallback%0A%20%20%20%20%20%20%20%20return%20map%5Bstring%5Dany%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22status%22%3A%20%22error%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22message%22%3A%20%22Service%20unavailable%22%2C%0A%20%20%20%20%20%20%20%20%7D%2C%20nil%0A%20%20%20%20%7D%0A%7D%0A%60%60%60%0A%0A%23%23%20Best%20Practices%0A%0A1.%20**Log%20Fallback%20Usage**%3A%20Track%20when%20and%20why%20fallbacks%20are%20triggered%0A2.%20**Monitor%20Fallback%20Rates**%3A%20High%20rates%20indicate%20system%20issues%0A3.%20**Set%20Appropriate%20Timeouts**%3A%20Don't%20wait%20too%20long%20before%20falling%20back%0A4.%20**Provide%20Meaningful%20Defaults**%3A%20Fallback%20data%20should%20be%20useful%0A5.%20**Document%20Fallback%20Behavior**%3A%20Make%20it%20clear%20what%20happens%20during%20failures%0A6.%20**Test%20Fallback%20Paths**%3A%20Ensure%20fallbacks%20work%20correctly%0A7.%20**Consider%20User%20Experience**%3A%20Degraded%20service%20is%20better%20than%20no%20service%0A%0A%23%23%20Next%20Steps%0A%0A-%20%5BError%20Handling%5D(%2Fpatterns%2Ferror-handling)%20-%20Comprehensive%20error%20strategies%0A-%20%5BConditional%20Branching%5D(%2Fpatterns%2Fbranching)%20-%20Dynamic%20flow%20control%0A-%20%5BCircuit%20Breaker%20Pattern%5D(%2Fpatterns%2Ferror-handling%23circuit-breaker-pattern)%20-%20Prevent%20cascading%20failures", lastUpdatedAt: 1754306376e3 }];
var primitiveColorVars = { background5: "var(--vocs-color_background5)", border: "var(--vocs-color_border)", border2: "var(--vocs-color_border2)" };
var defaultFontFamily = { "default": "system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif", mono: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace' };
var fontFamilyVars = { "default": "var(--vocs-fontFamily_default)", mono: "var(--vocs-fontFamily_mono)" };
var spaceVars = { "4": "var(--vocs-space_4)", "8": "var(--vocs-space_8)", "24": "var(--vocs-space_24)" };
var contentVars = { horizontalPadding: "var(--vocs-content_horizontalPadding)", verticalPadding: "var(--vocs-content_verticalPadding)", width: "var(--vocs-content_width)" };
var iconUrl$1 = "var(--vocs_ExternalLink_iconUrl)";
var root$11 = "vocs_ExternalLink";
const ExternalLink = forwardRef(({ className, children, hideExternalIcon, href, ...props }, ref) => {
  const { basePath } = useConfig();
  const assetBasePath = basePath;
  return jsx("a", { ref, className: clsx(className, hideExternalIcon || typeof children !== "string" ? void 0 : root$11), href, target: "_blank", rel: "noopener noreferrer", style: assignInlineVars({
    [iconUrl$1]: `url(${assetBasePath}/.vocs/icons/arrow-diagonal.svg)`
  }), ...props, children });
});
var root$10 = "vocs_Link";
var accent = "vocs_Link_accent";
var styleless = "vocs_Link_styleless";
function mergeRefs(...refs) {
  return (val) => {
    setRef(val, ...refs);
  };
}
function setRef(val, ...refs) {
  refs.forEach((ref) => {
    if (typeof ref === "function") {
      ref(val);
    } else if (ref != null) {
      ref.current = val;
    }
  });
}
const RouterLink = forwardRef((props, ref) => {
  const loadRoute = () => {
    var _a;
    return (_a = routes$1.find((route) => route.path === props.to)) == null ? void 0 : _a.lazy();
  };
  const { ref: intersectionRef, inView } = useInView();
  useEffect(() => {
    if (inView)
      loadRoute();
  }, [inView]);
  return jsx(Link$2, { ref: mergeRefs(ref, intersectionRef), ...props });
});
const Link$1 = forwardRef((props, ref) => {
  const { hideExternalIcon, href, variant = "accent" } = props;
  const { pathname } = useLocation();
  if (href == null ? void 0 : href.match(/^(www|https?)/))
    return jsx(ExternalLink, { ...props, ref, className: clsx(props.className, root$10, variant === "accent" && accent, variant === "styleless" && styleless), hideExternalIcon });
  const [before, after] = (href || "").split("#");
  const to = `${before ? before : pathname}${after ? `#${after}` : ""}`;
  return jsx(RouterLink, { ...props, ref, className: clsx(props.className, root$10, variant === "accent" && accent, variant === "styleless" && styleless), to });
});
var root$$ = "vocs_NotFound";
var divider$2 = "vocs_NotFound_divider";
var root$_ = "vocs_H1";
var root$Z = "vocs_Heading";
var slugTarget = "vocs_Heading_slugTarget";
function Heading({ level: level2, ...props }) {
  const Component = `h${level2}`;
  return jsxs(Component, { ...props, id: void 0, className: clsx(props.className, root$Z), children: [jsx("div", { id: props.id, className: slugTarget }), props.children] });
}
function H1(props) {
  return jsx(Heading, { ...props, className: clsx(props.className, root$_), level: 1 });
}
var root$Y = "vocs_Paragraph";
function Paragraph(props) {
  return jsx("p", { ...props, className: clsx(props.className, root$Y) });
}
function NotFound() {
  return jsxs("div", { className: root$$, children: [jsx(H1, { children: "Page Not Found" }), jsx("div", { style: { height: spaceVars["24"] } }), jsx("hr", { className: divider$2 }), jsx("div", { style: { height: spaceVars["24"] } }), jsx(Paragraph, { children: "The page you were looking for could not be found." }), jsx("div", { style: { height: spaceVars["8"] } }), jsx(Link$1, { href: "/", children: "Go to Home Page" })] });
}
var bannerBackgroundColor = "var(--vocs_Banner_bannerBackgroundColor)";
var bannerHeight = "var(--vocs_Banner_bannerHeight)";
var bannerTextColor = "var(--vocs_Banner_bannerTextColor)";
var root$X = "vocs_Banner";
var content$8 = "vocs_Banner_content";
var inner = "vocs_Banner_inner";
var closeButton = "vocs_Banner_closeButton";
function deserializeElement(element, key) {
  if (typeof element !== "object")
    return element;
  if (element === null)
    return element;
  if (Array.isArray(element))
    return element.map((el, i) => deserializeElement(el, i));
  const props = element.props.children ? { ...element.props, children: deserializeElement(element.props.children) } : element.props;
  return React.createElement(element.type, { ...props, key });
}
function Banner({ hide }) {
  const { banner } = useConfig();
  const ConsumerBanner = useMemo(() => {
    const content2 = (banner == null ? void 0 : banner.content) ?? "";
    if (!content2)
      return null;
    if (typeof content2 !== "string")
      return () => deserializeElement(content2);
    const { default: MDXBanner } = runSync(content2, { ...runtime, Fragment });
    return MDXBanner;
  }, [banner]);
  if (!ConsumerBanner)
    return null;
  return jsx("div", { className: clsx$1(root$X), style: assignInlineVars({
    [bannerBackgroundColor]: banner == null ? void 0 : banner.backgroundColor,
    [bannerTextColor]: banner == null ? void 0 : banner.textColor
  }), children: jsxs("div", { className: clsx$1(inner), children: [jsx("div", { className: clsx$1(content$8), children: jsx(ConsumerBanner, {}) }), (banner == null ? void 0 : banner.dismissable) !== "false" && jsx("button", { className: clsx$1(closeButton), onClick: hide, type: "button", children: jsx(Cross1Icon, { width: 14, height: 14 }) })] }) });
}
var root$W = "vocs_Content";
function Content$2({ children, className }) {
  return jsx("article", { className: clsx(className, root$W), children });
}
const Layout = ({ children }) => children;
const Footer$1 = ({ children }) => children;
const TopNavEnd = ({ children }) => children;
function getActiveNavIds({ items: items2, pathname }) {
  const path = pathname.replace(/\.html$/, "");
  const activeIds = [];
  for (const item2 of items2) {
    if (item2.link && path.startsWith(item2.match || item2.link))
      activeIds.push(item2.id);
    else if (item2.items) {
      const activeChildItems = getActiveNavIds({ items: item2.items, pathname });
      if (activeChildItems.length > 0)
        activeIds.push(item2.id);
    }
  }
  return activeIds;
}
function useActiveNavIds({ items: items2, pathname }) {
  return useMemo(() => getActiveNavIds({ items: items2, pathname }), [items2, pathname]);
}
function usePageData() {
  const pageData = useContext(PageDataContext);
  if (!pageData)
    throw new Error("`usePageData` must be used within `PageDataContext.Provider`.");
  return pageData;
}
const PageDataContext = createContext(void 0);
function useSidebar() {
  const { pathname } = useLocation();
  const config2 = useConfig();
  const { sidebar: sidebar2 } = config2;
  if (!sidebar2)
    return { items: [] };
  if (Array.isArray(sidebar2))
    return { items: sidebar2 };
  const sidebarKey = useMemo(() => {
    const keys = Object.keys(sidebar2).filter((key) => pathname.startsWith(key));
    return keys[keys.length - 1];
  }, [sidebar2, pathname]);
  if (!sidebarKey)
    return { items: [] };
  if (Array.isArray(sidebar2[sidebarKey]))
    return { key: sidebarKey, items: sidebar2[sidebarKey] };
  return { ...sidebar2[sidebarKey], key: sidebarKey };
}
function useLayout() {
  const { aiCta } = useConfig();
  const sidebar2 = useSidebar();
  const { frontmatter } = usePageData();
  const { layout: layout_, showLogo, showAiCta, showOutline, showSidebar, showTopNav } = frontmatter || {};
  const layout = layout_ ?? "docs";
  return {
    layout,
    get showLogo() {
      if (typeof showLogo !== "undefined")
        return showLogo;
      return true;
    },
    get showAiCta() {
      if (typeof showAiCta !== "undefined")
        return showAiCta;
      if (aiCta === false)
        return false;
      return layout === "docs";
    },
    get showOutline() {
      if (typeof showOutline !== "undefined")
        return showOutline;
      return layout === "docs";
    },
    get showSidebar() {
      if (sidebar2.items.length === 0)
        return false;
      if (typeof showSidebar !== "undefined")
        return showSidebar;
      if (layout === "minimal")
        return false;
      if (layout === "landing")
        return false;
      return true;
    },
    get showTopNav() {
      if (typeof showTopNav !== "undefined")
        return showTopNav;
      return true;
    }
  };
}
const getSearchIndex = async () => JSON.stringify(await (await fetch("/.vocs/search-index-604baed6.json")).json());
let promise;
function useSearchIndex() {
  const [searchIndex, setSearchIndex] = useState();
  useEffect(() => {
    (async () => {
      if (!promise)
        promise = getSearchIndex();
      const json = await promise;
      const searchIndex2 = MiniSearch.loadJSON(json, {
        fields: ["title", "titles", "text"],
        searchOptions: {
          boost: { title: 4, text: 2, titles: 1 },
          fuzzy: 0.2,
          prefix: true
          // ...(theme.value.search?.provider === 'local' &&
          //   theme.value.search.options?.miniSearch?.searchOptions),
        },
        storeFields: ["href", "html", "isPage", "text", "title", "titles"]
        // ...(theme.value.search?.provider === 'local' &&
        //   theme.value.search.options?.miniSearch?.options),
      });
      setSearchIndex(searchIndex2);
    })();
  }, []);
  useEffect(() => {
    return;
  }, []);
  return searchIndex;
}
var search = "vocs_DesktopSearch_search";
var searchCommand = "vocs_DesktopSearch_searchCommand";
function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const timer = setTimeout(() => setDebouncedValue(value), delay);
    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);
  return debouncedValue;
}
function useLocalStorage(key, defaultValue) {
  const [value, setValue] = useState();
  useEffect(() => {
    const initialValue = getItem$1(key);
    if (typeof initialValue === "undefined" || initialValue === null) {
      setValue(defaultValue);
    } else {
      setValue(initialValue);
    }
  }, [defaultValue, key]);
  const setter = useCallback((updater) => {
    setValue((old) => {
      let newVal;
      if (typeof updater === "function")
        newVal = updater(old);
      else
        newVal = updater;
      try {
        localStorage.setItem(key, JSON.stringify(newVal));
      } catch {
      }
      return newVal;
    });
  }, [key]);
  return [value, setter];
}
function getItem$1(key) {
  try {
    const itemValue = localStorage.getItem(key);
    if (typeof itemValue === "string") {
      return JSON.parse(itemValue);
    }
    return void 0;
  } catch {
    return void 0;
  }
}
function useSessionStorage(key, defaultValue) {
  const [value, setValue] = useState();
  useEffect(() => {
    const initialValue = getItem(key);
    if (typeof initialValue === "undefined" || initialValue === null) {
      setValue(defaultValue);
    } else {
      setValue(initialValue);
    }
  }, [defaultValue, key]);
  const setter = useCallback((updater) => {
    setValue((old) => {
      let newVal;
      if (typeof updater === "function")
        newVal = updater(old);
      else
        newVal = updater;
      try {
        sessionStorage.setItem(key, JSON.stringify(newVal));
      } catch {
      }
      return newVal;
    });
  }, [key]);
  return [value, setter];
}
function getItem(key) {
  try {
    const itemValue = sessionStorage.getItem(key);
    if (typeof itemValue === "string") {
      return JSON.parse(itemValue);
    }
    return void 0;
  } catch {
    return void 0;
  }
}
var visuallyHidden = "vocs_utils_visuallyHidden";
var root$V = "vocs_Kbd";
function Kbd(props) {
  return jsx("kbd", { ...props, className: clsx(props.className, root$V) });
}
var root$U = "vocs_KeyboardShortcut";
var kbdGroup = "vocs_KeyboardShortcut_kbdGroup";
function KeyboardShortcut(props) {
  const { description: description2, keys } = props;
  return jsxs("span", { className: root$U, children: [description2, jsx("span", { className: kbdGroup, children: keys.map((key) => jsx(Kbd, { children: key }, key)) })] });
}
var root$T = "vocs_SearchDialog";
var overlay = "vocs_SearchDialog_overlay";
var searchBox = "vocs_SearchDialog_searchBox";
var searchInput = "vocs_SearchDialog_searchInput";
var searchInputIcon = "vocs_SearchDialog_searchInputIcon";
var searchInputIconDesktop = "vocs_SearchDialog_searchInputIconDesktop";
var searchInputIconMobile = "vocs_SearchDialog_searchInputIconMobile";
var results = "vocs_SearchDialog_results";
var result = "vocs_SearchDialog_result";
var resultSelected = "vocs_SearchDialog_resultSelected";
var resultIcon = "vocs_SearchDialog_resultIcon";
var titles = "vocs_SearchDialog_titles";
var title$4 = "vocs_SearchDialog_title";
var titleIcon = "vocs_SearchDialog_titleIcon";
var content$7 = "vocs_SearchDialog_content";
var excerpt = "vocs_SearchDialog_excerpt";
var searchShortcuts = "vocs_SearchDialog_searchShortcuts";
function SearchDialog(props) {
  const { search: searchOptions } = useConfig();
  const navigate = useNavigate();
  const inputRef = useRef(null);
  const listRef = useRef(null);
  const [filterText, setFilterText] = useSessionStorage("filterText", "");
  const searchTerm = useDebounce(filterText, 200);
  const searchIndex = useSearchIndex();
  const [selectedIndex, setSelectedIndex] = useState(-1);
  const [disableMouseOver, setDisableMouseOver] = useState(false);
  const [showDetailView, setShowDetailView] = useLocalStorage("showDetailView", true);
  const results$1 = useMemo(() => {
    if (!searchIndex)
      return [];
    if (!searchTerm) {
      setSelectedIndex(-1);
      return [];
    }
    setSelectedIndex(0);
    return searchIndex.search(searchTerm, searchOptions).slice(0, 16);
  }, [searchIndex, searchOptions, searchTerm]);
  const resultsCount = results$1.length;
  const selectedResult = results$1[selectedIndex];
  const highlight = useCallback(() => {
    var _a, _b, _c;
    if (!listRef.current)
      return;
    const terms = /* @__PURE__ */ new Set();
    for (const result2 of results$1) {
      for (const term in result2.match) {
        terms.add(term);
      }
    }
    const mark = new Mark(listRef.current);
    mark.unmark({
      done() {
        mark == null ? void 0 : mark.markRegExp(formMarkRegex(terms));
      }
    });
    const excerptElements = listRef.current.querySelectorAll(`.${excerpt}`);
    for (const element of excerptElements) {
      (_a = element.querySelector('mark[data-markjs="true"]')) == null ? void 0 : _a.scrollIntoView({ block: "center" });
    }
    (_c = (_b = listRef.current) == null ? void 0 : _b.firstElementChild) == null ? void 0 : _c.scrollIntoView({ block: "start" });
  }, [results$1]);
  useEffect(() => {
    if (!props.open)
      return;
    function keyDownHandler(event) {
      var _a;
      switch (event.key) {
        case "ArrowDown": {
          event.preventDefault();
          setSelectedIndex((index) => {
            var _a2;
            let nextIndex = index + 1;
            if (nextIndex >= resultsCount)
              nextIndex = 0;
            const element = (_a2 = listRef.current) == null ? void 0 : _a2.children[nextIndex];
            element == null ? void 0 : element.scrollIntoView({ block: "nearest" });
            return nextIndex;
          });
          setDisableMouseOver(true);
          break;
        }
        case "ArrowUp": {
          event.preventDefault();
          setSelectedIndex((index) => {
            var _a2;
            let nextIndex = index - 1;
            if (nextIndex < 0)
              nextIndex = resultsCount - 1;
            const element = (_a2 = listRef.current) == null ? void 0 : _a2.children[nextIndex];
            element == null ? void 0 : element.scrollIntoView({ block: "nearest" });
            return nextIndex;
          });
          setDisableMouseOver(true);
          break;
        }
        case "Backspace": {
          if (!event.metaKey)
            return;
          event.preventDefault();
          setFilterText("");
          (_a = inputRef.current) == null ? void 0 : _a.focus();
          break;
        }
        case "Enter": {
          if (event.target instanceof HTMLButtonElement && event.target.type !== "submit")
            return;
          if (!selectedResult)
            return;
          event.preventDefault();
          navigate(selectedResult.href);
          props.onClose();
          break;
        }
      }
    }
    window.addEventListener("keydown", keyDownHandler);
    return () => {
      window.removeEventListener("keydown", keyDownHandler);
    };
  }, [navigate, resultsCount, setFilterText, selectedResult, props.open, props.onClose]);
  useEffect(() => {
    if (searchTerm === "")
      return;
    if (!listRef.current)
      return;
    highlight();
  }, [highlight, searchTerm]);
  return jsxs(Dialog.Portal, { children: [jsx(Dialog.Overlay, { className: overlay }), jsxs(Dialog.Content, { onOpenAutoFocus: (event) => {
    if (inputRef.current) {
      event.preventDefault();
      inputRef.current.focus();
    }
    highlight();
  }, onCloseAutoFocus: () => {
    setSelectedIndex(0);
  }, className: root$T, "aria-describedby": void 0, children: [jsx(Dialog.Title, { className: visuallyHidden, children: "Search" }), jsxs("form", { className: searchBox, children: [jsx("button", { "aria-label": "Close search dialog", type: "button", onClick: () => props.onClose(), className: searchInputIconMobile, children: jsx(ArrowLeftIcon, { className: searchInputIcon, height: 20, width: 20 }) }), jsx(Label.Root, { htmlFor: "search-input", children: jsx(MagnifyingGlassIcon, { "aria-label": "Search", className: clsx$1(searchInputIcon, searchInputIconDesktop), height: 20, width: 20 }) }), jsx("input", { ref: inputRef, tabIndex: 0, className: searchInput, id: "search-input", onChange: (event) => setFilterText(event.target.value), placeholder: "Search", type: "search", value: filterText }), jsx("button", { "aria-label": "Toggle detail view", type: "button", onClick: () => setShowDetailView((x) => !x), children: jsx(ListBulletIcon, { className: searchInputIcon, height: 20, width: 20 }) }), jsx("button", { "aria-label": "Reset search", type: "button", className: searchInputIcon, onClick: () => {
    var _a;
    setFilterText("");
    (_a = inputRef.current) == null ? void 0 : _a.focus();
  }, children: "⌫" })] }), jsxs("ul", { className: results, role: results$1.length ? "listbox" : void 0, onMouseMove: () => setDisableMouseOver(false), ref: listRef, children: [searchTerm && results$1.length === 0 && jsxs("li", { children: ['No results for "', jsx("span", { children: searchTerm }), '"'] }), results$1.map((result$1, index) => {
    var _a;
    return (
      // biome-ignore lint/a11y/useFocusableInteractive:
      jsx("li", {
        // biome-ignore lint/a11y/noNoninteractiveElementToInteractiveRole:
        // biome-ignore lint/a11y/useSemanticElements:
        role: "option",
        className: clsx$1(result, index === selectedIndex && resultSelected),
        "aria-selected": index === selectedIndex,
        "aria-label": [...result$1.titles.filter((title2) => Boolean(title2)), result$1.title].join(" > "),
        children: jsxs(Link$2, { to: result$1.href, onClick: (event) => {
          if (event.metaKey)
            return;
          props.onClose();
        }, onMouseEnter: () => !disableMouseOver && setSelectedIndex(index), onFocus: () => setSelectedIndex(index), children: [jsxs("div", { className: titles, children: [result$1.isPage ? jsx(FileIcon, { className: resultIcon }) : jsx("span", { className: resultIcon, children: "#" }), result$1.titles.filter((title2) => Boolean(title2)).map((title2) => jsxs("span", { className: title$4, children: [jsx("span", {
          // biome-ignore lint/security/noDangerouslySetInnerHtml:
          dangerouslySetInnerHTML: { __html: title2 }
        }), jsx(ChevronRightIcon, { className: titleIcon })] }, title2)), jsx("span", { className: title$4, children: jsx("span", {
          // biome-ignore lint/security/noDangerouslySetInnerHtml:
          dangerouslySetInnerHTML: { __html: result$1.title }
        }) })] }), showDetailView && ((_a = result$1.text) == null ? void 0 : _a.trim()) && jsx("div", { className: excerpt, children: jsx(Content$2, { className: content$7, children: jsx("div", {
          // biome-ignore lint/security/noDangerouslySetInnerHtml:
          dangerouslySetInnerHTML: { __html: result$1.html }
        }) }) })] })
      }, result$1.id)
    );
  })] }), jsxs("div", { className: searchShortcuts, children: [jsx(KeyboardShortcut, { description: "Navigate", keys: ["↑", "↓"] }), jsx(KeyboardShortcut, { description: "Select", keys: ["enter"] }), jsx(KeyboardShortcut, { description: "Close", keys: ["esc"] }), jsx(KeyboardShortcut, { description: "Reset", keys: ["⌘", "⌫"] })] })] })] });
}
function formMarkRegex(terms) {
  return new RegExp([...terms].sort((a, b) => b.length - a.length).map((term) => {
    return `(${term.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d")})`;
  }).join("|"), "gi");
}
function DesktopSearch() {
  useSearchIndex();
  const [open, setOpen] = useState(false);
  useEffect(() => {
    function keyDownHandler(event) {
      const isInput = document.activeElement instanceof HTMLElement && (["input", "select", "textarea"].includes(document.activeElement.tagName.toLowerCase()) || document.activeElement.isContentEditable);
      if (event.key === "/" && !open && !isInput) {
        event.preventDefault();
        setOpen(true);
      } else if (event.metaKey === true && event.key === "k") {
        event.preventDefault();
        setOpen((x) => !x);
      }
    }
    window.addEventListener("keydown", keyDownHandler);
    return () => {
      window.removeEventListener("keydown", keyDownHandler);
    };
  }, [open]);
  return jsxs(Dialog.Root, { open, onOpenChange: setOpen, children: [jsx(Dialog.Trigger, { asChild: true, children: jsxs("button", { className: search, type: "button", children: [jsx(MagnifyingGlassIcon, { style: { marginTop: 2 } }), "Search...", jsx("div", { className: searchCommand, children: jsx("div", { style: {
    background: "currentColor",
    transform: "rotate(45deg)",
    width: 1.5,
    borderRadius: 2,
    height: "100%"
  } }) })] }) }), jsx(SearchDialog, { open, onClose: () => setOpen(false) })] });
}
var root$S = "vocs_DesktopTopNav";
var withLogo = "vocs_DesktopTopNav_withLogo";
var content$6 = "vocs_DesktopTopNav_content";
var curtain$1 = "vocs_DesktopTopNav_curtain";
var group$2 = "vocs_DesktopTopNav_group";
var item$4 = "vocs_DesktopTopNav_item";
var logo$2 = "vocs_DesktopTopNav_logo";
var logoWrapper$1 = "vocs_DesktopTopNav_logoWrapper";
var section$2 = "vocs_DesktopTopNav_section";
var root$R = "vocs_Logo";
var logoDark = "vocs_Logo_logoDark";
var logoLight = "vocs_Logo_logoLight";
function Logo({ className }) {
  const { logoUrl } = useConfig();
  if (!logoUrl)
    return null;
  return jsx(Fragment$1, { children: typeof logoUrl === "string" ? jsx("img", { alt: "Logo", className: clsx$1(className, root$R), src: logoUrl }) : jsxs(Fragment$1, { children: [jsx("img", { alt: "Logo", className: clsx$1(className, root$R, logoDark), src: logoUrl.dark }), jsx("img", { alt: "Logo", className: clsx$1(className, root$R, logoLight), src: logoUrl.light })] }) });
}
var logoImage = "vocs_NavLogo_logoImage";
var title$3 = "vocs_NavLogo_title";
function NavLogo() {
  const config2 = useConfig();
  if (config2.logoUrl)
    return jsx(Logo, { className: logoImage });
  return jsx("div", { className: title$3, children: config2.title });
}
var root$Q = "vocs_NavigationMenu";
var list$1 = "vocs_NavigationMenu_list";
var link$2 = "vocs_NavigationMenu_link";
var item$3 = "vocs_NavigationMenu_item";
var chevronDownIcon$1 = "var(--vocs_NavigationMenu_chevronDownIcon)";
var trigger$1 = "vocs_NavigationMenu_trigger vocs_NavigationMenu_link";
var content$5 = "vocs_NavigationMenu_content";
const Root$2 = (props) => jsx(NavigationMenu.Root, { ...props, className: clsx$1(props.className, root$Q) });
const List$2 = (props) => jsx(NavigationMenu.List, { ...props, className: clsx$1(props.className, list$1) });
const Link = ({ active, children, className, href }) => jsx(NavigationMenu.Link, { asChild: true, children: jsx(Link$1, { "data-active": active, className: clsx$1(className, link$2), href, variant: "styleless", children }) });
const Item = (props) => jsx(NavigationMenu.Item, { ...props, className: clsx$1(props.className, item$3) });
const Trigger$1 = ({ active, className, ...props }) => {
  const { basePath } = useConfig();
  const assetBasePath = basePath;
  return jsx(NavigationMenu.Trigger, { ...props, "data-active": active, className: clsx$1(className, trigger$1), style: assignInlineVars({
    [chevronDownIcon$1]: `url(${assetBasePath}/.vocs/icons/chevron-down.svg)`
  }) });
};
const Content$1 = (props) => jsx(NavigationMenu.Content, { ...props, className: clsx$1(props.className, content$5) });
DesktopTopNav.Curtain = Curtain$1;
function DesktopTopNav() {
  var _a;
  const config2 = useConfig();
  const { showLogo, showSidebar } = useLayout();
  return jsxs("div", { className: clsx$1(root$S, showLogo && !showSidebar && withLogo), children: [jsx(DesktopSearch, {}), showLogo && jsx("div", { className: logoWrapper$1, children: jsx("div", { className: logo$2, children: jsx(RouterLink, { to: "/", style: { alignItems: "center", display: "flex", height: "56px", marginTop: "4px" }, children: jsx(NavLogo, {}) }) }) }), jsx("div", { className: section$2 }), jsx("div", { className: section$2, children: (((_a = config2.topNav) == null ? void 0 : _a.length) || 0) > 0 && jsx("div", { className: group$2, children: jsx(Navigation$2, {}) }) })] });
}
function Curtain$1() {
  return jsx("div", { className: curtain$1 });
}
function Navigation$2() {
  const { topNav } = useConfig();
  if (!topNav)
    return null;
  const { pathname } = useLocation();
  const activeIds = useActiveNavIds({ pathname, items: topNav });
  return jsx(Root$2, { delayDuration: 0, children: jsxs(List$2, { children: [topNav.map((item2, i) => {
    if (item2.element)
      return deserializeElement(item2.element);
    if (item2.link)
      return jsx(Link, { active: activeIds.includes(item2.id), className: item$4, href: item2.link, children: item2.text }, i);
    if (item2.items)
      return jsxs(Item, { className: item$4, children: [jsx(Trigger$1, { active: activeIds.includes(item2.id), children: item2.text }), jsx(Content$1, { className: content$6, children: jsx(NavigationMenuContent$1, { items: item2.items }) })] }, i);
    return null;
  }), jsx(TopNavEnd, {})] }) });
}
function NavigationMenuContent$1({ items: items2 }) {
  const { pathname } = useLocation();
  const activeIds = useActiveNavIds({ pathname, items: items2 });
  return jsx("ul", { children: items2 == null ? void 0 : items2.map((item2, i) => jsx(Link, { active: activeIds.includes(item2.id), href: item2.link, children: item2.text }, i)) });
}
function useEditLink() {
  const pageData = usePageData();
  const config2 = useConfig();
  return useMemo(() => {
    const { pattern = "", text = "Edit page" } = config2.editLink ?? {};
    let url = "";
    if (typeof pattern === "function")
      url = "";
    else if (pageData.filePath)
      url = pattern.replace(/:path/g, pageData.filePath);
    return { url, text };
  }, [config2.editLink, pageData.filePath]);
}
function useMounted() {
  const [mounted, setMounted] = useState(false);
  useEffect(() => {
    setMounted(true);
  }, []);
  return mounted;
}
var root$P = "vocs_Footer";
var container = "vocs_Footer_container";
var editLink = "vocs_Footer_editLink";
var lastUpdated = "vocs_Footer_lastUpdated";
var navigation$2 = "vocs_Footer_navigation";
var navigationIcon = "vocs_Footer_navigationIcon";
var navigationIcon_left = "vocs_Footer_navigationIcon_left";
var navigationIcon_right = "vocs_Footer_navigationIcon_right";
var navigationItem$1 = "vocs_Footer_navigationItem";
var navigationItem_left = "vocs_Footer_navigationItem_left";
var navigationItem_right = "vocs_Footer_navigationItem_right";
var navigationText = "vocs_Footer_navigationText";
var navigationTextInner = "vocs_Footer_navigationTextInner";
var sizeVar = "var(--vocs_Icon_size)";
var root$O = "vocs_Icon";
function Icon({ className, label, icon: Icon2, size, style }) {
  return jsx("div", { "aria-label": label, className: clsx$1(root$O, className), role: "img", style: {
    ...style,
    ...assignInlineVars({ [sizeVar]: size })
  }, children: jsx(Icon2, { height: size, width: size }) });
}
var root$N = "vocs_Socials";
var button$1 = "vocs_Socials_button";
var icon$1 = "vocs_Socials_icon";
function Discord() {
  return jsxs("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 127.14 96.36", children: [jsx("title", { children: "Discord" }), jsx("g", { id: "图层_2", "data-name": "图层 2", children: jsx("g", { id: "Discord_Logos", "data-name": "Discord Logos", children: jsx("g", { id: "Discord_Logo_-_Large_-_White", "data-name": "Discord Logo - Large - White", children: jsx("path", { d: "M107.7,8.07A105.15,105.15,0,0,0,81.47,0a72.06,72.06,0,0,0-3.36,6.83A97.68,97.68,0,0,0,49,6.83,72.37,72.37,0,0,0,45.64,0,105.89,105.89,0,0,0,19.39,8.09C2.79,32.65-1.71,56.6.54,80.21h0A105.73,105.73,0,0,0,32.71,96.36,77.7,77.7,0,0,0,39.6,85.25a68.42,68.42,0,0,1-10.85-5.18c.91-.66,1.8-1.34,2.66-2a75.57,75.57,0,0,0,64.32,0c.87.71,1.76,1.39,2.66,2a68.68,68.68,0,0,1-10.87,5.19,77,77,0,0,0,6.89,11.1A105.25,105.25,0,0,0,126.6,80.22h0C129.24,52.84,122.09,29.11,107.7,8.07ZM42.45,65.69C36.18,65.69,31,60,31,53s5-12.74,11.43-12.74S54,46,53.89,53,48.84,65.69,42.45,65.69Zm42.24,0C78.41,65.69,73.25,60,73.25,53s5-12.74,11.44-12.74S96.23,46,96.12,53,91.08,65.69,84.69,65.69Z", fill: "currentColor" }) }) }) })] });
}
function GitHub() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 98 96", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "GitHub" }), jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M48.854 0C21.839 0 0 22 0 49.217c0 21.756 13.993 40.172 33.405 46.69 2.427.49 3.316-1.059 3.316-2.362 0-1.141-.08-5.052-.08-9.127-13.59 2.934-16.42-5.867-16.42-5.867-2.184-5.704-5.42-7.17-5.42-7.17-4.448-3.015.324-3.015.324-3.015 4.934.326 7.523 5.052 7.523 5.052 4.367 7.496 11.404 5.378 14.235 4.074.404-3.178 1.699-5.378 3.074-6.6-10.839-1.141-22.243-5.378-22.243-24.283 0-5.378 1.94-9.778 5.014-13.2-.485-1.222-2.184-6.275.486-13.038 0 0 4.125-1.304 13.426 5.052a46.97 46.97 0 0 1 12.214-1.63c4.125 0 8.33.571 12.213 1.63 9.302-6.356 13.427-5.052 13.427-5.052 2.67 6.763.97 11.816.485 13.038 3.155 3.422 5.015 7.822 5.015 13.2 0 18.905-11.404 23.06-22.324 24.283 1.78 1.548 3.316 4.481 3.316 9.126 0 6.6-.08 11.897-.08 13.526 0 1.304.89 2.853 3.316 2.364 19.412-6.52 33.405-24.935 33.405-46.691C97.707 22 75.788 0 48.854 0z", fill: "currentColor" })] });
}
function Telegram() {
  return jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "100%", height: "100%", viewBox: "0 0 50 50", children: [jsx("title", { children: "Telegram" }), jsx("path", { d: "M25 2c12.703 0 23 10.297 23 23S37.703 48 25 48 2 37.703 2 25 12.297 2 25 2zm7.934 32.375c.423-1.298 2.405-14.234 2.65-16.783.074-.772-.17-1.285-.648-1.514-.578-.278-1.434-.139-2.427.219-1.362.491-18.774 7.884-19.78 8.312-.954.405-1.856.847-1.856 1.487 0 .45.267.703 1.003.966.766.273 2.695.858 3.834 1.172 1.097.303 2.346.04 3.046-.395.742-.461 9.305-6.191 9.92-6.693.614-.502 1.104.141.602.644-.502.502-6.38 6.207-7.155 6.997-.941.959-.273 1.953.358 2.351.721.454 5.906 3.932 6.687 4.49.781.558 1.573.811 2.298.811.725 0 1.107-.955 1.468-2.064z", fill: "currentColor" })] });
}
function Warpcast() {
  return jsxs("svg", { width: "32", height: "32", viewBox: "0 0 32 32", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Warpcast" }), jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M7.92028 31.9901H24.0698C28.4371 31.9901 31.9901 28.4373 31.9901 24.0699V7.92053C31.9901 3.55319 28.4371 0.000137329 24.0698 0.000137329H7.92028C3.55304 0.000137329 0 3.55319 0 7.92053V24.0699C0 28.4373 3.55304 31.9901 7.92028 31.9901ZM19.4134 16.048L20.9908 10.124H25.1383L21.2924 23.2218H17.7062L15.9951 17.1397L14.284 23.2218H10.7055L6.85115 10.124H10.999L12.5915 16.0916L14.1891 10.124H17.8309L19.4134 16.048Z", fill: "currentColor" })] });
}
function X() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 1200 1227", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "X" }), jsx("path", { d: "M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z", fill: "currentColor" })] });
}
const iconsForIcon = {
  discord: Discord,
  github: GitHub,
  telegram: Telegram,
  warpcast: Warpcast,
  x: X
};
const sizesForType = {
  discord: "18px",
  github: "17px",
  telegram: "17px",
  warpcast: "17px",
  x: "16px"
};
function Socials() {
  const config2 = useConfig();
  if (!config2.socials)
    return null;
  if (config2.socials.length === 0)
    return null;
  return jsx("div", { className: root$N, children: config2.socials.map((social, i) => jsxs(Fragment, { children: [i !== 0 && jsx("div", { style: {
    width: "1px",
    marginTop: spaceVars[4],
    marginBottom: spaceVars[4],
    backgroundColor: primitiveColorVars.border
  } }), jsx("a", { className: button$1, href: social.link, target: "_blank", rel: "noopener noreferrer", children: jsx(Icon, { className: icon$1, label: social.label, icon: iconsForIcon[social.icon], size: sizesForType[social.icon] || "20px" }) })] }, i)) });
}
function ArrowLeft() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 72 60", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Arrow Left" }), jsx("path", { d: "M0.325684 29.7461C0.325684 30.8203 0.813963 31.8457 1.69286 32.6758L26.8882 57.8223C27.7671 58.6524 28.7437 59.043 29.7691 59.043C31.9175 59.043 33.5777 57.4317 33.5777 55.2344C33.5777 54.209 33.2359 53.1836 32.5035 52.5L25.7652 45.5176L9.26126 30.6738L8.38236 32.7734L21.3706 33.7012H67.4644C69.7593 33.7012 71.3706 32.041 71.3706 29.7461C71.3706 27.4512 69.7593 25.791 67.4644 25.791H21.3706L8.38236 26.7188L9.26126 28.8672L25.7652 13.9746L32.5035 6.99221C33.2359 6.30861 33.5777 5.28322 33.5777 4.25782C33.5777 2.06052 31.9175 0.449219 29.7691 0.449219C28.7437 0.449219 27.7671 0.839814 26.8882 1.66991L1.69286 26.8164C0.813963 27.6465 0.325684 28.6719 0.325684 29.7461Z", fill: "currentColor" })] });
}
function ArrowRight() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 72 60", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Arrow Right" }), jsx("path", { d: "M71.3706 29.7461C71.3706 28.6719 70.8824 27.6465 70.0035 26.8164L44.8081 1.66991C43.9292 0.839814 42.9527 0.449219 41.9273 0.449219C39.7789 0.449219 38.1187 2.06052 38.1187 4.25782C38.1187 5.28322 38.4605 6.30861 39.1929 6.99221L45.9312 13.9746L62.4351 28.8672L63.314 26.7188L50.3257 25.791H4.23196C1.93706 25.791 0.325684 27.4512 0.325684 29.7461C0.325684 32.041 1.93706 33.7012 4.23196 33.7012H50.3257L63.314 32.7734L62.4351 30.6738L45.9312 45.5176L39.1929 52.5C38.4605 53.1836 38.1187 54.209 38.1187 55.2344C38.1187 57.4317 39.7789 59.043 41.9273 59.043C42.9527 59.043 43.9292 58.6524 44.8081 57.8223L70.0035 32.6758C70.8824 31.8457 71.3706 30.8203 71.3706 29.7461Z", fill: "currentColor" })] });
}
function Footer() {
  const { layout } = useLayout();
  const mounted = useMounted();
  const pageData = usePageData();
  const lastUpdatedAtDate = useMemo(() => pageData.lastUpdatedAt ? new Date(pageData.lastUpdatedAt) : void 0, [pageData.lastUpdatedAt]);
  const lastUpdatedAtISOString = useMemo(() => lastUpdatedAtDate == null ? void 0 : lastUpdatedAtDate.toISOString(), [lastUpdatedAtDate]);
  return jsxs("footer", { className: root$P, "data-layout": layout, children: [layout === "docs" && jsxs(Fragment$1, { children: [jsxs("div", { className: container, children: [jsx(EditLink, {}), mounted && pageData.lastUpdatedAt && jsxs("div", { className: lastUpdated, children: ["Last updated:", " ", jsx("time", { dateTime: lastUpdatedAtISOString, children: new Intl.DateTimeFormat(void 0, {
    dateStyle: "short",
    timeStyle: "short"
  }).format(lastUpdatedAtDate) })] })] }), jsx(Navigation$1, {})] }), layout !== "docs" && jsx(Socials, {}), jsx(Footer$1, {})] });
}
function EditLink() {
  const editLink$1 = useEditLink();
  if (!editLink$1.url)
    return null;
  return jsx("div", { children: jsxs(Link$1, { className: editLink, href: editLink$1.url, children: [jsx(Pencil2Icon, {}), " ", editLink$1.text] }) });
}
function Navigation$1() {
  const mounted = useMounted();
  const sidebar2 = useSidebar();
  const { pathname } = useLocation();
  const flattenedSidebar = useMemo(() => flattenSidebar(sidebar2.items || []).filter((item2) => item2.link), [sidebar2]);
  const currentPageIndex = useMemo(() => flattenedSidebar.findIndex((item2) => item2.link === pathname), [flattenedSidebar, pathname]);
  const [prevPage, nextPage] = useMemo(() => {
    if (currentPageIndex < 0)
      return [];
    if (currentPageIndex === 0)
      return [null, flattenedSidebar[currentPageIndex + 1]];
    if (currentPageIndex === flattenedSidebar.length - 1)
      return [flattenedSidebar[currentPageIndex - 1], null];
    return [flattenedSidebar[currentPageIndex - 1], flattenedSidebar[currentPageIndex + 1]];
  }, [currentPageIndex, flattenedSidebar]);
  const navigate = useNavigate();
  useEffect(() => {
    let index = currentPageIndex;
    let isListening = false;
    const keydown = (event) => {
      if (event.code === "ShiftLeft")
        isListening = true;
      if (isListening) {
        const nextPage2 = flattenedSidebar[index + 1];
        const prevPage2 = flattenedSidebar[index - 1];
        if (event.code === "ArrowRight" && (nextPage2 == null ? void 0 : nextPage2.link)) {
          const isExternalLink = !nextPage2.link.match(/^(\.*\/|#)/);
          if (isExternalLink)
            window.open(nextPage2.link, "noopener,noreferrer");
          else
            navigate(nextPage2.link);
          index++;
        }
        if (event.code === "ArrowLeft" && (prevPage2 == null ? void 0 : prevPage2.link)) {
          const isExternalLink = !prevPage2.link.match(/^(\.*\/|#)/);
          if (isExternalLink)
            window.open(prevPage2.link, "noopener,noreferrer");
          else
            navigate(prevPage2.link);
          index--;
        }
      }
    };
    const keyup = (event) => {
      if (event.code === "ShiftLeft")
        isListening = false;
    };
    window.addEventListener("keydown", keydown);
    window.addEventListener("keyup", keyup);
    return () => {
      window.removeEventListener("keydown", keydown);
      window.removeEventListener("keyup", keyup);
    };
  }, []);
  if (!mounted)
    return null;
  return jsxs("div", { className: navigation$2, children: [prevPage ? jsxs(Link$1, { className: clsx$1(navigationItem$1, navigationItem_left), href: prevPage.link, variant: "styleless", children: [jsxs("div", { className: navigationText, children: [jsx("div", { className: clsx$1(navigationIcon, navigationIcon_left), style: assignInlineVars({ [sizeVar]: "0.75em" }), children: jsx(Icon, { label: "Previous", icon: ArrowLeft }) }), jsx("div", { className: navigationTextInner, children: prevPage.text })] }), jsx(KeyboardShortcut, { description: "Previous", keys: ["shift", "←"] })] }) : jsx("div", {}), nextPage ? jsxs(Link$1, { className: clsx$1(navigationItem$1, navigationItem_right), href: nextPage.link, variant: "styleless", children: [jsxs("div", { className: navigationText, children: [jsx("div", { className: navigationTextInner, style: { textAlign: "right" }, children: nextPage.text }), jsx("div", { className: clsx$1(navigationIcon, navigationIcon_right), style: assignInlineVars({ [sizeVar]: "0.75em" }), children: jsx(Icon, { label: "Next", icon: ArrowRight }) })] }), jsx(KeyboardShortcut, { description: "Next", keys: ["shift", "→"] })] }) : jsx("div", {})] });
}
function flattenSidebar(sidebar2) {
  const items2 = [];
  for (const item2 of sidebar2) {
    if (item2.link) {
      items2.push(item2);
    }
    if (item2.items) {
      items2.push(...flattenSidebar(item2.items));
    }
  }
  return items2;
}
var searchButton = "vocs_MobileSearch_searchButton";
function MobileSearch() {
  const [open, setOpen] = useState(false);
  return jsxs(Dialog.Root, { open, onOpenChange: setOpen, children: [jsx(Dialog.Trigger, { asChild: true, children: jsx("button", { className: searchButton, type: "button", "aria-label": "Search", children: jsx(MagnifyingGlassIcon, { height: 21, width: 21 }) }) }), jsx(SearchDialog, { open, onClose: () => setOpen(false) })] });
}
var root$M = "vocs_MobileTopNav";
var content$4 = "vocs_MobileTopNav_content";
var curtain = "vocs_MobileTopNav_curtain";
var curtainGroup = "vocs_MobileTopNav_curtainGroup";
var curtainItem = "vocs_MobileTopNav_curtainItem";
var group$1 = "vocs_MobileTopNav_group";
var item$2 = "vocs_MobileTopNav_item";
var logo$1 = "vocs_MobileTopNav_logo";
var menuTrigger = "vocs_MobileTopNav_menuTrigger";
var menuTitle = "vocs_MobileTopNav_menuTitle";
var navigation_compact = "vocs_MobileTopNav_navigation_compact";
var navigation$1 = "vocs_MobileTopNav_navigation";
var navigationContent = "vocs_MobileTopNav_navigationContent";
var navigationItem = "vocs_MobileTopNav_navigationItem";
var chevronDownIcon = "var(--vocs_MobileTopNav_chevronDownIcon)";
var chevronUpIcon = "var(--vocs_MobileTopNav_chevronUpIcon)";
var navigationTrigger = "vocs_MobileTopNav_trigger";
var outlineTrigger = "vocs_MobileTopNav_outlineTrigger";
var outlinePopover = "vocs_MobileTopNav_outlinePopover";
var section$1 = "vocs_MobileTopNav_section";
var separator$1 = "vocs_MobileTopNav_separator";
var sidebarPopover = "vocs_MobileTopNav_sidebarPopover";
var topNavPopover = "vocs_MobileTopNav_topNavPopover";
var topNavPopoverFooter = "vocs_MobileTopNav_topNavPopoverFooter";
function debounce(fn, delay) {
  let invoked = false;
  return () => {
    invoked = true;
    setTimeout(() => {
      if (invoked)
        fn();
      invoked = false;
    }, delay);
  };
}
var root$L = "vocs_AiCtaDropdown";
var buttonLeft = "vocs_AiCtaDropdown_buttonLeft vocs_AiCtaDropdown_button vocs_Button_button";
var buttonRight = "vocs_AiCtaDropdown_buttonRight vocs_AiCtaDropdown_button vocs_Button_button";
var dropdownMenuContent = "vocs_AiCtaDropdown_dropdownMenuContent";
var dropdownMenuItem = "vocs_AiCtaDropdown_dropdownMenuItem";
var button = "vocs_Button_button";
var button_accent = "vocs_Button_button_accent";
function CheckCircle() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Check" }), jsx("path", { d: "M7.49991 0.877045C3.84222 0.877045 0.877075 3.84219 0.877075 7.49988C0.877075 11.1575 3.84222 14.1227 7.49991 14.1227C11.1576 14.1227 14.1227 11.1575 14.1227 7.49988C14.1227 3.84219 11.1576 0.877045 7.49991 0.877045ZM1.82708 7.49988C1.82708 4.36686 4.36689 1.82704 7.49991 1.82704C10.6329 1.82704 13.1727 4.36686 13.1727 7.49988C13.1727 10.6329 10.6329 13.1727 7.49991 13.1727C4.36689 13.1727 1.82708 10.6329 1.82708 7.49988ZM10.1589 5.53774C10.3178 5.31191 10.2636 5.00001 10.0378 4.84109C9.81194 4.68217 9.50004 4.73642 9.34112 4.96225L6.51977 8.97154L5.35681 7.78706C5.16334 7.59002 4.84677 7.58711 4.64973 7.78058C4.45268 7.97404 4.44978 8.29061 4.64325 8.48765L6.22658 10.1003C6.33054 10.2062 6.47617 10.2604 6.62407 10.2483C6.77197 10.2363 6.90686 10.1591 6.99226 10.0377L10.1589 5.53774Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function ChevronDown() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Chevron Down" }), jsx("path", { d: "M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function Copy() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Copy" }), jsx("path", { d: "M5 2V1H10V2H5ZM4.75 0C4.33579 0 4 0.335786 4 0.75V1H3.5C2.67157 1 2 1.67157 2 2.5V12.5C2 13.3284 2.67157 14 3.5 14H7V13H3.5C3.22386 13 3 12.7761 3 12.5V2.5C3 2.22386 3.22386 2 3.5 2H4V2.25C4 2.66421 4.33579 3 4.75 3H10.25C10.6642 3 11 2.66421 11 2.25V2H11.5C11.7761 2 12 2.22386 12 2.5V7H13V2.5C13 1.67157 12.3284 1 11.5 1H11V0.75C11 0.335786 10.6642 0 10.25 0H4.75ZM9 8.5C9 8.77614 8.77614 9 8.5 9C8.22386 9 8 8.77614 8 8.5C8 8.22386 8.22386 8 8.5 8C8.77614 8 9 8.22386 9 8.5ZM10.5 9C10.7761 9 11 8.77614 11 8.5C11 8.22386 10.7761 8 10.5 8C10.2239 8 10 8.22386 10 8.5C10 8.77614 10.2239 9 10.5 9ZM13 8.5C13 8.77614 12.7761 9 12.5 9C12.2239 9 12 8.77614 12 8.5C12 8.22386 12.2239 8 12.5 8C12.7761 8 13 8.22386 13 8.5ZM14.5 9C14.7761 9 15 8.77614 15 8.5C15 8.22386 14.7761 8 14.5 8C14.2239 8 14 8.22386 14 8.5C14 8.77614 14.2239 9 14.5 9ZM15 10.5C15 10.7761 14.7761 11 14.5 11C14.2239 11 14 10.7761 14 10.5C14 10.2239 14.2239 10 14.5 10C14.7761 10 15 10.2239 15 10.5ZM14.5 13C14.7761 13 15 12.7761 15 12.5C15 12.2239 14.7761 12 14.5 12C14.2239 12 14 12.2239 14 12.5C14 12.7761 14.2239 13 14.5 13ZM14.5 15C14.7761 15 15 14.7761 15 14.5C15 14.2239 14.7761 14 14.5 14C14.2239 14 14 14.2239 14 14.5C14 14.7761 14.2239 15 14.5 15ZM8.5 11C8.77614 11 9 10.7761 9 10.5C9 10.2239 8.77614 10 8.5 10C8.22386 10 8 10.2239 8 10.5C8 10.7761 8.22386 11 8.5 11ZM9 12.5C9 12.7761 8.77614 13 8.5 13C8.22386 13 8 12.7761 8 12.5C8 12.2239 8.22386 12 8.5 12C8.77614 12 9 12.2239 9 12.5ZM8.5 15C8.77614 15 9 14.7761 9 14.5C9 14.2239 8.77614 14 8.5 14C8.22386 14 8 14.2239 8 14.5C8 14.7761 8.22386 15 8.5 15ZM11 14.5C11 14.7761 10.7761 15 10.5 15C10.2239 15 10 14.7761 10 14.5C10 14.2239 10.2239 14 10.5 14C10.7761 14 11 14.2239 11 14.5ZM12.5 15C12.7761 15 13 14.7761 13 14.5C13 14.2239 12.7761 14 12.5 14C12.2239 14 12 14.2239 12 14.5C12 14.7761 12.2239 15 12.5 15Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function OpenAi() {
  return jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "100%", height: "100%", viewBox: "0 0 24 24", children: [jsx("title", { children: "OpenAI" }), jsx("path", { fill: "currentColor", d: "M22.282 9.821a6 6 0 0 0-.516-4.91a6.05 6.05 0 0 0-6.51-2.9A6.065 6.065 0 0 0 4.981 4.18a6 6 0 0 0-3.998 2.9a6.05 6.05 0 0 0 .743 7.097a5.98 5.98 0 0 0 .51 4.911a6.05 6.05 0 0 0 6.515 2.9A6 6 0 0 0 13.26 24a6.06 6.06 0 0 0 5.772-4.206a6 6 0 0 0 3.997-2.9a6.06 6.06 0 0 0-.747-7.073M13.26 22.43a4.48 4.48 0 0 1-2.876-1.04l.141-.081l4.779-2.758a.8.8 0 0 0 .392-.681v-6.737l2.02 1.168a.07.07 0 0 1 .038.052v5.583a4.504 4.504 0 0 1-4.494 4.494M3.6 18.304a4.47 4.47 0 0 1-.535-3.014l.142.085l4.783 2.759a.77.77 0 0 0 .78 0l5.843-3.369v2.332a.08.08 0 0 1-.033.062L9.74 19.95a4.5 4.5 0 0 1-6.14-1.646M2.34 7.896a4.5 4.5 0 0 1 2.366-1.973V11.6a.77.77 0 0 0 .388.677l5.815 3.354l-2.02 1.168a.08.08 0 0 1-.071 0l-4.83-2.786A4.504 4.504 0 0 1 2.34 7.872zm16.597 3.855l-5.833-3.387L15.119 7.2a.08.08 0 0 1 .071 0l4.83 2.791a4.494 4.494 0 0 1-.676 8.105v-5.678a.79.79 0 0 0-.407-.667m2.01-3.023l-.141-.085l-4.774-2.782a.78.78 0 0 0-.785 0L9.409 9.23V6.897a.07.07 0 0 1 .028-.061l4.83-2.787a4.5 4.5 0 0 1 6.68 4.66zm-12.64 4.135l-2.02-1.164a.08.08 0 0 1-.038-.057V6.075a4.5 4.5 0 0 1 7.375-3.453l-.142.08L8.704 5.46a.8.8 0 0 0-.393.681zm1.097-2.365l2.602-1.5l2.607 1.5v2.999l-2.597 1.5l-2.607-1.5Z" })] });
}
function AiCtaDropdown() {
  const { content: content2 } = usePageData();
  const { aiCta } = useConfig();
  const location = useLocation();
  const [copied2, setCopied] = useState(false);
  useEffect(() => {
    if (!copied2)
      return;
    const timeout = setTimeout(() => setCopied(false), 1e3);
    return () => clearTimeout(timeout);
  }, [copied2]);
  const copy = useCallback(() => {
    setCopied(true);
    navigator.clipboard.writeText(content2 ?? "");
  }, [content2]);
  const query = useMemo(() => {
    const href = window.location.origin + location.pathname;
    if (typeof aiCta === "object")
      return aiCta.query({ location: href });
    return `Please research and analyze this page: ${href} so I can ask you questions about it. Once you have read it, prompt me with any questions I have. Do not post content from the page in your response. Any of my follow up questions must reference the site I gave you.`;
  }, [aiCta, location.pathname]);
  return jsxs("div", { className: root$L, children: [copied2 ? jsxs("div", { className: clsx$1(button, buttonLeft), children: [jsx("div", { style: { width: "14px", height: "14px" }, children: jsx(CheckCircle, {}) }), "Copied"] }) : jsxs(Link$1, { className: clsx$1(button, buttonLeft), href: `https://chatgpt.com?hints=search&q=${encodeURIComponent(query)}`, variant: "styleless", children: [jsx("div", { style: { width: "14px", height: "14px" }, children: jsx(OpenAi, {}) }), "Ask in ChatGPT"] }), jsxs(DropdownMenu.Root, { children: [jsx(DropdownMenu.Trigger, { asChild: true, children: jsx("button", { className: clsx$1(button, buttonRight), type: "button", children: jsx("div", { style: { width: "14px", height: "14px" }, children: jsx(ChevronDown, {}) }) }) }), jsx(DropdownMenu.Portal, { children: jsx(DropdownMenu.Content, { align: "end", className: dropdownMenuContent, sideOffset: 4, children: jsxs(DropdownMenu.Item, { className: dropdownMenuItem, onClick: copy, children: [jsx("div", { style: { width: "14px", height: "14px" }, children: jsx(Copy, {}) }), "Copy page for LLMs"] }) }) })] })] });
}
var root$K = "vocs_Outline";
var nav = "vocs_Outline_nav";
var heading = "vocs_Outline_heading";
var items$1 = "vocs_Outline_items";
var item$1 = "vocs_Outline_item";
var link$1 = "vocs_Outline_link";
function Outline({ minLevel = 2, maxLevel: maxLevel_ = 3, highlightActive = true, onClickItem, showTitle = true } = {}) {
  const { outlineFooter } = useConfig();
  const { showOutline, showAiCta } = useLayout();
  const maxLevel = (() => {
    if (typeof showOutline === "number")
      return minLevel + showOutline - 1;
    return maxLevel_;
  })();
  const active = useRef(true);
  const { pathname, hash } = useLocation();
  const [headingElements, setHeadingElements] = useState([]);
  useEffect(() => {
    if (typeof window === "undefined")
      return;
    const elements = Array.from(document.querySelectorAll(`.${root$Z}`));
    setHeadingElements(elements);
  }, [pathname]);
  const items2 = useMemo(() => {
    if (!headingElements)
      return [];
    return headingElements.map((element) => {
      const slugTargetElement = element.querySelector(`.${slugTarget}`);
      if (!slugTargetElement)
        return null;
      const box = slugTargetElement.getBoundingClientRect();
      const id2 = slugTargetElement.id;
      const level2 = Number(element.tagName[1]);
      const text = element.textContent;
      const topOffset = window.scrollY + box.top;
      if (level2 < minLevel || level2 > maxLevel)
        return null;
      return {
        id: id2,
        level: level2,
        slugTargetElement,
        text,
        topOffset
      };
    }).filter(Boolean);
  }, [headingElements, maxLevel, minLevel]);
  const [activeId, setActiveId] = useState(hash.replace("#", ""));
  useEffect(() => {
    if (typeof window === "undefined")
      return;
    const observer = new IntersectionObserver(([entry]) => {
      var _a;
      if (!active.current)
        return;
      const id2 = entry.target.id;
      if (entry.isIntersecting)
        setActiveId(id2);
      else {
        const box = entry.target.getBoundingClientRect();
        const isVisible = box.top > 0;
        if (!isVisible)
          return;
        const activeIndex = items2.findIndex((item2) => item2.id === activeId);
        const previousId = (_a = items2[activeIndex - 1]) == null ? void 0 : _a.id;
        setActiveId(previousId);
      }
    }, {
      rootMargin: "0px 0px -95% 0px"
    });
    for (const item2 of items2)
      observer.observe(item2.slugTargetElement);
    return () => observer.disconnect();
  }, [activeId, items2]);
  useEffect(() => {
    if (typeof window === "undefined")
      return;
    const observer = new IntersectionObserver(([entry]) => {
      var _a;
      if (!active.current)
        return;
      const lastItemId = (_a = items2[items2.length - 1]) == null ? void 0 : _a.id;
      if (entry.isIntersecting)
        setActiveId(lastItemId);
      else if (activeId === lastItemId)
        setActiveId(items2[items2.length - 2].id);
    });
    observer.observe(document.querySelector("[data-bottom-observer]"));
    return () => observer.disconnect();
  }, [activeId, items2]);
  useEffect(() => {
    if (typeof window === "undefined")
      return;
    const callback = debounce(() => {
      var _a, _b, _c;
      if (!active.current)
        return;
      if (window.scrollY === 0) {
        setActiveId((_a = items2[0]) == null ? void 0 : _a.id);
        return;
      }
      if (window.scrollY + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {
        setActiveId((_b = items2[items2.length - 1]) == null ? void 0 : _b.id);
        return;
      }
      for (let i = 0; i < items2.length; i++) {
        const item2 = items2[i];
        if (window.scrollY < item2.topOffset) {
          setActiveId((_c = items2[i - 1]) == null ? void 0 : _c.id);
          break;
        }
      }
    }, 100);
    window.addEventListener("scroll", callback);
    return () => window.removeEventListener("scroll", callback);
  }, [items2]);
  if (items2.length === 0)
    return null;
  const levelItems = items2.filter((item2) => item2.level === minLevel);
  return jsxs("aside", { className: root$K, children: [showAiCta && jsx(AiCtaDropdown, {}), jsxs("nav", { className: nav, children: [showTitle && jsx("h2", { className: heading, children: "On this page" }), jsx(Items, { activeId: highlightActive ? activeId : null, items: items2, onClickItem: () => {
    onClickItem == null ? void 0 : onClickItem();
    active.current = false;
    setTimeout(() => {
      active.current = true;
    }, 500);
  }, levelItems, setActiveId })] }), deserializeElement(outlineFooter)] });
}
function Items({ activeId, items: items2, levelItems, onClickItem, setActiveId }) {
  return jsx("ul", { className: items$1, children: levelItems.map(({ id: id2, level: level2, text }) => {
    const hash = `#${id2}`;
    const isActive = activeId === id2;
    const nextLevelItems = (() => {
      var _a;
      const itemIndex = items2.findIndex((item2) => item2.id === id2);
      const nextIndex = itemIndex + 1;
      const nextItemLevel = (_a = items2[nextIndex]) == null ? void 0 : _a.level;
      if (nextItemLevel <= level2)
        return null;
      const nextItems = [];
      for (let i = nextIndex; i < items2.length; i++) {
        const item2 = items2[i];
        if (item2.level !== nextItemLevel)
          break;
        nextItems.push(item2);
      }
      return nextItems;
    })();
    return jsxs(Fragment, { children: [jsx("li", { className: item$1, children: jsx(Link$2, { "data-active": isActive, to: hash, onClick: () => {
      onClickItem == null ? void 0 : onClickItem();
      setActiveId(id2);
    }, className: link$1, children: text }) }), nextLevelItems && jsx(Items, { activeId, levelItems: nextLevelItems, items: items2, onClickItem, setActiveId })] }, id2);
  }) });
}
var root$J = "vocs_Popover";
Popover.Root = Popover_.Root;
Popover.Trigger = Popover_.Trigger;
function Popover({ children, className }) {
  return jsx(Popover_.Portal, { children: jsx(Popover_.Content, { className: clsx$1(root$J, className), sideOffset: 12, children }) });
}
var root$I = "vocs_Sidebar";
var backLink = "vocs_Sidebar_backLink";
var divider$1 = "vocs_Sidebar_divider";
var navigation = "vocs_Sidebar_navigation";
var group = "vocs_Sidebar_group";
var logo = "vocs_Sidebar_logo";
var logoWrapper = "vocs_Sidebar_logoWrapper";
var section = "vocs_Sidebar_section";
var level = "vocs_Sidebar_level";
var levelCollapsed = "vocs_Sidebar_levelCollapsed";
var levelInset = "vocs_Sidebar_levelInset";
var footer = "vocs_Sidebar_footer";
var footerContent = "vocs_Sidebar_footerContent";
var footerCurtain = "vocs_Sidebar_footerCurtain";
var items = "vocs_Sidebar_items";
var item = "vocs_Sidebar_item";
var disabledItem = "vocs_Sidebar_disabledItem";
var sectionHeader = "vocs_Sidebar_sectionHeader";
var sectionHeaderActive = "vocs_Sidebar_sectionHeaderActive";
var sectionTitle = "vocs_Sidebar_sectionTitle";
var sectionTitleLink = "vocs_Sidebar_sectionTitleLink";
var sectionCollapse = "vocs_Sidebar_sectionCollapse";
var sectionCollapseActive = "vocs_Sidebar_sectionCollapseActive";
function useTheme() {
  const [theme, setTheme] = useState(() => {
    if (typeof window === "undefined")
      return void 0;
    if (localStorage.getItem("vocs.theme")) {
      const storedTheme = localStorage.getItem("vocs.theme");
      if (storedTheme)
        return storedTheme;
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  });
  useEffect(() => {
    if (theme)
      localStorage.setItem("vocs.theme", theme);
    if (theme === "dark")
      document.documentElement.classList.add("dark");
    else
      document.documentElement.classList.remove("dark");
  }, [theme]);
  return {
    setTheme,
    theme,
    toggle() {
      setTheme((theme2) => theme2 === "light" ? "dark" : "light");
    }
  };
}
var root$H = "vocs_ThemeToggle";
var themeToggleButton = "vocs_ThemeToggle_themeToggleButton";
function Moon() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Moon" }), jsx("path", { d: "M2.89998 0.499976C2.89998 0.279062 2.72089 0.0999756 2.49998 0.0999756C2.27906 0.0999756 2.09998 0.279062 2.09998 0.499976V1.09998H1.49998C1.27906 1.09998 1.09998 1.27906 1.09998 1.49998C1.09998 1.72089 1.27906 1.89998 1.49998 1.89998H2.09998V2.49998C2.09998 2.72089 2.27906 2.89998 2.49998 2.89998C2.72089 2.89998 2.89998 2.72089 2.89998 2.49998V1.89998H3.49998C3.72089 1.89998 3.89998 1.72089 3.89998 1.49998C3.89998 1.27906 3.72089 1.09998 3.49998 1.09998H2.89998V0.499976ZM5.89998 3.49998C5.89998 3.27906 5.72089 3.09998 5.49998 3.09998C5.27906 3.09998 5.09998 3.27906 5.09998 3.49998V4.09998H4.49998C4.27906 4.09998 4.09998 4.27906 4.09998 4.49998C4.09998 4.72089 4.27906 4.89998 4.49998 4.89998H5.09998V5.49998C5.09998 5.72089 5.27906 5.89998 5.49998 5.89998C5.72089 5.89998 5.89998 5.72089 5.89998 5.49998V4.89998H6.49998C6.72089 4.89998 6.89998 4.72089 6.89998 4.49998C6.89998 4.27906 6.72089 4.09998 6.49998 4.09998H5.89998V3.49998ZM1.89998 6.49998C1.89998 6.27906 1.72089 6.09998 1.49998 6.09998C1.27906 6.09998 1.09998 6.27906 1.09998 6.49998V7.09998H0.499976C0.279062 7.09998 0.0999756 7.27906 0.0999756 7.49998C0.0999756 7.72089 0.279062 7.89998 0.499976 7.89998H1.09998V8.49998C1.09998 8.72089 1.27906 8.89997 1.49998 8.89997C1.72089 8.89997 1.89998 8.72089 1.89998 8.49998V7.89998H2.49998C2.72089 7.89998 2.89998 7.72089 2.89998 7.49998C2.89998 7.27906 2.72089 7.09998 2.49998 7.09998H1.89998V6.49998ZM8.54406 0.98184L8.24618 0.941586C8.03275 0.917676 7.90692 1.1655 8.02936 1.34194C8.17013 1.54479 8.29981 1.75592 8.41754 1.97445C8.91878 2.90485 9.20322 3.96932 9.20322 5.10022C9.20322 8.37201 6.82247 11.0878 3.69887 11.6097C3.45736 11.65 3.20988 11.6772 2.96008 11.6906C2.74563 11.702 2.62729 11.9535 2.77721 12.1072C2.84551 12.1773 2.91535 12.2458 2.98667 12.3128L3.05883 12.3795L3.31883 12.6045L3.50684 12.7532L3.62796 12.8433L3.81491 12.9742L3.99079 13.089C4.11175 13.1651 4.23536 13.2375 4.36157 13.3059L4.62496 13.4412L4.88553 13.5607L5.18837 13.6828L5.43169 13.7686C5.56564 13.8128 5.70149 13.8529 5.83857 13.8885C5.94262 13.9155 6.04767 13.9401 6.15405 13.9622C6.27993 13.9883 6.40713 14.0109 6.53544 14.0298L6.85241 14.0685L7.11934 14.0892C7.24637 14.0965 7.37436 14.1002 7.50322 14.1002C11.1483 14.1002 14.1032 11.1453 14.1032 7.50023C14.1032 7.25044 14.0893 7.00389 14.0623 6.76131L14.0255 6.48407C13.991 6.26083 13.9453 6.04129 13.8891 5.82642C13.8213 5.56709 13.7382 5.31398 13.6409 5.06881L13.5279 4.80132L13.4507 4.63542L13.3766 4.48666C13.2178 4.17773 13.0353 3.88295 12.8312 3.60423L12.6782 3.40352L12.4793 3.16432L12.3157 2.98361L12.1961 2.85951L12.0355 2.70246L11.8134 2.50184L11.4925 2.24191L11.2483 2.06498L10.9562 1.87446L10.6346 1.68894L10.3073 1.52378L10.1938 1.47176L9.95488 1.3706L9.67791 1.2669L9.42566 1.1846L9.10075 1.09489L8.83599 1.03486L8.54406 0.98184ZM10.4032 5.30023C10.4032 4.27588 10.2002 3.29829 9.83244 2.40604C11.7623 3.28995 13.1032 5.23862 13.1032 7.50023C13.1032 10.593 10.596 13.1002 7.50322 13.1002C6.63646 13.1002 5.81597 12.9036 5.08355 12.5522C6.5419 12.0941 7.81081 11.2082 8.74322 10.0416C8.87963 10.2284 9.10028 10.3497 9.34928 10.3497C9.76349 10.3497 10.0993 10.0139 10.0993 9.59971C10.0993 9.24256 9.84965 8.94373 9.51535 8.86816C9.57741 8.75165 9.63653 8.63334 9.6926 8.51332C9.88358 8.63163 10.1088 8.69993 10.35 8.69993C11.0403 8.69993 11.6 8.14028 11.6 7.44993C11.6 6.75976 11.0406 6.20024 10.3505 6.19993C10.3853 5.90487 10.4032 5.60464 10.4032 5.30023Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function Sun() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", children: [jsx("title", { children: "Sun" }), jsx("path", { d: "M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function ThemeToggle() {
  const { theme, setTheme } = useTheme();
  const mounted = useMounted();
  if (!mounted)
    return null;
  if (!theme)
    return null;
  return jsxs("div", { className: root$H, children: [jsx("button", { "data-active": theme === "light", type: "button", className: themeToggleButton, onClick: () => setTheme("light"), children: jsx(Icon, { label: "Light Mode", icon: Sun, size: "16px" }) }), jsx("button", { "data-active": theme === "dark", type: "button", className: themeToggleButton, onClick: () => setTheme("dark"), children: jsx(Icon, { label: "Dark Mode", icon: Moon, size: "16px" }) })] });
}
function ChevronRight() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Chevron Right" }), jsx("path", { d: "M6.1584 3.13508C6.35985 2.94621 6.67627 2.95642 6.86514 3.15788L10.6151 7.15788C10.7954 7.3502 10.7954 7.64949 10.6151 7.84182L6.86514 11.8418C6.67627 12.0433 6.35985 12.0535 6.1584 11.8646C5.95694 11.6757 5.94673 11.3593 6.1356 11.1579L9.565 7.49985L6.1356 3.84182C5.94673 3.64036 5.95694 3.32394 6.1584 3.13508Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function Sidebar(props) {
  var _a;
  const { className, onClickItem } = props;
  const { theme } = useConfig();
  const { previousPath } = usePageData();
  const sidebarRef = useRef(null);
  const sidebar2 = useSidebar();
  const [backPath, setBackPath] = useState("/");
  useEffect(() => {
    if (typeof window === "undefined")
      return;
    if (!previousPath)
      return;
    setBackPath(previousPath);
  }, [sidebar2.key, sidebar2.backLink]);
  if (!sidebar2)
    return null;
  const groups = getSidebarGroups(sidebar2.items);
  return jsxs("aside", { ref: sidebarRef, className: clsx$1(root$I, className), children: [jsxs("div", { children: [jsxs("div", { className: logoWrapper, children: [jsx("div", { className: logo, children: jsx(RouterLink, { to: "/", style: { alignItems: "center", display: "flex", height: "100%" }, children: jsx(NavLogo, {}) }) }), jsx("div", { className: divider$1 })] }), jsx("nav", { className: navigation, children: jsxs("div", { className: group, children: [sidebar2.backLink && jsx("section", { className: section, children: jsx("div", { className: items, children: jsxs(RouterLink, { className: clsx$1(item, backLink), to: backPath, children: ["←", " ", typeof history !== "undefined" && ((_a = history.state) == null ? void 0 : _a.key) && backPath !== "/" ? "Back" : "Home"] }) }) }), groups.map((group2, i) => jsx(SidebarItem, { depth: 0, item: group2, onClick: onClickItem, sidebarRef }, `${group2.text}${i}`))] }) })] }), jsxs("div", { className: footer, children: [jsx("div", { className: footerCurtain }), jsxs("div", { className: footerContent, children: [jsx(Socials, {}), !(theme == null ? void 0 : theme.colorScheme) ? jsx(ThemeToggle, {}) : null] })] })] }, sidebar2.key);
}
function getSidebarGroups(sidebar2) {
  const groups = [];
  let lastGroupIndex = 0;
  for (const item2 of sidebar2) {
    if (item2.items) {
      lastGroupIndex = groups.push(item2);
      continue;
    }
    if (!groups[lastGroupIndex])
      groups.push({ text: "", items: [item2] });
    else
      groups[lastGroupIndex].items.push(item2);
  }
  return groups;
}
function getActiveChildItem(items2, pathname) {
  return items2.find((item2) => {
    if (matchPath(pathname, item2.link ?? ""))
      return true;
    if (item2.link === pathname)
      return true;
    if (!item2.items)
      return false;
    return getActiveChildItem(item2.items, pathname);
  });
}
function SidebarItem(props) {
  const { depth, item: item$12, onClick, sidebarRef } = props;
  const itemRef = useRef(null);
  const { pathname } = useLocation();
  const match = useMatch(item$12.link || "");
  const hasActiveChildItem = useMemo(() => item$12.items ? Boolean(getActiveChildItem(item$12.items, pathname)) : false, [item$12.items, pathname]);
  const [collapsed, setCollapsed] = useState(() => {
    if (item$12.link && match)
      return false;
    if (!item$12.items)
      return false;
    if (hasActiveChildItem)
      return false;
    return Boolean(item$12.collapsed);
  });
  const isCollapsable = item$12.collapsed !== void 0 && item$12.items !== void 0;
  const onCollapseInteraction = useCallback((event) => {
    if ("key" in event && event.key !== "Enter")
      return;
    setCollapsed((x) => !x);
  }, []);
  const onCollapseTriggerInteraction = useCallback((event) => {
    if ("key" in event && event.key !== "Enter")
      return;
    setCollapsed((x) => !x);
  }, []);
  const active = useRef(true);
  useEffect(() => {
    if (!active.current)
      return;
    active.current = false;
    const match2 = matchPath(pathname, item$12.link ?? "");
    if (!match2)
      return;
    requestAnimationFrame(() => {
      var _a, _b, _c;
      const offsetTop = ((_a = itemRef.current) == null ? void 0 : _a.offsetTop) ?? 0;
      const sidebarHeight = ((_b = sidebarRef == null ? void 0 : sidebarRef.current) == null ? void 0 : _b.clientHeight) ?? 0;
      if (offsetTop < sidebarHeight)
        return;
      (_c = sidebarRef == null ? void 0 : sidebarRef.current) == null ? void 0 : _c.scrollTo({ top: offsetTop - 100 });
    });
  }, [item$12, pathname, sidebarRef]);
  if (item$12.items)
    return jsxs("section", { ref: itemRef, className: clsx$1(section, depth === 0 && item$12.text && level, depth === 0 && item$12.text && collapsed && levelCollapsed), children: [item$12.text && jsxs("div", { className: sectionHeader, ...isCollapsable && !item$12.link ? {
      role: "button",
      tabIndex: 0,
      onClick: onCollapseInteraction,
      onKeyDown: onCollapseInteraction
    } : {}, children: [item$12.text && (item$12.link ? jsx(Link$1, { "data-active": Boolean(match), onClick: (e) => {
      onClick == null ? void 0 : onClick(e);
      onCollapseInteraction(e);
    }, className: clsx$1(depth === 0 ? [sectionTitle, sectionTitleLink] : item, hasActiveChildItem && sectionHeaderActive, item$12.disabled && disabledItem), href: item$12.link, variant: "styleless", children: item$12.text }) : jsx("div", { className: clsx$1(depth === 0 ? sectionTitle : item, item$12.disabled && disabledItem), children: item$12.text })), isCollapsable && jsx("div", {
      // biome-ignore lint/a11y/useSemanticElements:
      role: "button",
      tabIndex: 0,
      onClick: onCollapseTriggerInteraction,
      onKeyDown: onCollapseTriggerInteraction,
      children: jsx(Icon, { className: clsx$1(sectionCollapse, collapsed && sectionCollapseActive), label: "toggle section", icon: ChevronRight, size: "16px" })
    })] }), !collapsed && jsx("div", { className: clsx$1(items, depth !== 0 && levelInset), children: item$12.items && item$12.items.length > 0 && depth < 5 && item$12.items.map((item2, i) => jsx(SidebarItem, { depth: depth + 1, item: item2, onClick, sidebarRef }, `${item2.text}${i}`)) })] });
  return jsx(Fragment$1, { children: item$12.link ? jsx(Link$1, { ref: itemRef, "data-active": Boolean(match), onClick, className: clsx$1(item, item$12.disabled && disabledItem), href: item$12.link, variant: "styleless", children: item$12.text }) : jsx("div", { className: clsx$1(item, item$12.disabled && disabledItem), children: item$12.text }) });
}
function ChevronUp() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Chevron Up" }), jsx("path", { d: "M3.13523 8.84197C3.3241 9.04343 3.64052 9.05363 3.84197 8.86477L7.5 5.43536L11.158 8.86477C11.3595 9.05363 11.6759 9.04343 11.8648 8.84197C12.0536 8.64051 12.0434 8.32409 11.842 8.13523L7.84197 4.38523C7.64964 4.20492 7.35036 4.20492 7.15803 4.38523L3.15803 8.13523C2.95657 8.32409 2.94637 8.64051 3.13523 8.84197Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function Menu() {
  return jsxs("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 79 48", fill: "none", children: [jsx("title", { children: "Menu" }), jsx("path", { fill: "currentColor", d: "M19.528 47.232h40.87c1.952 0 3.515-1.562 3.515-3.564a3.5 3.5 0 0 0-3.516-3.516H19.528a3.501 3.501 0 0 0-3.515 3.516c0 2.002 1.562 3.564 3.515 3.564ZM12.057 27.262h55.81a3.501 3.501 0 0 0 3.516-3.516 3.501 3.501 0 0 0-3.515-3.515h-55.81a3.501 3.501 0 0 0-3.516 3.515 3.501 3.501 0 0 0 3.515 3.516ZM4.391 7.34H75.29c2.002 0 3.515-1.563 3.515-3.516 0-2.002-1.513-3.564-3.515-3.564H4.39C2.438.26.876 1.822.876 3.824A3.501 3.501 0 0 0 4.39 7.34Z" })] });
}
MobileTopNav.Curtain = Curtain;
function MobileTopNav() {
  const config2 = useConfig();
  const { showLogo } = useLayout();
  return jsxs("div", { className: root$M, children: [jsxs("div", { className: section$1, children: [showLogo && jsx("div", { className: group$1, children: jsx("div", { className: logo$1, children: jsx(RouterLink, { to: "/", style: { alignItems: "center", display: "flex", height: "100%" }, children: jsx(NavLogo, {}) }) }) }), config2.topNav && jsxs("div", { className: group$1, children: [jsx(Navigation, { items: config2.topNav }), jsx(CompactNavigation, { items: config2.topNav })] })] }), jsx("div", { className: section$1, children: jsx("div", { className: group$1, style: { marginRight: "-8px" }, children: jsx(MobileSearch, {}) }) })] });
}
function Navigation({ items: items2 }) {
  const { pathname } = useLocation();
  const activeIds = useActiveNavIds({ pathname, items: items2 });
  return jsx(Root$2, { className: navigation$1, children: jsxs(List$2, { children: [items2.map((item2, i) => {
    if (item2.element)
      return deserializeElement(item2.element);
    if (item2.link) {
      return jsx(Link, { active: activeIds == null ? void 0 : activeIds.includes(item2.id), href: item2.link, children: item2.text }, i);
    }
    return jsxs(Item, { className: item$2, children: [jsx(Trigger$1, { active: activeIds == null ? void 0 : activeIds.includes(item2.id), children: item2.text }), jsx(Content$1, { className: content$4, children: jsx(NavigationMenuContent, { items: item2.items || [] }) })] }, i);
  }), jsx(TopNavEnd, {})] }) });
}
function NavigationMenuContent({ items: items2 }) {
  const { pathname } = useLocation();
  const activeIds = useActiveNavIds({ pathname, items: items2 });
  return jsx("ul", { children: items2 == null ? void 0 : items2.map((item2, i) => jsx(Link, { active: activeIds.includes(item2.id), href: item2.link, children: item2.text }, i)) });
}
function CompactNavigation({ items: items2 }) {
  const [showPopover, setShowPopover] = useState(false);
  const { showSidebar } = useLayout();
  const { pathname } = useLocation();
  const activeIds = useActiveNavIds({ pathname, items: items2 });
  const activeItem = items2.filter((item2) => item2.id === activeIds[0])[0];
  const { basePath, theme } = useConfig();
  const assetBasePath = basePath;
  return jsx("div", { className: clsx$1(navigation$1, navigation_compact), children: jsxs(Popover.Root, { modal: true, open: showPopover, onOpenChange: setShowPopover, children: [jsx(Popover.Trigger, { className: clsx$1(menuTrigger, navigationItem), children: showSidebar || activeItem ? jsxs(Fragment$1, { children: [(activeItem == null ? void 0 : activeItem.text) ?? "Menu", jsx(Icon, { label: "Menu", icon: ChevronDown, size: "16px" })] }) : jsx(Icon, { label: "Menu", icon: Menu, size: "16px" }) }), jsxs(Popover, { className: topNavPopover, children: [jsxs(Accordion.Root, { type: "single", collapsible: true, style: { display: "flex", flexDirection: "column" }, children: [items2.map((item2, i) => {
    var _a;
    if (item2.element)
      return deserializeElement(item2.element);
    if (item2.link) {
      return jsx(Link$1, { "data-active": activeIds.includes(item2.id), className: navigationItem, href: item2.link, onClick: () => setShowPopover(false), variant: "styleless", children: item2.text }, i);
    }
    return jsxs(Accordion.Item, { value: i.toString(), children: [jsx(Accordion.Trigger, { className: clsx$1(navigationItem, navigationTrigger), "data-active": activeIds.includes(item2.id), style: assignInlineVars({
      [chevronDownIcon]: `url(${assetBasePath}/.vocs/icons/chevron-down.svg)`,
      [chevronUpIcon]: `url(${assetBasePath}/.vocs/icons/chevron-up.svg)`
    }), children: item2.text }), jsx(Accordion.Content, { className: navigationContent, children: (_a = item2.items) == null ? void 0 : _a.map((item22, i2) => jsx(Link$1, { className: navigationItem, href: item22.link, onClick: () => setShowPopover(false), variant: "styleless", children: item22.text }, i2)) })] }, i);
  }), jsx(TopNavEnd, {})] }), jsxs("div", { className: topNavPopoverFooter, children: [jsx(Socials, {}), !(theme == null ? void 0 : theme.colorScheme) ? jsx(ThemeToggle, {}) : null] })] })] }) });
}
function Curtain({ enableScrollToTop }) {
  const { pathname } = useLocation();
  const { layout, showSidebar } = useLayout();
  const { frontmatter = {} } = usePageData();
  const sidebar2 = useSidebar();
  const [isOutlineOpen, setOutlineOpen] = useState(false);
  const [isSidebarOpen, setSidebarOpen] = useState(false);
  const sidebarItemTitle = useMemo(() => {
    if (!sidebar2 || layout === "minimal")
      return;
    const sidebarItem = getSidebarItemFromPathname({
      sidebarItems: sidebar2.items,
      pathname
    });
    return sidebarItem == null ? void 0 : sidebarItem.text;
  }, [layout, pathname, sidebar2]);
  const contentTitle = useMemo(() => {
    var _a;
    if (typeof window === "undefined")
      return;
    return (_a = document.querySelector(".vocs_Content h1")) == null ? void 0 : _a.textContent;
  }, []);
  const title2 = sidebarItemTitle || frontmatter.title || contentTitle;
  return jsxs("div", { className: curtain, children: [jsx("div", { className: curtainGroup, children: jsx("div", { className: curtainItem, children: showSidebar ? jsxs(Popover.Root, { modal: true, open: isSidebarOpen, onOpenChange: setSidebarOpen, children: [jsxs(Popover.Trigger, { className: menuTrigger, children: [jsx(Icon, { label: "Menu", icon: Menu, size: "13px" }), jsx("div", { className: menuTitle, children: title2 })] }), jsx(Popover, { className: sidebarPopover, children: jsx(Sidebar, { onClickItem: () => setSidebarOpen(false) }) })] }) : title2 }) }), jsxs("div", { className: curtainGroup, children: [enableScrollToTop && jsxs(Fragment$1, { children: [jsx("div", { className: curtainItem, children: jsxs("button", { className: outlineTrigger, onClick: () => window.scrollTo({ behavior: "smooth", top: 0 }), type: "button", children: ["Top", jsx(Icon, { label: "Scroll to top", icon: ChevronUp, size: "16px" })] }) }), jsx("div", { className: separator$1 })] }), layout === "docs" && jsx("div", { className: curtainItem, children: jsxs(Popover.Root, { modal: true, open: isOutlineOpen, onOpenChange: setOutlineOpen, children: [jsxs(Popover.Trigger, { className: outlineTrigger, children: ["On this page", jsx(Icon, { label: "On this page", icon: ChevronRight, size: "16px" })] }), jsx(Popover, { className: outlinePopover, children: jsx(Outline, { onClickItem: () => setOutlineOpen(false), showTitle: false }) })] }) })] })] });
}
function getSidebarItemFromPathname({ sidebarItems, pathname: pathname_ }) {
  const pathname = pathname_.replace(/(.+)\/$/, "$1");
  for (const item2 of sidebarItems) {
    if ((item2 == null ? void 0 : item2.link) === pathname)
      return item2;
    if (item2.items) {
      const childItem = getSidebarItemFromPathname({ sidebarItems: item2.items, pathname });
      if (childItem)
        return childItem;
    }
  }
  return void 0;
}
var root$G = "vocs_SkipLink";
const skipLinkId = "vocs-content";
function SkipLink() {
  const { pathname } = useLocation();
  return jsx("a", { className: clsx$1(root$G, visuallyHidden), href: `${pathname}#${skipLinkId}`, children: "Skip to content" });
}
var root$F = "vocs_DocsLayout";
var content$3 = "vocs_DocsLayout_content";
var content_withTopNav = "vocs_DocsLayout_content_withTopNav";
var content_withSidebar = "vocs_DocsLayout_content_withSidebar";
var gutterLeft = "vocs_DocsLayout_gutterLeft";
var gutterTop = "vocs_DocsLayout_gutterTop";
var gutterTop_offsetLeftGutter = "vocs_DocsLayout_gutterTop_offsetLeftGutter";
var gutterTop_sticky = "vocs_DocsLayout_gutterTop_sticky";
var gutterTopCurtain = "vocs_DocsLayout_gutterTopCurtain";
var gutterTopCurtain_hidden = "vocs_DocsLayout_gutterTopCurtain_hidden";
var gutterTopCurtain_withSidebar = "vocs_DocsLayout_gutterTopCurtain_withSidebar";
var gutterRight = "vocs_DocsLayout_gutterRight";
var gutterRight_withSidebar = "vocs_DocsLayout_gutterRight_withSidebar";
var sidebar = "vocs_DocsLayout_sidebar";
function DocsLayout({ children }) {
  var _a, _b;
  const { banner, font } = useConfig();
  const { frontmatter = {} } = usePageData();
  const { content: content2 } = frontmatter;
  const { layout, showOutline, showSidebar, showTopNav } = useLayout();
  const { ref, inView } = useInView({
    initialInView: true,
    rootMargin: "100px 0px 0px 0px"
  });
  const [showBanner, setShowBanner] = useLocalStorage("banner", true);
  return jsxs("div", { className: root$F, "data-layout": layout, style: assignInlineVars({
    [bannerHeight]: showBanner ? banner == null ? void 0 : banner.height : void 0,
    [fontFamilyVars.default]: ((_a = font == null ? void 0 : font.default) == null ? void 0 : _a.google) ? `${font.default.google}, ${defaultFontFamily.default}` : void 0,
    [fontFamilyVars.mono]: ((_b = font == null ? void 0 : font.mono) == null ? void 0 : _b.google) ? `${font.mono.google}, ${defaultFontFamily.mono}` : void 0
  }), children: [jsx(SkipLink, {}), showBanner && jsx(Banner, { hide: () => setShowBanner(false) }), showSidebar && jsx("div", { className: gutterLeft, children: jsx(Sidebar, { className: sidebar }) }), showTopNav && jsxs(Fragment$1, { children: [jsxs("div", { ref, className: clsx$1(gutterTop, showSidebar && gutterTop_offsetLeftGutter, (layout === "minimal" || layout === "landing") && gutterTop_sticky), children: [jsx(DesktopTopNav, {}), jsx(MobileTopNav, {})] }), jsxs("div", { className: clsx$1(gutterTopCurtain, showSidebar && gutterTopCurtain_withSidebar, (layout === "minimal" || layout === "landing") && gutterTopCurtain_hidden), children: [jsx(DesktopTopNav.Curtain, {}), jsx(MobileTopNav.Curtain, { enableScrollToTop: !inView })] })] }), showOutline && jsx("div", { className: clsx$1(gutterRight, showSidebar && gutterRight_withSidebar), children: jsx(Outline, {}) }), jsxs("div", { id: skipLinkId, className: clsx$1(content$3, showSidebar && content_withSidebar, showTopNav && content_withTopNav), style: assignInlineVars({
    [contentVars.horizontalPadding]: content2 == null ? void 0 : content2.horizontalPadding,
    [contentVars.width]: content2 == null ? void 0 : content2.width,
    [contentVars.verticalPadding]: content2 == null ? void 0 : content2.verticalPadding
  }), children: [jsx(Content$2, { children }), jsx(Footer, {})] }), jsx("div", { "data-bottom-observer": true })] });
}
var root$E = "vocs_Anchor";
var root$D = "vocs_Autolink";
function Autolink(props) {
  if (!props.href)
    return null;
  return jsx(Link$2, { ...props, className: clsx(props.className, root$D), to: props.href });
}
function Anchor(props) {
  const { children, href } = props;
  const { pathname } = useLocation();
  if (children && typeof children === "object" && "props" in children && children.props["data-autolink-icon"])
    return jsx(Autolink, { className: clsx(props.className, root$E), ...props });
  if (href == null ? void 0 : href.match(/^#/))
    return jsx("a", { className: clsx(props.className, root$E), ...props, href: `${pathname}${href}` });
  return jsx(Link$1, { className: clsx(props.className, root$E), ...props, hideExternalIcon: true });
}
var root$C = "vocs_Callout";
var content$2 = "vocs_Callout_content";
var icon = "vocs_Callout_icon";
var note = "vocs_Callout_note";
var info = "vocs_Callout_info";
var warning = "vocs_Callout_warning";
var danger = "vocs_Callout_danger";
var tip = "vocs_Callout_tip";
var success = "vocs_Callout_success";
const styles = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  content: content$2,
  danger,
  icon,
  info,
  note,
  root: root$C,
  success,
  tip,
  warning
}, Symbol.toStringTag, { value: "Module" }));
function ExclamationTriangle() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Exclamation" }), jsx("path", { d: "M8.4449 0.608765C8.0183 -0.107015 6.9817 -0.107015 6.55509 0.608766L0.161178 11.3368C-0.275824 12.07 0.252503 13 1.10608 13H13.8939C14.7475 13 15.2758 12.07 14.8388 11.3368L8.4449 0.608765ZM7.4141 1.12073C7.45288 1.05566 7.54712 1.05566 7.5859 1.12073L13.9798 11.8488C14.0196 11.9154 13.9715 12 13.8939 12H1.10608C1.02849 12 0.980454 11.9154 1.02018 11.8488L7.4141 1.12073ZM6.8269 4.48611C6.81221 4.10423 7.11783 3.78663 7.5 3.78663C7.88217 3.78663 8.18778 4.10423 8.1731 4.48612L8.01921 8.48701C8.00848 8.766 7.7792 8.98664 7.5 8.98664C7.2208 8.98664 6.99151 8.766 6.98078 8.48701L6.8269 4.48611ZM8.24989 10.476C8.24989 10.8902 7.9141 11.226 7.49989 11.226C7.08567 11.226 6.74989 10.8902 6.74989 10.476C6.74989 10.0618 7.08567 9.72599 7.49989 9.72599C7.9141 9.72599 8.24989 10.0618 8.24989 10.476Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function InfoCircled() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Info" }), jsx("path", { d: "M7.49991 0.876892C3.84222 0.876892 0.877075 3.84204 0.877075 7.49972C0.877075 11.1574 3.84222 14.1226 7.49991 14.1226C11.1576 14.1226 14.1227 11.1574 14.1227 7.49972C14.1227 3.84204 11.1576 0.876892 7.49991 0.876892ZM1.82707 7.49972C1.82707 4.36671 4.36689 1.82689 7.49991 1.82689C10.6329 1.82689 13.1727 4.36671 13.1727 7.49972C13.1727 10.6327 10.6329 13.1726 7.49991 13.1726C4.36689 13.1726 1.82707 10.6327 1.82707 7.49972ZM8.24992 4.49999C8.24992 4.9142 7.91413 5.24999 7.49992 5.24999C7.08571 5.24999 6.74992 4.9142 6.74992 4.49999C6.74992 4.08577 7.08571 3.74999 7.49992 3.74999C7.91413 3.74999 8.24992 4.08577 8.24992 4.49999ZM6.00003 5.99999H6.50003H7.50003C7.77618 5.99999 8.00003 6.22384 8.00003 6.49999V9.99999H8.50003H9.00003V11H8.50003H7.50003H6.50003H6.00003V9.99999H6.50003H7.00003V6.99999H6.50003H6.00003V5.99999Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function LightningBolt() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "Lightning Bolt" }), jsx("path", { d: "M8.69667 0.0403541C8.90859 0.131038 9.03106 0.354857 8.99316 0.582235L8.0902 6.00001H12.5C12.6893 6.00001 12.8625 6.10701 12.9472 6.27641C13.0319 6.4458 13.0136 6.6485 12.8999 6.80001L6.89997 14.8C6.76167 14.9844 6.51521 15.0503 6.30328 14.9597C6.09135 14.869 5.96888 14.6452 6.00678 14.4178L6.90974 9H2.49999C2.31061 9 2.13748 8.893 2.05278 8.72361C1.96809 8.55422 1.98636 8.35151 2.09999 8.2L8.09997 0.200038C8.23828 0.0156255 8.48474 -0.0503301 8.69667 0.0403541ZM3.49999 8.00001H7.49997C7.64695 8.00001 7.78648 8.06467 7.88148 8.17682C7.97648 8.28896 8.01733 8.43723 7.99317 8.5822L7.33027 12.5596L11.5 7.00001H7.49997C7.353 7.00001 7.21347 6.93534 7.11846 6.8232C7.02346 6.71105 6.98261 6.56279 7.00678 6.41781L7.66968 2.44042L3.49999 8.00001Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function Callout({ className, children, type }) {
  return jsxs("aside", { className: clsx(className, root$C, styles[type]), children: [jsxs("div", { className: icon, children: [type === "note" && jsx(InfoCircled, {}), type === "info" && jsx(InfoCircled, {}), type === "warning" && jsx(ExclamationTriangle, {}), type === "danger" && jsx(ExclamationTriangle, {}), type === "tip" && jsx(LightningBolt, {}), type === "success" && jsx(CheckCircle, {})] }), jsx("div", { className: content$2, children })] });
}
var root$B = "vocs_Aside";
function Aside(props) {
  const className = clsx(props.className, root$B);
  if ("data-callout" in props)
    return jsx(Callout, { className, type: props["data-callout"], children: props.children });
  return jsx("aside", { ...props, className });
}
var root$A = "vocs_Blockquote";
function Blockquote(props) {
  return jsx("blockquote", { ...props, className: clsx(props.className, root$A) });
}
var root$z = "vocs_Code";
function Code(props) {
  const children = filterEmptyLines(props.children);
  return jsx("code", { ...props, className: clsx(props.className, root$z), children });
}
function filterEmptyLines(nodes) {
  if (!Array.isArray(nodes))
    return nodes;
  return nodes.map((child, index) => {
    var _a, _b, _c;
    return child.props && "data-line" in child.props && typeof child.props.children === "string" && child.props.children.trim() === "" && ((_c = (_b = (_a = nodes[index + 1]) == null ? void 0 : _a.props) == null ? void 0 : _b.className) == null ? void 0 : _c.includes("twoslash-tag-line")) ? null : child;
  }).filter(Boolean);
}
var root$y = "vocs_Details";
function Details(props) {
  return jsx("details", { ...props, className: clsx(props.className, root$y) });
}
var root$x = "vocs_Authors";
var authors = "vocs_Authors_authors";
var link = "vocs_Authors_link";
var separator = "vocs_Authors_separator";
function Authors(props) {
  const { frontmatter } = usePageData();
  const { authors: authors_ = frontmatter == null ? void 0 : frontmatter.authors, date = frontmatter == null ? void 0 : frontmatter.date } = props;
  const authors$1 = useMemo(() => {
    if (!authors_)
      return void 0;
    if (Array.isArray(authors_))
      return authors_;
    return authors_.split(",").map((author) => author.trim());
  }, [authors_]);
  const formattedDate = useMemo(() => {
    if (!date)
      return null;
    const dateObject = new Date(date);
    return dateObject.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric"
    });
  }, [date]);
  return jsxs("div", { className: root$x, children: [formattedDate, authors$1 && (formattedDate ? " by " : "By "), jsx("span", { className: authors, children: authors$1 == null ? void 0 : authors$1.map((author, index) => {
    const { text, url } = parseAuthor(author);
    return jsxs(Fragment, { children: [url ? jsx("a", { className: link, href: url, target: "_blank", rel: "noopener noreferrer", children: text }) : text, index < authors$1.length - 2 && jsx("span", { className: separator, children: ", " }), index < authors$1.length - 1 && jsx("span", { className: separator, children: " & " })] }, index);
  }) })] });
}
function parseAuthor(author) {
  const match = author.match(/\[(.+)\]\((.+)\)/);
  if (!match)
    return { text: author, url: void 0 };
  return {
    text: match[1],
    url: match[2]
  };
}
const posts = [];
var root$w = "vocs_BlogPosts";
var description = "vocs_BlogPosts_description";
var divider = "vocs_BlogPosts_divider";
var post = "vocs_BlogPosts_post";
var readMore = "vocs_BlogPosts_readMore";
var title$2 = "vocs_BlogPosts_title";
function BlogPosts() {
  return jsx("div", { className: root$w, children: posts.map((post$1, index) => jsxs(Fragment, { children: [jsx("div", { className: post, children: jsxs(RouterLink, { to: post$1.path, children: [jsx("h2", { className: title$2, children: post$1.title }), jsx(Authors, { authors: post$1.authors, date: post$1.date }), jsxs("p", { className: description, children: [post$1.description, " ", jsx("span", { className: readMore, children: "[→]" })] })] }) }), index < posts.length - 1 && jsx("hr", { className: divider })] }, index)) });
}
var columnsVar = "var(--vocs_Sponsors_columns)";
var heightVar = "var(--vocs_Sponsors_height)";
var root$v = "vocs_Sponsors";
var title$1 = "vocs_Sponsors_title";
var row = "vocs_Sponsors_row";
var column = "vocs_Sponsors_column";
var sponsor = "vocs_Sponsors_sponsor";
var image = "vocs_Sponsors_image";
function Sponsors() {
  const { sponsors } = useConfig();
  return jsx("div", { className: root$v, children: sponsors == null ? void 0 : sponsors.map((sponsorSet, i) => jsxs(Fragment, { children: [jsx("div", { className: title$1, children: sponsorSet.name }), sponsorSet.items.map((sponsorRow, i2) => {
    var _a;
    return jsx("div", { className: row, style: assignInlineVars({
      [columnsVar]: sponsorRow.length.toString(),
      [heightVar]: `${((_a = sponsorSet.height) == null ? void 0 : _a.toString()) ?? "40"}px`
    }), children: sponsorRow.map((sponsor$1, i3) => jsx(Link$1, { className: clsx$1(column, sponsor$1 ? sponsor : void 0), href: sponsor$1 == null ? void 0 : sponsor$1.link, hideExternalIcon: true, variant: "styleless", children: (sponsor$1 == null ? void 0 : sponsor$1.image) && jsx("img", { className: image, src: sponsor$1 == null ? void 0 : sponsor$1.image, alt: sponsor$1 == null ? void 0 : sponsor$1.name }) }, i3)) }, i2);
  })] }, i)) });
}
var iconUrl = "var(--vocs_AutolinkIcon_iconUrl)";
var root$u = "vocs_AutolinkIcon";
function AutolinkIcon(props) {
  const { basePath } = useConfig();
  const assetBasePath = basePath;
  return jsx("div", { ...props, className: clsx(props.className, root$u), style: assignInlineVars({
    [iconUrl]: `url(${assetBasePath}/.vocs/icons/link.svg)`
  }) });
}
var root$t = "vocs_Tabs";
var list = "vocs_Tabs_list";
var trigger = "vocs_Tabs_trigger";
var content$1 = "vocs_Tabs_content";
function Root$1(props) {
  return jsx(Tabs.Root, { ...props, className: clsx$1(props.className, root$t) });
}
function List$1(props) {
  return jsx(Tabs.List, { ...props, className: clsx$1(props.className, list) });
}
function Trigger(props) {
  return jsx(Tabs.Trigger, { ...props, className: clsx$1(props.className, trigger) });
}
function Content(props) {
  return jsx(Tabs.Content, { ...props, className: clsx$1(props.className, content$1) });
}
var root$s = "vocs_CodeGroup";
function CodeGroup({ children }) {
  if (!Array.isArray(children))
    return null;
  const tabs = children.map((child_) => {
    const child = child_.props["data-title"] ? child_ : child_.props.children;
    const { props } = child;
    const title2 = props["data-title"];
    const content2 = props.children;
    return { title: title2, content: content2 };
  });
  return jsxs(Root$1, { className: root$s, defaultValue: tabs[0].title, children: [jsx(List$1, { "aria-label": "Code group", children: tabs.map(({ title: title2 }, i) => jsx(Trigger, { value: title2 || i.toString(), children: title2 }, title2 || i.toString())) }), tabs.map(({ title: title2, content: content2 }, i) => {
    var _a, _b, _c, _d;
    const isShiki = (_d = (_c = (_b = (_a = content2.props) == null ? void 0 : _a.children) == null ? void 0 : _b.props) == null ? void 0 : _c.className) == null ? void 0 : _d.includes("shiki");
    return jsx(Content, { "data-shiki": isShiki, value: title2 || i.toString(), children: content2 }, title2 || i.toString());
  })] });
}
var root$r = "vocs_Div";
var root$q = "vocs_Step";
var title = "vocs_Step_title";
var content = "vocs_Step_content";
var root$p = "vocs_H2";
function H2(props) {
  return jsx(Heading, { ...props, className: clsx(props.className, root$p), level: 2 });
}
var root$o = "vocs_H3";
function H3(props) {
  return jsx(Heading, { ...props, className: clsx(props.className, root$o), level: 3 });
}
var root$n = "vocs_H4";
function H4(props) {
  return jsx(Heading, { ...props, className: clsx(props.className, root$n), level: 4 });
}
var root$m = "vocs_H5";
function H5(props) {
  return jsx(Heading, { ...props, className: clsx(props.className, root$m), level: 5 });
}
var root$l = "vocs_H6";
function H6(props) {
  return jsx(Heading, { ...props, className: clsx(props.className, root$l), level: 6 });
}
function Step({ children, className, title: title$12, titleLevel = 2 }) {
  const Element = (() => {
    if (titleLevel === 2)
      return H2;
    if (titleLevel === 3)
      return H3;
    if (titleLevel === 4)
      return H4;
    if (titleLevel === 5)
      return H5;
    if (titleLevel === 6)
      return H6;
    throw new Error("Invalid.");
  })();
  return jsxs("div", { className: clsx(className, root$q), children: [typeof title$12 === "string" ? jsx(Element, { className: title, children: title$12 }) : title$12, jsx("div", { className: content, children })] });
}
var root$k = "vocs_Steps";
function Steps$1({ children, className }) {
  return jsx("div", { className: clsx(className, root$k), children });
}
function Steps({ children }) {
  if (!Array.isArray(children))
    return null;
  return jsx(Steps$1, { children: children.map(({ props }, i) => {
    const [title$12, ...children2] = Array.isArray(props.children) ? props.children : [props.children];
    return jsx(Step, { title: cloneElement(title$12, { className: title }), children: children2 }, i);
  }) });
}
var root$j = "vocs_Subtitle";
function Subtitle({ children }) {
  return jsx("div", { className: root$j, children });
}
function Div(props) {
  const { layout } = useLayout();
  const className = clsx(props.className, root$r);
  if (props.className === "code-group")
    return jsx(CodeGroup, { ...props, className });
  if ("data-authors" in props)
    return jsx(Authors, {});
  if ("data-blog-posts" in props)
    return jsx(BlogPosts, {});
  if ("data-sponsors" in props)
    return jsx(Sponsors, {});
  if ("data-autolink-icon" in props && layout === "docs")
    return jsx(AutolinkIcon, { ...props, className });
  if ("data-vocs-steps" in props)
    return jsx(Steps, { ...props, className });
  if (props.role === "doc-subtitle")
    return jsx(Subtitle, { ...props });
  return jsx("div", { ...props, className });
}
var root$i = "vocs_Figcaption";
function Figcaption(props) {
  const className = clsx(props.className, root$i);
  return jsx("figcaption", { ...props, className });
}
var root$h = "vocs_Figure";
function Figure(props) {
  const className = clsx(props.className, root$h);
  return jsx("figure", { ...props, className });
}
var root$g = "vocs_Header";
function Header(props) {
  return jsx("header", { ...props, className: clsx(props.className, root$g) });
}
var root$f = "vocs_HorizontalRule";
function HorizontalRule(props) {
  return jsx("hr", { ...props, className: clsx(props.className, root$f) });
}
var root$e = "vocs_List";
var ordered = "vocs_List_ordered";
var unordered = "vocs_List_unordered";
function List({ ordered: ordered$1, ...props }) {
  const Element = ordered$1 ? "ol" : "ul";
  return jsx(Element, { ...props, className: clsx(props.className, root$e, ordered$1 ? ordered : unordered) });
}
var root$d = "vocs_ListItem";
function ListItem(props) {
  return jsx("li", { ...props, className: clsx(props.className, root$d) });
}
function useCopyCode() {
  const ref = useRef(null);
  const [copied2, setCopied] = useState(false);
  useEffect(() => {
    if (!copied2)
      return;
    const timeout = setTimeout(() => setCopied(false), 1e3);
    return () => clearTimeout(timeout);
  }, [copied2]);
  function copy() {
    var _a;
    setCopied(true);
    const node = (_a = ref.current) == null ? void 0 : _a.cloneNode(true);
    const nodesToRemove = node == null ? void 0 : node.querySelectorAll("button,.line.diff.remove,.twoslash-popup-info-hover,.twoslash-popup-info,.twoslash-meta-line,.twoslash-tag-line");
    for (const node2 of nodesToRemove ?? [])
      node2.remove();
    navigator.clipboard.writeText(node == null ? void 0 : node.textContent);
  }
  return {
    copied: copied2,
    copy,
    ref
  };
}
var root$c = "vocs_CopyButton";
var copied = "vocs_CopyButton_copied";
function Checkmark() {
  return jsxs("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 68 67", children: [jsx("title", { children: "Checkmark" }), jsx("path", { fill: "currentColor", d: "M26.175 66.121c1.904 0 3.418-.83 4.492-2.49L66.263 7.332c.83-1.27 1.123-2.295 1.123-3.32 0-2.393-1.563-4.004-4.004-4.004-1.758 0-2.734.586-3.809 2.295L25.98 56.209 8.304 32.381c-1.123-1.514-2.198-2.149-3.809-2.149-2.441 0-4.2 1.71-4.2 4.15 0 1.026.44 2.15 1.27 3.224l19.971 25.927c1.367 1.758 2.734 2.588 4.639 2.588Z" })] });
}
function CopyButton({ copy, copied: copied$1 }) {
  return jsx("button", { className: root$c, "data-copied": copied$1, onClick: copy, type: "button", children: copied$1 ? jsx(Icon, { label: "Copied", size: "14px", className: copied, icon: Checkmark }) : jsx(Icon, { label: "Copy", size: "18px", icon: Copy }) });
}
var root$b = "vocs_CodeBlock";
function CodeBlock(props) {
  return jsx("div", { ...props, className: clsx(props.className, root$b) });
}
function File() {
  return jsxs("svg", { width: "100%", height: "100%", viewBox: "0 0 15 15", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsx("title", { children: "File" }), jsx("path", { d: "M4.2 1H4.17741H4.1774C3.86936 0.999988 3.60368 0.999978 3.38609 1.02067C3.15576 1.04257 2.92825 1.09113 2.71625 1.22104C2.51442 1.34472 2.34473 1.51442 2.22104 1.71625C2.09113 1.92825 2.04257 2.15576 2.02067 2.38609C1.99998 2.60367 1.99999 2.86935 2 3.17738V3.1774V3.2V11.8V11.8226V11.8226C1.99999 12.1307 1.99998 12.3963 2.02067 12.6139C2.04257 12.8442 2.09113 13.0717 2.22104 13.2837C2.34473 13.4856 2.51442 13.6553 2.71625 13.779C2.92825 13.9089 3.15576 13.9574 3.38609 13.9793C3.60368 14 3.86937 14 4.17741 14H4.2H10.8H10.8226C11.1306 14 11.3963 14 11.6139 13.9793C11.8442 13.9574 12.0717 13.9089 12.2837 13.779C12.4856 13.6553 12.6553 13.4856 12.779 13.2837C12.9089 13.0717 12.9574 12.8442 12.9793 12.6139C13 12.3963 13 12.1306 13 11.8226V11.8V3.2V3.17741C13 2.86936 13 2.60368 12.9793 2.38609C12.9574 2.15576 12.9089 1.92825 12.779 1.71625C12.6553 1.51442 12.4856 1.34472 12.2837 1.22104C12.0717 1.09113 11.8442 1.04257 11.6139 1.02067C11.3963 0.999978 11.1306 0.999988 10.8226 1H10.8H4.2ZM3.23875 2.07368C3.26722 2.05623 3.32362 2.03112 3.48075 2.01618C3.64532 2.00053 3.86298 2 4.2 2H10.8C11.137 2 11.3547 2.00053 11.5193 2.01618C11.6764 2.03112 11.7328 2.05623 11.7613 2.07368C11.8285 2.11491 11.8851 2.17147 11.9263 2.23875C11.9438 2.26722 11.9689 2.32362 11.9838 2.48075C11.9995 2.64532 12 2.86298 12 3.2V11.8C12 12.137 11.9995 12.3547 11.9838 12.5193C11.9689 12.6764 11.9438 12.7328 11.9263 12.7613C11.8851 12.8285 11.8285 12.8851 11.7613 12.9263C11.7328 12.9438 11.6764 12.9689 11.5193 12.9838C11.3547 12.9995 11.137 13 10.8 13H4.2C3.86298 13 3.64532 12.9995 3.48075 12.9838C3.32362 12.9689 3.26722 12.9438 3.23875 12.9263C3.17147 12.8851 3.11491 12.8285 3.07368 12.7613C3.05624 12.7328 3.03112 12.6764 3.01618 12.5193C3.00053 12.3547 3 12.137 3 11.8V3.2C3 2.86298 3.00053 2.64532 3.01618 2.48075C3.03112 2.32362 3.05624 2.26722 3.07368 2.23875C3.11491 2.17147 3.17147 2.11491 3.23875 2.07368ZM5 10C4.72386 10 4.5 10.2239 4.5 10.5C4.5 10.7761 4.72386 11 5 11H8C8.27614 11 8.5 10.7761 8.5 10.5C8.5 10.2239 8.27614 10 8 10H5ZM4.5 7.5C4.5 7.22386 4.72386 7 5 7H10C10.2761 7 10.5 7.22386 10.5 7.5C10.5 7.77614 10.2761 8 10 8H5C4.72386 8 4.5 7.77614 4.5 7.5ZM5 4C4.72386 4 4.5 4.22386 4.5 4.5C4.5 4.77614 4.72386 5 5 5H10C10.2761 5 10.5 4.77614 10.5 4.5C10.5 4.22386 10.2761 4 10 4H5Z", fill: "currentColor", fillRule: "evenodd", clipRule: "evenodd" })] });
}
function Terminal() {
  return jsxs("svg", { width: "100%", height: "100%", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 79 95", fill: "none", children: [jsx("title", { children: "Terminal" }), jsx("path", { fill: "currentColor", d: "M38.281 34.033c0-1.074-.39-2.05-1.22-2.88L6.885 1.171C6.152.39 5.175 0 4.053 0 1.758 0 0 1.709 0 4.004c0 1.074.488 2.1 1.172 2.88l27.295 27.15L1.172 61.181C.488 61.962 0 62.939 0 64.062c0 2.295 1.758 4.004 4.053 4.004 1.123 0 2.1-.39 2.832-1.172l30.176-29.98c.83-.83 1.22-1.807 1.22-2.88Z" }), jsx("path", { stroke: "currentColor", strokeLinecap: "round", strokeWidth: "8px", d: "M36 75h55" })] });
}
var root$a = "vocs_CodeTitle";
function CodeTitle({ children, className, language, ...props }) {
  return jsxs("div", { ...props, className: clsx(className, root$a), children: [language === "bash" ? jsx(Icon, { label: "Terminal", size: "14px", icon: Terminal, style: { marginTop: 3 } }) : children.match(/\.(.*)$/) ? jsx(Icon, { label: "File", size: "14px", icon: File, style: { marginTop: 1 } }) : null, children] });
}
var root$9 = "vocs_Pre";
var wrapper = "vocs_Pre_wrapper";
function Pre({ children, className, ...props }) {
  const { copied: copied2, copy, ref } = useCopyCode();
  function recurseChildren(children2) {
    if (!children2)
      return children2;
    if (typeof children2 !== "object")
      return children2;
    if ("props" in children2)
      return {
        ...children2,
        props: {
          ...children2.props,
          children: Array.isArray(children2.props.children) ? children2.props.children.map(recurseChildren) : recurseChildren(children2.props.children)
        }
      };
    return children2;
  }
  const children_ = useMemo(() => recurseChildren(children), [children]);
  const wrap = (children2) => {
    if (className == null ? void 0 : className.includes("shiki"))
      return jsxs(CodeBlock, { children: [props["data-title"] && jsx(CodeTitle, { language: props["data-lang"], children: props["data-title"] }), children2] });
    return children2;
  };
  return wrap(jsx("div", { className: clsx(wrapper), children: jsxs("pre", { ref, ...props, className: clsx(className, root$9), children: [jsx(CopyButton, { copied: copied2, copy }), children_] }) }));
}
var root$8 = "vocs_Footnotes";
function Footnotes(props) {
  return jsx("section", { ...props, className: clsx(props.className, root$8) });
}
var root$7 = "vocs_Section";
function Section(props) {
  if ("data-footnotes" in props)
    return jsx(Footnotes, { ...props, className: clsx(props.className, root$7) });
  return jsx("section", { ...props, className: clsx(props.className, root$7) });
}
var root$6 = "vocs_Span";
function TwoslashPopover({ children, ...props }) {
  const [popover, target] = children;
  const arrowRef = useRef(null);
  const [isOpen, setIsOpen] = useState(false);
  const { context, refs, floatingStyles } = useFloating({
    middleware: [
      arrow({
        element: arrowRef
      }),
      offset(8),
      shift()
    ],
    open: isOpen,
    onOpenChange: setIsOpen,
    placement: "bottom-start"
  });
  const hover = useHover(context, { handleClose: safePolygon() });
  const { getReferenceProps, getFloatingProps } = useInteractions([hover]);
  const targetChildren = target.props.children;
  const popoverChildren = popover.props.children;
  return jsxs("span", { ...props, children: [jsx("span", { className: "twoslash-target", ref: refs.setReference, ...getReferenceProps(), children: targetChildren }), isOpen && jsxs("div", { className: "twoslash-popup-info-hover", ref: refs.setFloating, style: floatingStyles, ...getFloatingProps(), children: [jsx(FloatingArrow, { ref: arrowRef, context, fill: primitiveColorVars.background5, height: 3, stroke: primitiveColorVars.border2, strokeWidth: 1, width: 7 }), jsx("div", { className: "twoslash-popup-scroll-container", children: popoverChildren })] })] });
}
function Span(props) {
  var _a;
  const className = clsx(props.className, root$6);
  if ((_a = props.className) == null ? void 0 : _a.includes("twoslash-hover"))
    return jsx(TwoslashPopover, { ...props, className });
  return jsx("span", { ...props, className: clsx(props.className, root$6) });
}
var root$5 = "vocs_Strong";
function Strong(props) {
  return jsx("strong", { ...props, className: clsx(props.className, root$5) });
}
var root$4 = "vocs_Summary";
function Summary(props) {
  return jsx("summary", { ...props, className: clsx(props.className, root$4) });
}
var root$3 = "vocs_Table";
function Table(props) {
  return jsx("table", { ...props, className: clsx(props.className, root$3) });
}
var root$2 = "vocs_TableCell";
function TableCell(props) {
  return jsx("td", { ...props, className: clsx(props.className, root$2) });
}
var root$1 = "vocs_TableHeader";
function TableHeader(props) {
  return jsx("th", { ...props, className: clsx(props.className, root$1) });
}
var root = "vocs_TableRow";
function TableRow(props) {
  return jsx("tr", { ...props, className: clsx(props.className, root) });
}
const components = {
  a: Anchor,
  aside: Aside,
  blockquote: Blockquote,
  code: Code,
  details: Details,
  div: Div,
  pre: Pre,
  header: Header,
  figcaption: Figcaption,
  figure: Figure,
  h1: H1,
  h2: H2,
  h3: H3,
  h4: H4,
  h5: H5,
  h6: H6,
  hr: HorizontalRule,
  kd: Kbd,
  li: ListItem,
  ol: (props) => jsx(List, { ordered: true, ...props }),
  p: Paragraph,
  section: Section,
  span: Span,
  strong: Strong,
  summary: Summary,
  table: Table,
  td: TableCell,
  th: TableHeader,
  tr: TableRow,
  ul: (props) => jsx(List, { ordered: false, ...props })
};
function useOgImageUrl() {
  const { pathname } = useLocation();
  const config2 = useConfig();
  const { ogImageUrl } = config2;
  if (!ogImageUrl)
    return void 0;
  if (typeof ogImageUrl === "string")
    return ogImageUrl;
  const pathKey = useMemo(() => {
    const keys = Object.keys(ogImageUrl).filter((key) => pathname.startsWith(key));
    return keys[keys.length - 1];
  }, [ogImageUrl, pathname]);
  if (!pathKey)
    return void 0;
  return ogImageUrl[pathKey];
}
function Root(props) {
  const { children, content: content2, filePath, frontmatter, lastUpdatedAt, path } = props;
  const { pathname } = useLocation();
  const previousPathRef = useRef(void 0);
  useEffect(() => {
    previousPathRef.current = pathname;
  });
  return jsxs(Fragment$1, { children: [jsx(Head, { frontmatter }), typeof window !== "undefined" && jsx(ScrollRestoration, {}), jsx(MDXProvider, { components, children: jsx(Layout, { frontmatter, path, children: jsx(PageDataContext.Provider, { value: {
    content: content2,
    filePath,
    frontmatter,
    lastUpdatedAt,
    previousPath: previousPathRef.current
  }, children }) }) })] });
}
function Head({ frontmatter }) {
  var _a, _b, _c, _d, _e, _f;
  const config2 = useConfig();
  const ogImageUrl = useOgImageUrl();
  const { baseUrl, font, iconUrl: iconUrl2, logoUrl } = config2;
  const description2 = (frontmatter == null ? void 0 : frontmatter.description) ?? config2.description;
  const title2 = (frontmatter == null ? void 0 : frontmatter.title) ?? config2.title;
  const titleTemplate = (() => {
    if (!config2.title)
      return void 0;
    if (title2.includes(config2.title))
      return void 0;
    return config2.titleTemplate;
  })();
  const isLocalhost = typeof window !== "undefined" && window.location.hostname === "localhost";
  const fullTitle = titleTemplate ? titleTemplate.replace("%s", title2) : title2;
  return jsxs(Fragment$1, { children: [fullTitle && jsx("title", { children: fullTitle }), baseUrl && true && !isLocalhost && jsx("base", { href: baseUrl }), description2 !== "undefined" && jsx("meta", { name: "description", content: description2 }), iconUrl2 && typeof iconUrl2 === "string" && jsx("link", { rel: "icon", href: iconUrl2, type: getIconType(iconUrl2) }), iconUrl2 && typeof iconUrl2 !== "string" && jsx("link", { rel: "icon", href: iconUrl2.light, type: getIconType(iconUrl2.light) }), iconUrl2 && typeof iconUrl2 !== "string" && jsx("link", { rel: "icon", href: iconUrl2.dark, type: getIconType(iconUrl2.dark), media: "(prefers-color-scheme: dark)" }), jsx("meta", { property: "og:type", content: "website" }), jsx("meta", { property: "og:title", content: title2 || config2.title }), baseUrl && jsx("meta", { property: "og:url", content: baseUrl }), description2 !== "undefined" && jsx("meta", { property: "og:description", content: description2 }), ogImageUrl && jsx("meta", { property: "og:image", content: ogImageUrl.replace("%logo", `${baseUrl ? baseUrl : ""}${typeof logoUrl === "string" ? logoUrl : (logoUrl == null ? void 0 : logoUrl.dark) || ""}`).replace("%title", title2 || "").replace("%description", (description2 !== "undefined" ? description2 : "") || "") }), (((_a = font == null ? void 0 : font.default) == null ? void 0 : _a.google) || ((_b = font == null ? void 0 : font.mono) == null ? void 0 : _b.google)) && jsx("link", { rel: "preconnect", href: "https://fonts.googleapis.com" }), (((_c = font == null ? void 0 : font.default) == null ? void 0 : _c.google) || ((_d = font == null ? void 0 : font.mono) == null ? void 0 : _d.google)) && jsx("link", { rel: "preconnect", href: "https://fonts.gstatic.com", crossOrigin: "" }), ((_e = font == null ? void 0 : font.default) == null ? void 0 : _e.google) && jsx("link", { href: `https://fonts.googleapis.com/css2?family=${font.default.google}:wght@300;400;500&display=swap`, rel: "stylesheet" }), ((_f = font == null ? void 0 : font.mono) == null ? void 0 : _f.google) && jsx("link", { href: `https://fonts.googleapis.com/css2?family=${font.mono.google}:wght@300;400;500&display=swap`, rel: "stylesheet" }), jsx("meta", { name: "twitter:card", content: "summary_large_image" }), ogImageUrl && jsx("meta", { property: "twitter:image", content: ogImageUrl.replace("%logo", `${baseUrl ? baseUrl : ""}${typeof logoUrl === "string" ? logoUrl : (logoUrl == null ? void 0 : logoUrl.dark) || ""}`).replace("%title", title2 ? encodeURIComponent(title2) : "").replace("%description", description2 ? encodeURIComponent(description2) : "") })] });
}
function getIconType(iconUrl2) {
  if (iconUrl2.endsWith(".svg"))
    return "image/svg+xml";
  if (iconUrl2.endsWith(".png"))
    return "image/png";
  if (iconUrl2.endsWith(".jpg"))
    return "image/jpeg";
  if (iconUrl2.endsWith(".ico"))
    return "image/x-icon";
  if (iconUrl2.endsWith(".webp"))
    return "image/webp";
  return void 0;
}
const notFoundRoute = (() => {
  const virtualRoute = routes$1.find(({ path }) => path === "*");
  if (virtualRoute)
    return {
      path: virtualRoute.path,
      lazy: async () => {
        const { frontmatter, ...route } = await virtualRoute.lazy();
        return {
          ...route,
          element: jsx(Root, { frontmatter, path: virtualRoute.path, children: jsx(DocsLayout, { children: jsx(route.default, {}) }) })
        };
      }
    };
  return {
    path: "*",
    // 404
    lazy: void 0,
    element: jsx(Root, { frontmatter: { layout: "minimal" }, path: "*", children: jsx(DocsLayout, { children: jsx(NotFound, {}) }) })
  };
})();
const routes = [
  ...routes$1.filter(({ path }) => path !== "*").map((route_virtual) => ({
    path: route_virtual.path,
    lazy: async () => {
      const { frontmatter, ...route } = await route_virtual.lazy();
      return {
        ...route,
        element: jsx(Root, { content: decodeURIComponent(route_virtual.content ?? ""), filePath: route_virtual.filePath, frontmatter, lastUpdatedAt: route_virtual.lastUpdatedAt, path: route_virtual.path, children: jsx(DocsLayout, { children: jsx(route.default, {}) }) })
      };
    }
  })),
  notFoundRoute
];
function createFetchRequest(req) {
  const origin = `${req.protocol}://${req.headers.host}`;
  const url = new URL(req.originalUrl || req.url, origin);
  const controller = new AbortController();
  req.on("close", () => controller.abort());
  const headers = new Headers();
  for (const [key, values] of Object.entries(req.headers)) {
    if (values) {
      if (Array.isArray(values))
        for (const value of values)
          headers.append(key, value);
      else
        headers.set(key, values);
    }
  }
  const init = {
    method: req.method,
    headers,
    signal: controller.signal
  };
  if (req.method !== "GET" && req.method !== "HEAD")
    init.body = req.body;
  return new Request(url.href, init);
}
async function prerender(location) {
  const unwrappedRoutes = (await Promise.all(routes.map(async (route) => {
    const location_ = location === "/" ? "/" : location.replace(/\/$/, "");
    const path = route.path.replace(/\.html$/, "");
    if (path !== location_ && path !== "*")
      return null;
    const element = route.lazy ? (await route.lazy()).element : route.element;
    return {
      path: route.path,
      element
    };
  }))).filter(Boolean);
  const { config: config2 } = await resolveVocsConfig();
  const { basePath } = config2;
  return jsx(ConfigProvider, { config: config2, children: jsx(StaticRouter, { location, basename: basePath, children: jsx(Routes, { children: unwrappedRoutes.map((route) => jsx(Route, { path: route.path, element: route.element }, route.path)) }) }) });
}
async function render(req) {
  const { config: config2 } = await resolveVocsConfig();
  const { basePath } = config2;
  const { query, dataRoutes } = createStaticHandler(routes, { basename: basePath });
  const fetchRequest = createFetchRequest(req);
  const context = await query(fetchRequest);
  if (context instanceof Response)
    throw context;
  const router = createStaticRouter(dataRoutes, context);
  return jsx(ConfigProvider, { config: config2, children: jsx(StaticRouterProvider, { router, context }) });
}
export {
  Content as C,
  Link$1 as L,
  Root$1 as R,
  Trigger as T,
  button_accent as a,
  button as b,
  Logo as c,
  List$1 as d,
  prerender,
  render,
  useConfig as u
};
