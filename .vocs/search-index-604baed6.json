{"documentCount":263,"nextId":263,"documentIds":{"0":"docs/pages/best-practices.mdx#best-practices","1":"docs/pages/best-practices.mdx#node-design","2":"docs/pages/best-practices.mdx#single-responsibility","3":"docs/pages/best-practices.mdx#idempotency","4":"docs/pages/best-practices.mdx#error-handling","5":"docs/pages/best-practices.mdx#flow-design","6":"docs/pages/best-practices.mdx#modular-flows","7":"docs/pages/best-practices.mdx#error-boundaries","8":"docs/pages/best-practices.mdx#context-handling","9":"docs/pages/best-practices.mdx#respect-cancellation","10":"docs/pages/best-practices.mdx#timeout-management","11":"docs/pages/best-practices.mdx#concurrency-safety","12":"docs/pages/best-practices.mdx#thread-safe-nodes","13":"docs/pages/best-practices.mdx#avoid-shared-node-instances","14":"docs/pages/best-practices.mdx#resource-management","15":"docs/pages/best-practices.mdx#clean-up-resources","16":"docs/pages/best-practices.mdx#connection-pooling","17":"docs/pages/best-practices.mdx#testing","18":"docs/pages/best-practices.mdx#unit-test-nodes","19":"docs/pages/best-practices.mdx#integration-test-flows","20":"docs/pages/best-practices.mdx#documentation","21":"docs/pages/best-practices.mdx#document-node-behavior","22":"docs/pages/best-practices.mdx#document-flow-structure","23":"docs/pages/best-practices.mdx#performance","24":"docs/pages/best-practices.mdx#batch-operations","25":"docs/pages/best-practices.mdx#lazy-loading","26":"docs/pages/best-practices.mdx#monitoring","27":"docs/pages/best-practices.mdx#add-observability","28":"docs/pages/best-practices.mdx#next-steps","29":"docs/pages/concepts/actions.mdx#actions","30":"docs/pages/concepts/actions.mdx#how-actions-work","31":"docs/pages/concepts/actions.mdx#default-action","32":"docs/pages/concepts/actions.mdx#action-based-routing","33":"docs/pages/concepts/actions.mdx#simple-branching","34":"docs/pages/concepts/actions.mdx#multi-way-branching","35":"docs/pages/concepts/actions.mdx#flow-termination","36":"docs/pages/concepts/actions.mdx#common-patterns","37":"docs/pages/concepts/actions.mdx#successfailure-pattern","38":"docs/pages/concepts/actions.mdx#retry-pattern","39":"docs/pages/concepts/actions.mdx#state-machine-pattern","40":"docs/pages/concepts/actions.mdx#dynamic-actions","41":"docs/pages/concepts/actions.mdx#best-practices","42":"docs/pages/concepts/actions.mdx#next-steps","43":"docs/pages/concepts/flows.mdx#flows","44":"docs/pages/concepts/flows.mdx#creating-flows","45":"docs/pages/concepts/flows.mdx#running-flows","46":"docs/pages/concepts/flows.mdx#flow-connections","47":"docs/pages/concepts/flows.mdx#linear-flow","48":"docs/pages/concepts/flows.mdx#branching-flow","49":"docs/pages/concepts/flows.mdx#loop-flow","50":"docs/pages/concepts/flows.mdx#flow-as-node","51":"docs/pages/concepts/flows.mdx#complex-flow-patterns","52":"docs/pages/concepts/flows.mdx#diamond-pattern","53":"docs/pages/concepts/flows.mdx#error-handling-flow","54":"docs/pages/concepts/flows.mdx#pipeline-pattern","55":"docs/pages/concepts/flows.mdx#flow-composition","56":"docs/pages/concepts/flows.mdx#debugging-flows","57":"docs/pages/concepts/flows.mdx#best-practices","58":"docs/pages/concepts/flows.mdx#visualizing-flows","59":"docs/pages/concepts/flows.mdx#next-steps","60":"docs/pages/concepts/nodes.mdx#nodes","61":"docs/pages/concepts/nodes.mdx#node-lifecycle","62":"docs/pages/concepts/nodes.mdx#1-prep-phase","63":"docs/pages/concepts/nodes.mdx#2-exec-phase","64":"docs/pages/concepts/nodes.mdx#3-post-phase","65":"docs/pages/concepts/nodes.mdx#creating-nodes","66":"docs/pages/concepts/nodes.mdx#using-helper-functions","67":"docs/pages/concepts/nodes.mdx#custom-node-types","68":"docs/pages/concepts/nodes.mdx#node-options","69":"docs/pages/concepts/nodes.mdx#basenode","70":"docs/pages/concepts/nodes.mdx#thread-safety","71":"docs/pages/concepts/nodes.mdx#best-practices","72":"docs/pages/concepts/nodes.mdx#next-steps","73":"docs/pages/concepts/shared-store.mdx#shared-store","74":"docs/pages/concepts/shared-store.mdx#creating-a-sharedstore","75":"docs/pages/concepts/shared-store.mdx#basic-operations","76":"docs/pages/concepts/shared-store.mdx#set-and-get","77":"docs/pages/concepts/shared-store.mdx#getall","78":"docs/pages/concepts/shared-store.mdx#merge","79":"docs/pages/concepts/shared-store.mdx#thread-safety","80":"docs/pages/concepts/shared-store.mdx#common-patterns","81":"docs/pages/concepts/shared-store.mdx#configuration-storage","82":"docs/pages/concepts/shared-store.mdx#accumulating-results","83":"docs/pages/concepts/shared-store.mdx#state-management","84":"docs/pages/concepts/shared-store.mdx#error-context","85":"docs/pages/concepts/shared-store.mdx#batch-processing","86":"docs/pages/concepts/shared-store.mdx#isolation-in-batch-flows","87":"docs/pages/concepts/shared-store.mdx#best-practices","88":"docs/pages/concepts/shared-store.mdx#1-type-safety","89":"docs/pages/concepts/shared-store.mdx#2-key-naming","90":"docs/pages/concepts/shared-store.mdx#3-data-structure","91":"docs/pages/concepts/shared-store.mdx#4-cleanup","92":"docs/pages/concepts/shared-store.mdx#5-documentation","93":"docs/pages/concepts/shared-store.mdx#debugging","94":"docs/pages/concepts/shared-store.mdx#next-steps","95":"docs/pages/getting-started/installation.mdx#installation","96":"docs/pages/getting-started/installation.mdx#install-with-go-get","97":"docs/pages/getting-started/installation.mdx#import-in-your-code","98":"docs/pages/getting-started/installation.mdx#verify-installation","99":"docs/pages/getting-started/installation.mdx#next-steps","100":"docs/pages/getting-started/quick-start.mdx#quick-start","101":"docs/pages/getting-started/quick-start.mdx#your-first-node","102":"docs/pages/getting-started/quick-start.mdx#building-a-flow","103":"docs/pages/getting-started/quick-start.mdx#adding-error-handling","104":"docs/pages/getting-started/quick-start.mdx#using-shared-store","105":"docs/pages/getting-started/quick-start.mdx#next-steps","106":"docs/pages/getting-started/template.mdx#project-template","107":"docs/pages/getting-started/template.mdx#quick-setup","108":"docs/pages/getting-started/template.mdx#whats-included","109":"docs/pages/getting-started/template.mdx#project-structure","110":"docs/pages/getting-started/template.mdx#example-code","111":"docs/pages/getting-started/template.mdx#maingo","112":"docs/pages/getting-started/template.mdx#customizing-the-template","113":"docs/pages/getting-started/template.mdx#adding-new-nodes","114":"docs/pages/getting-started/template.mdx#creating-new-flows","115":"docs/pages/getting-started/template.mdx#best-practices","116":"docs/pages/getting-started/template.mdx#deployment","117":"docs/pages/getting-started/template.mdx#next-steps","118":"docs/pages/advanced/batch-flows.mdx#batch-flows","119":"docs/pages/advanced/batch-flows.mdx#basic-batch-flow","120":"docs/pages/advanced/batch-flows.mdx#sequential-vs-concurrent-execution","121":"docs/pages/advanced/batch-flows.mdx#dynamic-input-generation","122":"docs/pages/advanced/batch-flows.mdx#complex-flow-factory","123":"docs/pages/advanced/batch-flows.mdx#batch-flow-with-configuration","124":"docs/pages/advanced/batch-flows.mdx#result-aggregation","125":"docs/pages/advanced/batch-flows.mdx#batch-flow-with-progress","126":"docs/pages/advanced/batch-flows.mdx#conditional-batch-processing","127":"docs/pages/advanced/batch-flows.mdx#nested-batch-flows","128":"docs/pages/advanced/batch-flows.mdx#error-recovery","129":"docs/pages/advanced/batch-flows.mdx#best-practices","130":"docs/pages/advanced/batch-flows.mdx#next-steps","131":"docs/pages/advanced/batch-processing.mdx#batch-processing","132":"docs/pages/advanced/batch-processing.mdx#basic-batch-processing","133":"docs/pages/advanced/batch-processing.mdx#sequential-vs-concurrent","134":"docs/pages/advanced/batch-processing.mdx#custom-keys","135":"docs/pages/advanced/batch-processing.mdx#advanced-configuration","136":"docs/pages/advanced/batch-processing.mdx#error-handling","137":"docs/pages/advanced/batch-processing.mdx#batch-processing-patterns","138":"docs/pages/advanced/batch-processing.mdx#map-pattern","139":"docs/pages/advanced/batch-processing.mdx#filter-pattern","140":"docs/pages/advanced/batch-processing.mdx#reduce-pattern","141":"docs/pages/advanced/batch-processing.mdx#chunked-processing","142":"docs/pages/advanced/batch-processing.mdx#progress-tracking","143":"docs/pages/advanced/batch-processing.mdx#rate-limited-batch-processing","144":"docs/pages/advanced/batch-processing.mdx#batch-with-timeout","145":"docs/pages/advanced/batch-processing.mdx#best-practices","146":"docs/pages/advanced/batch-processing.mdx#next-steps","147":"docs/pages/advanced/custom-nodes.mdx#custom-node-types","148":"docs/pages/advanced/custom-nodes.mdx#basic-custom-node","149":"docs/pages/advanced/custom-nodes.mdx#stateful-nodes","150":"docs/pages/advanced/custom-nodes.mdx#resource-managing-nodes","151":"docs/pages/advanced/custom-nodes.mdx#retryablenode-implementation","152":"docs/pages/advanced/custom-nodes.mdx#composite-nodes","153":"docs/pages/advanced/custom-nodes.mdx#monitoring-nodes","154":"docs/pages/advanced/custom-nodes.mdx#async-nodes","155":"docs/pages/advanced/custom-nodes.mdx#validation-nodes","156":"docs/pages/advanced/custom-nodes.mdx#best-practices","157":"docs/pages/advanced/custom-nodes.mdx#next-steps","158":"docs/pages/advanced/flow-as-node.mdx#flow-as-node","159":"docs/pages/advanced/flow-as-node.mdx#the-node-interface","160":"docs/pages/advanced/flow-as-node.mdx#basic-usage","161":"docs/pages/advanced/flow-as-node.mdx#flow-lifecycle-as-node","162":"docs/pages/advanced/flow-as-node.mdx#composable-workflows","163":"docs/pages/advanced/flow-as-node.mdx#dynamic-flow-selection","164":"docs/pages/advanced/flow-as-node.mdx#flow-factories","165":"docs/pages/advanced/flow-as-node.mdx#recursive-flow-patterns","166":"docs/pages/advanced/flow-as-node.mdx#flow-middleware","167":"docs/pages/advanced/flow-as-node.mdx#testing-flows-as-nodes","168":"docs/pages/advanced/flow-as-node.mdx#performance-considerations","169":"docs/pages/advanced/flow-as-node.mdx#best-practices","170":"docs/pages/advanced/flow-as-node.mdx#next-steps","171":"docs/pages/advanced/nested-flows.mdx#nested-flows","172":"docs/pages/advanced/nested-flows.mdx#basic-nested-flow","173":"docs/pages/advanced/nested-flows.mdx#reusable-flow-components","174":"docs/pages/advanced/nested-flows.mdx#hierarchical-workflows","175":"docs/pages/advanced/nested-flows.mdx#conditional-nesting","176":"docs/pages/advanced/nested-flows.mdx#shared-context-in-nested-flows","177":"docs/pages/advanced/nested-flows.mdx#error-propagation","178":"docs/pages/advanced/nested-flows.mdx#recursive-flows","179":"docs/pages/advanced/nested-flows.mdx#parallel-nested-flows","180":"docs/pages/advanced/nested-flows.mdx#dynamic-flow-composition","181":"docs/pages/advanced/nested-flows.mdx#testing-nested-flows","182":"docs/pages/advanced/nested-flows.mdx#best-practices","183":"docs/pages/advanced/nested-flows.mdx#next-steps","184":"docs/pages/advanced/utilities.mdx#utilities","185":"docs/pages/advanced/utilities.mdx#toslice","186":"docs/pages/advanced/utilities.mdx#implementation-details","187":"docs/pages/advanced/utilities.mdx#custom-utility-functions","188":"docs/pages/advanced/utilities.mdx#retry-helper","189":"docs/pages/advanced/utilities.mdx#parallel-map","190":"docs/pages/advanced/utilities.mdx#safe-type-assertion","191":"docs/pages/advanced/utilities.mdx#chunk-slice","192":"docs/pages/advanced/utilities.mdx#merge-maps","193":"docs/pages/advanced/utilities.mdx#filter-slice","194":"docs/pages/advanced/utilities.mdx#timeout-wrapper","195":"docs/pages/advanced/utilities.mdx#pipeline-builder","196":"docs/pages/advanced/utilities.mdx#error-aggregator","197":"docs/pages/advanced/utilities.mdx#context-values-helper","198":"docs/pages/advanced/utilities.mdx#debounce-function","199":"docs/pages/advanced/utilities.mdx#testing-utilities","200":"docs/pages/advanced/utilities.mdx#mock-sharedstore","201":"docs/pages/advanced/utilities.mdx#test-node-builder","202":"docs/pages/advanced/utilities.mdx#best-practices","203":"docs/pages/advanced/utilities.mdx#next-steps","204":"docs/pages/advanced/worker-pool.mdx#worker-pool","205":"docs/pages/advanced/worker-pool.mdx#basic-worker-pool","206":"docs/pages/advanced/worker-pool.mdx#worker-pool-with-results","207":"docs/pages/advanced/worker-pool.mdx#dynamic-worker-scaling","208":"docs/pages/advanced/worker-pool.mdx#rate-limited-worker-pool","209":"docs/pages/advanced/worker-pool.mdx#priority-queue-worker-pool","210":"docs/pages/advanced/worker-pool.mdx#worker-pool-with-timeout","211":"docs/pages/advanced/worker-pool.mdx#worker-pool-in-nodes","212":"docs/pages/advanced/worker-pool.mdx#batch-processing-with-worker-pool","213":"docs/pages/advanced/worker-pool.mdx#monitoring-worker-pool","214":"docs/pages/advanced/worker-pool.mdx#circuit-breaker-pool","215":"docs/pages/advanced/worker-pool.mdx#best-practices","216":"docs/pages/advanced/worker-pool.mdx#next-steps","217":"docs/pages/patterns/branching.mdx#conditional-branching","218":"docs/pages/patterns/branching.mdx#simple-binary-branching","219":"docs/pages/patterns/branching.mdx#multi-way-branching","220":"docs/pages/patterns/branching.mdx#state-machine-pattern","221":"docs/pages/patterns/branching.mdx#dynamic-routing","222":"docs/pages/patterns/branching.mdx#weighted-routing","223":"docs/pages/patterns/branching.mdx#conditional-loops","224":"docs/pages/patterns/branching.mdx#pipeline-branching","225":"docs/pages/patterns/branching.mdx#feature-flags","226":"docs/pages/patterns/branching.mdx#ab-testing","227":"docs/pages/patterns/branching.mdx#best-practices","228":"docs/pages/patterns/branching.mdx#next-steps","229":"docs/pages/patterns/closures.mdx#configuration-via-closures","230":"docs/pages/patterns/closures.mdx#basic-closure-pattern","231":"docs/pages/patterns/closures.mdx#stateful-nodes","232":"docs/pages/patterns/closures.mdx#configuration-objects","233":"docs/pages/patterns/closures.mdx#factory-functions","234":"docs/pages/patterns/closures.mdx#resource-management","235":"docs/pages/patterns/closures.mdx#middleware-pattern","236":"docs/pages/patterns/closures.mdx#dynamic-configuration","237":"docs/pages/patterns/closures.mdx#dependency-injection","238":"docs/pages/patterns/closures.mdx#best-practices","239":"docs/pages/patterns/closures.mdx#next-steps","240":"docs/pages/patterns/error-handling.mdx#error-handling--retries","241":"docs/pages/patterns/error-handling.mdx#basic-retry-configuration","242":"docs/pages/patterns/error-handling.mdx#exponential-backoff","243":"docs/pages/patterns/error-handling.mdx#circuit-breaker-pattern","244":"docs/pages/patterns/error-handling.mdx#fallback-on-failure","245":"docs/pages/patterns/error-handling.mdx#error-aggregation","246":"docs/pages/patterns/error-handling.mdx#retry-with-jitter","247":"docs/pages/patterns/error-handling.mdx#selective-retry","248":"docs/pages/patterns/error-handling.mdx#error-context","249":"docs/pages/patterns/error-handling.mdx#timeout-handling","250":"docs/pages/patterns/error-handling.mdx#best-practices","251":"docs/pages/patterns/error-handling.mdx#next-steps","252":"docs/pages/patterns/fallback.mdx#fallback-on-failure","253":"docs/pages/patterns/fallback.mdx#fallbacknode-interface","254":"docs/pages/patterns/fallback.mdx#basic-fallback","255":"docs/pages/patterns/fallback.mdx#cached-fallback","256":"docs/pages/patterns/fallback.mdx#multi-level-fallback","257":"docs/pages/patterns/fallback.mdx#partial-fallback","258":"docs/pages/patterns/fallback.mdx#circuit-breaker-fallback","259":"docs/pages/patterns/fallback.mdx#fallback-with-metrics","260":"docs/pages/patterns/fallback.mdx#conditional-fallback","261":"docs/pages/patterns/fallback.mdx#best-practices","262":"docs/pages/patterns/fallback.mdx#next-steps"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[2,1,10],"1":[2,2,1],"2":[2,4,59],"3":[1,4,45],"4":[2,4,26],"5":[2,2,1],"6":[2,4,31],"7":[2,4,27],"8":[2,2,1],"9":[2,4,40],"10":[2,4,25],"11":[2,2,1],"12":[3,4,32],"13":[4,4,28],"14":[2,2,1],"15":[3,4,28],"16":[2,4,23],"17":[1,2,1],"18":[3,3,32],"19":[3,3,33],"20":[1,2,1],"21":[3,3,41],"22":[3,3,36],"23":[1,2,1],"24":[2,3,27],"25":[2,3,31],"26":[1,2,1],"27":[2,3,36],"28":[2,2,14],"29":[1,1,27],"30":[3,1,47],"31":[2,1,22],"32":[3,1,1],"33":[2,4,35],"34":[3,4,38],"35":[2,1,30],"36":[2,1,1],"37":[3,3,22],"38":[2,3,32],"39":[3,3,32],"40":[2,1,30],"41":[2,1,57],"42":[2,1,15],"43":[1,1,18],"44":[2,1,24],"45":[2,1,33],"46":[2,1,1],"47":[2,3,15],"48":[2,3,20],"49":[2,3,20],"50":[3,1,30],"51":[3,1,1],"52":[2,4,19],"53":[3,4,15],"54":[2,4,19],"55":[2,1,29],"56":[2,1,47],"57":[2,1,41],"58":[2,1,30],"59":[2,1,15],"60":[1,1,21],"61":[2,1,10],"62":[3,3,38],"63":[3,3,42],"64":[3,3,40],"65":[2,1,1],"66":[3,2,34],"67":[3,2,39],"68":[2,1,25],"69":[1,1,42],"70":[2,1,43],"71":[2,1,36],"72":[2,1,17],"73":[2,1,23],"74":[3,2,5],"75":[2,2,1],"76":[3,4,32],"77":[1,4,22],"78":[1,4,22],"79":[2,2,38],"80":[2,2,1],"81":[2,4,46],"82":[2,4,34],"83":[2,4,26],"84":[2,4,38],"85":[2,2,32],"86":[4,2,36],"87":[2,2,1],"88":[3,4,19],"89":[3,4,20],"90":[3,4,28],"91":[2,4,16],"92":[2,4,29],"93":[1,2,25],"94":[2,2,17],"95":[1,1,8],"96":[4,1,7],"97":[4,1,7],"98":[2,1,43],"99":[2,1,20],"100":[2,1,14],"101":[3,2,56],"102":[3,2,73],"103":[3,2,48],"104":[3,2,45],"105":[2,2,32],"106":[2,1,15],"107":[2,2,28],"108":[4,2,4],"109":[2,6,37],"110":[2,6,24],"111":[2,6,52],"112":[3,2,1],"113":[3,4,35],"114":[3,4,32],"115":[2,2,46],"116":[1,2,23],"117":[2,2,15],"118":[2,1,17],"119":[3,2,80],"120":[4,2,25],"121":[3,2,52],"122":[3,2,35],"123":[4,2,51],"124":[2,2,45],"125":[4,2,62],"126":[3,2,51],"127":[3,2,36],"128":[2,2,50],"129":[2,2,49],"130":[2,2,20],"131":[2,1,11],"132":[3,2,51],"133":[3,2,22],"134":[2,2,25],"135":[2,2,53],"136":[2,2,61],"137":[3,2,1],"138":[2,3,24],"139":[2,3,27],"140":[2,3,32],"141":[2,2,45],"142":[2,2,65],"143":[4,2,32],"144":[3,2,50],"145":[2,2,61],"146":[2,2,18],"147":[3,1,12],"148":[3,3,54],"149":[2,3,58],"150":[3,3,74],"151":[2,3,85],"152":[2,3,45],"153":[2,3,63],"154":[2,3,64],"155":[2,3,59],"156":[2,3,45],"157":[2,3,14],"158":[3,1,21],"159":[3,3,26],"160":[2,3,28],"161":[4,3,47],"162":[2,3,50],"163":[3,3,56],"164":[2,3,52],"165":[3,3,50],"166":[2,3,41],"167":[4,3,54],"168":[2,3,57],"169":[2,3,53],"170":[2,3,12],"171":[2,1,14],"172":[3,2,33],"173":[3,2,42],"174":[2,2,44],"175":[2,2,38],"176":[5,2,44],"177":[2,2,32],"178":[2,2,49],"179":[3,2,64],"180":[3,2,40],"181":[3,2,50],"182":[2,2,50],"183":[2,2,13],"184":[1,1,12],"185":[1,1,37],"186":[2,2,27],"187":[3,1,5],"188":[2,4,50],"189":[2,4,38],"190":[3,4,31],"191":[2,4,32],"192":[2,4,21],"193":[2,4,23],"194":[2,4,40],"195":[2,4,37],"196":[2,4,40],"197":[3,4,39],"198":[2,4,34],"199":[2,1,1],"200":[2,2,30],"201":[3,2,24],"202":[2,1,46],"203":[2,1,15],"204":[2,1,13],"205":[3,2,42],"206":[4,2,39],"207":[3,2,59],"208":[4,2,37],"209":[4,2,49],"210":[4,2,40],"211":[4,2,75],"212":[5,2,41],"213":[3,2,44],"214":[3,2,63],"215":[2,2,46],"216":[2,2,18],"217":[2,1,12],"218":[3,2,43],"219":[3,2,46],"220":[3,2,57],"221":[2,2,52],"222":[2,2,74],"223":[2,2,63],"224":[2,2,61],"225":[2,2,53],"226":[3,2,74],"227":[2,2,54],"228":[2,2,16],"229":[3,1,13],"230":[3,3,73],"231":[2,3,35],"232":[2,3,68],"233":[2,3,75],"234":[2,3,43],"235":[2,3,52],"236":[2,3,39],"237":[2,3,61],"238":[2,3,39],"239":[2,3,16],"240":[4,1,11],"241":[3,4,53],"242":[2,4,57],"243":[3,4,56],"244":[3,4,63],"245":[2,4,42],"246":[3,4,24],"247":[2,4,50],"248":[2,4,49],"249":[2,4,47],"250":[2,4,42],"251":[2,4,16],"252":[3,1,22],"253":[2,3,15],"254":[2,3,50],"255":[2,3,77],"256":[3,3,72],"257":[2,3,53],"258":[3,3,74],"259":[3,3,50],"260":[2,3,50],"261":[2,3,60],"262":[2,3,17]},"averageFieldLength":[2.3726235741444865,2.4714828897338412,34.463878326996195],"storedFields":{"0":{"href":"/best-practices#best-practices","html":"</header>\n<p>Follow these guidelines to build robust, maintainable Flyt workflows.</p>\n","isPage":true,"text":"\nFollow these guidelines to build robust, maintainable Flyt workflows.\n","title":"Best Practices","titles":[]},"1":{"href":"/best-practices#node-design","html":"\n","isPage":false,"text":"\n","title":"Node Design","titles":["Best Practices"]},"2":{"href":"/best-practices#single-responsibility","html":"\n<p>Each node should do one thing well:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ❌ Bad: Node doing too much</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Fetch data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Validate</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isValid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">New</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Transform</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        transformed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> transform</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Save</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        saveToDatabase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transformed)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> transformed, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ✅ Good: Separate concerns</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fetchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFetchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">validateNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidateNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">transformNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTransformNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">saveNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSaveNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, transformNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transformNode, flyt.DefaultAction, saveNode)</span></span></code></pre>\n","isPage":false,"text":"\nEach node should do one thing well:\n// ❌ Bad: Node doing too much\nnode := flyt.NewNode(\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n        // Fetch data\n        data := fetchFromAPI()\n        // Validate\n        if !isValid(data) {\n            return nil, errors.New(&quot;invalid&quot;)\n        }\n        // Transform\n        transformed := transform(data)\n        // Save\n        saveToDatabase(transformed)\n        return transformed, nil\n    }),\n)\n \n// ✅ Good: Separate concerns\nfetchNode := createFetchNode()\nvalidateNode := createValidateNode()\ntransformNode := createTransformNode()\nsaveNode := createSaveNode()\n \nflow := flyt.NewFlow(fetchNode)\nflow.Connect(fetchNode, flyt.DefaultAction, validateNode)\nflow.Connect(validateNode, &quot;valid&quot;, transformNode)\nflow.Connect(transformNode, flyt.DefaultAction, saveNode)\n","title":"Single Responsibility","titles":["Best Practices","Node Design"]},"3":{"href":"/best-practices#idempotency","html":"\n<p>Design nodes to be safely retryable:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ✅ Good: Idempotent operation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SaveNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Record</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Use upsert instead of insert</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    _, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> db.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        INSERT INTO records (id, data) VALUES (?, ?)</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        ON CONFLICT (id) DO UPDATE SET data = ?</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    `</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data.ID, data.Data, data.Data)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data.ID, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nDesign nodes to be safely retryable:\n// ✅ Good: Idempotent operation\nfunc (n *SaveNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    data := prepResult.(Record)\n    \n    // Use upsert instead of insert\n    _, err := db.Exec(`\n        INSERT INTO records (id, data) VALUES (?, ?)\n        ON CONFLICT (id) DO UPDATE SET data = ?\n    `, data.ID, data.Data, data.Data)\n    \n    return data.ID, err\n}\n","title":"Idempotency","titles":["Best Practices","Node Design"]},"4":{"href":"/best-practices#error-handling","html":"\n<p>Return clear, actionable errors:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ❌ Bad: Generic error</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">New</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ✅ Good: Descriptive error</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed to fetch user </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, userID, err)</span></span></code></pre>\n","isPage":false,"text":"\nReturn clear, actionable errors:\n// ❌ Bad: Generic error\nreturn nil, errors.New(&quot;failed&quot;)\n \n// ✅ Good: Descriptive error\nreturn nil, fmt.Errorf(&quot;failed to fetch user %d: %w&quot;, userID, err)\n","title":"Error Handling","titles":["Best Practices","Node Design"]},"5":{"href":"/best-practices#flow-design","html":"\n","isPage":false,"text":"\n","title":"Flow Design","titles":["Best Practices"]},"6":{"href":"/best-practices#modular-flows","html":"\n<p>Create reusable sub-flows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Reusable validation flow</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    schemaCheck </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSchemaValidator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    businessRules </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createBusinessValidator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaCheck)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaCheck, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, businessRules)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use in multiple places</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">apiFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(parseNode, flyt.DefaultAction, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nCreate reusable sub-flows:\n// Reusable validation flow\nfunc createValidationFlow() *flyt.Flow {\n    schemaCheck := createSchemaValidator()\n    businessRules := createBusinessValidator()\n    \n    flow := flyt.NewFlow(schemaCheck)\n    flow.Connect(schemaCheck, &quot;valid&quot;, businessRules)\n    return flow\n}\n \n// Use in multiple places\nmainFlow.Connect(fetchNode, flyt.DefaultAction, createValidationFlow())\napiFlow.Connect(parseNode, flyt.DefaultAction, createValidationFlow())\n","title":"Modular Flows","titles":["Best Practices","Flow Design"]},"7":{"href":"/best-practices#error-boundaries","html":"\n<p>Centralize error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFlowWithErrorHandling</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errorHandler </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createErrorHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Connect all error paths to handler</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{startNode, processNode, saveNode} {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCentralize error handling:\nfunc createFlowWithErrorHandling() *flyt.Flow {\n    flow := flyt.NewFlow(startNode)\n    errorHandler := createErrorHandler()\n    \n    // Connect all error paths to handler\n    for _, node := range []flyt.Node{startNode, processNode, saveNode} {\n        flow.Connect(node, &quot;error&quot;, errorHandler)\n    }\n    \n    return flow\n}\n","title":"Error Boundaries","titles":["Best Practices","Flow Design"]},"8":{"href":"/best-practices#context-handling","html":"\n","isPage":false,"text":"\n","title":"Context Handling","titles":["Best Practices"]},"9":{"href":"/best-practices#respect-cancellation","html":"\n<p>Always check context in long-running operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Check context before each iteration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(results, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAlways check context in long-running operations:\nfunc (n *ProcessNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    items := prepResult.([]Item)\n    results := []Result{}\n    \n    for _, item := range items {\n        // Check context before each iteration\n        select {\n        case &lt;-ctx.Done():\n            return nil, ctx.Err()\n        default:\n        }\n        \n        result := processItem(ctx, item)\n        results = append(results, result)\n    }\n    \n    return results, nil\n}\n","title":"Respect Cancellation","titles":["Best Practices","Context Handling"]},"10":{"href":"/best-practices#timeout-management","html":"\n<p>Set appropriate timeouts:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">APINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create timeout context</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx, cancel </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithTimeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> cancel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nSet appropriate timeouts:\nfunc (n *APINode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Create timeout context\n    ctx, cancel := context.WithTimeout(ctx, 30*time.Second)\n    defer cancel()\n    \n    return callAPI(ctx, prepResult)\n}\n","title":"Timeout Management","titles":["Best Practices","Context Handling"]},"11":{"href":"/best-practices#concurrency-safety","html":"\n","isPage":false,"text":"\n","title":"Concurrency Safety","titles":["Best Practices"]},"12":{"href":"/best-practices#thread-safe-nodes","html":"\n<p>Protect shared state in nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CounterNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu    </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CounterNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    current </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.count</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> current, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nProtect shared state in nodes:\ntype CounterNode struct {\n    *flyt.BaseNode\n    mu    sync.Mutex\n    count int\n}\n \nfunc (n *CounterNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    n.mu.Lock()\n    n.count++\n    current := n.count\n    n.mu.Unlock()\n    \n    return current, nil\n}\n","title":"Thread-Safe Nodes","titles":["Best Practices","Concurrency Safety"]},"13":{"href":"/best-practices#avoid-shared-node-instances","html":"\n<p>Create new instances for concurrent use:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ❌ Bad: Sharing node instance</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, node, shared) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Race condition!</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ✅ Good: Create new instances</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), shared)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCreate new instances for concurrent use:\n// ❌ Bad: Sharing node instance\nnode := createProcessNode()\nfor i := 0; i &lt; 10; i++ {\n    go flyt.Run(ctx, node, shared) // Race condition!\n}\n \n// ✅ Good: Create new instances\nfor i := 0; i &lt; 10; i++ {\n    go flyt.Run(ctx, createProcessNode(), shared)\n}\n","title":"Avoid Shared Node Instances","titles":["Best Practices","Concurrency Safety"]},"14":{"href":"/best-practices#resource-management","html":"\n","isPage":false,"text":"\n","title":"Resource Management","titles":["Best Practices"]},"15":{"href":"/best-practices#clean-up-resources","html":"\n<p>Use defer for cleanup:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FileNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    file, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> os.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Open</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> file.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Always cleanup</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process file...</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(file)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUse defer for cleanup:\nfunc (n *FileNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    file, err := os.Open(prepResult.(string))\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close() // Always cleanup\n    \n    // Process file...\n    return processFile(file)\n}\n","title":"Clean Up Resources","titles":["Best Practices","Resource Management"]},"16":{"href":"/best-practices#connection-pooling","html":"\n<p>Reuse expensive resources:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DatabaseFlow</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DB</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewDatabaseFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">db</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DB</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{db: db}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">f </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        db: f.db, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Reuse connection pool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nReuse expensive resources:\ntype DatabaseFlow struct {\n    db *sql.DB\n}\n \nfunc NewDatabaseFlow(db *sql.DB) *DatabaseFlow {\n    return &amp;DatabaseFlow{db: db}\n}\n \nfunc (f *DatabaseFlow) CreateNode() flyt.Node {\n    return &amp;DatabaseNode{\n        BaseNode: flyt.NewBaseNode(),\n        db: f.db, // Reuse connection pool\n    }\n}\n","title":"Connection Pooling","titles":["Best Practices","Resource Management"]},"17":{"href":"/best-practices#testing","html":"\n","isPage":false,"text":"\n","title":"Testing","titles":["Best Practices"]},"18":{"href":"/best-practices#unit-test-nodes","html":"\n<p>Test nodes in isolation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">testing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test successful case</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;test input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Equal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;expected output&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test error case</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTest nodes in isolation:\nfunc TestProcessNode(t *testing.T) {\n    node := createProcessNode()\n    ctx := context.Background()\n    \n    // Test successful case\n    result, err := node.Exec(ctx, &quot;test input&quot;)\n    assert.NoError(t, err)\n    assert.Equal(t, &quot;expected output&quot;, result)\n    \n    // Test error case\n    result, err = node.Exec(ctx, nil)\n    assert.Error(t, err)\n}\n","title":"Unit Test Nodes","titles":["Best Practices","Testing"]},"19":{"href":"/best-practices#integration-test-flows","html":"\n<p>Test complete workflows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestCompleteFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">testing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMainFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, testData)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;output&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">True</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, ok)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Equal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, expectedResult, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTest complete workflows:\nfunc TestCompleteFlow(t *testing.T) {\n    flow := createMainFlow()\n    shared := flyt.NewSharedStore()\n    shared.Set(&quot;input&quot;, testData)\n    \n    ctx := context.Background()\n    err := flow.Run(ctx, shared)\n    assert.NoError(t, err)\n    \n    result, ok := shared.Get(&quot;output&quot;)\n    assert.True(t, ok)\n    assert.Equal(t, expectedResult, result)\n}\n","title":"Integration Test Flows","titles":["Best Practices","Testing"]},"20":{"href":"/best-practices#documentation","html":"\n","isPage":false,"text":"\n","title":"Documentation","titles":["Best Practices"]},"21":{"href":"/best-practices#document-node-behavior","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// FetchUserNode fetches user data from the API.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Prep: Reads &quot;user_id&quot; from SharedStore</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Exec: Fetches user from API, retries on network errors</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Post: Stores user data in &quot;user_data&quot; key</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Actions:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;success&quot;: User fetched successfully</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;not_found&quot;: User does not exist</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;error&quot;: Unrecoverable error occurred</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FetchUserNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    apiClient </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">APIClient</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// FetchUserNode fetches user data from the API.\n// \n// Prep: Reads &quot;user_id&quot; from SharedStore\n// Exec: Fetches user from API, retries on network errors\n// Post: Stores user data in &quot;user_data&quot; key\n// Actions:\n//   - &quot;success&quot;: User fetched successfully\n//   - &quot;not_found&quot;: User does not exist\n//   - &quot;error&quot;: Unrecoverable error occurred\ntype FetchUserNode struct {\n    *flyt.BaseNode\n    apiClient *APIClient\n}\n","title":"Document Node Behavior","titles":["Best Practices","Documentation"]},"22":{"href":"/best-practices#document-flow-structure","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// CreateOrderFlow processes new orders:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1. Validates order data</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 2. Checks inventory</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 3. Processes payment</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 4. Creates shipment</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 5. Sends confirmation</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Required SharedStore keys:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;order_data&quot;: OrderData struct</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;customer_id&quot;: string</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Sets SharedStore keys:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;order_id&quot;: string</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;tracking_number&quot;: string</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> CreateOrderFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// CreateOrderFlow processes new orders:\n// 1. Validates order data\n// 2. Checks inventory\n// 3. Processes payment\n// 4. Creates shipment\n// 5. Sends confirmation\n//\n// Required SharedStore keys:\n//   - &quot;order_data&quot;: OrderData struct\n//   - &quot;customer_id&quot;: string\n//\n// Sets SharedStore keys:\n//   - &quot;order_id&quot;: string\n//   - &quot;tracking_number&quot;: string\nfunc CreateOrderFlow() *flyt.Flow {\n    // ...\n}\n","title":"Document Flow Structure","titles":["Best Practices","Documentation"]},"23":{"href":"/best-practices#performance","html":"\n","isPage":false,"text":"\n","title":"Performance","titles":["Best Practices"]},"24":{"href":"/best-practices#batch-operations","html":"\n<p>Process items in batches when possible:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Instead of processing one at a time</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    process</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process in batches</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, items)</span></span></code></pre>\n","isPage":false,"text":"\nProcess items in batches when possible:\n// Instead of processing one at a time\nfor _, item := range items {\n    process(item)\n}\n \n// Process in batches\nbatchNode := flyt.NewBatchNode(processFunc, true)\nshared.Set(&quot;items&quot;, items)\n","title":"Batch Operations","titles":["Best Practices","Performance"]},"25":{"href":"/best-practices#lazy-loading","html":"\n<p>Load data only when needed:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Only load the data this node needs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> needsUserData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(shared) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        userData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> loadUserData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> userData, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nLoad data only when needed:\nfunc (n *ProcessNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    // Only load the data this node needs\n    if needsUserData(shared) {\n        userData := loadUserData()\n        return userData, nil\n    }\n    return nil, nil\n}\n","title":"Lazy Loading","titles":["Best Practices","Performance"]},"26":{"href":"/best-practices#monitoring","html":"\n","isPage":false,"text":"\n","title":"Monitoring","titles":["Best Practices"]},"27":{"href":"/best-practices#add-observability","html":"\n<p>Log important events:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    start </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ProcessNode took </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(start))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ProcessNode error: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ProcessNode success: processed </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nLog important events:\nfunc (n *ProcessNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    start := time.Now()\n    defer func() {\n        log.Printf(&quot;ProcessNode took %v&quot;, time.Since(start))\n    }()\n    \n    result, err := process(prepResult)\n    if err != nil {\n        log.Printf(&quot;ProcessNode error: %v&quot;, err)\n        return nil, err\n    }\n    \n    log.Printf(&quot;ProcessNode success: processed %d items&quot;, len(result))\n    return result, nil\n}\n","title":"Add Observability","titles":["Best Practices","Monitoring"]},"28":{"href":"/best-practices#next-steps","html":"\n<ul>\n<li><a href=\"https://github.com/mark3labs/flyt/tree/main/cookbook\">Examples</a> - See best practices in action</li>\n<li><a href=\"/advanced/custom-nodes\">Advanced Usage</a> - Advanced patterns</li>\n<li><a href=\"/concepts/nodes\">Core Concepts</a> - Review fundamentals</li>\n</ul>","isPage":false,"text":"\n\nExamples - See best practices in action\nAdvanced Usage - Advanced patterns\nCore Concepts - Review fundamentals\n","title":"Next Steps","titles":["Best Practices"]},"29":{"href":"/concepts/actions#actions","html":"</header>\n<p>Actions are strings returned by a node&#x27;s Post phase that determine the next step in a workflow. They provide dynamic, runtime control over flow execution.</p>\n","isPage":true,"text":"\nActions are strings returned by a node&#x27;s Post phase that determine the next step in a workflow. They provide dynamic, runtime control over flow execution.\n","title":"Actions","titles":[]},"30":{"href":"/concepts/actions#how-actions-work","html":"\n<p>When a node completes, its Post phase returns an action:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> success {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The flow then routes to the node connected with that action:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, retryNode)</span></span></code></pre>\n","isPage":false,"text":"\nWhen a node completes, its Post phase returns an action:\nfunc (n *MyNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    if success {\n        return &quot;continue&quot;, nil\n    }\n    return &quot;retry&quot;, nil\n}\nThe flow then routes to the node connected with that action:\nflow := flyt.NewFlow(startNode)\nflow.Connect(startNode, &quot;continue&quot;, processNode)\nflow.Connect(startNode, &quot;retry&quot;, retryNode)\n","title":"How Actions Work","titles":["Actions"]},"31":{"href":"/concepts/actions#default-action","html":"\n<p>The most common action is <code>flyt.DefaultAction</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Using the constant</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Returns &quot;default&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// In flow connections</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node1, flyt.DefaultAction, node2)</span></span></code></pre>\n","isPage":false,"text":"\nThe most common action is flyt.DefaultAction:\n// Using the constant\nreturn flyt.DefaultAction, nil  // Returns &quot;default&quot;\n \n// In flow connections\nflow.Connect(node1, flyt.DefaultAction, node2)\n","title":"Default Action","titles":["Actions"]},"32":{"href":"/concepts/actions#action-based-routing","html":"\n","isPage":false,"text":"\n","title":"Action-Based Routing","titles":["Actions"]},"33":{"href":"/concepts/actions#simple-branching","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">validationNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorNode)</span></span></code></pre>\n","isPage":false,"text":"\nvalidationNode := flyt.NewNode(\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n        data := prepResult.(string)\n        return len(data) &gt; 0, nil\n    }),\n    flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        if execResult.(bool) {\n            return &quot;valid&quot;, nil\n        }\n        return &quot;invalid&quot;, nil\n    }),\n)\n \nflow := flyt.NewFlow(validationNode)\nflow.Connect(validationNode, &quot;valid&quot;, processNode)\nflow.Connect(validationNode, &quot;invalid&quot;, errorNode)\n","title":"Simple Branching","titles":["Actions","Action-Based Routing"]},"34":{"href":"/concepts/actions#multi-way-branching","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">categoryNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;small&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;medium&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;large&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;small&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, smallHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;medium&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, mediumHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;large&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, largeHandler)</span></span></code></pre>\n","isPage":false,"text":"\ncategoryNode := flyt.NewNode(\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n        value := prepResult.(int)\n        if value &lt; 10 {\n            return &quot;small&quot;, nil\n        } else if value &lt; 100 {\n            return &quot;medium&quot;, nil\n        }\n        return &quot;large&quot;, nil\n    }),\n    flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        return flyt.Action(execResult.(string)), nil\n    }),\n)\n \nflow := flyt.NewFlow(categoryNode)\nflow.Connect(categoryNode, &quot;small&quot;, smallHandler)\nflow.Connect(categoryNode, &quot;medium&quot;, mediumHandler)\nflow.Connect(categoryNode, &quot;large&quot;, largeHandler)\n","title":"Multi-Way Branching","titles":["Actions","Action-Based Routing"]},"35":{"href":"/concepts/actions#flow-termination","html":"\n<p>If no connection exists for an action, the flow terminates:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node1)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node1, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, node2)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// If node1 returns &quot;stop&quot;, flow ends (no connection for &quot;stop&quot;)</span></span></code></pre>\n<p>Explicitly terminate by connecting to nil:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(finalNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;done&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nIf no connection exists for an action, the flow terminates:\nflow := flyt.NewFlow(node1)\nflow.Connect(node1, &quot;continue&quot;, node2)\n// If node1 returns &quot;stop&quot;, flow ends (no connection for &quot;stop&quot;)\nExplicitly terminate by connecting to nil:\nflow.Connect(finalNode, &quot;done&quot;, nil)\n","title":"Flow Termination","titles":["Actions"]},"36":{"href":"/concepts/actions#common-patterns","html":"\n","isPage":false,"text":"\n","title":"Common Patterns","titles":["Actions"]},"37":{"href":"/concepts/actions#successfailure-pattern","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeDecisionPost</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;failure&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc makeDecisionPost(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    if err := execResult.(error); err != nil {\n        return &quot;failure&quot;, nil\n    }\n    return &quot;success&quot;, nil\n}\n","title":"Success/Failure Pattern","titles":["Actions","Common Patterns"]},"38":{"href":"/concepts/actions#retry-pattern","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> retryablePost</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    attempts, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;attempts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> attempts.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;attempts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc retryablePost(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    attempts, _ := shared.Get(&quot;attempts&quot;)\n    count := attempts.(int)\n    \n    if execResult == nil &amp;&amp; count &lt; 3 {\n        shared.Set(&quot;attempts&quot;, count + 1)\n        return &quot;retry&quot;, nil\n    }\n    return &quot;continue&quot;, nil\n}\n","title":"Retry Pattern","titles":["Actions","Common Patterns"]},"39":{"href":"/concepts/actions#state-machine-pattern","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> statePost</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    currentState, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentState.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;init&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;process&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;processing&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;complete&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;finalize&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;done&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc statePost(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    currentState, _ := shared.Get(&quot;state&quot;)\n    \n    switch currentState.(string) {\n    case &quot;init&quot;:\n        shared.Set(&quot;state&quot;, &quot;processing&quot;)\n        return &quot;process&quot;, nil\n    case &quot;processing&quot;:\n        shared.Set(&quot;state&quot;, &quot;complete&quot;)\n        return &quot;finalize&quot;, nil\n    default:\n        return &quot;done&quot;, nil\n    }\n}\n","title":"State Machine Pattern","titles":["Actions","Common Patterns"]},"40":{"href":"/concepts/actions#dynamic-actions","html":"\n<p>Actions can be computed at runtime:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> dynamicPost</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    nextAction </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;next_action&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nextAction), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nActions can be computed at runtime:\nfunc dynamicPost(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    result := execResult.(map[string]any)\n    nextAction := result[&quot;next_action&quot;].(string)\n    return flyt.Action(nextAction), nil\n}\n","title":"Dynamic Actions","titles":["Actions"]},"41":{"href":"/concepts/actions#best-practices","html":"\n<ol>\n<li><strong>Use Descriptive Names</strong>: Actions should clearly indicate their purpose</li>\n<li><strong>Document Actions</strong>: List all possible actions a node can return</li>\n<li><strong>Handle All Cases</strong>: Ensure all possible actions have connections or intentionally terminate</li>\n<li><strong>Consistent Naming</strong>: Use a consistent naming scheme across your application</li>\n<li><strong>Avoid Magic Strings</strong>: Define action constants for reusability</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    ActionValidate</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;validate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    ActionProcess</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">  =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;process&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    ActionComplete</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;complete&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    ActionError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">    =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\n\nUse Descriptive Names: Actions should clearly indicate their purpose\nDocument Actions: List all possible actions a node can return\nHandle All Cases: Ensure all possible actions have connections or intentionally terminate\nConsistent Naming: Use a consistent naming scheme across your application\nAvoid Magic Strings: Define action constants for reusability\n\nconst (\n    ActionValidate = flyt.Action(&quot;validate&quot;)\n    ActionProcess  = flyt.Action(&quot;process&quot;)\n    ActionComplete = flyt.Action(&quot;complete&quot;)\n    ActionError    = flyt.Action(&quot;error&quot;)\n)\n","title":"Best Practices","titles":["Actions"]},"42":{"href":"/concepts/actions#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/flows\">Flows</a> - Connect nodes with actions</li>\n<li><a href=\"/patterns/branching\">Conditional Branching</a> - Advanced routing patterns</li>\n<li><a href=\"/advanced/nested-flows\">Nested Flows</a> - Compose complex workflows</li>\n</ul>","isPage":false,"text":"\n\nFlows - Connect nodes with actions\nConditional Branching - Advanced routing patterns\nNested Flows - Compose complex workflows\n","title":"Next Steps","titles":["Actions"]},"43":{"href":"/concepts/flows#flows","html":"</header>\n<p>Flows connect nodes together to create workflows. They define the execution path based on actions returned by nodes.</p>\n","isPage":true,"text":"\nFlows connect nodes together to create workflows. They define the execution path based on actions returned by nodes.\n","title":"Flows","titles":[]},"44":{"href":"/concepts/flows#creating-flows","html":"\n<p>Start with a single node and build connections:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create nodes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">startNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createStartNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">endNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEndNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Build flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, flyt.DefaultAction, endNode)</span></span></code></pre>\n","isPage":false,"text":"\nStart with a single node and build connections:\n// Create nodes\nstartNode := createStartNode()\nprocessNode := createProcessNode()\nendNode := createEndNode()\n \n// Build flow\nflow := flyt.NewFlow(startNode)\nflow.Connect(startNode, flyt.DefaultAction, processNode)\nflow.Connect(processNode, flyt.DefaultAction, endNode)\n","title":"Creating Flows","titles":["Flows"]},"45":{"href":"/concepts/flows#running-flows","html":"\n<p>Execute a flow with a context and SharedStore:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add initial data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;data to process&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Run the flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Fatal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;output&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nExecute a flow with a context and SharedStore:\nctx := context.Background()\nshared := flyt.NewSharedStore()\n \n// Add initial data\nshared.Set(&quot;input&quot;, &quot;data to process&quot;)\n \n// Run the flow\nerr := flow.Run(ctx, shared)\nif err != nil {\n    log.Fatal(err)\n}\n \n// Get results\nresult, _ := shared.Get(&quot;output&quot;)\n","title":"Running Flows","titles":["Flows"]},"46":{"href":"/concepts/flows#flow-connections","html":"\n","isPage":false,"text":"\n","title":"Flow Connections","titles":["Flows"]},"47":{"href":"/concepts/flows#linear-flow","html":"\n<p>Simple sequential execution:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node1)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node1, flyt.DefaultAction, node2)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node2, flyt.DefaultAction, node3)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node3, flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Terminate</span></span></code></pre>\n","isPage":false,"text":"\nSimple sequential execution:\nflow := flyt.NewFlow(node1)\nflow.Connect(node1, flyt.DefaultAction, node2)\nflow.Connect(node2, flyt.DefaultAction, node3)\nflow.Connect(node3, flyt.DefaultAction, nil) // Terminate\n","title":"Linear Flow","titles":["Flows","Flow Connections"]},"48":{"href":"/concepts/flows#branching-flow","html":"\n<p>Multiple paths based on actions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(decisionNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(decisionNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;path_a&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, nodeA)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(decisionNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;path_b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, nodeB)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodeA, flyt.DefaultAction, mergeNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodeB, flyt.DefaultAction, mergeNode)</span></span></code></pre>\n","isPage":false,"text":"\nMultiple paths based on actions:\nflow := flyt.NewFlow(decisionNode)\nflow.Connect(decisionNode, &quot;path_a&quot;, nodeA)\nflow.Connect(decisionNode, &quot;path_b&quot;, nodeB)\nflow.Connect(nodeA, flyt.DefaultAction, mergeNode)\nflow.Connect(nodeB, flyt.DefaultAction, mergeNode)\n","title":"Branching Flow","titles":["Flows","Flow Connections"]},"49":{"href":"/concepts/flows#loop-flow","html":"\n<p>Create cycles for retry or iteration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, startNode)    </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Loop back</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, endNode)</span></span></code></pre>\n","isPage":false,"text":"\nCreate cycles for retry or iteration:\nflow := flyt.NewFlow(startNode)\nflow.Connect(startNode, flyt.DefaultAction, processNode)\nflow.Connect(processNode, &quot;retry&quot;, startNode)    // Loop back\nflow.Connect(processNode, &quot;success&quot;, endNode)\n","title":"Loop Flow","titles":["Flows","Flow Connections"]},"50":{"href":"/concepts/flows#flow-as-node","html":"\n<p>Flows implement the Node interface and can be used as nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a sub-flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">subFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">subFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, flyt.DefaultAction, transformNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use sub-flow in main flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, subFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(subFlow, flyt.DefaultAction, saveNode)</span></span></code></pre>\n","isPage":false,"text":"\nFlows implement the Node interface and can be used as nodes:\n// Create a sub-flow\nsubFlow := flyt.NewFlow(validateNode)\nsubFlow.Connect(validateNode, flyt.DefaultAction, transformNode)\n \n// Use sub-flow in main flow\nmainFlow := flyt.NewFlow(fetchNode)\nmainFlow.Connect(fetchNode, flyt.DefaultAction, subFlow)\nmainFlow.Connect(subFlow, flyt.DefaultAction, saveNode)\n","title":"Flow as Node","titles":["Flows"]},"51":{"href":"/concepts/flows#complex-flow-patterns","html":"\n","isPage":false,"text":"\n","title":"Complex Flow Patterns","titles":["Flows"]},"52":{"href":"/concepts/flows#diamond-pattern","html":"\n<p>Split and merge execution paths:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;path1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, process1)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;path2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, process2)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(process1, flyt.DefaultAction, mergeNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(process2, flyt.DefaultAction, mergeNode)</span></span></code></pre>\n","isPage":false,"text":"\nSplit and merge execution paths:\nflow := flyt.NewFlow(splitNode)\nflow.Connect(splitNode, &quot;path1&quot;, process1)\nflow.Connect(splitNode, &quot;path2&quot;, process2)\nflow.Connect(process1, flyt.DefaultAction, mergeNode)\nflow.Connect(process2, flyt.DefaultAction, mergeNode)\n","title":"Diamond Pattern","titles":["Flows","Complex Flow Patterns"]},"53":{"href":"/concepts/flows#error-handling-flow","html":"\n<p>Centralized error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, flyt.DefaultAction, saveNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(saveNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorHandler)</span></span></code></pre>\n","isPage":false,"text":"\nCentralized error handling:\nflow := flyt.NewFlow(startNode)\nflow.Connect(startNode, &quot;error&quot;, errorHandler)\nflow.Connect(startNode, flyt.DefaultAction, processNode)\nflow.Connect(processNode, &quot;error&quot;, errorHandler)\nflow.Connect(processNode, flyt.DefaultAction, saveNode)\nflow.Connect(saveNode, &quot;error&quot;, errorHandler)\n","title":"Error Handling Flow","titles":["Flows","Complex Flow Patterns"]},"54":{"href":"/concepts/flows#pipeline-pattern","html":"\n<p>Data transformation pipeline:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, transformNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, rejectNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transformNode, flyt.DefaultAction, enrichNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(enrichNode, flyt.DefaultAction, saveNode)</span></span></code></pre>\n","isPage":false,"text":"\nData transformation pipeline:\nflow := flyt.NewFlow(fetchNode)\nflow.Connect(fetchNode, flyt.DefaultAction, validateNode)\nflow.Connect(validateNode, &quot;valid&quot;, transformNode)\nflow.Connect(validateNode, &quot;invalid&quot;, rejectNode)\nflow.Connect(transformNode, flyt.DefaultAction, enrichNode)\nflow.Connect(enrichNode, flyt.DefaultAction, saveNode)\n","title":"Pipeline Pattern","titles":["Flows","Complex Flow Patterns"]},"55":{"href":"/concepts/flows#flow-composition","html":"\n<p>Build complex flows from simpler ones:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    checkFormat </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFormatChecker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    checkBusiness </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createBusinessRules</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkFormat)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkFormat, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, checkBusiness)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMainFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fetch </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFetchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    validation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    process </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetch)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetch, flyt.DefaultAction, validation)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validation, flyt.DefaultAction, process)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nBuild complex flows from simpler ones:\nfunc createValidationFlow() *flyt.Flow {\n    checkFormat := createFormatChecker()\n    checkBusiness := createBusinessRules()\n    \n    flow := flyt.NewFlow(checkFormat)\n    flow.Connect(checkFormat, &quot;valid&quot;, checkBusiness)\n    return flow\n}\n \nfunc createMainFlow() *flyt.Flow {\n    fetch := createFetchNode()\n    validation := createValidationFlow()\n    process := createProcessNode()\n    \n    flow := flyt.NewFlow(fetch)\n    flow.Connect(fetch, flyt.DefaultAction, validation)\n    flow.Connect(validation, flyt.DefaultAction, process)\n    return flow\n}\n","title":"Flow Composition","titles":["Flows"]},"56":{"href":"/concepts/flows#debugging-flows","html":"\n<p>Add logging nodes for debugging:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createLoggingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Prep: SharedStore keys: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name, shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetAll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Exec&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Post: Result: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name, execResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Insert between nodes for debugging</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node1, flyt.DefaultAction, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createLoggingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;debug&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createLoggingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;debug&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), flyt.DefaultAction, node2)</span></span></code></pre>\n","isPage":false,"text":"\nAdd logging nodes for debugging:\nfunc createLoggingNode(name string) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            log.Printf(&quot;[%s] Prep: SharedStore keys: %v&quot;, name, shared.GetAll())\n            return nil, nil\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            log.Printf(&quot;[%s] Exec&quot;, name)\n            return prepResult, nil\n        }),\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            log.Printf(&quot;[%s] Post: Result: %v&quot;, name, execResult)\n            return flyt.DefaultAction, nil\n        }),\n    )\n}\n \n// Insert between nodes for debugging\nflow.Connect(node1, flyt.DefaultAction, createLoggingNode(&quot;debug&quot;))\nflow.Connect(createLoggingNode(&quot;debug&quot;), flyt.DefaultAction, node2)\n","title":"Debugging Flows","titles":["Flows"]},"57":{"href":"/concepts/flows#best-practices","html":"\n<ol>\n<li><strong>Start Simple</strong>: Build flows incrementally, testing as you go</li>\n<li><strong>Name Nodes</strong>: Give nodes descriptive names for easier debugging</li>\n<li><strong>Document Flows</strong>: Create diagrams or comments explaining flow logic</li>\n<li><strong>Reuse Flows</strong>: Extract common patterns into reusable sub-flows</li>\n<li><strong>Test Flows</strong>: Write tests for different execution paths</li>\n</ol>\n","isPage":false,"text":"\n\nStart Simple: Build flows incrementally, testing as you go\nName Nodes: Give nodes descriptive names for easier debugging\nDocument Flows: Create diagrams or comments explaining flow logic\nReuse Flows: Extract common patterns into reusable sub-flows\nTest Flows: Write tests for different execution paths\n\n","title":"Best Practices","titles":["Flows"]},"58":{"href":"/concepts/flows#visualizing-flows","html":"\n<p>Document your flows with clear structure:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Flow structure:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Start -&gt; Validate -&gt; Process -&gt; Save</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//              └─&gt; Error (on invalid)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, flyt.DefaultAction, saveNode)</span></span></code></pre>\n","isPage":false,"text":"\nDocument your flows with clear structure:\n// Flow structure:\n// Start -&gt; Validate -&gt; Process -&gt; Save\n//              └─&gt; Error (on invalid)\n \nflow := flyt.NewFlow(startNode)\nflow.Connect(startNode, flyt.DefaultAction, validateNode)\nflow.Connect(validateNode, &quot;valid&quot;, processNode)\nflow.Connect(validateNode, &quot;invalid&quot;, errorNode)\nflow.Connect(processNode, flyt.DefaultAction, saveNode)\n","title":"Visualizing Flows","titles":["Flows"]},"59":{"href":"/concepts/flows#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/shared-store\">Shared Store</a> - Share data between nodes</li>\n<li><a href=\"/advanced/nested-flows\">Nested Flows</a> - Advanced composition</li>\n<li><a href=\"/advanced/batch-flows\">Batch Flows</a> - Process multiple inputs</li>\n</ul>","isPage":false,"text":"\n\nShared Store - Share data between nodes\nNested Flows - Advanced composition\nBatch Flows - Process multiple inputs\n","title":"Next Steps","titles":["Flows"]},"60":{"href":"/concepts/nodes#nodes","html":"</header>\n<p>Nodes are the fundamental building blocks of Flyt workflows. Each node represents a single unit of work with a well-defined lifecycle.</p>\n","isPage":true,"text":"\nNodes are the fundamental building blocks of Flyt workflows. Each node represents a single unit of work with a well-defined lifecycle.\n","title":"Nodes","titles":[]},"61":{"href":"/concepts/nodes#node-lifecycle","html":"\n<p>Every node has three phases that execute in order:</p>\n","isPage":false,"text":"\nEvery node has three phases that execute in order:\n","title":"Node Lifecycle","titles":["Nodes"]},"62":{"href":"/concepts/nodes#1-prep-phase","html":"\n<p>The preparation phase reads from the SharedStore and prepares data for execution.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Read configuration or input data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    config, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    input, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;input_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Prepare and return data for Exec phase</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: config,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: input,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe preparation phase reads from the SharedStore and prepares data for execution.\nfunc (n *MyNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    // Read configuration or input data\n    config, _ := shared.Get(&quot;config&quot;)\n    input, _ := shared.Get(&quot;input_data&quot;)\n    \n    // Prepare and return data for Exec phase\n    return map[string]any{\n        &quot;config&quot;: config,\n        &quot;input&quot;: input,\n    }, nil\n}\n","title":"1. Prep Phase","titles":["Nodes","Node Lifecycle"]},"63":{"href":"/concepts/nodes#2-exec-phase","html":"\n<p>The execution phase performs the main work. This phase can be retried on failure.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Perform the main operation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Will trigger retry if configured</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe execution phase performs the main work. This phase can be retried on failure.\nfunc (n *MyNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    data := prepResult.(map[string]any)\n    \n    // Perform the main operation\n    result, err := processData(data[&quot;input&quot;])\n    if err != nil {\n        return nil, err // Will trigger retry if configured\n    }\n    \n    return result, nil\n}\n","title":"2. Exec Phase","titles":["Nodes","Node Lifecycle"]},"64":{"href":"/concepts/nodes#3-post-phase","html":"\n<p>The post-processing phase handles results and determines the next action.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Store results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;output&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, execResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Determine next action based on results</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isValid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;failure&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe post-processing phase handles results and determines the next action.\nfunc (n *MyNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    // Store results\n    shared.Set(&quot;output&quot;, execResult)\n    \n    // Determine next action based on results\n    if isValid(execResult) {\n        return &quot;success&quot;, nil\n    }\n    return &quot;failure&quot;, nil\n}\n","title":"3. Post Phase","titles":["Nodes","Node Lifecycle"]},"65":{"href":"/concepts/nodes#creating-nodes","html":"\n","isPage":false,"text":"\n","title":"Creating Nodes","titles":["Nodes"]},"66":{"href":"/concepts/nodes#using-helper-functions","html":"\n<p>The simplest way to create a node:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Prep logic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepData, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Exec logic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Post logic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nThe simplest way to create a node:\nnode := flyt.NewNode(\n    flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n        // Prep logic\n        return prepData, nil\n    }),\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n        // Exec logic\n        return result, nil\n    }),\n    flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        // Post logic\n        return flyt.DefaultAction, nil\n    }),\n)\n","title":"Using Helper Functions","titles":["Nodes","Creating Nodes"]},"67":{"href":"/concepts/nodes#custom-node-types","html":"\n<p>For complex nodes with state:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DatabaseNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DB</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewDatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">db</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DB</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        db: db,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    query </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    rows, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.db.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">QueryContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, query)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rows.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process rows...</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nFor complex nodes with state:\ntype DatabaseNode struct {\n    *flyt.BaseNode\n    db *sql.DB\n}\n \nfunc NewDatabaseNode(db *sql.DB) *DatabaseNode {\n    return &amp;DatabaseNode{\n        BaseNode: flyt.NewBaseNode(),\n        db: db,\n    }\n}\n \nfunc (n *DatabaseNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    query := prepResult.(string)\n    rows, err := n.db.QueryContext(ctx, query)\n    if err != nil {\n        return nil, err\n    }\n    defer rows.Close()\n    \n    // Process rows...\n    return results, nil\n}\n","title":"Custom Node Types","titles":["Nodes","Creating Nodes"]},"68":{"href":"/concepts/nodes#node-options","html":"\n<p>Configure node behavior with options:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execFunc),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),        </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Retry up to 3 times</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait 2 seconds between retries</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nConfigure node behavior with options:\nnode := flyt.NewNode(\n    flyt.WithExecFunc(execFunc),\n    flyt.WithMaxRetries(3),        // Retry up to 3 times\n    flyt.WithWait(time.Second * 2), // Wait 2 seconds between retries\n)\n","title":"Node Options","titles":["Nodes"]},"69":{"href":"/concepts/nodes#basenode","html":"\n<p>The <code>BaseNode</code> provides default implementations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Add custom fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewMyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Override only the methods you need</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Custom exec logic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe BaseNode provides default implementations:\ntype MyNode struct {\n    *flyt.BaseNode\n    // Add custom fields\n}\n \nfunc NewMyNode() *MyNode {\n    return &amp;MyNode{\n        BaseNode: flyt.NewBaseNode(\n            flyt.WithMaxRetries(5),\n            flyt.WithWait(time.Second),\n        ),\n    }\n}\n \n// Override only the methods you need\nfunc (n *MyNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Custom exec logic\n    return result, nil\n}\n","title":"BaseNode","titles":["Nodes"]},"70":{"href":"/concepts/nodes#thread-safety","html":"\n<p>Nodes should be thread-safe if used in concurrent batch operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SafeNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu      </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    counter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SafeNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.counter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.counter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Execution #</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, count), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nNodes should be thread-safe if used in concurrent batch operations:\ntype SafeNode struct {\n    *flyt.BaseNode\n    mu      sync.Mutex\n    counter int\n}\n \nfunc (n *SafeNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    n.mu.Lock()\n    n.counter++\n    count := n.counter\n    n.mu.Unlock()\n    \n    return fmt.Sprintf(&quot;Execution #%d&quot;, count), nil\n}\n","title":"Thread Safety","titles":["Nodes"]},"71":{"href":"/concepts/nodes#best-practices","html":"\n<ol>\n<li><strong>Single Responsibility</strong>: Each node should do one thing well</li>\n<li><strong>Idempotency</strong>: Design nodes to be safely retryable</li>\n<li><strong>Context Handling</strong>: Always respect context cancellation</li>\n<li><strong>Error Handling</strong>: Return clear, actionable errors</li>\n<li><strong>Resource Management</strong>: Clean up resources in defer blocks</li>\n</ol>\n","isPage":false,"text":"\n\nSingle Responsibility: Each node should do one thing well\nIdempotency: Design nodes to be safely retryable\nContext Handling: Always respect context cancellation\nError Handling: Return clear, actionable errors\nResource Management: Clean up resources in defer blocks\n\n","title":"Best Practices","titles":["Nodes"]},"72":{"href":"/concepts/nodes#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/actions\">Actions</a> - Control flow with actions</li>\n<li><a href=\"/concepts/flows\">Flows</a> - Connect nodes into workflows</li>\n<li><a href=\"/advanced/custom-nodes\">Custom Node Types</a> - Advanced node patterns</li>\n</ul>","isPage":false,"text":"\n\nActions - Control flow with actions\nFlows - Connect nodes into workflows\nCustom Node Types - Advanced node patterns\n","title":"Next Steps","titles":["Nodes"]},"73":{"href":"/concepts/shared-store#shared-store","html":"</header>\n<p>The SharedStore provides thread-safe data sharing between nodes in a flow. It acts as a key-value store that persists throughout flow execution.</p>\n","isPage":true,"text":"\nThe SharedStore provides thread-safe data sharing between nodes in a flow. It acts as a key-value store that persists throughout flow execution.\n","title":"Shared Store","titles":[]},"74":{"href":"/concepts/shared-store#creating-a-sharedstore","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nshared := flyt.NewSharedStore()\n","title":"Creating a SharedStore","titles":["Shared Store"]},"75":{"href":"/concepts/shared-store#basic-operations","html":"\n","isPage":false,"text":"\n","title":"Basic Operations","titles":["Shared Store"]},"76":{"href":"/concepts/shared-store#set-and-get","html":"\n<p>Store and retrieve individual values:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set a value</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;timeout&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get a value</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); ok {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;User ID: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, userID)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nStore and retrieve individual values:\n// Set a value\nshared.Set(&quot;user_id&quot;, 123)\nshared.Set(&quot;config&quot;, map[string]any{&quot;timeout&quot;: 30})\n \n// Get a value\nif value, ok := shared.Get(&quot;user_id&quot;); ok {\n    userID := value.(int)\n    fmt.Printf(&quot;User ID: %d\\n&quot;, userID)\n}\n","title":"Set and Get","titles":["Shared Store","Basic Operations"]},"77":{"href":"/concepts/shared-store#getall","html":"\n<p>Get a copy of all stored data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">allData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetAll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key, value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> allData {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, key, value)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nGet a copy of all stored data:\nallData := shared.GetAll()\nfor key, value := range allData {\n    fmt.Printf(&quot;%s: %v\\n&quot;, key, value)\n}\n","title":"GetAll","titles":["Shared Store","Basic Operations"]},"78":{"href":"/concepts/shared-store#merge","html":"\n<p>Merge multiple values at once:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Merge</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;active&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;timestamp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;metadata&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;version&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;env&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;production&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nMerge multiple values at once:\nshared.Merge(map[string]any{\n    &quot;status&quot;: &quot;active&quot;,\n    &quot;timestamp&quot;: time.Now(),\n    &quot;metadata&quot;: map[string]string{\n        &quot;version&quot;: &quot;1.0&quot;,\n        &quot;env&quot;: &quot;production&quot;,\n    },\n})\n","title":"Merge","titles":["Shared Store","Basic Operations"]},"79":{"href":"/concepts/shared-store#thread-safety","html":"\n<p>SharedStore is safe for concurrent access:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WaitGroup</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Multiple goroutines can safely access</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">id</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;worker_</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, id), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;done&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }(i)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nSharedStore is safe for concurrent access:\nvar wg sync.WaitGroup\n \n// Multiple goroutines can safely access\nfor i := 0; i &lt; 10; i++ {\n    wg.Add(1)\n    go func(id int) {\n        defer wg.Done()\n        shared.Set(fmt.Sprintf(&quot;worker_%d&quot;, id), &quot;done&quot;)\n    }(i)\n}\n \nwg.Wait()\n","title":"Thread Safety","titles":["Shared Store"]},"80":{"href":"/concepts/shared-store#common-patterns","html":"\n","isPage":false,"text":"\n","title":"Common Patterns","titles":["Shared Store"]},"81":{"href":"/concepts/shared-store#configuration-storage","html":"\n<p>Store configuration that multiple nodes need:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// In main or initial node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;base_url&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://api.example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;api_key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: os.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Getenv</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;API_KEY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;timeout&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;30s&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// In any node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">APINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    config, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nStore configuration that multiple nodes need:\n// In main or initial node\nshared.Set(&quot;api_config&quot;, map[string]string{\n    &quot;base_url&quot;: &quot;https://api.example.com&quot;,\n    &quot;api_key&quot;: os.Getenv(&quot;API_KEY&quot;),\n    &quot;timeout&quot;: &quot;30s&quot;,\n})\n \n// In any node\nfunc (n *APINode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    config, _ := shared.Get(&quot;api_config&quot;)\n    return config, nil\n}\n","title":"Configuration Storage","titles":["Shared Store","Common Patterns"]},"82":{"href":"/concepts/shared-store#accumulating-results","html":"\n<p>Collect results from multiple nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Node 1</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    resultList </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results.([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    resultList </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(resultList, execResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, resultList)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCollect results from multiple nodes:\n// Node 1\nfunc (n *Node1) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    results, _ := shared.Get(&quot;results&quot;)\n    if results == nil {\n        results = []any{}\n    }\n    \n    resultList := results.([]any)\n    resultList = append(resultList, execResult)\n    shared.Set(&quot;results&quot;, resultList)\n    \n    return flyt.DefaultAction, nil\n}\n","title":"Accumulating Results","titles":["Shared Store","Common Patterns"]},"83":{"href":"/concepts/shared-store#state-management","html":"\n<p>Track workflow state:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Initialize state</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;workflow_state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;initialized&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;start_time&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Update state in nodes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> updateState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">newState</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;workflow_state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, newState)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;last_update&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTrack workflow state:\n// Initialize state\nshared.Set(&quot;workflow_state&quot;, &quot;initialized&quot;)\nshared.Set(&quot;retry_count&quot;, 0)\nshared.Set(&quot;start_time&quot;, time.Now())\n \n// Update state in nodes\nfunc updateState(shared *flyt.SharedStore, newState string) {\n    shared.Set(&quot;workflow_state&quot;, newState)\n    shared.Set(&quot;last_update&quot;, time.Now())\n}\n","title":"State Management","titles":["Shared Store","Common Patterns"]},"84":{"href":"/concepts/shared-store#error-context","html":"\n<p>Store error information for debugging:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ErrorHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;last_error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: err.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;node&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ProcessNode&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;timestamp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: prepResult,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nStore error information for debugging:\nfunc (n *ErrorHandler) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    if err := execResult.(error); err != nil {\n        shared.Set(&quot;last_error&quot;, map[string]any{\n            &quot;error&quot;: err.Error(),\n            &quot;node&quot;: &quot;ProcessNode&quot;,\n            &quot;timestamp&quot;: time.Now(),\n            &quot;input&quot;: prepResult,\n        })\n        return &quot;error&quot;, nil\n    }\n    return flyt.DefaultAction, nil\n}\n","title":"Error Context","titles":["Shared Store","Common Patterns"]},"85":{"href":"/concepts/shared-store#batch-processing","html":"\n<p>SharedStore in batch operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Store items to process</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item3&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Store batch configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;batch_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;batch_size&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;concurrent&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;timeout&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">60</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// After batch processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">results, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">errors, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;errors&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nSharedStore in batch operations:\n// Store items to process\nshared.Set(&quot;items&quot;, []string{&quot;item1&quot;, &quot;item2&quot;, &quot;item3&quot;})\n \n// Store batch configuration\nshared.Set(&quot;batch_config&quot;, map[string]any{\n    &quot;batch_size&quot;: 10,\n    &quot;concurrent&quot;: true,\n    &quot;timeout&quot;: 60,\n})\n \n// After batch processing\nresults, _ := shared.Get(&quot;results&quot;)\nerrors, _ := shared.Get(&quot;errors&quot;)\n","title":"Batch Processing","titles":["Shared Store"]},"86":{"href":"/concepts/shared-store#isolation-in-batch-flows","html":"\n<p>Each flow in a batch has its own SharedStore:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // This shared is from the parent</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    baseConfig, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;base_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: baseConfig}, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Each gets own SharedStore</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: baseConfig},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nEach flow in a batch has its own SharedStore:\nbatchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\n    // This shared is from the parent\n    baseConfig, _ := shared.Get(&quot;base_config&quot;)\n    \n    return []flyt.FlowInputs{\n        {&quot;id&quot;: 1, &quot;config&quot;: baseConfig}, // Each gets own SharedStore\n        {&quot;id&quot;: 2, &quot;config&quot;: baseConfig},\n    }, nil\n}\n","title":"Isolation in Batch Flows","titles":["Shared Store"]},"87":{"href":"/concepts/shared-store#best-practices","html":"\n","isPage":false,"text":"\n","title":"Best Practices","titles":["Shared Store"]},"88":{"href":"/concepts/shared-store#1-type-safety","html":"\n<p>Use type assertions carefully:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Safe type assertion</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); ok {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); ok {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Use count</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Handle type mismatch</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUse type assertions carefully:\n// Safe type assertion\nif value, ok := shared.Get(&quot;count&quot;); ok {\n    if count, ok := value.(int); ok {\n        // Use count\n    } else {\n        // Handle type mismatch\n    }\n}\n","title":"1. Type Safety","titles":["Shared Store","Best Practices"]},"89":{"href":"/concepts/shared-store#2-key-naming","html":"\n<p>Use consistent, descriptive keys:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    KeyUserID</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">     =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;user_id&quot;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    KeyAuthToken</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">  =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;auth_token&quot;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    KeyResults</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">    =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;processing_results&quot;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    KeyErrorCount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;error_count&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nUse consistent, descriptive keys:\nconst (\n    KeyUserID     = &quot;user_id&quot;\n    KeyAuthToken  = &quot;auth_token&quot;\n    KeyResults    = &quot;processing_results&quot;\n    KeyErrorCount = &quot;error_count&quot;\n)\n","title":"2. Key Naming","titles":["Shared Store","Best Practices"]},"90":{"href":"/concepts/shared-store#3-data-structure","html":"\n<p>Store structured data for clarity:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> WorkflowContext</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    RequestID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    UserID    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    StartTime </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Metadata  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;context&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkflowContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    RequestID: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;req-123&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    UserID:    </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">456</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    StartTime: time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Metadata:  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;source&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nStore structured data for clarity:\ntype WorkflowContext struct {\n    RequestID string\n    UserID    int\n    StartTime time.Time\n    Metadata  map[string]string\n}\n \nshared.Set(&quot;context&quot;, WorkflowContext{\n    RequestID: &quot;req-123&quot;,\n    UserID:    456,\n    StartTime: time.Now(),\n    Metadata:  map[string]string{&quot;source&quot;: &quot;api&quot;},\n})\n","title":"3. Data Structure","titles":["Shared Store","Best Practices"]},"91":{"href":"/concepts/shared-store#4-cleanup","html":"\n<p>Clear sensitive data when done:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">defer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Clear sensitive data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;auth_token&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api_key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}()</span></span></code></pre>\n","isPage":false,"text":"\nClear sensitive data when done:\ndefer func() {\n    // Clear sensitive data\n    shared.Set(&quot;auth_token&quot;, nil)\n    shared.Set(&quot;api_key&quot;, nil)\n}()\n","title":"4. Cleanup","titles":["Shared Store","Best Practices"]},"92":{"href":"/concepts/shared-store#5-documentation","html":"\n<p>Document expected keys:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SharedStore keys used by this flow:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - &quot;input_file&quot;: string - Path to input file</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - &quot;output_dir&quot;: string - Output directory path</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - &quot;processed_count&quot;: int - Number of processed items</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - &quot;errors&quot;: []error - Collection of errors</span></span></code></pre>\n","isPage":false,"text":"\nDocument expected keys:\n// SharedStore keys used by this flow:\n// - &quot;input_file&quot;: string - Path to input file\n// - &quot;output_dir&quot;: string - Output directory path\n// - &quot;processed_count&quot;: int - Number of processed items\n// - &quot;errors&quot;: []error - Collection of errors\n","title":"5. Documentation","titles":["Shared Store","Best Practices"]},"93":{"href":"/concepts/shared-store#debugging","html":"\n<p>Use GetAll for debugging:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> debugSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetAll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;=== SharedStore Contents ===&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> k, v </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%T</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> = </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, k, v, v)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;===========================&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUse GetAll for debugging:\nfunc debugSharedStore(shared *flyt.SharedStore) {\n    data := shared.GetAll()\n    fmt.Println(&quot;=== SharedStore Contents ===&quot;)\n    for k, v := range data {\n        fmt.Printf(&quot;%s: %T = %v\\n&quot;, k, v, v)\n    }\n    fmt.Println(&quot;===========================&quot;)\n}\n","title":"Debugging","titles":["Shared Store"]},"94":{"href":"/concepts/shared-store#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/nodes\">Nodes</a> - Use SharedStore in node lifecycle</li>\n<li><a href=\"/advanced/batch-processing\">Batch Processing</a> - SharedStore in batch operations</li>\n<li><a href=\"/best-practices\">Best Practices</a> - General Flyt best practices</li>\n</ul>","isPage":false,"text":"\n\nNodes - Use SharedStore in node lifecycle\nBatch Processing - SharedStore in batch operations\nBest Practices - General Flyt best practices\n","title":"Next Steps","titles":["Shared Store"]},"95":{"href":"/getting-started/installation#installation","html":"</header>\n<p>Flyt requires Go 1.21 or later.</p>\n","isPage":true,"text":"\nFlyt requires Go 1.21 or later.\n","title":"Installation","titles":[]},"96":{"href":"/getting-started/installation#install-with-go-get","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> get</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> github.com/mark3labs/flyt</span></span></code></pre>\n","isPage":false,"text":"\ngo get github.com/mark3labs/flyt\n","title":"Install with go get","titles":["Installation"]},"97":{"href":"/getting-started/installation#import-in-your-code","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span></code></pre>\n","isPage":false,"text":"\nimport &quot;github.com/mark3labs/flyt&quot;\n","title":"Import in your code","titles":["Installation"]},"98":{"href":"/getting-started/installation#verify-installation","html":"\n<p>Create a simple test file to verify the installation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">package</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> main</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;test&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;test&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); ok {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Flyt installed successfully! Value: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, val)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Run it:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> main.go</span></span></code></pre>\n<p>You should see:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Flyt installed successfully! Value: success</span></span></code></pre>\n","isPage":false,"text":"\nCreate a simple test file to verify the installation:\npackage main\n \nimport (\n    &quot;fmt&quot;\n    &quot;github.com/mark3labs/flyt&quot;\n)\n \nfunc main() {\n    shared := flyt.NewSharedStore()\n    shared.Set(&quot;test&quot;, &quot;success&quot;)\n    \n    if val, ok := shared.Get(&quot;test&quot;); ok {\n        fmt.Printf(&quot;Flyt installed successfully! Value: %v\\n&quot;, val)\n    }\n}\nRun it:\ngo run main.go\nYou should see:\nFlyt installed successfully! Value: success\n","title":"Verify installation","titles":["Installation"]},"99":{"href":"/getting-started/installation#next-steps","html":"\n<ul>\n<li><a href=\"/getting-started/quick-start\">Quick Start Guide</a> - Build your first workflow</li>\n<li><a href=\"/getting-started/template\">Project Template</a> - Start with a pre-configured project</li>\n<li><a href=\"/concepts/nodes\">Core Concepts</a> - Understand the fundamentals</li>\n</ul>","isPage":false,"text":"\n\nQuick Start Guide - Build your first workflow\nProject Template - Start with a pre-configured project\nCore Concepts - Understand the fundamentals\n","title":"Next Steps","titles":["Installation"]},"100":{"href":"/getting-started/quick-start#quick-start","html":"</header>\n<p>This guide will help you build your first Flyt workflow in 5 minutes.</p>\n","isPage":true,"text":"\nThis guide will help you build your first Flyt workflow in 5 minutes.\n","title":"Quick Start","titles":[]},"101":{"href":"/getting-started/quick-start#your-first-node","html":"\n<p>Let&#x27;s start with a simple node that processes data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">package</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> main</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create a node with just an Exec function</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Processing data...&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Hello, Flyt!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create shared store and context</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Run the node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    action, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, node, shared)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        panic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Completed with action: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, action)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nLet&#x27;s start with a simple node that processes data:\npackage main\n \nimport (\n    &quot;context&quot;\n    &quot;fmt&quot;\n    &quot;github.com/mark3labs/flyt&quot;\n)\n \nfunc main() {\n    // Create a node with just an Exec function\n    node := flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            fmt.Println(&quot;Processing data...&quot;)\n            return &quot;Hello, Flyt!&quot;, nil\n        }),\n    )\n \n    // Create shared store and context\n    shared := flyt.NewSharedStore()\n    ctx := context.Background()\n \n    // Run the node\n    action, err := flyt.Run(ctx, node, shared)\n    if err != nil {\n        panic(err)\n    }\n    \n    fmt.Printf(&quot;Completed with action: %s\\n&quot;, action)\n}\n","title":"Your First Node","titles":["Quick Start"]},"102":{"href":"/getting-started/quick-start#building-a-flow","html":"\n<p>Now let&#x27;s create a simple workflow with multiple nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">package</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> main</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create nodes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fetchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Fetching data...&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;important info&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;fetched_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, execResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            data, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;fetched_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Processing: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;processed: &quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Build the flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, processNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Run the flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        panic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Flow completed successfully!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nNow let&#x27;s create a simple workflow with multiple nodes:\npackage main\n \nimport (\n    &quot;context&quot;\n    &quot;fmt&quot;\n    &quot;github.com/mark3labs/flyt&quot;\n)\n \nfunc main() {\n    // Create nodes\n    fetchNode := flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            fmt.Println(&quot;Fetching data...&quot;)\n            return map[string]string{&quot;data&quot;: &quot;important info&quot;}, nil\n        }),\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            shared.Set(&quot;fetched_data&quot;, execResult)\n            return flyt.DefaultAction, nil\n        }),\n    )\n \n    processNode := flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            data, _ := shared.Get(&quot;fetched_data&quot;)\n            return data, nil\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            data := prepResult.(map[string]string)\n            fmt.Printf(&quot;Processing: %v\\n&quot;, data[&quot;data&quot;])\n            return &quot;processed: &quot; + data[&quot;data&quot;], nil\n        }),\n    )\n \n    // Build the flow\n    flow := flyt.NewFlow(fetchNode)\n    flow.Connect(fetchNode, flyt.DefaultAction, processNode)\n \n    // Run the flow\n    shared := flyt.NewSharedStore()\n    ctx := context.Background()\n    \n    err := flow.Run(ctx, shared)\n    if err != nil {\n        panic(err)\n    }\n    \n    fmt.Println(&quot;Flow completed successfully!&quot;)\n}\n","title":"Building a Flow","titles":["Quick Start"]},"103":{"href":"/getting-started/quick-start#adding-error-handling","html":"\n<p>Let&#x27;s add retry logic and error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createRobustNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            attempts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Attempt </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">...</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, attempts)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Simulate flaky operation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;temporary failure&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Success!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nLet&#x27;s add retry logic and error handling:\nfunc createRobustNode() flyt.Node {\n    attempts := 0\n    \n    return flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            attempts++\n            fmt.Printf(&quot;Attempt %d...\\n&quot;, attempts)\n            \n            // Simulate flaky operation\n            if attempts &lt; 2 {\n                return nil, fmt.Errorf(&quot;temporary failure&quot;)\n            }\n            \n            return &quot;Success!&quot;, nil\n        }),\n        flyt.WithMaxRetries(3),\n        flyt.WithWait(time.Second),\n    )\n}\n","title":"Adding Error Handling","titles":["Quick Start"]},"104":{"href":"/getting-started/quick-start#using-shared-store","html":"\n<p>The SharedStore allows nodes to communicate:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Set initial data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;timeout&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;retries&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            config, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Using config: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, config)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;configured&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, node, shared)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe SharedStore allows nodes to communicate:\nfunc main() {\n    shared := flyt.NewSharedStore()\n    \n    // Set initial data\n    shared.Set(&quot;config&quot;, map[string]any{\n        &quot;timeout&quot;: 30,\n        &quot;retries&quot;: 3,\n    })\n    \n    node := flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            config, _ := shared.Get(&quot;config&quot;)\n            return config, nil\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            config := prepResult.(map[string]any)\n            fmt.Printf(&quot;Using config: %v\\n&quot;, config)\n            return &quot;configured&quot;, nil\n        }),\n    )\n    \n    ctx := context.Background()\n    flyt.Run(ctx, node, shared)\n}\n","title":"Using Shared Store","titles":["Quick Start"]},"105":{"href":"/getting-started/quick-start#next-steps","html":"\n<p>Now that you&#x27;ve built your first workflow, explore:</p>\n<ul>\n<li><a href=\"/concepts/nodes\">Nodes</a> - Deep dive into node lifecycle</li>\n<li><a href=\"/concepts/actions\">Actions</a> - Control flow with actions</li>\n<li><a href=\"/patterns/error-handling\">Error Handling</a> - Build resilient workflows</li>\n<li><a href=\"https://github.com/mark3labs/flyt/tree/main/cookbook\">Examples</a> - Real-world use cases</li>\n</ul>","isPage":false,"text":"\nNow that you&#x27;ve built your first workflow, explore:\n\nNodes - Deep dive into node lifecycle\nActions - Control flow with actions\nError Handling - Build resilient workflows\nExamples - Real-world use cases\n","title":"Next Steps","titles":["Quick Start"]},"106":{"href":"/getting-started/template#project-template","html":"</header>\n<p>The fastest way to start a new Flyt project is using the official template.</p>\n","isPage":true,"text":"\nThe fastest way to start a new Flyt project is using the official template.\n","title":"Project Template","titles":[]},"107":{"href":"/getting-started/template#quick-setup","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Clone the template</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/mark3labs/flyt-project-template</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> my-flyt-project</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> my-flyt-project</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Remove template git history</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rm</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -rf</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .git</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> init</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Install dependencies</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mod</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tidy</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Run the example</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> main.go</span></span></code></pre>\n","isPage":false,"text":"\n# Clone the template\ngit clone https://github.com/mark3labs/flyt-project-template my-flyt-project\ncd my-flyt-project\n \n# Remove template git history\nrm -rf .git\ngit init\n \n# Install dependencies\ngo mod tidy\n \n# Run the example\ngo run main.go\n","title":"Quick Setup","titles":["Project Template"]},"108":{"href":"/getting-started/template#whats-included","html":"\n<p>The template provides:</p>\n","isPage":false,"text":"\nThe template provides:\n","title":"What&#x27;s Included","titles":["Project Template"]},"109":{"href":"/getting-started/template#project-structure","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">my-flyt-project/</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── main.go           # Entry point with example workflow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── nodes/            # Custom node implementations</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── fetch.go      # Example fetch node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── process.go    # Example processing node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   └── validate.go   # Example validation node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── flows/            # Reusable flow definitions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   └── example.go    # Example flow composition</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── go.mod            # Go module file</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">└── README.md         # Project documentation</span></span></code></pre>\n","isPage":false,"text":"\nmy-flyt-project/\n├── main.go           # Entry point with example workflow\n├── nodes/            # Custom node implementations\n│   ├── fetch.go      # Example fetch node\n│   ├── process.go    # Example processing node\n│   └── validate.go   # Example validation node\n├── flows/            # Reusable flow definitions\n│   └── example.go    # Example flow composition\n├── go.mod            # Go module file\n└── README.md         # Project documentation\n","title":"Project Structure","titles":["Project Template","What&#x27;s Included"]},"110":{"href":"/getting-started/template#example-code","html":"\n<p>The template includes a working example that demonstrates:</p>\n<ul>\n<li>Creating custom nodes</li>\n<li>Building flows</li>\n<li>Using the SharedStore</li>\n<li>Error handling with retries</li>\n<li>Action-based routing</li>\n</ul>\n","isPage":false,"text":"\nThe template includes a working example that demonstrates:\n\nCreating custom nodes\nBuilding flows\nUsing the SharedStore\nError handling with retries\nAction-based routing\n\n","title":"Example Code","titles":["Project Template","What&#x27;s Included"]},"111":{"href":"/getting-started/template#maingo","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">package</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> main</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">log</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">myproject/flows</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create shared store with initial data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api_key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;your-api-key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;base_url&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://api.example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create and run the example flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flows.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateExampleFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Fatal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Get results</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;final_result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); ok {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Success! Result: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\npackage main\n \nimport (\n    &quot;context&quot;\n    &quot;log&quot;\n    \n    &quot;github.com/mark3labs/flyt&quot;\n    &quot;myproject/flows&quot;\n)\n \nfunc main() {\n    // Create shared store with initial data\n    shared := flyt.NewSharedStore()\n    shared.Set(&quot;api_key&quot;, &quot;your-api-key&quot;)\n    shared.Set(&quot;base_url&quot;, &quot;https://api.example.com&quot;)\n    \n    // Create and run the example flow\n    flow := flows.CreateExampleFlow()\n    \n    ctx := context.Background()\n    if err := flow.Run(ctx, shared); err != nil {\n        log.Fatal(err)\n    }\n    \n    // Get results\n    if result, ok := shared.Get(&quot;final_result&quot;); ok {\n        log.Printf(&quot;Success! Result: %v\\n&quot;, result)\n    }\n}\n","title":"main.go","titles":["Project Template","What&#x27;s Included"]},"112":{"href":"/getting-started/template#customizing-the-template","html":"\n","isPage":false,"text":"\n","title":"Customizing the Template","titles":["Project Template"]},"113":{"href":"/getting-started/template#adding-new-nodes","html":"\n<p>Create a new file in the <code>nodes/</code> directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// nodes/custom.go</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">package</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> nodes</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> CreateCustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Your custom logic here</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;custom result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCreate a new file in the nodes/ directory:\n// nodes/custom.go\npackage nodes\n \nimport (\n    &quot;context&quot;\n    &quot;github.com/mark3labs/flyt&quot;\n)\n \nfunc CreateCustomNode() flyt.Node {\n    return flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            // Your custom logic here\n            return &quot;custom result&quot;, nil\n        }),\n    )\n}\n","title":"Adding New Nodes","titles":["Project Template","Customizing the Template"]},"114":{"href":"/getting-started/template#creating-new-flows","html":"\n<p>Add flows to the <code>flows/</code> directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// flows/custom.go</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">package</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flows</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">myproject/nodes</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> CreateCustomFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create nodes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    startNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nodes.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateCustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nodes.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Build flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAdd flows to the flows/ directory:\n// flows/custom.go\npackage flows\n \nimport (\n    &quot;github.com/mark3labs/flyt&quot;\n    &quot;myproject/nodes&quot;\n)\n \nfunc CreateCustomFlow() *flyt.Flow {\n    // Create nodes\n    startNode := nodes.CreateCustomNode()\n    processNode := nodes.CreateProcessNode()\n    \n    // Build flow\n    flow := flyt.NewFlow(startNode)\n    flow.Connect(startNode, flyt.DefaultAction, processNode)\n    \n    return flow\n}\n","title":"Creating New Flows","titles":["Project Template","Customizing the Template"]},"115":{"href":"/getting-started/template#best-practices","html":"\n<p>When using the template:</p>\n<ol>\n<li><strong>Organize by Feature</strong>: Group related nodes and flows together</li>\n<li><strong>Use Configuration</strong>: Store config in SharedStore or environment variables</li>\n<li><strong>Add Tests</strong>: Create <code>*_test.go</code> files for your nodes and flows</li>\n<li><strong>Document Your Nodes</strong>: Add comments explaining what each node does</li>\n<li><strong>Version Control</strong>: Initialize git and commit regularly</li>\n</ol>\n","isPage":false,"text":"\nWhen using the template:\n\nOrganize by Feature: Group related nodes and flows together\nUse Configuration: Store config in SharedStore or environment variables\nAdd Tests: Create *_test.go files for your nodes and flows\nDocument Your Nodes: Add comments explaining what each node does\nVersion Control: Initialize git and commit regularly\n\n","title":"Best Practices","titles":["Project Template"]},"116":{"href":"/getting-started/template#deployment","html":"\n<p>The template is ready for deployment:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Build the binary</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -o</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> myapp</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Run in production</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">./myapp</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Or use Docker</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -t</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> myapp</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> myapp</span></span></code></pre>\n","isPage":false,"text":"\nThe template is ready for deployment:\n# Build the binary\ngo build -o myapp\n \n# Run in production\n./myapp\n \n# Or use Docker\ndocker build -t myapp .\ndocker run myapp\n","title":"Deployment","titles":["Project Template"]},"117":{"href":"/getting-started/template#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/nodes\">Core Concepts</a> - Understand Flyt fundamentals</li>\n<li><a href=\"/patterns/closures\">Patterns</a> - Learn common patterns</li>\n<li><a href=\"https://github.com/mark3labs/flyt/tree/main/cookbook\">Examples</a> - See real-world implementations</li>\n</ul>","isPage":false,"text":"\n\nCore Concepts - Understand Flyt fundamentals\nPatterns - Learn common patterns\nExamples - See real-world implementations\n","title":"Next Steps","titles":["Project Template"]},"118":{"href":"/advanced/batch-flows#batch-flows","html":"</header>\n<p>Run the same flow multiple times with different parameters, perfect for processing multiple entities or parallel workflows.</p>\n","isPage":true,"text":"\nRun the same flow multiple times with different parameters, perfect for processing multiple entities or parallel workflows.\n","title":"Batch Flows","titles":[]},"119":{"href":"/advanced/batch-flows#basic-batch-flow","html":"\n<p>Run a flow for each set of inputs:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a flow factory - returns a new flow instance for each iteration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flowFactory </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    validateNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Each flow has its own SharedStore with merged FlowInputs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            userID, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            email, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;email&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: userID, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;email&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: email}, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Process user data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processUser</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Define input parameters for each flow iteration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Could fetch from database, API, etc.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;email&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user1@example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;email&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user2@example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;email&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user3@example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create and run batch flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flowFactory, batchFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// true for concurrent</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> batchFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared)</span></span></code></pre>\n","isPage":false,"text":"\nRun a flow for each set of inputs:\n// Create a flow factory - returns a new flow instance for each iteration\nflowFactory := func() *flyt.Flow {\n    validateNode := flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            // Each flow has its own SharedStore with merged FlowInputs\n            userID, _ := shared.Get(&quot;user_id&quot;)\n            email, _ := shared.Get(&quot;email&quot;)\n            return map[string]any{&quot;user_id&quot;: userID, &quot;email&quot;: email}, nil\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            data := prepResult.(map[string]any)\n            // Process user data\n            return processUser(data), nil\n        }),\n    )\n    return flyt.NewFlow(validateNode)\n}\n \n// Define input parameters for each flow iteration\nbatchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\n    // Could fetch from database, API, etc.\n    return []flyt.FlowInputs{\n        {&quot;user_id&quot;: 1, &quot;email&quot;: &quot;user1@example.com&quot;},\n        {&quot;user_id&quot;: 2, &quot;email&quot;: &quot;user2@example.com&quot;},\n        {&quot;user_id&quot;: 3, &quot;email&quot;: &quot;user3@example.com&quot;},\n    }, nil\n}\n \n// Create and run batch flow\nbatchFlow := flyt.NewBatchFlow(flowFactory, batchFunc, true) // true for concurrent\nshared := flyt.NewSharedStore()\nerr := batchFlow.Run(ctx, shared)\n","title":"Basic Batch Flow","titles":["Batch Flows"]},"120":{"href":"/advanced/batch-flows#sequential-vs-concurrent-execution","html":"\n<p>Control how flows are executed:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Sequential - one flow at a time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sequentialBatch </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flowFactory, batchFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Concurrent - multiple flows in parallel</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">concurrentBatch </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flowFactory, batchFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nControl how flows are executed:\n// Sequential - one flow at a time\nsequentialBatch := flyt.NewBatchFlow(flowFactory, batchFunc, false)\n \n// Concurrent - multiple flows in parallel\nconcurrentBatch := flyt.NewBatchFlow(flowFactory, batchFunc, true)\n","title":"Sequential vs Concurrent Execution","titles":["Batch Flows"]},"121":{"href":"/advanced/batch-flows#dynamic-input-generation","html":"\n<p>Generate inputs based on runtime data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Get configuration from parent shared store</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    config, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;batch_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    batchSize </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;size&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Fetch data from database</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    users, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchUsers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(batchSize)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Convert to FlowInputs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    inputs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(users))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, user </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> users {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        inputs[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   user.ID,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;user_name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: user.Name,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;user_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: user,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> inputs, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nGenerate inputs based on runtime data:\nbatchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\n    // Get configuration from parent shared store\n    config, _ := shared.Get(&quot;batch_config&quot;)\n    batchSize := config.(map[string]any)[&quot;size&quot;].(int)\n    \n    // Fetch data from database\n    users, err := fetchUsers(batchSize)\n    if err != nil {\n        return nil, err\n    }\n    \n    // Convert to FlowInputs\n    inputs := make([]flyt.FlowInputs, len(users))\n    for i, user := range users {\n        inputs[i] = flyt.FlowInputs{\n            &quot;user_id&quot;:   user.ID,\n            &quot;user_name&quot;: user.Name,\n            &quot;user_data&quot;: user,\n        }\n    }\n    \n    return inputs, nil\n}\n","title":"Dynamic Input Generation","titles":["Batch Flows"]},"122":{"href":"/advanced/batch-flows#complex-flow-factory","html":"\n<p>Create sophisticated flows for each batch:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flowFactory </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create nodes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fetchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFetchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    validateNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidateNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    saveNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSaveNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errorNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createErrorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Build flow with error handling</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, flyt.DefaultAction, saveNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCreate sophisticated flows for each batch:\nflowFactory := func() *flyt.Flow {\n    // Create nodes\n    fetchNode := createFetchNode()\n    validateNode := createValidateNode()\n    processNode := createProcessNode()\n    saveNode := createSaveNode()\n    errorNode := createErrorNode()\n    \n    // Build flow with error handling\n    flow := flyt.NewFlow(fetchNode)\n    flow.Connect(fetchNode, flyt.DefaultAction, validateNode)\n    flow.Connect(validateNode, &quot;valid&quot;, processNode)\n    flow.Connect(validateNode, &quot;invalid&quot;, errorNode)\n    flow.Connect(processNode, flyt.DefaultAction, saveNode)\n    flow.Connect(processNode, &quot;error&quot;, errorNode)\n    \n    return flow\n}\n","title":"Complex Flow Factory","titles":["Batch Flows"]},"123":{"href":"/advanced/batch-flows#batch-flow-with-configuration","html":"\n<p>Pass configuration to batch flows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createConfiguredBatchFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">config</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Config</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flowFactory </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Each flow gets the same configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">                // Use config in processing</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processWithConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult, config), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        )</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    batchFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        items, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        inputs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items.([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            inputs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(inputs, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;item&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: item,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: config,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> inputs, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flowFactory, batchFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPass configuration to batch flows:\nfunc createConfiguredBatchFlow(config Config) *flyt.Flow {\n    flowFactory := func() *flyt.Flow {\n        // Each flow gets the same configuration\n        node := flyt.NewNode(\n            flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n                // Use config in processing\n                return processWithConfig(prepResult, config), nil\n            }),\n        )\n        return flyt.NewFlow(node)\n    }\n    \n    batchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\n        items, _ := shared.Get(&quot;items&quot;)\n        \n        inputs := make([]flyt.FlowInputs, 0)\n        for _, item := range items.([]any) {\n            inputs = append(inputs, flyt.FlowInputs{\n                &quot;item&quot;: item,\n                &quot;config&quot;: config,\n            })\n        }\n        \n        return inputs, nil\n    }\n    \n    return flyt.NewBatchFlow(flowFactory, batchFunc, true)\n}\n","title":"Batch Flow with Configuration","titles":["Batch Flows"]},"124":{"href":"/advanced/batch-flows#result-aggregation","html":"\n<p>Collect results from all flows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ResultCollector</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu      </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errors  []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAggregatingBatchFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">collector</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ResultCollector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flowFactory </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                collector.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    collector.errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(collector.errors, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    collector.results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(collector.results, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                collector.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        )</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ... rest of batch flow setup</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCollect results from all flows:\ntype ResultCollector struct {\n    mu      sync.Mutex\n    results []any\n    errors  []error\n}\n \nfunc createAggregatingBatchFlow(collector *ResultCollector) *flyt.Flow {\n    flowFactory := func() *flyt.Flow {\n        node := flyt.NewNode(\n            flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n                result, err := process(prepResult)\n                \n                collector.mu.Lock()\n                if err != nil {\n                    collector.errors = append(collector.errors, err)\n                } else {\n                    collector.results = append(collector.results, result)\n                }\n                collector.mu.Unlock()\n                \n                return result, err\n            }),\n        )\n        return flyt.NewFlow(node)\n    }\n    \n    // ... rest of batch flow setup\n}\n","title":"Result Aggregation","titles":["Batch Flows"]},"125":{"href":"/advanced/batch-flows#batch-flow-with-progress","html":"\n<p>Track progress across batch execution:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ProgressTracker</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    total     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    completed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int32</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    failed    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int32</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProgressBatchFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">tracker</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ProgressTracker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flowFactory </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tracker.completed, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tracker.failed, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                progress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tracker.completed) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tracker.failed)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                percentage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(progress) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tracker.total) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Batch progress: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%.1f%%</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> (</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, percentage, progress, tracker.total)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        )</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    batchFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        inputs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> generateInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        tracker.total </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(inputs)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> inputs, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flowFactory, batchFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTrack progress across batch execution:\ntype ProgressTracker struct {\n    total     int\n    completed int32\n    failed    int32\n}\n \nfunc createProgressBatchFlow(tracker *ProgressTracker) *flyt.Flow {\n    flowFactory := func() *flyt.Flow {\n        node := flyt.NewNode(\n            flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n                if execResult != nil {\n                    atomic.AddInt32(&amp;tracker.completed, 1)\n                } else {\n                    atomic.AddInt32(&amp;tracker.failed, 1)\n                }\n                \n                progress := atomic.LoadInt32(&amp;tracker.completed) + atomic.LoadInt32(&amp;tracker.failed)\n                percentage := float64(progress) / float64(tracker.total) * 100\n                \n                log.Printf(&quot;Batch progress: %.1f%% (%d/%d)&quot;, percentage, progress, tracker.total)\n                \n                return flyt.DefaultAction, nil\n            }),\n        )\n        return flyt.NewFlow(node)\n    }\n    \n    batchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\n        inputs := generateInputs()\n        tracker.total = len(inputs)\n        return inputs, nil\n    }\n    \n    return flyt.NewBatchFlow(flowFactory, batchFunc, true)\n}\n","title":"Batch Flow with Progress","titles":["Batch Flows"]},"126":{"href":"/advanced/batch-flows#conditional-batch-processing","html":"\n<p>Process batches based on conditions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mode, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing_mode&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> inputs []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mode.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;all&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        inputs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAllInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;pending&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        inputs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getPendingInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        inputs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getFailedInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;unknown mode: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, mode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Filter based on additional criteria</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    filtered </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowInputs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, input </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> inputs {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> shouldProcess</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            filtered </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(filtered, input)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> filtered, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nProcess batches based on conditions:\nbatchFunc := func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.FlowInputs, error) {\n    mode, _ := shared.Get(&quot;processing_mode&quot;)\n    \n    var inputs []flyt.FlowInputs\n    \n    switch mode.(string) {\n    case &quot;all&quot;:\n        inputs = getAllInputs()\n    case &quot;pending&quot;:\n        inputs = getPendingInputs()\n    case &quot;failed&quot;:\n        inputs = getFailedInputs()\n    default:\n        return nil, fmt.Errorf(&quot;unknown mode: %s&quot;, mode)\n    }\n    \n    // Filter based on additional criteria\n    filtered := make([]flyt.FlowInputs, 0)\n    for _, input := range inputs {\n        if shouldProcess(input) {\n            filtered = append(filtered, input)\n        }\n    }\n    \n    return filtered, nil\n}\n","title":"Conditional Batch Processing","titles":["Batch Flows"]},"127":{"href":"/advanced/batch-flows#nested-batch-flows","html":"\n<p>Batch flows within batch flows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">outerFlowFactory </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Inner batch flow for processing items</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    innerBatchFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        innerFlowFactory,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        innerBatchFunc,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Outer flow that includes the batch</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fetchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFetchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, innerBatchFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(innerBatchFlow, flyt.DefaultAction, aggregateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create outer batch flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">outerBatchFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(outerFlowFactory, outerBatchFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nBatch flows within batch flows:\nouterFlowFactory := func() *flyt.Flow {\n    // Inner batch flow for processing items\n    innerBatchFlow := flyt.NewBatchFlow(\n        innerFlowFactory,\n        innerBatchFunc,\n        true,\n    )\n    \n    // Outer flow that includes the batch\n    fetchNode := createFetchNode()\n    \n    flow := flyt.NewFlow(fetchNode)\n    flow.Connect(fetchNode, flyt.DefaultAction, innerBatchFlow)\n    flow.Connect(innerBatchFlow, flyt.DefaultAction, aggregateNode)\n    \n    return flow\n}\n \n// Create outer batch flow\nouterBatchFlow := flyt.NewBatchFlow(outerFlowFactory, outerBatchFunc, false)\n","title":"Nested Batch Flows","titles":["Batch Flows"]},"128":{"href":"/advanced/batch-flows#error-recovery","html":"\n<p>Handle failures in batch flows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flowFactory </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> riskyOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">                // Store error for later analysis</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                errorData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                    &quot;input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: prepResult,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                    &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: err.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                    &quot;time&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">                storeError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errorData)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">                // Return partial result</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                    &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                    &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  err.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Don&#x27;t fail the entire batch</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle failures in batch flows:\nflowFactory := func() *flyt.Flow {\n    node := flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            result, err := riskyOperation(prepResult)\n            if err != nil {\n                // Store error for later analysis\n                errorData := map[string]any{\n                    &quot;input&quot;: prepResult,\n                    &quot;error&quot;: err.Error(),\n                    &quot;time&quot;:  time.Now(),\n                }\n                storeError(errorData)\n                \n                // Return partial result\n                return map[string]any{\n                    &quot;status&quot;: &quot;failed&quot;,\n                    &quot;error&quot;:  err.Error(),\n                }, nil  // Don&#x27;t fail the entire batch\n            }\n            return result, nil\n        }),\n    )\n    return flyt.NewFlow(node)\n}\n","title":"Error Recovery","titles":["Batch Flows"]},"129":{"href":"/advanced/batch-flows#best-practices","html":"\n<ol>\n<li><strong>Isolate Flows</strong>: Each flow instance should be independent</li>\n<li><strong>Manage Resources</strong>: Be mindful of resource usage with concurrent flows</li>\n<li><strong>Handle Failures</strong>: Decide whether one failure should stop the batch</li>\n<li><strong>Track Progress</strong>: Implement progress tracking for long-running batches</li>\n<li><strong>Limit Concurrency</strong>: Set reasonable concurrency limits</li>\n<li><strong>Test Thoroughly</strong>: Test with various batch sizes and failure scenarios</li>\n</ol>\n","isPage":false,"text":"\n\nIsolate Flows: Each flow instance should be independent\nManage Resources: Be mindful of resource usage with concurrent flows\nHandle Failures: Decide whether one failure should stop the batch\nTrack Progress: Implement progress tracking for long-running batches\nLimit Concurrency: Set reasonable concurrency limits\nTest Thoroughly: Test with various batch sizes and failure scenarios\n\n","title":"Best Practices","titles":["Batch Flows"]},"130":{"href":"/advanced/batch-flows#next-steps","html":"\n<ul>\n<li><a href=\"/advanced/batch-processing\">Batch Processing</a> - Process items within a single node</li>\n<li><a href=\"/advanced/nested-flows\">Nested Flows</a> - Compose complex workflows</li>\n<li><a href=\"/advanced/worker-pool\">Worker Pool</a> - Fine-grained concurrency control</li>\n</ul>","isPage":false,"text":"\n\nBatch Processing - Process items within a single node\nNested Flows - Compose complex workflows\nWorker Pool - Fine-grained concurrency control\n","title":"Next Steps","titles":["Batch Flows"]},"131":{"href":"/advanced/batch-processing#batch-processing","html":"</header>\n<p>Process collections of items efficiently with concurrent or sequential execution.</p>\n","isPage":true,"text":"\nProcess collections of items efficiently with concurrent or sequential execution.\n","title":"Batch Processing","titles":[]},"132":{"href":"/advanced/batch-processing#basic-batch-processing","html":"\n<p>Process items with a simple function:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Define processing function</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process each item</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, item), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create batch node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// true for concurrent</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set items in shared store</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item3&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Run batch processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">action, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, batchNode, shared)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">results, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(results) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [&quot;processed: item1&quot;, &quot;processed: item2&quot;, &quot;processed: item3&quot;]</span></span></code></pre>\n","isPage":false,"text":"\nProcess items with a simple function:\n// Define processing function\nprocessFunc := func(ctx context.Context, item any) (any, error) {\n    // Process each item\n    return fmt.Sprintf(&quot;processed: %v&quot;, item), nil\n}\n \n// Create batch node\nbatchNode := flyt.NewBatchNode(processFunc, true) // true for concurrent\n \n// Set items in shared store\nshared := flyt.NewSharedStore()\nshared.Set(&quot;items&quot;, []string{&quot;item1&quot;, &quot;item2&quot;, &quot;item3&quot;})\n \n// Run batch processing\nctx := context.Background()\naction, err := flyt.Run(ctx, batchNode, shared)\n \n// Get results\nresults, _ := shared.Get(&quot;results&quot;)\nfmt.Println(results) // [&quot;processed: item1&quot;, &quot;processed: item2&quot;, &quot;processed: item3&quot;]\n","title":"Basic Batch Processing","titles":["Batch Processing"]},"133":{"href":"/advanced/batch-processing#sequential-vs-concurrent","html":"\n<p>Choose the right execution mode:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Sequential processing - maintains order</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sequentialNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Concurrent processing - faster but unordered</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">concurrentNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nChoose the right execution mode:\n// Sequential processing - maintains order\nsequentialNode := flyt.NewBatchNode(processFunc, false)\n \n// Concurrent processing - faster but unordered\nconcurrentNode := flyt.NewBatchNode(processFunc, true)\n","title":"Sequential vs Concurrent","titles":["Batch Processing"]},"134":{"href":"/advanced/batch-processing#custom-keys","html":"\n<p>Use custom keys for input and output:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNodeWithKeys</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processFunc,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,           </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// concurrent</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;input_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,   </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// custom input key</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;output_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// custom output key</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;input_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, items)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Results will be in &quot;output_data&quot;</span></span></code></pre>\n","isPage":false,"text":"\nUse custom keys for input and output:\nbatchNode := flyt.NewBatchNodeWithKeys(\n    processFunc,\n    true,           // concurrent\n    &quot;input_data&quot;,   // custom input key\n    &quot;output_data&quot;,  // custom output key\n)\n \nshared.Set(&quot;input_data&quot;, items)\n// Results will be in &quot;output_data&quot;\n","title":"Custom Keys","titles":["Batch Processing"]},"135":{"href":"/advanced/batch-processing#advanced-configuration","html":"\n<p>Fine-tune batch processing with BatchConfig:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BatchConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    BatchSize:   </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,        </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process 10 items at a time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Concurrency: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,         </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use 5 concurrent workers</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ItemsKey:    </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,    </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Key for input items</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ResultsKey:  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;output&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Key for results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    CountKey:    </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;total&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,   </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Key for processed count</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Heavy processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sleep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.Millisecond)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNodeWithConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, config)</span></span></code></pre>\n","isPage":false,"text":"\nFine-tune batch processing with BatchConfig:\nconfig := &amp;flyt.BatchConfig{\n    BatchSize:   10,        // Process 10 items at a time\n    Concurrency: 5,         // Use 5 concurrent workers\n    ItemsKey:    &quot;data&quot;,    // Key for input items\n    ResultsKey:  &quot;output&quot;,  // Key for results\n    CountKey:    &quot;total&quot;,   // Key for processed count\n}\n \nprocessFunc := func(ctx context.Context, item any) (any, error) {\n    // Heavy processing\n    time.Sleep(100 * time.Millisecond)\n    return processItem(item)\n}\n \nbatchNode := flyt.NewBatchNodeWithConfig(processFunc, true, config)\n","title":"Advanced Configuration","titles":["Batch Processing"]},"136":{"href":"/advanced/batch-processing#error-handling","html":"\n<p>Handle errors in batch operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;negative value: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">action, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, batchNode, shared)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> batchErr, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BatchError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); ok {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Batch processing failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, batchErr.Message)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Access individual errors</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, e </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> batchErr.Errors {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> e </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Item </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, i, e)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle errors in batch operations:\nprocessFunc := func(ctx context.Context, item any) (any, error) {\n    if item.(int) &lt; 0 {\n        return nil, fmt.Errorf(&quot;negative value: %v&quot;, item)\n    }\n    return item.(int) * 2, nil\n}\n \nbatchNode := flyt.NewBatchNode(processFunc, true)\nshared.Set(&quot;items&quot;, []int{1, -2, 3, -4, 5})\n \naction, err := flyt.Run(ctx, batchNode, shared)\nif err != nil {\n    if batchErr, ok := err.(*flyt.BatchError); ok {\n        fmt.Printf(&quot;Batch processing failed: %s\\n&quot;, batchErr.Message)\n        \n        // Access individual errors\n        for i, e := range batchErr.Errors {\n            if e != nil {\n                fmt.Printf(&quot;Item %d failed: %v\\n&quot;, i, e)\n            }\n        }\n    }\n}\n","title":"Error Handling","titles":["Batch Processing"]},"137":{"href":"/advanced/batch-processing#batch-processing-patterns","html":"\n","isPage":false,"text":"\n","title":"Batch Processing Patterns","titles":["Batch Processing"]},"138":{"href":"/advanced/batch-processing#map-pattern","html":"\n<p>Transform each item:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mapFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    user </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">User</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> UserDTO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ID:   user.ID,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Name: user.Name,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Age:  user.Age,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mapNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mapFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nTransform each item:\nmapFunc := func(ctx context.Context, item any) (any, error) {\n    user := item.(User)\n    return UserDTO{\n        ID:   user.ID,\n        Name: user.Name,\n        Age:  user.Age,\n    }, nil\n}\n \nmapNode := flyt.NewBatchNode(mapFunc, true)\n","title":"Map Pattern","titles":["Batch Processing","Batch Processing Patterns"]},"139":{"href":"/advanced/batch-processing#filter-pattern","html":"\n<p>Process only matching items:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">filterFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Skip this item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">filterNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(filterFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nProcess only matching items:\nfilterFunc := func(ctx context.Context, item any) (any, error) {\n    value := item.(int)\n    if value &gt; 10 {\n        return value, nil\n    }\n    return nil, nil  // Skip this item\n}\n \nfilterNode := flyt.NewBatchNode(filterFunc, true)\n","title":"Filter Pattern","titles":["Batch Processing","Batch Processing Patterns"]},"140":{"href":"/advanced/batch-processing#reduce-pattern","html":"\n<p>Aggregate results:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SumNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    total </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu    </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SumNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.total </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.total, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAggregate results:\ntype SumNode struct {\n    *flyt.BaseNode\n    total int\n    mu    sync.Mutex\n}\n \nfunc (n *SumNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    items := prepResult.([]int)\n    \n    for _, item := range items {\n        n.mu.Lock()\n        n.total += item\n        n.mu.Unlock()\n    }\n    \n    return n.total, nil\n}\n","title":"Reduce Pattern","titles":["Batch Processing","Batch Processing Patterns"]},"141":{"href":"/advanced/batch-processing#chunked-processing","html":"\n<p>Process large datasets in chunks:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChunkedProcessor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">chunkSize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            items, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Process in chunks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items); i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunkSize {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunkSize</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                chunk </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items[i:end]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                chunkResults </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processChunk</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(chunk)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(results, chunkResults</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nProcess large datasets in chunks:\nfunc createChunkedProcessor(chunkSize int) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            items, _ := shared.Get(&quot;items&quot;)\n            return items, nil\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            items := prepResult.([]any)\n            results := make([]any, 0, len(items))\n            \n            // Process in chunks\n            for i := 0; i &lt; len(items); i += chunkSize {\n                end := i + chunkSize\n                if end &gt; len(items) {\n                    end = len(items)\n                }\n                \n                chunk := items[i:end]\n                chunkResults := processChunk(chunk)\n                results = append(results, chunkResults...)\n            }\n            \n            return results, nil\n        }),\n    )\n}\n","title":"Chunked Processing","titles":["Batch Processing"]},"142":{"href":"/advanced/batch-processing#progress-tracking","html":"\n<p>Monitor batch processing progress:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ProgressBatchNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int32</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    total     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int32</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ProgressBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processWithProgress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.total </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WaitGroup</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">idx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[idx] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Update progress</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            current </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.processed, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            progress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(current) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.total) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> current</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">%</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> current </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.total {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Progress: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%.1f%%</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> (</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, progress, current, n.total)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }(i, item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nMonitor batch processing progress:\ntype ProgressBatchNode struct {\n    *flyt.BaseNode\n    processed int32\n    total     int32\n}\n \nfunc (n *ProgressBatchNode) processWithProgress(ctx context.Context, items []any) ([]any, error) {\n    n.total = int32(len(items))\n    results := make([]any, len(items))\n    \n    var wg sync.WaitGroup\n    for i, item := range items {\n        wg.Add(1)\n        go func(idx int, data any) {\n            defer wg.Done()\n            \n            result, _ := processItem(data)\n            results[idx] = result\n            \n            // Update progress\n            current := atomic.AddInt32(&amp;n.processed, 1)\n            progress := float64(current) / float64(n.total) * 100\n            \n            if current%10 == 0 || current == n.total {\n                log.Printf(&quot;Progress: %.1f%% (%d/%d)&quot;, progress, current, n.total)\n            }\n        }(i, item)\n    }\n    \n    wg.Wait()\n    return results, nil\n}\n","title":"Progress Tracking","titles":["Batch Processing"]},"143":{"href":"/advanced/batch-processing#rate-limited-batch-processing","html":"\n<p>Control processing rate:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createRateLimitedBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">rps</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    limiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rate.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewLimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rate.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Limit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rps), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Wait for rate limiter</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> limiter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process item</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nControl processing rate:\nfunc createRateLimitedBatchNode(rps int) flyt.Node {\n    limiter := rate.NewLimiter(rate.Limit(rps), 1)\n    \n    processFunc := func(ctx context.Context, item any) (any, error) {\n        // Wait for rate limiter\n        if err := limiter.Wait(ctx); err != nil {\n            return nil, err\n        }\n        \n        // Process item\n        return callAPI(item)\n    }\n    \n    return flyt.NewBatchNode(processFunc, true)\n}\n","title":"Rate-Limited Batch Processing","titles":["Batch Processing"]},"144":{"href":"/advanced/batch-processing#batch-with-timeout","html":"\n<p>Set timeouts for batch operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTimeoutBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">timeout</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processFunc </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Create timeout context for this item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        itemCtx, cancel </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithTimeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, timeout)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        defer</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> cancel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        resultChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                resultChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">resultChan:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">errChan:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">itemCtx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing timeout for item: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processFunc, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nSet timeouts for batch operations:\nfunc createTimeoutBatchNode(timeout time.Duration) flyt.Node {\n    processFunc := func(ctx context.Context, item any) (any, error) {\n        // Create timeout context for this item\n        itemCtx, cancel := context.WithTimeout(ctx, timeout)\n        defer cancel()\n        \n        resultChan := make(chan any)\n        errChan := make(chan error)\n        \n        go func() {\n            result, err := processItem(item)\n            if err != nil {\n                errChan &lt;- err\n            } else {\n                resultChan &lt;- result\n            }\n        }()\n        \n        select {\n        case result := &lt;-resultChan:\n            return result, nil\n        case err := &lt;-errChan:\n            return nil, err\n        case &lt;-itemCtx.Done():\n            return nil, fmt.Errorf(&quot;processing timeout for item: %v&quot;, item)\n        }\n    }\n    \n    return flyt.NewBatchNode(processFunc, true)\n}\n","title":"Batch with Timeout","titles":["Batch Processing"]},"145":{"href":"/advanced/batch-processing#best-practices","html":"\n<ol>\n<li><strong>Choose Concurrency Wisely</strong>: Use concurrent for I/O-bound, sequential for order-dependent</li>\n<li><strong>Handle Errors Gracefully</strong>: Decide whether to fail fast or collect all errors</li>\n<li><strong>Monitor Progress</strong>: Add logging for long-running batches</li>\n<li><strong>Set Reasonable Limits</strong>: Configure batch size and concurrency based on resources</li>\n<li><strong>Test with Real Data</strong>: Test with production-like data volumes</li>\n<li><strong>Consider Memory Usage</strong>: Be mindful of memory when processing large batches</li>\n</ol>\n","isPage":false,"text":"\n\nChoose Concurrency Wisely: Use concurrent for I/O-bound, sequential for order-dependent\nHandle Errors Gracefully: Decide whether to fail fast or collect all errors\nMonitor Progress: Add logging for long-running batches\nSet Reasonable Limits: Configure batch size and concurrency based on resources\nTest with Real Data: Test with production-like data volumes\nConsider Memory Usage: Be mindful of memory when processing large batches\n\n","title":"Best Practices","titles":["Batch Processing"]},"146":{"href":"/advanced/batch-processing#next-steps","html":"\n<ul>\n<li><a href=\"/advanced/batch-flows\">Batch Flows</a> - Run flows with multiple inputs</li>\n<li><a href=\"/advanced/worker-pool\">Worker Pool</a> - Custom concurrent processing</li>\n<li><a href=\"/patterns/error-handling\">Error Handling</a> - Handle batch errors</li>\n</ul>","isPage":false,"text":"\n\nBatch Flows - Run flows with multiple inputs\nWorker Pool - Custom concurrent processing\nError Handling - Handle batch errors\n","title":"Next Steps","titles":["Batch Processing"]},"147":{"href":"/advanced/custom-nodes#custom-node-types","html":"</header>\n<p>Create sophisticated nodes with custom behavior, state management, and advanced features.</p>\n","isPage":true,"text":"\nCreate sophisticated nodes with custom behavior, state management, and advanced features.\n","title":"Custom Node Types","titles":[]},"148":{"href":"/advanced/custom-nodes#basic-custom-node","html":"\n<p>Extend BaseNode for custom functionality:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CustomNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    config </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Config</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    state  </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">State</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewCustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">config</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Config</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        config:   config,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        state:    </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Custom preparation logic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    input, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prepare</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> input, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Custom execution logic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processWithConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult, n.config)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Update</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Custom post-processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, n.state)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsComplete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;complete&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nExtend BaseNode for custom functionality:\ntype CustomNode struct {\n    *flyt.BaseNode\n    config Config\n    state  State\n}\n \nfunc NewCustomNode(config Config) *CustomNode {\n    return &amp;CustomNode{\n        BaseNode: flyt.NewBaseNode(),\n        config:   config,\n        state:    NewState(),\n    }\n}\n \nfunc (n *CustomNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    // Custom preparation logic\n    input, _ := shared.Get(&quot;input&quot;)\n    n.state.Prepare(input)\n    return input, nil\n}\n \nfunc (n *CustomNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Custom execution logic\n    result := n.processWithConfig(prepResult, n.config)\n    n.state.Update(result)\n    return result, nil\n}\n \nfunc (n *CustomNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    // Custom post-processing\n    shared.Set(&quot;state&quot;, n.state)\n    \n    if n.state.IsComplete() {\n        return &quot;complete&quot;, nil\n    }\n    return &quot;continue&quot;, nil\n}\n","title":"Basic Custom Node","titles":["Custom Node Types"]},"149":{"href":"/advanced/custom-nodes#stateful-nodes","html":"\n<p>Maintain state across executions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AccumulatorNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu       </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    values   []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    maxSize  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewAccumulatorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">maxSize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AccumulatorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AccumulatorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        values:   </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, maxSize),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        maxSize:  maxSize,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AccumulatorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Add to accumulator</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.values </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.values, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Check if buffer is full</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.values) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.maxSize {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process batch</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.values)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.values </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.values[:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear buffer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AccumulatorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process accumulated values</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(values),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  values,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nMaintain state across executions:\ntype AccumulatorNode struct {\n    *flyt.BaseNode\n    mu       sync.Mutex\n    values   []any\n    maxSize  int\n}\n \nfunc NewAccumulatorNode(maxSize int) *AccumulatorNode {\n    return &amp;AccumulatorNode{\n        BaseNode: flyt.NewBaseNode(),\n        values:   make([]any, 0, maxSize),\n        maxSize:  maxSize,\n    }\n}\n \nfunc (n *AccumulatorNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    n.mu.Lock()\n    defer n.mu.Unlock()\n    \n    // Add to accumulator\n    n.values = append(n.values, prepResult)\n    \n    // Check if buffer is full\n    if len(n.values) &gt;= n.maxSize {\n        // Process batch\n        result := n.processBatch(n.values)\n        n.values = n.values[:0] // Clear buffer\n        return result, nil\n    }\n    \n    return nil, nil\n}\n \nfunc (n *AccumulatorNode) processBatch(values []any) any {\n    // Process accumulated values\n    return map[string]any{\n        &quot;count&quot;: len(values),\n        &quot;data&quot;:  values,\n    }\n}\n","title":"Stateful Nodes","titles":["Custom Node Types"]},"150":{"href":"/advanced/custom-nodes#resource-managing-nodes","html":"\n<p>Handle external resources:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DatabaseNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DB</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    prepared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Stmt</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu       </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RWMutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewDatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">dsn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sql.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Open</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;postgres&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, dsn)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SetMaxOpenConns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">25</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SetMaxIdleConns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool:     db,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        prepared: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Stmt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    query </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">QueryRequest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Use prepared statement if available</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stmt, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getOrPrepare</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(query.SQL)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    rows, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">QueryContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, query.Args</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rows.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">scanResults</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rows)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getOrPrepare</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">sql</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Stmt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RLock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stmt, exists </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.prepared[sql]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RUnlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> exists {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stmt, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Double-check after acquiring write lock</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stmt, exists </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.prepared[sql]; exists {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stmt, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stmt, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prepare</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sql)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.prepared[sql] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stmt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stmt, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, stmt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.prepared {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        stmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle external resources:\ntype DatabaseNode struct {\n    *flyt.BaseNode\n    pool     *sql.DB\n    prepared map[string]*sql.Stmt\n    mu       sync.RWMutex\n}\n \nfunc NewDatabaseNode(dsn string) (*DatabaseNode, error) {\n    db, err := sql.Open(&quot;postgres&quot;, dsn)\n    if err != nil {\n        return nil, err\n    }\n    \n    db.SetMaxOpenConns(25)\n    db.SetMaxIdleConns(5)\n    \n    return &amp;DatabaseNode{\n        BaseNode: flyt.NewBaseNode(),\n        pool:     db,\n        prepared: make(map[string]*sql.Stmt),\n    }, nil\n}\n \nfunc (n *DatabaseNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    query := prepResult.(QueryRequest)\n    \n    // Use prepared statement if available\n    stmt, err := n.getOrPrepare(query.SQL)\n    if err != nil {\n        return nil, err\n    }\n    \n    rows, err := stmt.QueryContext(ctx, query.Args...)\n    if err != nil {\n        return nil, err\n    }\n    defer rows.Close()\n    \n    return n.scanResults(rows)\n}\n \nfunc (n *DatabaseNode) getOrPrepare(sql string) (*sql.Stmt, error) {\n    n.mu.RLock()\n    stmt, exists := n.prepared[sql]\n    n.mu.RUnlock()\n    \n    if exists {\n        return stmt, nil\n    }\n    \n    n.mu.Lock()\n    defer n.mu.Unlock()\n    \n    // Double-check after acquiring write lock\n    if stmt, exists := n.prepared[sql]; exists {\n        return stmt, nil\n    }\n    \n    stmt, err := n.pool.Prepare(sql)\n    if err != nil {\n        return nil, err\n    }\n    \n    n.prepared[sql] = stmt\n    return stmt, nil\n}\n \nfunc (n *DatabaseNode) Close() error {\n    n.mu.Lock()\n    defer n.mu.Unlock()\n    \n    for _, stmt := range n.prepared {\n        stmt.Close()\n    }\n    \n    return n.pool.Close()\n}\n","title":"Resource-Managing Nodes","titles":["Custom Node Types"]},"151":{"href":"/advanced/custom-nodes#retryablenode-implementation","html":"\n<p>Custom retry logic:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SmartRetryNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    attempts      </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    lastError     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    backoffFactor </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewSmartRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SmartRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SmartRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode:      flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        backoffFactor: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1.5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SmartRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Dynamic retry count based on error type</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.lastError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isNetworkError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastError):</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 5</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // More retries for network issues</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isRateLimitError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastError):</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Fewer retries for rate limits</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isAuthError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastError):</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // No retries for auth errors</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SmartRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.lastError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isRateLimitError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastError) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Extract retry-after from error if available</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> retryAfter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> extractRetryAfter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastError); retryAfter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> retryAfter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Exponential backoff with jitter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    base </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> math.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Pow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.backoffFactor, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.attempts))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    jitter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rand.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.3</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> base  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 30% jitter</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((base </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jitter) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SmartRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.attempts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">performOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.lastError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Reset on success</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.lastError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCustom retry logic:\ntype SmartRetryNode struct {\n    *flyt.BaseNode\n    attempts      int\n    lastError     error\n    backoffFactor float64\n}\n \nfunc NewSmartRetryNode() *SmartRetryNode {\n    return &amp;SmartRetryNode{\n        BaseNode:      flyt.NewBaseNode(),\n        backoffFactor: 1.5,\n    }\n}\n \nfunc (n *SmartRetryNode) GetMaxRetries() int {\n    // Dynamic retry count based on error type\n    if n.lastError != nil {\n        switch {\n        case isNetworkError(n.lastError):\n            return 5  // More retries for network issues\n        case isRateLimitError(n.lastError):\n            return 3  // Fewer retries for rate limits\n        case isAuthError(n.lastError):\n            return 0  // No retries for auth errors\n        default:\n            return 2\n        }\n    }\n    return 3\n}\n \nfunc (n *SmartRetryNode) GetWait() time.Duration {\n    if n.lastError != nil &amp;&amp; isRateLimitError(n.lastError) {\n        // Extract retry-after from error if available\n        if retryAfter := extractRetryAfter(n.lastError); retryAfter &gt; 0 {\n            return retryAfter\n        }\n    }\n    \n    // Exponential backoff with jitter\n    base := math.Pow(n.backoffFactor, float64(n.attempts))\n    jitter := rand.Float64() * 0.3 * base  // 30% jitter\n    return time.Duration((base + jitter) * float64(time.Second))\n}\n \nfunc (n *SmartRetryNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    n.attempts++\n    \n    result, err := n.performOperation(ctx, prepResult)\n    if err != nil {\n        n.lastError = err\n        return nil, err\n    }\n    \n    // Reset on success\n    n.attempts = 0\n    n.lastError = nil\n    return result, nil\n}\n","title":"RetryableNode Implementation","titles":["Custom Node Types"]},"152":{"href":"/advanced/custom-nodes#composite-nodes","html":"\n<p>Combine multiple operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PipelineNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stages []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewPipelineNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">stages</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ...func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PipelineNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PipelineNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        stages:   stages,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PipelineNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, stage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.stages {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> stage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, result)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;stage </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, i, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCombine multiple operations:\ntype PipelineNode struct {\n    *flyt.BaseNode\n    stages []func(context.Context, any) (any, error)\n}\n \nfunc NewPipelineNode(stages ...func(context.Context, any) (any, error)) *PipelineNode {\n    return &amp;PipelineNode{\n        BaseNode: flyt.NewBaseNode(),\n        stages:   stages,\n    }\n}\n \nfunc (n *PipelineNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    result := prepResult\n    \n    for i, stage := range n.stages {\n        select {\n        case &lt;-ctx.Done():\n            return nil, ctx.Err()\n        default:\n        }\n        \n        var err error\n        result, err = stage(ctx, result)\n        if err != nil {\n            return nil, fmt.Errorf(&quot;stage %d failed: %w&quot;, i, err)\n        }\n    }\n    \n    return result, nil\n}\n","title":"Composite Nodes","titles":["Custom Node Types"]},"153":{"href":"/advanced/custom-nodes#monitoring-nodes","html":"\n<p>Add observability:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MonitoredNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    name    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    metrics </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Metrics</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Metrics</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    executions   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    successes    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    failures     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    totalLatency </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewMonitoredNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">baseNode</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MonitoredNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MonitoredNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: baseNode.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        name:     name,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        metrics:  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Metrics</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MonitoredNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    start </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.executions, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.BaseNode.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    latency </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(start).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Milliseconds</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.totalLatency, latency)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.failures, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Execution failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> (latency: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">ms)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, n.name, err, latency)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.successes, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Execution succeeded (latency: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">ms)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, n.name, latency)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MonitoredNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMetrics</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;executions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:    atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.executions),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;successes&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.successes),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;failures&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:      atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.failures),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;avg_latency&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAverageLatency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;success_rate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSuccessRate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAdd observability:\ntype MonitoredNode struct {\n    *flyt.BaseNode\n    name    string\n    metrics *Metrics\n}\n \ntype Metrics struct {\n    executions   int64\n    successes    int64\n    failures     int64\n    totalLatency int64\n}\n \nfunc NewMonitoredNode(name string, baseNode flyt.Node) *MonitoredNode {\n    return &amp;MonitoredNode{\n        BaseNode: baseNode.(*flyt.BaseNode),\n        name:     name,\n        metrics:  &amp;Metrics{},\n    }\n}\n \nfunc (n *MonitoredNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    start := time.Now()\n    atomic.AddInt64(&amp;n.metrics.executions, 1)\n    \n    result, err := n.BaseNode.Exec(ctx, prepResult)\n    \n    latency := time.Since(start).Milliseconds()\n    atomic.AddInt64(&amp;n.metrics.totalLatency, latency)\n    \n    if err != nil {\n        atomic.AddInt64(&amp;n.metrics.failures, 1)\n        log.Printf(&quot;[%s] Execution failed: %v (latency: %dms)&quot;, n.name, err, latency)\n    } else {\n        atomic.AddInt64(&amp;n.metrics.successes, 1)\n        log.Printf(&quot;[%s] Execution succeeded (latency: %dms)&quot;, n.name, latency)\n    }\n    \n    return result, err\n}\n \nfunc (n *MonitoredNode) GetMetrics() map[string]any {\n    return map[string]any{\n        &quot;executions&quot;:    atomic.LoadInt64(&amp;n.metrics.executions),\n        &quot;successes&quot;:     atomic.LoadInt64(&amp;n.metrics.successes),\n        &quot;failures&quot;:      atomic.LoadInt64(&amp;n.metrics.failures),\n        &quot;avg_latency&quot;:   n.getAverageLatency(),\n        &quot;success_rate&quot;:  n.getSuccessRate(),\n    }\n}\n","title":"Monitoring Nodes","titles":["Custom Node Types"]},"154":{"href":"/advanced/custom-nodes#async-nodes","html":"\n<p>Handle asynchronous operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AsyncNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    workers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    queue   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Task</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wg      </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WaitGroup</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewAsyncNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AsyncNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AsyncNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        workers:  workers,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        queue:    </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Start workers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> workers; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        go</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">worker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AsyncNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">worker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> task </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.queue {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processTask</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(task)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AsyncNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    tasks </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tasks))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Submit all tasks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, task </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tasks {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        task.Index </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        task.Results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.queue </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> task</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Wait for completion</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    done </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{})</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(done)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">done:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AsyncNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.queue)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle asynchronous operations:\ntype AsyncNode struct {\n    *flyt.BaseNode\n    workers int\n    queue   chan Task\n    wg      sync.WaitGroup\n}\n \nfunc NewAsyncNode(workers int) *AsyncNode {\n    n := &amp;AsyncNode{\n        BaseNode: flyt.NewBaseNode(),\n        workers:  workers,\n        queue:    make(chan Task, workers*2),\n    }\n    \n    // Start workers\n    for i := 0; i &lt; workers; i++ {\n        go n.worker()\n    }\n    \n    return n\n}\n \nfunc (n *AsyncNode) worker() {\n    for task := range n.queue {\n        n.processTask(task)\n        n.wg.Done()\n    }\n}\n \nfunc (n *AsyncNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    tasks := prepResult.([]Task)\n    results := make([]Result, len(tasks))\n    \n    // Submit all tasks\n    for i, task := range tasks {\n        n.wg.Add(1)\n        task.Index = i\n        task.Results = &amp;results\n        n.queue &lt;- task\n    }\n    \n    // Wait for completion\n    done := make(chan struct{})\n    go func() {\n        n.wg.Wait()\n        close(done)\n    }()\n    \n    select {\n    case &lt;-ctx.Done():\n        return nil, ctx.Err()\n    case &lt;-done:\n        return results, nil\n    }\n}\n \nfunc (n *AsyncNode) Close() {\n    close(n.queue)\n}\n","title":"Async Nodes","titles":["Custom Node Types"]},"155":{"href":"/advanced/custom-nodes#validation-nodes","html":"\n<p>Ensure data integrity:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ValidationNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    rules []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ValidationRule</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ValidationRule</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Validate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">rules</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ...</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ValidationRule</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        rules:    rules,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, rule </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.rules {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rule.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Validate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, rule.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), err))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;validation failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, strings.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Join</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;; &quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nEnsure data integrity:\ntype ValidationNode struct {\n    *flyt.BaseNode\n    rules []ValidationRule\n}\n \ntype ValidationRule interface {\n    Validate(any) error\n    Name() string\n}\n \nfunc NewValidationNode(rules ...ValidationRule) *ValidationNode {\n    return &amp;ValidationNode{\n        BaseNode: flyt.NewBaseNode(),\n        rules:    rules,\n    }\n}\n \nfunc (n *ValidationNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    var errors []string\n    \n    for _, rule := range n.rules {\n        if err := rule.Validate(prepResult); err != nil {\n            errors = append(errors, fmt.Sprintf(&quot;%s: %v&quot;, rule.Name(), err))\n        }\n    }\n    \n    if len(errors) &gt; 0 {\n        return nil, fmt.Errorf(&quot;validation failed: %s&quot;, strings.Join(errors, &quot;; &quot;))\n    }\n    \n    return prepResult, nil\n}\n \nfunc (n *ValidationNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    if execResult == nil {\n        return &quot;invalid&quot;, nil\n    }\n    return &quot;valid&quot;, nil\n}\n","title":"Validation Nodes","titles":["Custom Node Types"]},"156":{"href":"/advanced/custom-nodes#best-practices","html":"\n<ol>\n<li><strong>Clear Interfaces</strong>: Define clear interfaces for custom nodes</li>\n<li><strong>Thread Safety</strong>: Ensure nodes are thread-safe for concurrent use</li>\n<li><strong>Resource Management</strong>: Properly manage external resources</li>\n<li><strong>Error Handling</strong>: Provide detailed error information</li>\n<li><strong>Testing</strong>: Write comprehensive tests for custom logic</li>\n<li><strong>Documentation</strong>: Document node behavior and requirements</li>\n<li><strong>Monitoring</strong>: Add metrics and logging for observability</li>\n</ol>\n","isPage":false,"text":"\n\nClear Interfaces: Define clear interfaces for custom nodes\nThread Safety: Ensure nodes are thread-safe for concurrent use\nResource Management: Properly manage external resources\nError Handling: Provide detailed error information\nTesting: Write comprehensive tests for custom logic\nDocumentation: Document node behavior and requirements\nMonitoring: Add metrics and logging for observability\n\n","title":"Best Practices","titles":["Custom Node Types"]},"157":{"href":"/advanced/custom-nodes#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/nodes#retryablenode-interface\">RetryableNode Interface</a> - Custom retry logic</li>\n<li><a href=\"/patterns/fallback\">FallbackNode Interface</a> - Graceful degradation</li>\n<li><a href=\"/advanced/worker-pool\">Worker Pool</a> - Concurrent task management</li>\n</ul>","isPage":false,"text":"\n\nRetryableNode Interface - Custom retry logic\nFallbackNode Interface - Graceful degradation\nWorker Pool - Concurrent task management\n","title":"Next Steps","titles":["Custom Node Types"]},"158":{"href":"/advanced/flow-as-node#flow-as-node","html":"</header>\n<p>Flows implement the Node interface, allowing them to be used anywhere a node is expected. This enables powerful composition patterns.</p>\n","isPage":true,"text":"\nFlows implement the Node interface, allowing them to be used anywhere a node is expected. This enables powerful composition patterns.\n","title":"Flow as Node","titles":[]},"159":{"href":"/advanced/flow-as-node#the-node-interface","html":"\n<p>Flows implement all Node methods:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Flow implements Node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _ </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nFlows implement all Node methods:\ntype Node interface {\n    Prep(ctx context.Context, shared *SharedStore) (any, error)\n    Exec(ctx context.Context, prepResult any) (any, error)\n    Post(ctx context.Context, shared *SharedStore, prepResult, execResult any) (Action, error)\n}\n \n// Flow implements Node\nvar _ Node = (*Flow)(nil)\n","title":"The Node Interface","titles":["Flow as Node"]},"160":{"href":"/advanced/flow-as-node#basic-usage","html":"\n<p>Use a flow wherever a node is expected:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a reusable flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processingFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processingFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, transformNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processingFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transformNode, flyt.DefaultAction, enrichNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use the flow as a node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, processingFlow) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Flow used as node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processingFlow, flyt.DefaultAction, saveNode)</span></span></code></pre>\n","isPage":false,"text":"\nUse a flow wherever a node is expected:\n// Create a reusable flow\nprocessingFlow := flyt.NewFlow(validateNode)\nprocessingFlow.Connect(validateNode, &quot;valid&quot;, transformNode)\nprocessingFlow.Connect(transformNode, flyt.DefaultAction, enrichNode)\n \n// Use the flow as a node\nmainFlow := flyt.NewFlow(fetchNode)\nmainFlow.Connect(fetchNode, flyt.DefaultAction, processingFlow) // Flow used as node\nmainFlow.Connect(processingFlow, flyt.DefaultAction, saveNode)\n","title":"Basic Usage","titles":["Flow as Node"]},"161":{"href":"/advanced/flow-as-node#flow-lifecycle-as-node","html":"\n<p>Understanding how flows behave as nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// When a flow is used as a node:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1. Prep: Prepares the flow&#x27;s start node</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 2. Exec: Runs the entire flow</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 3. Post: Returns the final action from the flow</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> demonstrateFlowLifecycle</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    subFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    subFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, endNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // When mainFlow executes subFlow:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // - subFlow.Prep() calls startNode.Prep()</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // - subFlow.Exec() runs the entire sub-flow</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // - subFlow.Post() returns the final action</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(initNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(initNode, flyt.DefaultAction, subFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUnderstanding how flows behave as nodes:\n// When a flow is used as a node:\n// 1. Prep: Prepares the flow&#x27;s start node\n// 2. Exec: Runs the entire flow\n// 3. Post: Returns the final action from the flow\n \nfunc demonstrateFlowLifecycle() {\n    subFlow := flyt.NewFlow(startNode)\n    subFlow.Connect(startNode, flyt.DefaultAction, endNode)\n    \n    // When mainFlow executes subFlow:\n    // - subFlow.Prep() calls startNode.Prep()\n    // - subFlow.Exec() runs the entire sub-flow\n    // - subFlow.Post() returns the final action\n    \n    mainFlow := flyt.NewFlow(initNode)\n    mainFlow.Connect(initNode, flyt.DefaultAction, subFlow)\n}\n","title":"Flow Lifecycle as Node","titles":["Flow as Node"]},"162":{"href":"/advanced/flow-as-node#composable-workflows","html":"\n<p>Build complex workflows from simpler ones:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Level 1: Basic operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    schemaNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSchemaValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    businessNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createBusinessValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, businessNode)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEnrichmentFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fetchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDataFetchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mergeNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDataMergeNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, mergeNode)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Level 2: Combine basic flows</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessingPipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    validation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    enrichment </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEnrichmentFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pipeline </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validation)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pipeline.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validation, flyt.DefaultAction, enrichment)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pipeline</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Level 3: Use in application</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createApplicationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    auth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAuthFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pipeline </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessingPipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    audit </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAuditFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    app </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(auth)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    app.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(auth, flyt.DefaultAction, pipeline)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    app.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(pipeline, flyt.DefaultAction, audit)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> app</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nBuild complex workflows from simpler ones:\n// Level 1: Basic operations\nfunc createValidationFlow() *flyt.Flow {\n    schemaNode := createSchemaValidationNode()\n    businessNode := createBusinessValidationNode()\n    \n    flow := flyt.NewFlow(schemaNode)\n    flow.Connect(schemaNode, &quot;valid&quot;, businessNode)\n    return flow\n}\n \nfunc createEnrichmentFlow() *flyt.Flow {\n    fetchNode := createDataFetchNode()\n    mergeNode := createDataMergeNode()\n    \n    flow := flyt.NewFlow(fetchNode)\n    flow.Connect(fetchNode, flyt.DefaultAction, mergeNode)\n    return flow\n}\n \n// Level 2: Combine basic flows\nfunc createProcessingPipeline() *flyt.Flow {\n    validation := createValidationFlow()\n    enrichment := createEnrichmentFlow()\n    \n    pipeline := flyt.NewFlow(validation)\n    pipeline.Connect(validation, flyt.DefaultAction, enrichment)\n    return pipeline\n}\n \n// Level 3: Use in application\nfunc createApplicationFlow() *flyt.Flow {\n    auth := createAuthFlow()\n    pipeline := createProcessingPipeline()\n    audit := createAuditFlow()\n    \n    app := flyt.NewFlow(auth)\n    app.Connect(auth, flyt.DefaultAction, pipeline)\n    app.Connect(pipeline, flyt.DefaultAction, audit)\n    return app\n}\n","title":"Composable Workflows","titles":["Flow as Node"]},"163":{"href":"/advanced/flow-as-node#dynamic-flow-selection","html":"\n<p>Choose flows at runtime:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FlowSelector</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flows </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateSelectorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flowType </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flowType, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">BuildDynamicFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    selector </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fs.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateSelectorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(selector)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Connect different flows based on selection</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> name, flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fs.flows {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(selector, flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(name), flow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mainFlow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">selector </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flows: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;simple&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createSimpleFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;complex&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createComplexFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;custom&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCustomFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">dynamicFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> selector.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">BuildDynamicFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nChoose flows at runtime:\ntype FlowSelector struct {\n    flows map[string]*flyt.Flow\n}\n \nfunc (fs *FlowSelector) CreateSelectorNode() flyt.Node {\n    return flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            flowType := prepResult.(string)\n            return flowType, nil\n        }),\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            return flyt.Action(execResult.(string)), nil\n        }),\n    )\n}\n \nfunc (fs *FlowSelector) BuildDynamicFlow() *flyt.Flow {\n    selector := fs.CreateSelectorNode()\n    mainFlow := flyt.NewFlow(selector)\n    \n    // Connect different flows based on selection\n    for name, flow := range fs.flows {\n        mainFlow.Connect(selector, flyt.Action(name), flow)\n    }\n    \n    return mainFlow\n}\n \n// Usage\nselector := &amp;FlowSelector{\n    flows: map[string]*flyt.Flow{\n        &quot;simple&quot;:  createSimpleFlow(),\n        &quot;complex&quot;: createComplexFlow(),\n        &quot;custom&quot;:  createCustomFlow(),\n    },\n}\n \ndynamicFlow := selector.BuildDynamicFlow()\n","title":"Dynamic Flow Selection","titles":["Flow as Node"]},"164":{"href":"/advanced/flow-as-node#flow-factories","html":"\n<p>Create flows on demand:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FlowFactory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    CreateFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">config</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FlowConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ProcessingFlowFactory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">f </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ProcessingFlowFactory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">config</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FlowConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create nodes based on configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nodes []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, nodeConfig </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config.Nodes {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createNodeFromConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodeConfig)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        nodes </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodes, node)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Build flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodes[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodes)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodes[i], flyt.DefaultAction, nodes[i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use factory-created flows as nodes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDynamicPipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">factory</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FlowFactory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">configs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pipeline </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    previous </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> configs {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> factory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pipeline.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(previous, flyt.DefaultAction, flow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        previous </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pipeline</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCreate flows on demand:\ntype FlowFactory interface {\n    CreateFlow(config FlowConfig) *flyt.Flow\n}\n \ntype ProcessingFlowFactory struct{}\n \nfunc (f *ProcessingFlowFactory) CreateFlow(config FlowConfig) *flyt.Flow {\n    // Create nodes based on configuration\n    var nodes []flyt.Node\n    \n    for _, nodeConfig := range config.Nodes {\n        node := createNodeFromConfig(nodeConfig)\n        nodes = append(nodes, node)\n    }\n    \n    // Build flow\n    flow := flyt.NewFlow(nodes[0])\n    for i := 0; i &lt; len(nodes)-1; i++ {\n        flow.Connect(nodes[i], flyt.DefaultAction, nodes[i+1])\n    }\n    \n    return flow\n}\n \n// Use factory-created flows as nodes\nfunc createDynamicPipeline(factory FlowFactory, configs []FlowConfig) *flyt.Flow {\n    pipeline := flyt.NewFlow(startNode)\n    previous := flyt.Node(startNode)\n    \n    for _, config := range configs {\n        flow := factory.CreateFlow(config)\n        pipeline.Connect(previous, flyt.DefaultAction, flow)\n        previous = flow\n    }\n    \n    return pipeline\n}\n","title":"Flow Factories","titles":["Flow as Node"]},"165":{"href":"/advanced/flow-as-node#recursive-flow-patterns","html":"\n<p>Flows containing themselves:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createRecursiveProcessingFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">maxDepth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    depthCheck </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            depth, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;recursion_depth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> depth.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> maxDepth {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;terminate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;recurse&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;recurse&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;recursion_depth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, depth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(depthCheck)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(depthCheck, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;recurse&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, flyt.DefaultAction, flow) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Recursive reference</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(depthCheck, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;terminate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nFlows containing themselves:\nfunc createRecursiveProcessingFlow(maxDepth int) *flyt.Flow {\n    var flow *flyt.Flow\n    \n    depthCheck := flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            depth, _ := shared.Get(&quot;recursion_depth&quot;)\n            if depth == nil {\n                depth = 0\n            }\n            return depth.(int), nil\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            depth := prepResult.(int)\n            if depth &gt;= maxDepth {\n                return &quot;terminate&quot;, nil\n            }\n            return &quot;recurse&quot;, nil\n        }),\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            if execResult.(string) == &quot;recurse&quot; {\n                depth := prepResult.(int)\n                shared.Set(&quot;recursion_depth&quot;, depth+1)\n            }\n            return flyt.Action(execResult.(string)), nil\n        }),\n    )\n    \n    processNode := createProcessNode()\n    \n    flow = flyt.NewFlow(depthCheck)\n    flow.Connect(depthCheck, &quot;recurse&quot;, processNode)\n    flow.Connect(processNode, flyt.DefaultAction, flow) // Recursive reference\n    flow.Connect(depthCheck, &quot;terminate&quot;, nil)\n    \n    return flow\n}\n","title":"Recursive Flow Patterns","titles":["Flow as Node"]},"166":{"href":"/advanced/flow-as-node#flow-middleware","html":"\n<p>Wrap flows with additional behavior:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> withLogging</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">flow</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    logStart </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Flow starting&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    logEnd </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Flow completed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wrapped </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logStart)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wrapped.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logStart, flyt.DefaultAction, flow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wrapped.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flow, flyt.DefaultAction, logEnd)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wrapped</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessingFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">loggedFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> withLogging</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ProcessingPipeline&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processFlow)</span></span></code></pre>\n","isPage":false,"text":"\nWrap flows with additional behavior:\nfunc withLogging(name string, flow *flyt.Flow) *flyt.Flow {\n    logStart := flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            log.Printf(&quot;[%s] Flow starting&quot;, name)\n            return prepResult, nil\n        }),\n    )\n    \n    logEnd := flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            log.Printf(&quot;[%s] Flow completed&quot;, name)\n            return prepResult, nil\n        }),\n    )\n    \n    wrapped := flyt.NewFlow(logStart)\n    wrapped.Connect(logStart, flyt.DefaultAction, flow)\n    wrapped.Connect(flow, flyt.DefaultAction, logEnd)\n    \n    return wrapped\n}\n \n// Usage\nprocessFlow := createProcessingFlow()\nloggedFlow := withLogging(&quot;ProcessingPipeline&quot;, processFlow)\n","title":"Flow Middleware","titles":["Flow as Node"]},"167":{"href":"/advanced/flow-as-node#testing-flows-as-nodes","html":"\n<p>Test flow behavior when used as nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestFlowAsNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">testing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create a simple flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    innerFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;inner_result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test the flow directly</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Call flow methods as if it were a node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    prepResult, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> innerFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    execResult, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> innerFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    action, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> innerFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared, prepResult, execResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Equal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, flyt.DefaultAction, action)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTest flow behavior when used as nodes:\nfunc TestFlowAsNode(t *testing.T) {\n    // Create a simple flow\n    innerFlow := flyt.NewFlow(\n        flyt.NewNode(\n            flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n                return &quot;inner_result&quot;, nil\n            }),\n        ),\n    )\n    \n    // Test the flow directly\n    ctx := context.Background()\n    shared := flyt.NewSharedStore()\n    \n    // Call flow methods as if it were a node\n    prepResult, err := innerFlow.Prep(ctx, shared)\n    assert.NoError(t, err)\n    \n    execResult, err := innerFlow.Exec(ctx, prepResult)\n    assert.NoError(t, err)\n    \n    action, err := innerFlow.Post(ctx, shared, prepResult, execResult)\n    assert.NoError(t, err)\n    assert.Equal(t, flyt.DefaultAction, action)\n}\n","title":"Testing Flows as Nodes","titles":["Flow as Node"]},"168":{"href":"/advanced/flow-as-node#performance-considerations","html":"\n<p>Using flows as nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Lightweight flow - good as node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createLightweightFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Simple operation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> transform</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Heavy flow - consider alternatives</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createHeavyFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Many nodes, complex logic</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Consider breaking into smaller flows</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // or using batch processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Alternative: Use node with embedded logic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createOptimizedNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Inline the flow logic for performance</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> step1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> step2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> step3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUsing flows as nodes:\n// Lightweight flow - good as node\nfunc createLightweightFlow() *flyt.Flow {\n    node := flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            // Simple operation\n            return transform(prepResult), nil\n        }),\n    )\n    return flyt.NewFlow(node)\n}\n \n// Heavy flow - consider alternatives\nfunc createHeavyFlow() *flyt.Flow {\n    // Many nodes, complex logic\n    // Consider breaking into smaller flows\n    // or using batch processing\n}\n \n// Alternative: Use node with embedded logic\nfunc createOptimizedNode() flyt.Node {\n    return flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            // Inline the flow logic for performance\n            result := step1(prepResult)\n            result = step2(result)\n            result = step3(result)\n            return result, nil\n        }),\n    )\n}\n","title":"Performance Considerations","titles":["Flow as Node"]},"169":{"href":"/advanced/flow-as-node#best-practices","html":"\n<ol>\n<li><strong>Keep Flows Focused</strong>: Flows used as nodes should have clear, single purposes</li>\n<li><strong>Document Behavior</strong>: Clearly document what the flow expects and returns</li>\n<li><strong>Test Thoroughly</strong>: Test flows both standalone and as nodes</li>\n<li><strong>Consider Performance</strong>: Be mindful of overhead when nesting many flows</li>\n<li><strong>Use Meaningful Names</strong>: Name flows to indicate they&#x27;re used as nodes</li>\n<li><strong>Handle Errors</strong>: Ensure proper error propagation through nested flows</li>\n</ol>\n","isPage":false,"text":"\n\nKeep Flows Focused: Flows used as nodes should have clear, single purposes\nDocument Behavior: Clearly document what the flow expects and returns\nTest Thoroughly: Test flows both standalone and as nodes\nConsider Performance: Be mindful of overhead when nesting many flows\nUse Meaningful Names: Name flows to indicate they&#x27;re used as nodes\nHandle Errors: Ensure proper error propagation through nested flows\n\n","title":"Best Practices","titles":["Flow as Node"]},"170":{"href":"/advanced/flow-as-node#next-steps","html":"\n<ul>\n<li><a href=\"/advanced/nested-flows\">Nested Flows</a> - Complex flow composition</li>\n<li><a href=\"/concepts/nodes\">Nodes</a> - Node interface details</li>\n<li><a href=\"/concepts/flows\">Flows</a> - Flow fundamentals</li>\n</ul>","isPage":false,"text":"\n\nNested Flows - Complex flow composition\nNodes - Node interface details\nFlows - Flow fundamentals\n","title":"Next Steps","titles":["Flow as Node"]},"171":{"href":"/advanced/nested-flows#nested-flows","html":"</header>\n<p>Compose complex workflows by nesting flows within flows, creating modular and reusable workflow components.</p>\n","isPage":true,"text":"\nCompose complex workflows by nesting flows within flows, creating modular and reusable workflow components.\n","title":"Nested Flows","titles":[]},"172":{"href":"/advanced/nested-flows#basic-nested-flow","html":"\n<p>Use a flow as a node in another flow:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a sub-flow for validation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">validationFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    schemaCheck </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSchemaCheckNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    businessRules </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createBusinessRulesNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaCheck)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaCheck, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, businessRules)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaCheck, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use in main flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, validationFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationFlow, flyt.DefaultAction, processNode)</span></span></code></pre>\n","isPage":false,"text":"\nUse a flow as a node in another flow:\n// Create a sub-flow for validation\nvalidationFlow := func() *flyt.Flow {\n    schemaCheck := createSchemaCheckNode()\n    businessRules := createBusinessRulesNode()\n    \n    flow := flyt.NewFlow(schemaCheck)\n    flow.Connect(schemaCheck, &quot;valid&quot;, businessRules)\n    flow.Connect(schemaCheck, &quot;invalid&quot;, nil)\n    \n    return flow\n}()\n \n// Use in main flow\nmainFlow := flyt.NewFlow(fetchNode)\nmainFlow.Connect(fetchNode, flyt.DefaultAction, validationFlow)\nmainFlow.Connect(validationFlow, flyt.DefaultAction, processNode)\n","title":"Basic Nested Flow","titles":["Nested Flows"]},"173":{"href":"/advanced/nested-flows#reusable-flow-components","html":"\n<p>Create modular flow components:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Reusable authentication flow</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAuthFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    checkToken </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            token </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> validateToken</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    refreshToken </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> refreshAuthToken</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkToken)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkToken, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;expired&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, refreshToken)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkToken, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(refreshToken, flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use in multiple places</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">apiFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">apiFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAuthFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">adminFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(adminNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">adminFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(adminNode, flyt.DefaultAction, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAuthFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nCreate modular flow components:\n// Reusable authentication flow\nfunc createAuthFlow() *flyt.Flow {\n    checkToken := flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            token := prepResult.(string)\n            return validateToken(token)\n        }),\n    )\n    \n    refreshToken := flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            return refreshAuthToken()\n        }),\n    )\n    \n    flow := flyt.NewFlow(checkToken)\n    flow.Connect(checkToken, &quot;expired&quot;, refreshToken)\n    flow.Connect(checkToken, &quot;valid&quot;, nil)\n    flow.Connect(refreshToken, flyt.DefaultAction, nil)\n    \n    return flow\n}\n \n// Use in multiple places\napiFlow := flyt.NewFlow(startNode)\napiFlow.Connect(startNode, flyt.DefaultAction, createAuthFlow())\n \nadminFlow := flyt.NewFlow(adminNode)\nadminFlow.Connect(adminNode, flyt.DefaultAction, createAuthFlow())\n","title":"Reusable Flow Components","titles":["Nested Flows"]},"174":{"href":"/advanced/nested-flows#hierarchical-workflows","html":"\n<p>Build multi-level workflow hierarchies:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Level 3: Atomic operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDatabaseOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    connect </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createConnectNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    query </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createQueryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    disconnect </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDisconnectNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(connect)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(connect, flyt.DefaultAction, query)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(query, flyt.DefaultAction, disconnect)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Level 2: Business operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createUserOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    validate </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidateUserNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    dbOp </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDatabaseOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    notify </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createNotificationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validate)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validate, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, dbOp)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(dbOp, flyt.DefaultAction, notify)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Level 1: Application flow</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createApplicationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    auth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAuthFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    userOp </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createUserOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    audit </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAuditFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(auth)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(auth, flyt.DefaultAction, userOp)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(userOp, flyt.DefaultAction, audit)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nBuild multi-level workflow hierarchies:\n// Level 3: Atomic operations\nfunc createDatabaseOperation() *flyt.Flow {\n    connect := createConnectNode()\n    query := createQueryNode()\n    disconnect := createDisconnectNode()\n    \n    flow := flyt.NewFlow(connect)\n    flow.Connect(connect, flyt.DefaultAction, query)\n    flow.Connect(query, flyt.DefaultAction, disconnect)\n    \n    return flow\n}\n \n// Level 2: Business operations\nfunc createUserOperation() *flyt.Flow {\n    validate := createValidateUserNode()\n    dbOp := createDatabaseOperation()\n    notify := createNotificationNode()\n    \n    flow := flyt.NewFlow(validate)\n    flow.Connect(validate, &quot;valid&quot;, dbOp)\n    flow.Connect(dbOp, flyt.DefaultAction, notify)\n    \n    return flow\n}\n \n// Level 1: Application flow\nfunc createApplicationFlow() *flyt.Flow {\n    auth := createAuthFlow()\n    userOp := createUserOperation()\n    audit := createAuditFlow()\n    \n    flow := flyt.NewFlow(auth)\n    flow.Connect(auth, flyt.DefaultAction, userOp)\n    flow.Connect(userOp, flyt.DefaultAction, audit)\n    \n    return flow\n}\n","title":"Hierarchical Workflows","titles":["Nested Flows"]},"175":{"href":"/advanced/nested-flows#conditional-nesting","html":"\n<p>Dynamically choose nested flows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">routerNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        request </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> request.Type, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(routerNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(routerNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createUserFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(routerNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;admin&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAdminFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(routerNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAPIFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nDynamically choose nested flows:\nrouterNode := flyt.NewNode(\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n        request := prepResult.(Request)\n        return request.Type, nil\n    }),\n    flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        return flyt.Action(execResult.(string)), nil\n    }),\n)\n \nmainFlow := flyt.NewFlow(routerNode)\nmainFlow.Connect(routerNode, &quot;user&quot;, createUserFlow())\nmainFlow.Connect(routerNode, &quot;admin&quot;, createAdminFlow())\nmainFlow.Connect(routerNode, &quot;api&quot;, createAPIFlow())\n","title":"Conditional Nesting","titles":["Nested Flows"]},"176":{"href":"/advanced/nested-flows#shared-context-in-nested-flows","html":"\n<p>Pass context through nested flows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createNestedFlowWithContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">parentContext</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Access parent context</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> k, v </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> parentContext {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(k, v)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Get data from parent flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            parentData, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;parent_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> parentData, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Process with parent context</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processWithContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult, parentContext), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPass context through nested flows:\nfunc createNestedFlowWithContext(parentContext map[string]any) *flyt.Flow {\n    node := flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            // Access parent context\n            for k, v := range parentContext {\n                shared.Set(k, v)\n            }\n            \n            // Get data from parent flow\n            parentData, _ := shared.Get(&quot;parent_data&quot;)\n            return parentData, nil\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            // Process with parent context\n            return processWithContext(prepResult, parentContext), nil\n        }),\n    )\n    \n    return flyt.NewFlow(node)\n}\n","title":"Shared Context in Nested Flows","titles":["Nested Flows"]},"177":{"href":"/advanced/nested-flows#error-propagation","html":"\n<p>Handle errors across nested flows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createErrorHandlingFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    subFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSubFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errorHandler </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createErrorHandlerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, subFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(subFlow, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(subFlow, flyt.DefaultAction, successNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Error handler can retry or recover</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errorHandler, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, subFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errorHandler, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;abort&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mainFlow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle errors across nested flows:\nfunc createErrorHandlingFlow() *flyt.Flow {\n    subFlow := createSubFlow()\n    errorHandler := createErrorHandlerNode()\n    \n    mainFlow := flyt.NewFlow(startNode)\n    mainFlow.Connect(startNode, flyt.DefaultAction, subFlow)\n    mainFlow.Connect(subFlow, &quot;error&quot;, errorHandler)\n    mainFlow.Connect(subFlow, flyt.DefaultAction, successNode)\n    \n    // Error handler can retry or recover\n    mainFlow.Connect(errorHandler, &quot;retry&quot;, subFlow)\n    mainFlow.Connect(errorHandler, &quot;abort&quot;, nil)\n    \n    return mainFlow\n}\n","title":"Error Propagation","titles":["Nested Flows"]},"178":{"href":"/advanced/nested-flows#recursive-flows","html":"\n<p>Create recursive workflow patterns:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createRecursiveFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">maxDepth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    checkDepth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            depth, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;depth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> depth.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> maxDepth {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;max_depth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;depth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, depth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkDepth)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkDepth, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, flyt.DefaultAction, flow) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Recursive connection</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkDepth, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;max_depth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCreate recursive workflow patterns:\nfunc createRecursiveFlow(maxDepth int) *flyt.Flow {\n    checkDepth := flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            depth, _ := shared.Get(&quot;depth&quot;)\n            if depth == nil {\n                depth = 0\n            }\n            return depth.(int), nil\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            depth := prepResult.(int)\n            if depth &gt;= maxDepth {\n                return &quot;max_depth&quot;, nil\n            }\n            return &quot;continue&quot;, nil\n        }),\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            if execResult.(string) == &quot;continue&quot; {\n                depth := prepResult.(int)\n                shared.Set(&quot;depth&quot;, depth+1)\n            }\n            return flyt.Action(execResult.(string)), nil\n        }),\n    )\n    \n    processNode := createProcessNode()\n    \n    flow := flyt.NewFlow(checkDepth)\n    flow.Connect(checkDepth, &quot;continue&quot;, processNode)\n    flow.Connect(processNode, flyt.DefaultAction, flow) // Recursive connection\n    flow.Connect(checkDepth, &quot;max_depth&quot;, nil)\n    \n    return flow\n}\n","title":"Recursive Flows","titles":["Nested Flows"]},"179":{"href":"/advanced/nested-flows#parallel-nested-flows","html":"\n<p>Execute nested flows in parallel:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createParallelNestedFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    splitNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Split data for parallel processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;part1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data.Part1)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;part2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data.Part2)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create parallel sub-flows</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow1 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessingFlow1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow2 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessingFlow2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Merge results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mergeNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result1, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;result1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result2, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;result2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;result1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: result1,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;result2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: result2,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Connect with parallel execution</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Both flows execute after split</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;flow1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, flow1)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;flow2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, flow2)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Both must complete before merge</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flow1, flyt.DefaultAction, mergeNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flow2, flyt.DefaultAction, mergeNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mainFlow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nExecute nested flows in parallel:\nfunc createParallelNestedFlow() *flyt.Flow {\n    splitNode := flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            // Split data for parallel processing\n            data := prepResult.(Data)\n            shared.Set(&quot;part1&quot;, data.Part1)\n            shared.Set(&quot;part2&quot;, data.Part2)\n            return nil, nil\n        }),\n    )\n    \n    // Create parallel sub-flows\n    flow1 := createProcessingFlow1()\n    flow2 := createProcessingFlow2()\n    \n    // Merge results\n    mergeNode := flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            result1, _ := shared.Get(&quot;result1&quot;)\n            result2, _ := shared.Get(&quot;result2&quot;)\n            return map[string]any{\n                &quot;result1&quot;: result1,\n                &quot;result2&quot;: result2,\n            }, nil\n        }),\n    )\n    \n    // Connect with parallel execution\n    mainFlow := flyt.NewFlow(splitNode)\n    \n    // Both flows execute after split\n    mainFlow.Connect(splitNode, &quot;flow1&quot;, flow1)\n    mainFlow.Connect(splitNode, &quot;flow2&quot;, flow2)\n    \n    // Both must complete before merge\n    mainFlow.Connect(flow1, flyt.DefaultAction, mergeNode)\n    mainFlow.Connect(flow2, flyt.DefaultAction, mergeNode)\n    \n    return mainFlow\n}\n","title":"Parallel Nested Flows","titles":["Nested Flows"]},"180":{"href":"/advanced/nested-flows#dynamic-flow-composition","html":"\n<p>Build flows at runtime:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDynamicFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">config</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FlowConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    startNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createStartNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    previousNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, step </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config.Steps {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stepFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> step.Type {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;validate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            stepFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(step.Config)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;process&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            stepFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessingFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(step.Config)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;save&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            stepFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSaveFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(step.Config)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stepFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(previousNode, flyt.DefaultAction, stepFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            previousNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stepFlow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nBuild flows at runtime:\nfunc createDynamicFlow(config FlowConfig) *flyt.Flow {\n    startNode := createStartNode()\n    flow := flyt.NewFlow(startNode)\n    \n    previousNode := flyt.Node(startNode)\n    \n    for _, step := range config.Steps {\n        var stepFlow *flyt.Flow\n        \n        switch step.Type {\n        case &quot;validate&quot;:\n            stepFlow = createValidationFlow(step.Config)\n        case &quot;process&quot;:\n            stepFlow = createProcessingFlow(step.Config)\n        case &quot;save&quot;:\n            stepFlow = createSaveFlow(step.Config)\n        }\n        \n        if stepFlow != nil {\n            flow.Connect(previousNode, flyt.DefaultAction, stepFlow)\n            previousNode = stepFlow\n        }\n    }\n    \n    return flow\n}\n","title":"Dynamic Flow Composition","titles":["Nested Flows"]},"181":{"href":"/advanced/nested-flows#testing-nested-flows","html":"\n<p>Test nested flows in isolation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestNestedFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">testing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test sub-flow independently</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    subFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSubFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    subShared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    subShared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;test_input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> subFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), subShared)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test main flow with mocked sub-flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mockSubFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;mocked_result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, mockSubFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTest nested flows in isolation:\nfunc TestNestedFlow(t *testing.T) {\n    // Test sub-flow independently\n    subFlow := createSubFlow()\n    subShared := flyt.NewSharedStore()\n    subShared.Set(&quot;test_input&quot;, &quot;data&quot;)\n    \n    err := subFlow.Run(context.Background(), subShared)\n    assert.NoError(t, err)\n    \n    // Test main flow with mocked sub-flow\n    mockSubFlow := flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            return &quot;mocked_result&quot;, nil\n        }),\n    )\n    \n    mainFlow := flyt.NewFlow(startNode)\n    mainFlow.Connect(startNode, flyt.DefaultAction, mockSubFlow)\n    \n    err = mainFlow.Run(context.Background(), flyt.NewSharedStore())\n    assert.NoError(t, err)\n}\n","title":"Testing Nested Flows","titles":["Nested Flows"]},"182":{"href":"/advanced/nested-flows#best-practices","html":"\n<ol>\n<li><strong>Keep Flows Focused</strong>: Each flow should have a single, clear purpose</li>\n<li><strong>Minimize Coupling</strong>: Flows should communicate through well-defined interfaces</li>\n<li><strong>Document Dependencies</strong>: Clearly document what each nested flow expects</li>\n<li><strong>Test in Isolation</strong>: Test nested flows independently</li>\n<li><strong>Avoid Deep Nesting</strong>: Too many levels make debugging difficult</li>\n<li><strong>Use Meaningful Names</strong>: Name flows based on their business function</li>\n</ol>\n","isPage":false,"text":"\n\nKeep Flows Focused: Each flow should have a single, clear purpose\nMinimize Coupling: Flows should communicate through well-defined interfaces\nDocument Dependencies: Clearly document what each nested flow expects\nTest in Isolation: Test nested flows independently\nAvoid Deep Nesting: Too many levels make debugging difficult\nUse Meaningful Names: Name flows based on their business function\n\n","title":"Best Practices","titles":["Nested Flows"]},"183":{"href":"/advanced/nested-flows#next-steps","html":"\n<ul>\n<li><a href=\"/advanced/flow-as-node\">Flow as Node</a> - Flows implementing Node interface</li>\n<li><a href=\"/advanced/batch-flows\">Batch Flows</a> - Running flows in batches</li>\n<li><a href=\"/concepts/flows\">Flows</a> - Flow fundamentals</li>\n</ul>","isPage":false,"text":"\n\nFlow as Node - Flows implementing Node interface\nBatch Flows - Running flows in batches\nFlows - Flow fundamentals\n","title":"Next Steps","titles":["Nested Flows"]},"184":{"href":"/advanced/utilities#utilities","html":"</header>\n<p>Helper functions and utilities to simplify common tasks in Flyt workflows.</p>\n","isPage":true,"text":"\nHelper functions and utilities to simplify common tasks in Flyt workflows.\n","title":"Utilities","titles":[]},"185":{"href":"/advanced/utilities#toslice","html":"\n<p>Convert various types to slices for batch processing:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert different types to []any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stringSlice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ToSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;a&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;c&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">intSlice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ToSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">singleItem </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ToSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;single item&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns []any{&quot;single item&quot;}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">nilValue </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ToSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns empty []any{}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Useful for batch processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ToSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data))</span></span></code></pre>\n","isPage":false,"text":"\nConvert various types to slices for batch processing:\n// Convert different types to []any\nstringSlice := flyt.ToSlice([]string{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;})\nintSlice := flyt.ToSlice([]int{1, 2, 3})\nsingleItem := flyt.ToSlice(&quot;single item&quot;) // Returns []any{&quot;single item&quot;}\nnilValue := flyt.ToSlice(nil) // Returns empty []any{}\n \n// Useful for batch processing\nshared.Set(&quot;items&quot;, flyt.ToSlice(data))\n","title":"ToSlice","titles":["Utilities"]},"186":{"href":"/advanced/utilities#implementation-details","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ToSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">v</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> v </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    rv </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> reflect.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ValueOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(v)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rv.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Kind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> reflect.Slice {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, rv.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rv.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(); i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rv.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Index</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(i).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Single item</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{v}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc ToSlice(v any) []any {\n    if v == nil {\n        return []any{}\n    }\n    \n    rv := reflect.ValueOf(v)\n    if rv.Kind() == reflect.Slice {\n        result := make([]any, rv.Len())\n        for i := 0; i &lt; rv.Len(); i++ {\n            result[i] = rv.Index(i).Interface()\n        }\n        return result\n    }\n    \n    // Single item\n    return []any{v}\n}\n","title":"Implementation Details","titles":["Utilities","ToSlice"]},"187":{"href":"/advanced/utilities#custom-utility-functions","html":"\n<p>Create your own utilities:</p>\n","isPage":false,"text":"\nCreate your own utilities:\n","title":"Custom Utility Functions","titles":["Utilities"]},"188":{"href":"/advanced/utilities#retry-helper","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> RetryOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">operation</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">maxRetries</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">backoff</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> lastErr </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> maxRetries; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> operation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            lastErr </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> maxRetries</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sleep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(backoff </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;operation failed after </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> retries: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, maxRetries, lastErr)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage in node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> RetryOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc RetryOperation(operation func() error, maxRetries int, backoff time.Duration) error {\n    var lastErr error\n    \n    for i := 0; i &lt; maxRetries; i++ {\n        if err := operation(); err == nil {\n            return nil\n        } else {\n            lastErr = err\n            if i &lt; maxRetries-1 {\n                time.Sleep(backoff * time.Duration(i+1))\n            }\n        }\n    }\n    \n    return fmt.Errorf(&quot;operation failed after %d retries: %w&quot;, maxRetries, lastErr)\n}\n \n// Usage in node\nfunc (n *MyNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    var result any\n    \n    err := RetryOperation(func() error {\n        var err error\n        result, err = callAPI(prepResult)\n        return err\n    }, 3, time.Second)\n    \n    return result, err\n}\n","title":"Retry Helper","titles":["Utilities","Custom Utility Functions"]},"189":{"href":"/advanced/utilities#parallel-map","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ParallelMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">R</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">R</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">R</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">R</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WaitGroup</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    semaphore </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, workers)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">index</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            semaphore </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}{}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() { </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">semaphore }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[index] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }(i, item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ParallelMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items, processItem, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nfunc ParallelMap[T any, R any](items []T, fn func(T) R, workers int) []R {\n    results := make([]R, len(items))\n    \n    var wg sync.WaitGroup\n    semaphore := make(chan struct{}, workers)\n    \n    for i, item := range items {\n        wg.Add(1)\n        go func(index int, data T) {\n            defer wg.Done()\n            \n            semaphore &lt;- struct{}{}\n            defer func() { &lt;-semaphore }()\n            \n            results[index] = fn(data)\n        }(i, item)\n    }\n    \n    wg.Wait()\n    return results\n}\n \n// Usage\nresults := ParallelMap(items, processItem, 10)\n","title":"Parallel Map","titles":["Utilities","Custom Utility Functions"]},"190":{"href":"/advanced/utilities#safe-type-assertion","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SafeGet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> zero </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value, exists </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exists {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> zero, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    typed, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value.(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ok {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> zero, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> typed, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> userID, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SafeGet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](shared, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); ok {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Use userID safely</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc SafeGet[T any](shared *flyt.SharedStore, key string) (T, bool) {\n    var zero T\n    \n    value, exists := shared.Get(key)\n    if !exists {\n        return zero, false\n    }\n    \n    typed, ok := value.(T)\n    if !ok {\n        return zero, false\n    }\n    \n    return typed, true\n}\n \n// Usage\nif userID, ok := SafeGet[int](shared, &quot;user_id&quot;); ok {\n    // Use userID safely\n}\n","title":"Safe Type Assertion","titles":["Utilities","Custom Utility Functions"]},"191":{"href":"/advanced/utilities#chunk-slice","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ChunkSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">slice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">chunkSize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) [][]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunks [][]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(slice); i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunkSize {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunkSize</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(slice) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(slice)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        chunks </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(chunks, slice[i:end])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage in batch processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">chunks </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ChunkSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, chunk </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunks {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    processChunk</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(chunk)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc ChunkSlice[T any](slice []T, chunkSize int) [][]T {\n    var chunks [][]T\n    \n    for i := 0; i &lt; len(slice); i += chunkSize {\n        end := i + chunkSize\n        if end &gt; len(slice) {\n            end = len(slice)\n        }\n        chunks = append(chunks, slice[i:end])\n    }\n    \n    return chunks\n}\n \n// Usage in batch processing\nchunks := ChunkSlice(items, 100)\nfor _, chunk := range chunks {\n    processChunk(chunk)\n}\n","title":"Chunk Slice","titles":["Utilities","Custom Utility Functions"]},"192":{"href":"/advanced/utilities#merge-maps","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MergeMaps</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">maps</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ...map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, m </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> maps {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> k, v </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result[k] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> v</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MergeMaps</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(defaultConfig, userConfig, overrides)</span></span></code></pre>\n","isPage":false,"text":"\nfunc MergeMaps(maps ...map[string]any) map[string]any {\n    result := make(map[string]any)\n    \n    for _, m := range maps {\n        for k, v := range m {\n            result[k] = v\n        }\n    }\n    \n    return result\n}\n \n// Usage\nconfig := MergeMaps(defaultConfig, userConfig, overrides)\n","title":"Merge Maps","titles":["Utilities","Custom Utility Functions"]},"193":{"href":"/advanced/utilities#filter-slice","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> FilterSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">slice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">predicate</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slice {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> predicate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result, item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">validItems </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> FilterSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsValid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nfunc FilterSlice[T any](slice []T, predicate func(T) bool) []T {\n    result := make([]T, 0)\n    \n    for _, item := range slice {\n        if predicate(item) {\n            result = append(result, item)\n        }\n    }\n    \n    return result\n}\n \n// Usage\nvalidItems := FilterSlice(items, func(item Item) bool {\n    return item.IsValid()\n})\n","title":"Filter Slice","titles":["Utilities","Custom Utility Functions"]},"194":{"href":"/advanced/utilities#timeout-wrapper","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> WithTimeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">timeout</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx, cancel </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithTimeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, timeout)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> cancel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        err   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    done </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        done </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{value, err}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">done:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res.value, res.err</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> zero </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> zero, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> WithTimeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">time.Second, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nfunc WithTimeout[T any](ctx context.Context, timeout time.Duration, fn func(context.Context) (T, error)) (T, error) {\n    ctx, cancel := context.WithTimeout(ctx, timeout)\n    defer cancel()\n    \n    type result struct {\n        value T\n        err   error\n    }\n    \n    done := make(chan result, 1)\n    \n    go func() {\n        value, err := fn(ctx)\n        done &lt;- result{value, err}\n    }()\n    \n    select {\n    case res := &lt;-done:\n        return res.value, res.err\n    case &lt;-ctx.Done():\n        var zero T\n        return zero, ctx.Err()\n    }\n}\n \n// Usage\nresult, err := WithTimeout(ctx, 5*time.Second, func(ctx context.Context) (string, error) {\n    return fetchData(ctx)\n})\n","title":"Timeout Wrapper","titles":["Utilities","Custom Utility Functions"]},"195":{"href":"/advanced/utilities#pipeline-builder","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Pipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stages []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewPipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Pipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Pipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        stages: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(T) T, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Pipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">stage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Pipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.stages </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(p.stages, stage)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Pipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Execute</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">input</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> input</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, stage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.stages {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> stage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pipeline </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewPipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(strings.TrimSpace).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(strings.ToLower).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">s</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> strings.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ReplaceAll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(s, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot; &quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;_&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pipeline.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Execute</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;  Hello World  &quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Result: &quot;hello_world&quot;</span></span></code></pre>\n","isPage":false,"text":"\ntype Pipeline[T any] struct {\n    stages []func(T) T\n}\n \nfunc NewPipeline[T any]() *Pipeline[T] {\n    return &amp;Pipeline[T]{\n        stages: make([]func(T) T, 0),\n    }\n}\n \nfunc (p *Pipeline[T]) Add(stage func(T) T) *Pipeline[T] {\n    p.stages = append(p.stages, stage)\n    return p\n}\n \nfunc (p *Pipeline[T]) Execute(input T) T {\n    result := input\n    for _, stage := range p.stages {\n        result = stage(result)\n    }\n    return result\n}\n \n// Usage\npipeline := NewPipeline[string]().\n    Add(strings.TrimSpace).\n    Add(strings.ToLower).\n    Add(func(s string) string {\n        return strings.ReplaceAll(s, &quot; &quot;, &quot;_&quot;)\n    })\n \nresult := pipeline.Execute(&quot;  Hello World  &quot;)\n// Result: &quot;hello_world&quot;\n","title":"Pipeline Builder","titles":["Utilities","Custom Utility Functions"]},"196":{"href":"/advanced/utilities#error-aggregator","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ErrorAggregator</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errors []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu     </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">e </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ErrorAggregator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    e.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    e.errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(e.errors, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    e.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">e </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ErrorAggregator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    e.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> e.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(e.errors) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(e.errors) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> e.errors[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;multiple errors (</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">): </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(e.errors), e.errors)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">aggregator </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ErrorAggregator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        aggregator.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> aggregator.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype ErrorAggregator struct {\n    errors []error\n    mu     sync.Mutex\n}\n \nfunc (e *ErrorAggregator) Add(err error) {\n    if err == nil {\n        return\n    }\n    \n    e.mu.Lock()\n    e.errors = append(e.errors, err)\n    e.mu.Unlock()\n}\n \nfunc (e *ErrorAggregator) Error() error {\n    e.mu.Lock()\n    defer e.mu.Unlock()\n    \n    if len(e.errors) == 0 {\n        return nil\n    }\n    \n    if len(e.errors) == 1 {\n        return e.errors[0]\n    }\n    \n    return fmt.Errorf(&quot;multiple errors (%d): %v&quot;, len(e.errors), e.errors)\n}\n \n// Usage\naggregator := &amp;ErrorAggregator{}\n \nfor _, item := range items {\n    if err := processItem(item); err != nil {\n        aggregator.Add(err)\n    }\n}\n \nif err := aggregator.Error(); err != nil {\n    return nil, err\n}\n","title":"Error Aggregator","titles":["Utilities","Custom Utility Functions"]},"197":{"href":"/advanced/utilities#context-values-helper","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContextKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    RequestIDKey</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContextKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;request_id&quot;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    UserIDKey</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    ContextKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;user_id&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> WithRequestID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">requestID</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, RequestIDKey, requestID)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetRequestID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    id, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(RequestIDKey).(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> id, ok</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage in nodes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">LoggingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    requestID, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetRequestID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Processing: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, requestID, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype ContextKey string\n \nconst (\n    RequestIDKey ContextKey = &quot;request_id&quot;\n    UserIDKey    ContextKey = &quot;user_id&quot;\n)\n \nfunc WithRequestID(ctx context.Context, requestID string) context.Context {\n    return context.WithValue(ctx, RequestIDKey, requestID)\n}\n \nfunc GetRequestID(ctx context.Context) (string, bool) {\n    id, ok := ctx.Value(RequestIDKey).(string)\n    return id, ok\n}\n \n// Usage in nodes\nfunc (n *LoggingNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    requestID, _ := GetRequestID(ctx)\n    log.Printf(&quot;[%s] Processing: %v&quot;, requestID, prepResult)\n    \n    return process(prepResult)\n}\n","title":"Context Values Helper","titles":["Utilities","Custom Utility Functions"]},"198":{"href":"/advanced/utilities#debounce-function","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Debounce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">delay</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> timer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Timer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mu </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> timer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            timer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Stop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        timer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AfterFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(delay, fn)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">saveDebounced </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Debounce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    saveToDatabase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Second</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Call multiple times, only last one executes</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">saveDebounced</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">saveDebounced</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">saveDebounced</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nfunc Debounce(fn func(), delay time.Duration) func() {\n    var timer *time.Timer\n    var mu sync.Mutex\n    \n    return func() {\n        mu.Lock()\n        defer mu.Unlock()\n        \n        if timer != nil {\n            timer.Stop()\n        }\n        \n        timer = time.AfterFunc(delay, fn)\n    }\n}\n \n// Usage\nsaveDebounced := Debounce(func() {\n    saveToDatabase()\n}, 5*time.Second)\n \n// Call multiple times, only last one executes\nsaveDebounced()\nsaveDebounced()\nsaveDebounced()\n","title":"Debounce Function","titles":["Utilities","Custom Utility Functions"]},"199":{"href":"/advanced/utilities#testing-utilities","html":"\n","isPage":false,"text":"\n","title":"Testing Utilities","titles":["Utilities"]},"200":{"href":"/advanced/utilities#mock-sharedstore","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MockSharedStore</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu   </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RWMutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewMockSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">initial</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MockSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MockSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data: initial,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">m </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MockSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    m.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RLock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RUnlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    val, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m.data[key]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val, ok</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">m </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MockSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">value</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    m.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    m.data[key] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype MockSharedStore struct {\n    data map[string]any\n    mu   sync.RWMutex\n}\n \nfunc NewMockSharedStore(initial map[string]any) *MockSharedStore {\n    return &amp;MockSharedStore{\n        data: initial,\n    }\n}\n \nfunc (m *MockSharedStore) Get(key string) (any, bool) {\n    m.mu.RLock()\n    defer m.mu.RUnlock()\n    val, ok := m.data[key]\n    return val, ok\n}\n \nfunc (m *MockSharedStore) Set(key string, value any) {\n    m.mu.Lock()\n    defer m.mu.Unlock()\n    m.data[key] = value\n}\n","title":"Mock SharedStore","titles":["Utilities","Testing Utilities"]},"201":{"href":"/advanced/utilities#test-node-builder","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execFn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execFn),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage in tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">input</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;test_result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nfunc TestNode(execFn func(context.Context, any) (any, error)) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithExecFunc(execFn),\n    )\n}\n \n// Usage in tests\nnode := TestNode(func(ctx context.Context, input any) (any, error) {\n    return &quot;test_result&quot;, nil\n})\n","title":"Test Node Builder","titles":["Utilities","Testing Utilities"]},"202":{"href":"/advanced/utilities#best-practices","html":"\n<ol>\n<li><strong>Keep Utilities Generic</strong>: Make them reusable across projects</li>\n<li><strong>Document Usage</strong>: Provide clear examples</li>\n<li><strong>Test Thoroughly</strong>: Utilities should be well-tested</li>\n<li><strong>Handle Edge Cases</strong>: Consider nil values and empty inputs</li>\n<li><strong>Use Type Parameters</strong>: Leverage Go generics where appropriate</li>\n<li><strong>Thread Safety</strong>: Ensure utilities are safe for concurrent use</li>\n</ol>\n","isPage":false,"text":"\n\nKeep Utilities Generic: Make them reusable across projects\nDocument Usage: Provide clear examples\nTest Thoroughly: Utilities should be well-tested\nHandle Edge Cases: Consider nil values and empty inputs\nUse Type Parameters: Leverage Go generics where appropriate\nThread Safety: Ensure utilities are safe for concurrent use\n\n","title":"Best Practices","titles":["Utilities"]},"203":{"href":"/advanced/utilities#next-steps","html":"\n<ul>\n<li><a href=\"/advanced/custom-nodes\">Custom Nodes</a> - Build sophisticated nodes</li>\n<li><a href=\"/best-practices\">Best Practices</a> - General guidelines</li>\n<li><a href=\"https://github.com/mark3labs/flyt/tree/main/cookbook\">Examples</a> - See utilities in action</li>\n</ul>","isPage":false,"text":"\n\nCustom Nodes - Build sophisticated nodes\nBest Practices - General guidelines\nExamples - See utilities in action\n","title":"Next Steps","titles":["Utilities"]},"204":{"href":"/advanced/worker-pool#worker-pool","html":"</header>\n<p>Manage concurrent task execution with fine-grained control using the WorkerPool utility.</p>\n","isPage":true,"text":"\nManage concurrent task execution with fine-grained control using the WorkerPool utility.\n","title":"Worker Pool","titles":[]},"205":{"href":"/advanced/worker-pool#basic-worker-pool","html":"\n<p>Create and use a worker pool:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a pool with 10 workers</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Submit tasks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    taskID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process task</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processTask</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(taskID)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Task </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, taskID, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait for all tasks to complete</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clean up</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nCreate and use a worker pool:\n// Create a pool with 10 workers\npool := flyt.NewWorkerPool(10)\n \n// Submit tasks\nfor i := 0; i &lt; 100; i++ {\n    taskID := i\n    pool.Submit(func() {\n        // Process task\n        result := processTask(taskID)\n        fmt.Printf(&quot;Task %d completed: %v\\n&quot;, taskID, result)\n    })\n}\n \n// Wait for all tasks to complete\npool.Wait()\n \n// Clean up\npool.Close()\n","title":"Basic Worker Pool","titles":["Worker Pool"]},"206":{"href":"/advanced/worker-pool#worker-pool-with-results","html":"\n<p>Collect results from worker pool:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ResultCollector</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu      </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processWithWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    collector </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ResultCollector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        index </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            collector.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            collector.results[index] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            collector.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> collector.results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCollect results from worker pool:\ntype ResultCollector struct {\n    mu      sync.Mutex\n    results []Result\n}\n \nfunc processWithWorkerPool(items []Item) []Result {\n    pool := flyt.NewWorkerPool(5)\n    collector := &amp;ResultCollector{\n        results: make([]Result, len(items)),\n    }\n    \n    for i, item := range items {\n        index := i\n        data := item\n        \n        pool.Submit(func() {\n            result := processItem(data)\n            \n            collector.mu.Lock()\n            collector.results[index] = result\n            collector.mu.Unlock()\n        })\n    }\n    \n    pool.Wait()\n    pool.Close()\n    \n    return collector.results\n}\n","title":"Worker Pool with Results","titles":["Worker Pool"]},"207":{"href":"/advanced/worker-pool#dynamic-worker-scaling","html":"\n<p>Adjust worker count based on load:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DynamicWorkerPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    minWorkers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    maxWorkers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool       </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    load       </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int32</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu         </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RWMutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewDynamicWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">min</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">max</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        minWorkers: min,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        maxWorkers: max,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool:       flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(min),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    currentLoad </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.load, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Scale up if needed</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentLoad </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCurrentWorkers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">scaleUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        newLoad </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.load, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Scale down if idle</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> newLoad </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCurrentWorkers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">scaleDown</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">scaleUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    current </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCurrentWorkers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> current </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.maxWorkers {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Create new pool with more workers</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        newPool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">min</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(current</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, p.maxWorkers))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        p.pool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> newPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAdjust worker count based on load:\ntype DynamicWorkerPool struct {\n    minWorkers int\n    maxWorkers int\n    pool       *flyt.WorkerPool\n    load       int32\n    mu         sync.RWMutex\n}\n \nfunc NewDynamicWorkerPool(min, max int) *DynamicWorkerPool {\n    return &amp;DynamicWorkerPool{\n        minWorkers: min,\n        maxWorkers: max,\n        pool:       flyt.NewWorkerPool(min),\n    }\n}\n \nfunc (p *DynamicWorkerPool) Submit(task func()) {\n    currentLoad := atomic.AddInt32(&amp;p.load, 1)\n    \n    // Scale up if needed\n    if currentLoad &gt; int32(p.getCurrentWorkers()*2) {\n        p.scaleUp()\n    }\n    \n    p.pool.Submit(func() {\n        task()\n        \n        newLoad := atomic.AddInt32(&amp;p.load, -1)\n        \n        // Scale down if idle\n        if newLoad &lt; int32(p.getCurrentWorkers()/2) {\n            p.scaleDown()\n        }\n    })\n}\n \nfunc (p *DynamicWorkerPool) scaleUp() {\n    p.mu.Lock()\n    defer p.mu.Unlock()\n    \n    current := p.getCurrentWorkers()\n    if current &lt; p.maxWorkers {\n        // Create new pool with more workers\n        newPool := flyt.NewWorkerPool(min(current*2, p.maxWorkers))\n        p.pool.Close()\n        p.pool = newPool\n    }\n}\n","title":"Dynamic Worker Scaling","titles":["Worker Pool"]},"208":{"href":"/advanced/worker-pool#rate-limited-worker-pool","html":"\n<p>Control processing rate:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createRateLimitedPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">rps</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RateLimitedPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    limiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rate.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewLimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rate.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Limit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rps), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(workers)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RateLimitedPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool:    pool,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        limiter: limiter,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> RateLimitedPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    limiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Limiter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RateLimitedPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Wait for rate limit</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.limiter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(task)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nControl processing rate:\nfunc createRateLimitedPool(workers int, rps int) *RateLimitedPool {\n    limiter := rate.NewLimiter(rate.Limit(rps), 1)\n    pool := flyt.NewWorkerPool(workers)\n    \n    return &amp;RateLimitedPool{\n        pool:    pool,\n        limiter: limiter,\n    }\n}\n \ntype RateLimitedPool struct {\n    pool    *flyt.WorkerPool\n    limiter *rate.Limiter\n}\n \nfunc (p *RateLimitedPool) Submit(ctx context.Context, task func()) error {\n    // Wait for rate limit\n    if err := p.limiter.Wait(ctx); err != nil {\n        return err\n    }\n    \n    p.pool.Submit(task)\n    return nil\n}\n","title":"Rate-Limited Worker Pool","titles":["Worker Pool"]},"209":{"href":"/advanced/worker-pool#priority-queue-worker-pool","html":"\n<p>Process tasks by priority:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PriorityTask</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Priority </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Task     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ID       </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PriorityWorkerPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    workers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    queue   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PriorityQueue</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    running </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu      </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewPriorityWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PriorityWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PriorityWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        workers: workers,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        queue:   </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewPriorityQueue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool:    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(workers),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        running: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Start dispatcher</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dispatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PriorityWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">priority</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.queue.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PriorityTask</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Priority: priority,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Task:     task,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ID:       </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">generateID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PriorityWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dispatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.running {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        task </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.queue.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Pop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Blocks until task available</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> task </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(task.Task)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nProcess tasks by priority:\ntype PriorityTask struct {\n    Priority int\n    Task     func()\n    ID       string\n}\n \ntype PriorityWorkerPool struct {\n    workers int\n    queue   *PriorityQueue\n    pool    *flyt.WorkerPool\n    running bool\n    mu      sync.Mutex\n}\n \nfunc NewPriorityWorkerPool(workers int) *PriorityWorkerPool {\n    p := &amp;PriorityWorkerPool{\n        workers: workers,\n        queue:   NewPriorityQueue(),\n        pool:    flyt.NewWorkerPool(workers),\n        running: true,\n    }\n    \n    // Start dispatcher\n    go p.dispatch()\n    \n    return p\n}\n \nfunc (p *PriorityWorkerPool) Submit(priority int, task func()) {\n    p.queue.Push(PriorityTask{\n        Priority: priority,\n        Task:     task,\n        ID:       generateID(),\n    })\n}\n \nfunc (p *PriorityWorkerPool) dispatch() {\n    for p.running {\n        task := p.queue.Pop() // Blocks until task available\n        if task != nil {\n            p.pool.Submit(task.Task)\n        }\n    }\n}\n","title":"Priority Queue Worker Pool","titles":["Worker Pool"]},"210":{"href":"/advanced/worker-pool#worker-pool-with-timeout","html":"\n<p>Handle task timeouts:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTimeoutPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">timeout</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TimeoutPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TimeoutPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool:    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(workers),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        timeout: timeout,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TimeoutPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    timeout </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TimeoutPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        done </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            done </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">done:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">After</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(p.timeout):</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;task timeout after </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, p.timeout)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">errChan</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle task timeouts:\nfunc createTimeoutPool(workers int, timeout time.Duration) *TimeoutPool {\n    return &amp;TimeoutPool{\n        pool:    flyt.NewWorkerPool(workers),\n        timeout: timeout,\n    }\n}\n \ntype TimeoutPool struct {\n    pool    *flyt.WorkerPool\n    timeout time.Duration\n}\n \nfunc (p *TimeoutPool) Submit(task func() error) error {\n    errChan := make(chan error, 1)\n    \n    p.pool.Submit(func() {\n        done := make(chan error, 1)\n        \n        go func() {\n            done &lt;- task()\n        }()\n        \n        select {\n        case err := &lt;-done:\n            errChan &lt;- err\n        case &lt;-time.After(p.timeout):\n            errChan &lt;- fmt.Errorf(&quot;task timeout after %v&quot;, p.timeout)\n        }\n    })\n    \n    return &lt;-errChan\n}\n","title":"Worker Pool with Timeout","titles":["Worker Pool"]},"211":{"href":"/advanced/worker-pool#worker-pool-in-nodes","html":"\n<p>Use worker pools within nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ParallelProcessingNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewParallelProcessingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ParallelProcessingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ParallelProcessingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool:     flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(workers),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ParallelProcessingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WaitGroup</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        index </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[index] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            errors[index] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Wait with context</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    done </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{})</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(done)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">done:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Check for errors</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ParallelProcessingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUse worker pools within nodes:\ntype ParallelProcessingNode struct {\n    *flyt.BaseNode\n    pool *flyt.WorkerPool\n}\n \nfunc NewParallelProcessingNode(workers int) *ParallelProcessingNode {\n    return &amp;ParallelProcessingNode{\n        BaseNode: flyt.NewBaseNode(),\n        pool:     flyt.NewWorkerPool(workers),\n    }\n}\n \nfunc (n *ParallelProcessingNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    items := prepResult.([]Item)\n    results := make([]Result, len(items))\n    errors := make([]error, len(items))\n    \n    var wg sync.WaitGroup\n    \n    for i, item := range items {\n        wg.Add(1)\n        index := i\n        data := item\n        \n        n.pool.Submit(func() {\n            defer wg.Done()\n            \n            result, err := processItem(data)\n            results[index] = result\n            errors[index] = err\n        })\n    }\n    \n    // Wait with context\n    done := make(chan struct{})\n    go func() {\n        wg.Wait()\n        close(done)\n    }()\n    \n    select {\n    case &lt;-ctx.Done():\n        return nil, ctx.Err()\n    case &lt;-done:\n        // Check for errors\n        for _, err := range errors {\n            if err != nil {\n                return results, fmt.Errorf(&quot;processing failed: %w&quot;, err)\n            }\n        }\n        return results, nil\n    }\n}\n \nfunc (n *ParallelProcessingNode) Close() {\n    n.pool.Close()\n}\n","title":"Worker Pool in Nodes","titles":["Worker Pool"]},"212":{"href":"/advanced/worker-pool#batch-processing-with-worker-pool","html":"\n<p>Process batches efficiently:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processBatchesWithPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">batchSize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(workers)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process in batches</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items); i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> batchSize {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> min</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchSize, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        batch </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items[i:end]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        batchStart </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            batchResults </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(batch)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Store results</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> j, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> batchResults {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                results[batchStart</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">j] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nProcess batches efficiently:\nfunc processBatchesWithPool(items []Item, batchSize int, workers int) []Result {\n    pool := flyt.NewWorkerPool(workers)\n    results := make([]Result, len(items))\n    \n    // Process in batches\n    for i := 0; i &lt; len(items); i += batchSize {\n        end := min(i+batchSize, len(items))\n        batch := items[i:end]\n        batchStart := i\n        \n        pool.Submit(func() {\n            batchResults := processBatch(batch)\n            \n            // Store results\n            for j, result := range batchResults {\n                results[batchStart+j] = result\n            }\n        })\n    }\n    \n    pool.Wait()\n    pool.Close()\n    \n    return results\n}\n","title":"Batch Processing with Worker Pool","titles":["Worker Pool"]},"213":{"href":"/advanced/worker-pool#monitoring-worker-pool","html":"\n<p>Track pool performance:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MonitoredPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool      </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    submitted </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    completed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    failed    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    totalTime </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MonitoredPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.submitted, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        start </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        duration </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(start)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.totalTime, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(duration))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.failed, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.completed, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MonitoredPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetStats</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;submitted&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.submitted),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;completed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.completed),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:        atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.failed),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;avg_time_ms&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAverageTime</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;pending&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:       p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPendingCount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTrack pool performance:\ntype MonitoredPool struct {\n    pool      *flyt.WorkerPool\n    submitted int64\n    completed int64\n    failed    int64\n    totalTime int64\n}\n \nfunc (p *MonitoredPool) Submit(task func() error) {\n    atomic.AddInt64(&amp;p.submitted, 1)\n    \n    p.pool.Submit(func() {\n        start := time.Now()\n        \n        err := task()\n        \n        duration := time.Since(start)\n        atomic.AddInt64(&amp;p.totalTime, int64(duration))\n        \n        if err != nil {\n            atomic.AddInt64(&amp;p.failed, 1)\n        } else {\n            atomic.AddInt64(&amp;p.completed, 1)\n        }\n    })\n}\n \nfunc (p *MonitoredPool) GetStats() map[string]int64 {\n    return map[string]int64{\n        &quot;submitted&quot;:     atomic.LoadInt64(&amp;p.submitted),\n        &quot;completed&quot;:     atomic.LoadInt64(&amp;p.completed),\n        &quot;failed&quot;:        atomic.LoadInt64(&amp;p.failed),\n        &quot;avg_time_ms&quot;:   p.getAverageTime(),\n        &quot;pending&quot;:       p.getPendingCount(),\n    }\n}\n","title":"Monitoring Worker Pool","titles":["Worker Pool"]},"214":{"href":"/advanced/worker-pool#circuit-breaker-pool","html":"\n<p>Prevent overload with circuit breaker:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CircuitBreakerPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool        </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    failures    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int32</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    threshold   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int32</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    resetTime   </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    lastFailure </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu          </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RWMutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isOpen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;circuit breaker open&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.failures, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.threshold {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                p.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                p.lastFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                p.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Reset on success</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">StoreInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.failures, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isOpen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RLock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RUnlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.failures) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.threshold {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(p.lastFailure) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.resetTime {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Reset after timeout</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">StoreInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.failures, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPrevent overload with circuit breaker:\ntype CircuitBreakerPool struct {\n    pool        *flyt.WorkerPool\n    failures    int32\n    threshold   int32\n    resetTime   time.Duration\n    lastFailure time.Time\n    mu          sync.RWMutex\n}\n \nfunc (p *CircuitBreakerPool) Submit(task func() error) error {\n    if p.isOpen() {\n        return fmt.Errorf(&quot;circuit breaker open&quot;)\n    }\n    \n    p.pool.Submit(func() {\n        err := task()\n        \n        if err != nil {\n            failures := atomic.AddInt32(&amp;p.failures, 1)\n            \n            if failures &gt;= p.threshold {\n                p.mu.Lock()\n                p.lastFailure = time.Now()\n                p.mu.Unlock()\n            }\n        } else {\n            // Reset on success\n            atomic.StoreInt32(&amp;p.failures, 0)\n        }\n    })\n    \n    return nil\n}\n \nfunc (p *CircuitBreakerPool) isOpen() bool {\n    p.mu.RLock()\n    defer p.mu.RUnlock()\n    \n    if atomic.LoadInt32(&amp;p.failures) &gt;= p.threshold {\n        if time.Since(p.lastFailure) &lt; p.resetTime {\n            return true\n        }\n        // Reset after timeout\n        atomic.StoreInt32(&amp;p.failures, 0)\n    }\n    \n    return false\n}\n","title":"Circuit Breaker Pool","titles":["Worker Pool"]},"215":{"href":"/advanced/worker-pool#best-practices","html":"\n<ol>\n<li><strong>Size Appropriately</strong>: Set worker count based on workload and resources</li>\n<li><strong>Handle Panics</strong>: Recover from panics in worker goroutines</li>\n<li><strong>Clean Up</strong>: Always close pools when done</li>\n<li><strong>Monitor Performance</strong>: Track metrics for optimization</li>\n<li><strong>Avoid Blocking</strong>: Don&#x27;t block workers with long waits</li>\n<li><strong>Test Concurrency</strong>: Test with various worker counts and loads</li>\n</ol>\n","isPage":false,"text":"\n\nSize Appropriately: Set worker count based on workload and resources\nHandle Panics: Recover from panics in worker goroutines\nClean Up: Always close pools when done\nMonitor Performance: Track metrics for optimization\nAvoid Blocking: Don&#x27;t block workers with long waits\nTest Concurrency: Test with various worker counts and loads\n\n","title":"Best Practices","titles":["Worker Pool"]},"216":{"href":"/advanced/worker-pool#next-steps","html":"\n<ul>\n<li><a href=\"/advanced/batch-processing\">Batch Processing</a> - High-level batch operations</li>\n<li><a href=\"/advanced/custom-nodes\">Custom Nodes</a> - Build nodes with worker pools</li>\n<li><a href=\"/best-practices\">Best Practices</a> - General guidelines</li>\n</ul>","isPage":false,"text":"\n\nBatch Processing - High-level batch operations\nCustom Nodes - Build nodes with worker pools\nBest Practices - General guidelines\n","title":"Next Steps","titles":["Worker Pool"]},"217":{"href":"/patterns/branching#conditional-branching","html":"</header>\n<p>Control flow execution dynamically based on runtime conditions using action-based routing.</p>\n","isPage":true,"text":"\nControl flow execution dynamically based on runtime conditions using action-based routing.\n","title":"Conditional Branching","titles":[]},"218":{"href":"/patterns/branching#simple-binary-branching","html":"\n<p>Make yes/no decisions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">validationNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        isValid </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> isValid, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorNode)</span></span></code></pre>\n","isPage":false,"text":"\nMake yes/no decisions:\nvalidationNode := flyt.NewNode(\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n        data := prepResult.(string)\n        isValid := len(data) &gt; 0 &amp;&amp; len(data) &lt; 100\n        return isValid, nil\n    }),\n    flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        if execResult.(bool) {\n            return &quot;valid&quot;, nil\n        }\n        return &quot;invalid&quot;, nil\n    }),\n)\n \nflow := flyt.NewFlow(validationNode)\nflow.Connect(validationNode, &quot;valid&quot;, processNode)\nflow.Connect(validationNode, &quot;invalid&quot;, errorNode)\n","title":"Simple Binary Branching","titles":["Conditional Branching"]},"219":{"href":"/patterns/branching#multi-way-branching","html":"\n<p>Route to multiple paths:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">categoryNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;small&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;medium&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;large&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;xlarge&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;small&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, smallHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;medium&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, mediumHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;large&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, largeHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;xlarge&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, xlargeHandler)</span></span></code></pre>\n","isPage":false,"text":"\nRoute to multiple paths:\ncategoryNode := flyt.NewNode(\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n        value := prepResult.(float64)\n        \n        switch {\n        case value &lt; 10:\n            return &quot;small&quot;, nil\n        case value &lt; 100:\n            return &quot;medium&quot;, nil\n        case value &lt; 1000:\n            return &quot;large&quot;, nil\n        default:\n            return &quot;xlarge&quot;, nil\n        }\n    }),\n    flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        return flyt.Action(execResult.(string)), nil\n    }),\n)\n \nflow := flyt.NewFlow(categoryNode)\nflow.Connect(categoryNode, &quot;small&quot;, smallHandler)\nflow.Connect(categoryNode, &quot;medium&quot;, mediumHandler)\nflow.Connect(categoryNode, &quot;large&quot;, largeHandler)\nflow.Connect(categoryNode, &quot;xlarge&quot;, xlargeHandler)\n","title":"Multi-Way Branching","titles":["Conditional Branching"]},"220":{"href":"/patterns/branching#state-machine-pattern","html":"\n<p>Implement state transitions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> StateMachine</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">StateMachine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    currentState, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentState </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        currentState </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;init&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    state </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentState.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    event </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // State transition logic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    nextState </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transition</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(state, event)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, nextState)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return action based on new state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nextState), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">StateMachine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transition</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">state</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">event</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transitions </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;init&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;start&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;cancel&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;cancelled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;processing&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;complete&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;done&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;pause&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;paused&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;paused&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;resume&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;cancel&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;cancelled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateTransitions, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> transitions[state]; ok {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nextState, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateTransitions[event]; ok {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nextState</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// No transition</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nImplement state transitions:\ntype StateMachine struct {\n    *flyt.BaseNode\n}\n \nfunc (n *StateMachine) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    currentState, _ := shared.Get(&quot;state&quot;)\n    if currentState == nil {\n        currentState = &quot;init&quot;\n    }\n    \n    state := currentState.(string)\n    event := execResult.(string)\n    \n    // State transition logic\n    nextState := n.transition(state, event)\n    shared.Set(&quot;state&quot;, nextState)\n    \n    // Return action based on new state\n    return flyt.Action(nextState), nil\n}\n \nfunc (n *StateMachine) transition(state, event string) string {\n    transitions := map[string]map[string]string{\n        &quot;init&quot;: {\n            &quot;start&quot;: &quot;processing&quot;,\n            &quot;cancel&quot;: &quot;cancelled&quot;,\n        },\n        &quot;processing&quot;: {\n            &quot;complete&quot;: &quot;done&quot;,\n            &quot;error&quot;: &quot;failed&quot;,\n            &quot;pause&quot;: &quot;paused&quot;,\n        },\n        &quot;paused&quot;: {\n            &quot;resume&quot;: &quot;processing&quot;,\n            &quot;cancel&quot;: &quot;cancelled&quot;,\n        },\n    }\n    \n    if stateTransitions, ok := transitions[state]; ok {\n        if nextState, ok := stateTransitions[event]; ok {\n            return nextState\n        }\n    }\n    \n    return state // No transition\n}\n","title":"State Machine Pattern","titles":["Conditional Branching"]},"221":{"href":"/patterns/branching#dynamic-routing","html":"\n<p>Route based on external configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DynamicRouter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    routes </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewDynamicRouter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">configPath</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicRouter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Load routing configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> os.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ReadFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(configPath)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> routes </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    json.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unmarshal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">routes)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicRouter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        routes:   routes,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicRouter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Look up route in configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> action, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.routes[result]; ok {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(action), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Default route</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nRoute based on external configuration:\ntype DynamicRouter struct {\n    *flyt.BaseNode\n    routes map[string]string\n}\n \nfunc NewDynamicRouter(configPath string) *DynamicRouter {\n    // Load routing configuration\n    data, _ := os.ReadFile(configPath)\n    var routes map[string]string\n    json.Unmarshal(data, &amp;routes)\n    \n    return &amp;DynamicRouter{\n        BaseNode: flyt.NewBaseNode(),\n        routes:   routes,\n    }\n}\n \nfunc (n *DynamicRouter) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    result := execResult.(string)\n    \n    // Look up route in configuration\n    if action, ok := n.routes[result]; ok {\n        return flyt.Action(action), nil\n    }\n    \n    // Default route\n    return flyt.DefaultAction, nil\n}\n","title":"Dynamic Routing","titles":["Conditional Branching"]},"222":{"href":"/patterns/branching#weighted-routing","html":"\n<p>Distribute load across paths:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> LoadBalancer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    weights  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    counter  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu       </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewLoadBalancer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">weights</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">LoadBalancer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">LoadBalancer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        weights:  weights,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">LoadBalancer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.counter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Calculate total weight</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    totalWeight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, weight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.weights {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        totalWeight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> weight</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Determine which path based on counter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    position </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.counter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">%</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> totalWeight</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    currentWeight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> action, weight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.weights {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        currentWeight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> weight</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> position </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentWeight {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(action), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">balancer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewLoadBalancer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;server1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 30% of traffic</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;server2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 50% of traffic</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;server3&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 20% of traffic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nDistribute load across paths:\ntype LoadBalancer struct {\n    *flyt.BaseNode\n    weights  map[string]int\n    counter  int\n    mu       sync.Mutex\n}\n \nfunc NewLoadBalancer(weights map[string]int) *LoadBalancer {\n    return &amp;LoadBalancer{\n        BaseNode: flyt.NewBaseNode(),\n        weights:  weights,\n    }\n}\n \nfunc (n *LoadBalancer) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    n.mu.Lock()\n    defer n.mu.Unlock()\n    \n    n.counter++\n    \n    // Calculate total weight\n    totalWeight := 0\n    for _, weight := range n.weights {\n        totalWeight += weight\n    }\n    \n    // Determine which path based on counter\n    position := n.counter % totalWeight\n    currentWeight := 0\n    \n    for action, weight := range n.weights {\n        currentWeight += weight\n        if position &lt; currentWeight {\n            return flyt.Action(action), nil\n        }\n    }\n    \n    return flyt.DefaultAction, nil\n}\n \n// Usage\nbalancer := NewLoadBalancer(map[string]int{\n    &quot;server1&quot;: 3,  // 30% of traffic\n    &quot;server2&quot;: 5,  // 50% of traffic\n    &quot;server3&quot;: 2,  // 20% of traffic\n})\n","title":"Weighted Routing","titles":["Conditional Branching"]},"223":{"href":"/patterns/branching#conditional-loops","html":"\n<p>Create loops with exit conditions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">retryNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        attempts, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;attempts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> attempts.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Try operation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> performOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;attempts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: err.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: result,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;attempts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;attempts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, attempts)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Loop back</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Exit loop</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(retryNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(retryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, retryNode)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Loop back to self</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(retryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, successNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(retryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, failureNode)</span></span></code></pre>\n","isPage":false,"text":"\nCreate loops with exit conditions:\nretryNode := flyt.NewNode(\n    flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n        attempts, _ := shared.Get(&quot;attempts&quot;)\n        if attempts == nil {\n            attempts = 0\n        }\n        return attempts.(int), nil\n    }),\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n        attempts := prepResult.(int)\n        \n        // Try operation\n        result, err := performOperation()\n        if err != nil {\n            return map[string]any{\n                &quot;success&quot;: false,\n                &quot;attempts&quot;: attempts + 1,\n                &quot;error&quot;: err.Error(),\n            }, nil\n        }\n        \n        return map[string]any{\n            &quot;success&quot;: true,\n            &quot;result&quot;: result,\n        }, nil\n    }),\n    flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        result := execResult.(map[string]any)\n        \n        if result[&quot;success&quot;].(bool) {\n            return &quot;success&quot;, nil\n        }\n        \n        attempts := result[&quot;attempts&quot;].(int)\n        shared.Set(&quot;attempts&quot;, attempts)\n        \n        if attempts &lt; 3 {\n            return &quot;retry&quot;, nil  // Loop back\n        }\n        \n        return &quot;failed&quot;, nil  // Exit loop\n    }),\n)\n \nflow := flyt.NewFlow(retryNode)\nflow.Connect(retryNode, &quot;retry&quot;, retryNode)  // Loop back to self\nflow.Connect(retryNode, &quot;success&quot;, successNode)\nflow.Connect(retryNode, &quot;failed&quot;, failureNode)\n","title":"Conditional Loops","titles":["Conditional Branching"]},"224":{"href":"/patterns/branching#pipeline-branching","html":"\n<p>Branch and merge pipelines:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Split node decides which pipeline(s) to execute</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">splitNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        needsValidation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;validate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        needsEnrichment </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;enrich&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> needsValidation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> needsEnrichment {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;both&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> needsValidation {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;validate_only&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> needsEnrichment {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;enrich_only&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;skip&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Build flow with different pipelines</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Both pipelines</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;both&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, flyt.DefaultAction, enrichNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(enrichNode, flyt.DefaultAction, mergeNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Validation only</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;validate_only&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;skip_enrich&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, mergeNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Enrichment only</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;enrich_only&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, enrichNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(enrichNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;skip_validate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, mergeNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Skip both</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;skip&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, mergeNode)</span></span></code></pre>\n","isPage":false,"text":"\nBranch and merge pipelines:\n// Split node decides which pipeline(s) to execute\nsplitNode := flyt.NewNode(\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n        data := prepResult.(map[string]any)\n        \n        needsValidation := data[&quot;validate&quot;].(bool)\n        needsEnrichment := data[&quot;enrich&quot;].(bool)\n        \n        if needsValidation &amp;&amp; needsEnrichment {\n            return &quot;both&quot;, nil\n        } else if needsValidation {\n            return &quot;validate_only&quot;, nil\n        } else if needsEnrichment {\n            return &quot;enrich_only&quot;, nil\n        }\n        return &quot;skip&quot;, nil\n    }),\n    flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        return flyt.Action(execResult.(string)), nil\n    }),\n)\n \n// Build flow with different pipelines\nflow := flyt.NewFlow(splitNode)\n \n// Both pipelines\nflow.Connect(splitNode, &quot;both&quot;, validateNode)\nflow.Connect(validateNode, flyt.DefaultAction, enrichNode)\nflow.Connect(enrichNode, flyt.DefaultAction, mergeNode)\n \n// Validation only\nflow.Connect(splitNode, &quot;validate_only&quot;, validateNode)\nflow.Connect(validateNode, &quot;skip_enrich&quot;, mergeNode)\n \n// Enrichment only\nflow.Connect(splitNode, &quot;enrich_only&quot;, enrichNode)\nflow.Connect(enrichNode, &quot;skip_validate&quot;, mergeNode)\n \n// Skip both\nflow.Connect(splitNode, &quot;skip&quot;, mergeNode)\n","title":"Pipeline Branching","titles":["Conditional Branching"]},"225":{"href":"/patterns/branching#feature-flags","html":"\n<p>Control flow with feature toggles:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FeatureFlagNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flags </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FeatureFlagNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    feature </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Check if feature is enabled</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> enabled, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.flags[feature]; ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> enabled {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(feature </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;_enabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(feature </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;_disabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flagNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FeatureFlagNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flags: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;new_algorithm&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;beta_feature&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;experimental&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flagNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flagNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;new_algorithm_enabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, newAlgorithmNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flagNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;new_algorithm_disabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, oldAlgorithmNode)</span></span></code></pre>\n","isPage":false,"text":"\nControl flow with feature toggles:\ntype FeatureFlagNode struct {\n    *flyt.BaseNode\n    flags map[string]bool\n}\n \nfunc (n *FeatureFlagNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    feature := execResult.(string)\n    \n    // Check if feature is enabled\n    if enabled, ok := n.flags[feature]; ok &amp;&amp; enabled {\n        return flyt.Action(feature + &quot;_enabled&quot;), nil\n    }\n    \n    return flyt.Action(feature + &quot;_disabled&quot;), nil\n}\n \n// Usage\nflagNode := &amp;FeatureFlagNode{\n    BaseNode: flyt.NewBaseNode(),\n    flags: map[string]bool{\n        &quot;new_algorithm&quot;: true,\n        &quot;beta_feature&quot;: false,\n        &quot;experimental&quot;: true,\n    },\n}\n \nflow := flyt.NewFlow(flagNode)\nflow.Connect(flagNode, &quot;new_algorithm_enabled&quot;, newAlgorithmNode)\nflow.Connect(flagNode, &quot;new_algorithm_disabled&quot;, oldAlgorithmNode)\n","title":"Feature Flags","titles":["Conditional Branching"]},"226":{"href":"/patterns/branching#ab-testing","html":"\n<p>Route based on experiment groups:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createABTestNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">testName</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">distribution</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            userID, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> userID, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Hash user ID for consistent assignment</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            h </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fnv.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">New32a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            h.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">byte</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> testName))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            hash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> h.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sum32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Determine variant based on distribution</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            bucket </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(hash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">%</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            cumulative </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> variant, percentage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> distribution {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                cumulative </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> percentage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bucket </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cumulative {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> variant, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;control&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            variant </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ab_variant&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, variant)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(variant), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">abNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createABTestNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;checkout_flow&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;variant_a&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">33</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 33% of users</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;variant_b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">33</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 33% of users</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;control&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">34</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 34% of users</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nRoute based on experiment groups:\nfunc createABTestNode(testName string, distribution map[string]int) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            userID, _ := shared.Get(&quot;user_id&quot;)\n            return userID, nil\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            userID := prepResult.(string)\n            \n            // Hash user ID for consistent assignment\n            h := fnv.New32a()\n            h.Write([]byte(userID + testName))\n            hash := h.Sum32()\n            \n            // Determine variant based on distribution\n            bucket := int(hash % 100)\n            cumulative := 0\n            \n            for variant, percentage := range distribution {\n                cumulative += percentage\n                if bucket &lt; cumulative {\n                    return variant, nil\n                }\n            }\n            \n            return &quot;control&quot;, nil\n        }),\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            variant := execResult.(string)\n            shared.Set(&quot;ab_variant&quot;, variant)\n            return flyt.Action(variant), nil\n        }),\n    )\n}\n \n// Usage\nabNode := createABTestNode(&quot;checkout_flow&quot;, map[string]int{\n    &quot;variant_a&quot;: 33,  // 33% of users\n    &quot;variant_b&quot;: 33,  // 33% of users\n    &quot;control&quot;:   34,  // 34% of users\n})\n","title":"A/B Testing","titles":["Conditional Branching"]},"227":{"href":"/patterns/branching#best-practices","html":"\n<ol>\n<li><strong>Clear Action Names</strong>: Use descriptive action names that indicate the path</li>\n<li><strong>Document Branches</strong>: Comment all possible branches and their conditions</li>\n<li><strong>Handle All Cases</strong>: Ensure all possible actions have connections</li>\n<li><strong>Avoid Deep Nesting</strong>: Keep branching logic simple and readable</li>\n<li><strong>Test All Paths</strong>: Write tests for each branch condition</li>\n<li><strong>Monitor Branch Usage</strong>: Track which paths are taken most frequently</li>\n</ol>\n","isPage":false,"text":"\n\nClear Action Names: Use descriptive action names that indicate the path\nDocument Branches: Comment all possible branches and their conditions\nHandle All Cases: Ensure all possible actions have connections\nAvoid Deep Nesting: Keep branching logic simple and readable\nTest All Paths: Write tests for each branch condition\nMonitor Branch Usage: Track which paths are taken most frequently\n\n","title":"Best Practices","titles":["Conditional Branching"]},"228":{"href":"/patterns/branching#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/actions\">Actions</a> - Deep dive into action system</li>\n<li><a href=\"/concepts/flows\">Flows</a> - Building complex workflows</li>\n<li><a href=\"/patterns/branching#state-machine-pattern\">State Machines</a> - Advanced state management</li>\n</ul>","isPage":false,"text":"\n\nActions - Deep dive into action system\nFlows - Building complex workflows\nState Machines - Advanced state management\n","title":"Next Steps","titles":["Conditional Branching"]},"229":{"href":"/patterns/closures#configuration-via-closures","html":"</header>\n<p>Use closures to create configurable, reusable nodes with encapsulated state and configuration.</p>\n","isPage":true,"text":"\nUse closures to create configurable, reusable nodes with encapsulated state and configuration.\n","title":"Configuration via Closures","titles":[]},"230":{"href":"/patterns/closures#basic-closure-pattern","html":"\n<p>Pass configuration to nodes using closures:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAPINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">apiKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">baseURL</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // apiKey and baseURL are captured in the closure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            url </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, baseURL)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            req, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> http.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewRequest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;GET&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, url, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            req.Header.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Authorization&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Bearer </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, apiKey))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            client </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Client</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{Timeout: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.Second}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            resp, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Do</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(req)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> resp.Body.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            json.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewDecoder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(resp.Body).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">data)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">apiNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAPINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;secret-key-123&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://api.example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nPass configuration to nodes using closures:\nfunc createAPINode(apiKey string, baseURL string) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            // apiKey and baseURL are captured in the closure\n            url := fmt.Sprintf(&quot;%s/data&quot;, baseURL)\n            req, _ := http.NewRequest(&quot;GET&quot;, url, nil)\n            req.Header.Set(&quot;Authorization&quot;, fmt.Sprintf(&quot;Bearer %s&quot;, apiKey))\n            \n            client := &amp;http.Client{Timeout: 30 * time.Second}\n            resp, err := client.Do(req)\n            if err != nil {\n                return nil, err\n            }\n            defer resp.Body.Close()\n            \n            var data map[string]any\n            json.NewDecoder(resp.Body).Decode(&amp;data)\n            return data, nil\n        }),\n    )\n}\n \n// Usage\napiNode := createAPINode(&quot;secret-key-123&quot;, &quot;https://api.example.com&quot;)\n","title":"Basic Closure Pattern","titles":["Configuration via Closures"]},"231":{"href":"/patterns/closures#stateful-nodes","html":"\n<p>Maintain state across executions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCounterNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            current </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Execution #</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, current), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nMaintain state across executions:\nfunc createCounterNode() flyt.Node {\n    count := 0\n    mu := &amp;sync.Mutex{}\n    \n    return flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            mu.Lock()\n            count++\n            current := count\n            mu.Unlock()\n            \n            return fmt.Sprintf(&quot;Execution #%d&quot;, current), nil\n        }),\n    )\n}\n","title":"Stateful Nodes","titles":["Configuration via Closures"]},"232":{"href":"/patterns/closures#configuration-objects","html":"\n<p>Use structs for complex configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DatabaseConfig</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Host     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Port     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    User     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Password </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Database </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    MaxConns </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">config</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DatabaseConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create connection pool once</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    dsn </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">@tcp(</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)/</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        config.User, config.Password, config.Host, config.Port, config.Database)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sql.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Open</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;mysql&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, dsn)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SetMaxOpenConns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config.MaxConns)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            query </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            rows, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> db.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">QueryContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, query)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rows.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Process rows...</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">dbNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Host:     </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;localhost&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Port:     </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3306</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    User:     </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Password: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;secret&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Database: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;myapp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    MaxConns: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nUse structs for complex configuration:\ntype DatabaseConfig struct {\n    Host     string\n    Port     int\n    User     string\n    Password string\n    Database string\n    MaxConns int\n}\n \nfunc createDatabaseNode(config DatabaseConfig) flyt.Node {\n    // Create connection pool once\n    dsn := fmt.Sprintf(&quot;%s:%s@tcp(%s:%d)/%s&quot;,\n        config.User, config.Password, config.Host, config.Port, config.Database)\n    \n    db, _ := sql.Open(&quot;mysql&quot;, dsn)\n    db.SetMaxOpenConns(config.MaxConns)\n    \n    return flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            query := prepResult.(string)\n            rows, err := db.QueryContext(ctx, query)\n            if err != nil {\n                return nil, err\n            }\n            defer rows.Close()\n            \n            var results []map[string]any\n            // Process rows...\n            return results, nil\n        }),\n    )\n}\n \n// Usage\ndbNode := createDatabaseNode(DatabaseConfig{\n    Host:     &quot;localhost&quot;,\n    Port:     3306,\n    User:     &quot;app&quot;,\n    Password: &quot;secret&quot;,\n    Database: &quot;myapp&quot;,\n    MaxConns: 10,\n})\n","title":"Configuration Objects","titles":["Configuration via Closures"]},"233":{"href":"/patterns/closures#factory-functions","html":"\n<p>Create specialized node variants:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createHTTPNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">method</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">headers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            url, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;url&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            body, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;body&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;url&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: url, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;body&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: body}, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            url </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;url&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bodyReader </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Reader</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> body, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;body&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]; ok {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                bodyBytes, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Marshal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(body)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                bodyReader </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bytes.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewReader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(bodyBytes)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            req, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> http.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewRequest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(method, url, bodyReader)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Apply configured headers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key, value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> headers {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                req.Header.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key, value)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            client </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Client</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            resp, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Do</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(req)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> resp.Body.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            json.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewDecoder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(resp.Body).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create specialized nodes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createHTTPNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;GET&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;Accept&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">postNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createHTTPNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;Accept&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nCreate specialized node variants:\nfunc createHTTPNode(method string, headers map[string]string) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            url, _ := shared.Get(&quot;url&quot;)\n            body, _ := shared.Get(&quot;body&quot;)\n            return map[string]any{&quot;url&quot;: url, &quot;body&quot;: body}, nil\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            data := prepResult.(map[string]any)\n            url := data[&quot;url&quot;].(string)\n            \n            var bodyReader io.Reader\n            if body, ok := data[&quot;body&quot;]; ok {\n                bodyBytes, _ := json.Marshal(body)\n                bodyReader = bytes.NewReader(bodyBytes)\n            }\n            \n            req, _ := http.NewRequest(method, url, bodyReader)\n            \n            // Apply configured headers\n            for key, value := range headers {\n                req.Header.Set(key, value)\n            }\n            \n            client := &amp;http.Client{}\n            resp, err := client.Do(req)\n            if err != nil {\n                return nil, err\n            }\n            defer resp.Body.Close()\n            \n            var result map[string]any\n            json.NewDecoder(resp.Body).Decode(&amp;result)\n            return result, nil\n        }),\n    )\n}\n \n// Create specialized nodes\ngetNode := createHTTPNode(&quot;GET&quot;, map[string]string{\n    &quot;Accept&quot;: &quot;application/json&quot;,\n})\n \npostNode := createHTTPNode(&quot;POST&quot;, map[string]string{\n    &quot;Content-Type&quot;: &quot;application/json&quot;,\n    &quot;Accept&quot;: &quot;application/json&quot;,\n})\n","title":"Factory Functions","titles":["Configuration via Closures"]},"234":{"href":"/patterns/closures#resource-management","html":"\n<p>Manage shared resources:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFileProcessorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">bufferSize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Pre-allocate buffer</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    buffer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">byte</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, bufferSize)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            filePath </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            file, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> os.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Open</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(filePath)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> file.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Reuse buffer</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            n, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> file.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(buffer)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> io.EOF {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Process buffer[:n]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(buffer[:n]), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nManage shared resources:\nfunc createFileProcessorNode(bufferSize int) flyt.Node {\n    // Pre-allocate buffer\n    buffer := make([]byte, bufferSize)\n    \n    return flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            filePath := prepResult.(string)\n            \n            file, err := os.Open(filePath)\n            if err != nil {\n                return nil, err\n            }\n            defer file.Close()\n            \n            // Reuse buffer\n            n, err := file.Read(buffer)\n            if err != nil &amp;&amp; err != io.EOF {\n                return nil, err\n            }\n            \n            // Process buffer[:n]\n            return processData(buffer[:n]), nil\n        }),\n    )\n}\n","title":"Resource Management","titles":["Configuration via Closures"]},"235":{"href":"/patterns/closures#middleware-pattern","html":"\n<p>Wrap nodes with additional behavior:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> withLogging</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">node</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Starting prep&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            start </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Exec took </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name, time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(start))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            action, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared, prepResult, execResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Returning action: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name, action)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> action, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> withLogging</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processor&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nWrap nodes with additional behavior:\nfunc withLogging(name string, node flyt.Node) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            log.Printf(&quot;[%s] Starting prep&quot;, name)\n            return node.Prep(ctx, shared)\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            start := time.Now()\n            result, err := node.Exec(ctx, prepResult)\n            log.Printf(&quot;[%s] Exec took %v&quot;, name, time.Since(start))\n            return result, err\n        }),\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            action, err := node.Post(ctx, shared, prepResult, execResult)\n            log.Printf(&quot;[%s] Returning action: %s&quot;, name, action)\n            return action, err\n        }),\n    )\n}\n \n// Usage\nprocessNode := withLogging(&quot;processor&quot;, createProcessNode())\n","title":"Middleware Pattern","titles":["Configuration via Closures"]},"236":{"href":"/patterns/closures#dynamic-configuration","html":"\n<p>Load configuration at runtime:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createConfigurableNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">configPath</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Load config file</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            data, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> os.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ReadFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(configPath)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            json.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unmarshal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Use configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processWithConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nLoad configuration at runtime:\nfunc createConfigurableNode(configPath string) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            // Load config file\n            data, err := os.ReadFile(configPath)\n            if err != nil {\n                return nil, err\n            }\n            \n            var config map[string]any\n            json.Unmarshal(data, &amp;config)\n            return config, nil\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            config := prepResult.(map[string]any)\n            // Use configuration\n            return processWithConfig(config), nil\n        }),\n    )\n}\n","title":"Dynamic Configuration","titles":["Configuration via Closures"]},"237":{"href":"/patterns/closures#dependency-injection","html":"\n<p>Inject dependencies through closures:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Dependencies</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    DB       </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DB</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Cache    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">redis</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Client</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Logger   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Logger</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Metrics  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">prometheus</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Registry</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createServiceNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">deps</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Dependencies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Use injected dependencies</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            deps.Logger.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Processing request&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Check cache</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cached, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deps.Cache.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                deps.Metrics.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Inc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;cache_hits&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cached, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Query database</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> queryDB</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(deps.DB, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                deps.Logger.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DB error: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Update cache</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            deps.Cache.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result, time.Hour)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nInject dependencies through closures:\ntype Dependencies struct {\n    DB       *sql.DB\n    Cache    *redis.Client\n    Logger   *log.Logger\n    Metrics  *prometheus.Registry\n}\n \nfunc createServiceNode(deps Dependencies) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n            // Use injected dependencies\n            deps.Logger.Println(&quot;Processing request&quot;)\n            \n            // Check cache\n            if cached, err := deps.Cache.Get(ctx, &quot;key&quot;).Result(); err == nil {\n                deps.Metrics.Inc(&quot;cache_hits&quot;)\n                return cached, nil\n            }\n            \n            // Query database\n            result, err := queryDB(deps.DB, prepResult)\n            if err != nil {\n                deps.Logger.Printf(&quot;DB error: %v&quot;, err)\n                return nil, err\n            }\n            \n            // Update cache\n            deps.Cache.Set(ctx, &quot;key&quot;, result, time.Hour)\n            \n            return result, nil\n        }),\n    )\n}\n","title":"Dependency Injection","titles":["Configuration via Closures"]},"238":{"href":"/patterns/closures#best-practices","html":"\n<ol>\n<li><strong>Immutable Configuration</strong>: Don&#x27;t modify captured variables after node creation</li>\n<li><strong>Thread Safety</strong>: Use mutexes for shared state in concurrent scenarios</li>\n<li><strong>Resource Cleanup</strong>: Ensure resources are properly closed</li>\n<li><strong>Error Handling</strong>: Handle configuration errors gracefully</li>\n<li><strong>Documentation</strong>: Document required configuration clearly</li>\n</ol>\n","isPage":false,"text":"\n\nImmutable Configuration: Don&#x27;t modify captured variables after node creation\nThread Safety: Use mutexes for shared state in concurrent scenarios\nResource Cleanup: Ensure resources are properly closed\nError Handling: Handle configuration errors gracefully\nDocumentation: Document required configuration clearly\n\n","title":"Best Practices","titles":["Configuration via Closures"]},"239":{"href":"/patterns/closures#next-steps","html":"\n<ul>\n<li><a href=\"/patterns/error-handling\">Error Handling</a> - Build resilient nodes</li>\n<li><a href=\"/advanced/custom-nodes\">Custom Node Types</a> - Advanced node patterns</li>\n<li><a href=\"/best-practices\">Best Practices</a> - General guidelines</li>\n</ul>","isPage":false,"text":"\n\nError Handling - Build resilient nodes\nCustom Node Types - Advanced node patterns\nBest Practices - General guidelines\n","title":"Next Steps","titles":["Configuration via Closures"]},"240":{"href":"/patterns/error-handling#error-handling--retries","html":"</header>\n<p>Build resilient workflows with proper error handling and retry strategies.</p>\n","isPage":true,"text":"\nBuild resilient workflows with proper error handling and retry strategies.\n","title":"Error Handling &amp; Retries","titles":[]},"241":{"href":"/patterns/error-handling#basic-retry-configuration","html":"\n<p>Configure retries at the node level:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // This will be retried up to 3 times</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callFlakeyAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second), </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait 1 second between retries</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFallbackFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Called after all retries fail</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;API failed after retries: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Return nil to handle in Post</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nConfigure retries at the node level:\nnode := flyt.NewNode(\n    flyt.WithExecFunc(func(ctx context.Context, prepResult any) (any, error) {\n        // This will be retried up to 3 times\n        return callFlakeyAPI()\n    }),\n    flyt.WithMaxRetries(3),\n    flyt.WithWait(time.Second), // Wait 1 second between retries\n    flyt.WithExecFallbackFunc(func(prepResult any, err error) (any, error) {\n        // Called after all retries fail\n        log.Printf(&quot;API failed after retries: %v&quot;, err)\n        return nil, nil // Return nil to handle in Post\n    }),\n)\n","title":"Basic Retry Configuration","titles":["Error Handling &amp; Retries"]},"242":{"href":"/patterns/error-handling#exponential-backoff","html":"\n<p>Implement exponential backoff with RetryableNode:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BackoffNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    attempt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BackoffNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 5</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BackoffNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Exponential backoff: 1s, 2s, 4s, 8s, 16s</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(math.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Pow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.attempt))) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.Second</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BackoffNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.attempt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Attempt </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, n.attempt, err)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.attempt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Reset on success</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nImplement exponential backoff with RetryableNode:\ntype BackoffNode struct {\n    *flyt.BaseNode\n    attempt int\n}\n \nfunc (n *BackoffNode) GetMaxRetries() int {\n    return 5\n}\n \nfunc (n *BackoffNode) GetWait() time.Duration {\n    // Exponential backoff: 1s, 2s, 4s, 8s, 16s\n    return time.Duration(math.Pow(2, float64(n.attempt))) * time.Second\n}\n \nfunc (n *BackoffNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    n.attempt++\n    result, err := callAPI()\n    if err != nil {\n        log.Printf(&quot;Attempt %d failed: %v&quot;, n.attempt, err)\n        return nil, err\n    }\n    n.attempt = 0 // Reset on success\n    return result, nil\n}\n","title":"Exponential Backoff","titles":["Error Handling &amp; Retries"]},"243":{"href":"/patterns/error-handling#circuit-breaker-pattern","html":"\n<p>Prevent cascading failures:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CircuitBreakerNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    failures    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    lastFailure </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    threshold   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    timeout     </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewCircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode:  flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        threshold: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        timeout:   </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.Second,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Check if circuit is open</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.threshold {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastFailure) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.timeout {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;circuit breaker open&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Reset after timeout</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callService</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.failures</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.lastFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Reset on success</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPrevent cascading failures:\ntype CircuitBreakerNode struct {\n    *flyt.BaseNode\n    failures    int\n    lastFailure time.Time\n    threshold   int\n    timeout     time.Duration\n}\n \nfunc NewCircuitBreakerNode() *CircuitBreakerNode {\n    return &amp;CircuitBreakerNode{\n        BaseNode:  flyt.NewBaseNode(),\n        threshold: 5,\n        timeout:   30 * time.Second,\n    }\n}\n \nfunc (n *CircuitBreakerNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Check if circuit is open\n    if n.failures &gt;= n.threshold {\n        if time.Since(n.lastFailure) &lt; n.timeout {\n            return nil, fmt.Errorf(&quot;circuit breaker open&quot;)\n        }\n        // Reset after timeout\n        n.failures = 0\n    }\n    \n    result, err := callService()\n    if err != nil {\n        n.failures++\n        n.lastFailure = time.Now()\n        return nil, err\n    }\n    \n    n.failures = 0 // Reset on success\n    return result, nil\n}\n","title":"Circuit Breaker Pattern","titles":["Error Handling &amp; Retries"]},"244":{"href":"/patterns/error-handling#fallback-on-failure","html":"\n<p>Implement the FallbackNode interface for graceful degradation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CachedAPINode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cache </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Map</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CachedAPINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Try to fetch fresh data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Cache successful result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.cache.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key, data)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CachedAPINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return cached data on failure</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cached, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.cache.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Load</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key); ok {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Returning cached data for </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> due to error: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, key, err)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cached, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return default if no cache</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;unavailable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;cached&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nImplement the FallbackNode interface for graceful degradation:\ntype CachedAPINode struct {\n    *flyt.BaseNode\n    cache sync.Map\n}\n \nfunc (n *CachedAPINode) Exec(ctx context.Context, prepResult any) (any, error) {\n    key := prepResult.(string)\n    \n    // Try to fetch fresh data\n    data, err := fetchFromAPI(key)\n    if err == nil {\n        // Cache successful result\n        n.cache.Store(key, data)\n        return data, nil\n    }\n    \n    return nil, err\n}\n \nfunc (n *CachedAPINode) ExecFallback(prepResult any, err error) (any, error) {\n    key := prepResult.(string)\n    \n    // Return cached data on failure\n    if cached, ok := n.cache.Load(key); ok {\n        log.Printf(&quot;Returning cached data for %s due to error: %v&quot;, key, err)\n        return cached, nil\n    }\n    \n    // Return default if no cache\n    return map[string]any{\n        &quot;status&quot;: &quot;unavailable&quot;,\n        &quot;cached&quot;: false,\n    }, nil\n}\n","title":"Fallback on Failure","titles":["Error Handling &amp; Retries"]},"245":{"href":"/patterns/error-handling#error-aggregation","html":"\n<p>Collect errors from batch operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errs []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            errs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errs, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, i, err))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errs) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BatchError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Errors: errs,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Message: fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> items failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errs), </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCollect errors from batch operations:\nfunc processBatch(ctx context.Context, items []Item) error {\n    var errs []error\n    \n    for i, item := range items {\n        if err := processItem(item); err != nil {\n            errs = append(errs, fmt.Errorf(&quot;item %d: %w&quot;, i, err))\n        }\n    }\n    \n    if len(errs) &gt; 0 {\n        return &amp;flyt.BatchError{\n            Errors: errs,\n            Message: fmt.Sprintf(&quot;%d/%d items failed&quot;, len(errs), len(items)),\n        }\n    }\n    \n    return nil\n}\n","title":"Error Aggregation","titles":["Error Handling &amp; Retries"]},"246":{"href":"/patterns/error-handling#retry-with-jitter","html":"\n<p>Add randomization to prevent thundering herd:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">JitterNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    base </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.Second </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.attempt)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    jitter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rand.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Intn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.Millisecond</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> base </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jitter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAdd randomization to prevent thundering herd:\nfunc (n *JitterNode) GetWait() time.Duration {\n    base := time.Second * time.Duration(n.attempt)\n    jitter := time.Duration(rand.Intn(1000)) * time.Millisecond\n    return base + jitter\n}\n","title":"Retry with Jitter","titles":["Error Handling &amp; Retries"]},"247":{"href":"/patterns/error-handling#selective-retry","html":"\n<p>Only retry specific errors:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SelectiveRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Only retry on network errors</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isNetworkError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Will be retried</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Don&#x27;t retry business logic errors</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;permanent error: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SelectiveRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Check error type from last execution</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.lastError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isRetryable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastError) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Don&#x27;t retry</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nOnly retry specific errors:\nfunc (n *SelectiveRetryNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    result, err := callAPI()\n    if err != nil {\n        // Only retry on network errors\n        if isNetworkError(err) {\n            return nil, err // Will be retried\n        }\n        // Don&#x27;t retry business logic errors\n        return nil, fmt.Errorf(&quot;permanent error: %w&quot;, err)\n    }\n    return result, nil\n}\n \nfunc (n *SelectiveRetryNode) GetMaxRetries() int {\n    // Check error type from last execution\n    if n.lastError != nil &amp;&amp; !isRetryable(n.lastError) {\n        return 0 // Don&#x27;t retry\n    }\n    return 3\n}\n","title":"Selective Retry","titles":["Error Handling &amp; Retries"]},"248":{"href":"/patterns/error-handling#error-context","html":"\n<p>Provide context for debugging:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ErrorContext</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Node      </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Action    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Input     </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Error     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Timestamp </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Attempts  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DetailedErrorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        errorCtx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ErrorContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Node:      </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DetailedErrorNode&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Action:    </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;process&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Input:     prepResult,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Error:     err,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Timestamp: time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Attempts:  n.attempts,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;last_error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorCtx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.maxRetries {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nProvide context for debugging:\ntype ErrorContext struct {\n    Node      string\n    Action    string\n    Input     any\n    Error     error\n    Timestamp time.Time\n    Attempts  int\n}\n \nfunc (n *DetailedErrorNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    if err, ok := execResult.(error); ok &amp;&amp; err != nil {\n        errorCtx := ErrorContext{\n            Node:      &quot;DetailedErrorNode&quot;,\n            Action:    &quot;process&quot;,\n            Input:     prepResult,\n            Error:     err,\n            Timestamp: time.Now(),\n            Attempts:  n.attempts,\n        }\n        \n        shared.Set(&quot;last_error&quot;, errorCtx)\n        \n        if n.attempts &lt; n.maxRetries {\n            return &quot;retry&quot;, nil\n        }\n        return &quot;error&quot;, nil\n    }\n    \n    return flyt.DefaultAction, nil\n}\n","title":"Error Context","titles":["Error Handling &amp; Retries"]},"249":{"href":"/patterns/error-handling#timeout-handling","html":"\n<p>Prevent hanging operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TimeoutNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create timeout context</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx, cancel </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithTimeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> cancel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    resultChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> longRunningOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            resultChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">resultChan:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">errChan:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;operation timed out: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPrevent hanging operations:\nfunc (n *TimeoutNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Create timeout context\n    ctx, cancel := context.WithTimeout(ctx, 30*time.Second)\n    defer cancel()\n    \n    resultChan := make(chan any)\n    errChan := make(chan error)\n    \n    go func() {\n        result, err := longRunningOperation()\n        if err != nil {\n            errChan &lt;- err\n        } else {\n            resultChan &lt;- result\n        }\n    }()\n    \n    select {\n    case result := &lt;-resultChan:\n        return result, nil\n    case err := &lt;-errChan:\n        return nil, err\n    case &lt;-ctx.Done():\n        return nil, fmt.Errorf(&quot;operation timed out: %w&quot;, ctx.Err())\n    }\n}\n","title":"Timeout Handling","titles":["Error Handling &amp; Retries"]},"250":{"href":"/patterns/error-handling#best-practices","html":"\n<ol>\n<li><strong>Identify Transient vs Permanent Errors</strong>: Only retry transient failures</li>\n<li><strong>Set Reasonable Limits</strong>: Don&#x27;t retry indefinitely</li>\n<li><strong>Use Backoff</strong>: Avoid overwhelming failing services</li>\n<li><strong>Log Failures</strong>: Track retry attempts for debugging</li>\n<li><strong>Provide Fallbacks</strong>: Gracefully degrade when possible</li>\n<li><strong>Monitor Retry Rates</strong>: High retry rates indicate problems</li>\n</ol>\n","isPage":false,"text":"\n\nIdentify Transient vs Permanent Errors: Only retry transient failures\nSet Reasonable Limits: Don&#x27;t retry indefinitely\nUse Backoff: Avoid overwhelming failing services\nLog Failures: Track retry attempts for debugging\nProvide Fallbacks: Gracefully degrade when possible\nMonitor Retry Rates: High retry rates indicate problems\n\n","title":"Best Practices","titles":["Error Handling &amp; Retries"]},"251":{"href":"/patterns/error-handling#next-steps","html":"\n<ul>\n<li><a href=\"/patterns/fallback\">Fallback on Failure</a> - Graceful degradation</li>\n<li><a href=\"/advanced/batch-processing#batch-error-handling\">Batch Error Handling</a> - Handle batch failures</li>\n<li><a href=\"/best-practices\">Best Practices</a> - General guidelines</li>\n</ul>","isPage":false,"text":"\n\nFallback on Failure - Graceful degradation\nBatch Error Handling - Handle batch failures\nBest Practices - General guidelines\n","title":"Next Steps","titles":["Error Handling &amp; Retries"]},"252":{"href":"/patterns/fallback#fallback-on-failure","html":"</header>\n<p>Implement graceful degradation when operations fail, ensuring your workflows remain resilient and provide the best possible user experience even during failures.</p>\n","isPage":true,"text":"\nImplement graceful degradation when operations fail, ensuring your workflows remain resilient and provide the best possible user experience even during failures.\n","title":"Fallback on Failure","titles":[]},"253":{"href":"/patterns/fallback#fallbacknode-interface","html":"\n<p>The <code>FallbackNode</code> interface allows custom fallback behavior:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FallbackNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    Node</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe FallbackNode interface allows custom fallback behavior:\ntype FallbackNode interface {\n    Node\n    ExecFallback(prepResult any, err error) (any, error)\n}\n","title":"FallbackNode Interface","titles":["Fallback on Failure"]},"254":{"href":"/patterns/fallback#basic-fallback","html":"\n<p>Return default values on failure:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DefaultValueNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DefaultValueNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Try primary operation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromPrimarySource</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Will trigger fallback</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DefaultValueNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Primary source failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">, returning default&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return safe default value</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;degraded&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;default_value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: err.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nReturn default values on failure:\ntype DefaultValueNode struct {\n    *flyt.BaseNode\n}\n \nfunc (n *DefaultValueNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Try primary operation\n    result, err := fetchFromPrimarySource()\n    if err != nil {\n        return nil, err // Will trigger fallback\n    }\n    return result, nil\n}\n \nfunc (n *DefaultValueNode) ExecFallback(prepResult any, err error) (any, error) {\n    log.Printf(&quot;Primary source failed: %v, returning default&quot;, err)\n    \n    // Return safe default value\n    return map[string]any{\n        &quot;status&quot;: &quot;degraded&quot;,\n        &quot;data&quot;: &quot;default_value&quot;,\n        &quot;error&quot;: err.Error(),\n    }, nil\n}\n","title":"Basic Fallback","titles":["Fallback on Failure"]},"255":{"href":"/patterns/fallback#cached-fallback","html":"\n<p>Use cached data when fresh data is unavailable:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CachedAPINode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cache </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CacheEntry</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu    </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RWMutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CacheEntry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Data      </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Timestamp </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CachedAPINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Try to fetch fresh data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Update cache on success</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.cache[key] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CacheEntry</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Data:      data,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Timestamp: time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CachedAPINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RLock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    entry, exists </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.cache[key]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RUnlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> exists {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        age </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entry.Timestamp)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Returning cached data (age: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">) due to error: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, age, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Add metadata about cache usage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:       entry.Data,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;cached&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;cache_age&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  age.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Seconds</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:      err.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // No cache available</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;no fallback available: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUse cached data when fresh data is unavailable:\ntype CachedAPINode struct {\n    *flyt.BaseNode\n    cache map[string]CacheEntry\n    mu    sync.RWMutex\n}\n \ntype CacheEntry struct {\n    Data      any\n    Timestamp time.Time\n}\n \nfunc (n *CachedAPINode) Exec(ctx context.Context, prepResult any) (any, error) {\n    key := prepResult.(string)\n    \n    // Try to fetch fresh data\n    data, err := fetchFromAPI(key)\n    if err == nil {\n        // Update cache on success\n        n.mu.Lock()\n        n.cache[key] = CacheEntry{\n            Data:      data,\n            Timestamp: time.Now(),\n        }\n        n.mu.Unlock()\n        return data, nil\n    }\n    \n    return nil, err\n}\n \nfunc (n *CachedAPINode) ExecFallback(prepResult any, err error) (any, error) {\n    key := prepResult.(string)\n    \n    n.mu.RLock()\n    entry, exists := n.cache[key]\n    n.mu.RUnlock()\n    \n    if exists {\n        age := time.Since(entry.Timestamp)\n        log.Printf(&quot;Returning cached data (age: %v) due to error: %v&quot;, age, err)\n        \n        // Add metadata about cache usage\n        return map[string]any{\n            &quot;data&quot;:       entry.Data,\n            &quot;cached&quot;:     true,\n            &quot;cache_age&quot;:  age.Seconds(),\n            &quot;error&quot;:      err.Error(),\n        }, nil\n    }\n    \n    // No cache available\n    return nil, fmt.Errorf(&quot;no fallback available: %w&quot;, err)\n}\n","title":"Cached Fallback","titles":["Fallback on Failure"]},"256":{"href":"/patterns/fallback#multi-level-fallback","html":"\n<p>Try multiple fallback strategies:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MultiLevelFallbackNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    primaryURL   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    secondaryURL </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cache        </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Map</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MultiLevelFallbackNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Try primary source</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromURL</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.primaryURL)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.cache.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;last_good&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MultiLevelFallbackNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">primaryErr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Level 1: Try secondary source</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromURL</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.secondaryURL)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Using secondary source due to primary error: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, primaryErr)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Level 2: Try cache</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cached, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.cache.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Load</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;last_good&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); ok {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Using cached data due to all sources failing&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cached, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Level 3: Return minimal default</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;All fallbacks exhausted, returning minimal response&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;unavailable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Service temporarily unavailable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTry multiple fallback strategies:\ntype MultiLevelFallbackNode struct {\n    *flyt.BaseNode\n    primaryURL   string\n    secondaryURL string\n    cache        sync.Map\n}\n \nfunc (n *MultiLevelFallbackNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Try primary source\n    data, err := fetchFromURL(n.primaryURL)\n    if err == nil {\n        n.cache.Store(&quot;last_good&quot;, data)\n        return data, nil\n    }\n    \n    return nil, err\n}\n \nfunc (n *MultiLevelFallbackNode) ExecFallback(prepResult any, primaryErr error) (any, error) {\n    // Level 1: Try secondary source\n    data, err := fetchFromURL(n.secondaryURL)\n    if err == nil {\n        log.Printf(&quot;Using secondary source due to primary error: %v&quot;, primaryErr)\n        return data, nil\n    }\n    \n    // Level 2: Try cache\n    if cached, ok := n.cache.Load(&quot;last_good&quot;); ok {\n        log.Printf(&quot;Using cached data due to all sources failing&quot;)\n        return cached, nil\n    }\n    \n    // Level 3: Return minimal default\n    log.Printf(&quot;All fallbacks exhausted, returning minimal response&quot;)\n    return map[string]any{\n        &quot;status&quot;: &quot;unavailable&quot;,\n        &quot;message&quot;: &quot;Service temporarily unavailable&quot;,\n    }, nil\n}\n","title":"Multi-Level Fallback","titles":["Fallback on Failure"]},"257":{"href":"/patterns/fallback#partial-fallback","html":"\n<p>Return partial results when complete processing fails:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BatchProcessorNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errors  []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BatchProcessorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            n.errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.errors, err)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            continue</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.results, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.errors) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> errors&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.errors))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BatchProcessorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return partial results</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;partial_results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: n.results,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;success_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.results),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;error_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.errors),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;errors&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:          n.errors,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:          </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;partial_success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nReturn partial results when complete processing fails:\ntype BatchProcessorNode struct {\n    *flyt.BaseNode\n    results []Result\n    errors  []error\n}\n \nfunc (n *BatchProcessorNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    items := prepResult.([]Item)\n    n.results = make([]Result, 0, len(items))\n    n.errors = make([]error, 0)\n    \n    for _, item := range items {\n        result, err := processItem(item)\n        if err != nil {\n            n.errors = append(n.errors, err)\n            continue\n        }\n        n.results = append(n.results, result)\n    }\n    \n    if len(n.errors) &gt; 0 {\n        return nil, fmt.Errorf(&quot;processing failed: %d errors&quot;, len(n.errors))\n    }\n    \n    return n.results, nil\n}\n \nfunc (n *BatchProcessorNode) ExecFallback(prepResult any, err error) (any, error) {\n    // Return partial results\n    return map[string]any{\n        &quot;partial_results&quot;: n.results,\n        &quot;success_count&quot;:   len(n.results),\n        &quot;error_count&quot;:     len(n.errors),\n        &quot;errors&quot;:          n.errors,\n        &quot;status&quot;:          &quot;partial_success&quot;,\n    }, nil\n}\n","title":"Partial Fallback","titles":["Fallback on Failure"]},"258":{"href":"/patterns/fallback#circuit-breaker-fallback","html":"\n<p>Prevent cascading failures:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CircuitBreakerNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    failures    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    lastFailure </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    threshold   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    timeout     </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fallbackMsg </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Check if circuit is open</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isCircuitOpen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;circuit breaker open&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callService</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">recordFailure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isCircuitOpen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Return cached or default response immediately</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;circuit_open&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: n.fallbackMsg,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;retry_after&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: n.timeout </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastFailure),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Circuit not open, but request failed</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;degraded&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Service temporarily unavailable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isCircuitOpen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.threshold </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastFailure) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.timeout</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">recordFailure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.failures</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.lastFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPrevent cascading failures:\ntype CircuitBreakerNode struct {\n    *flyt.BaseNode\n    failures    int\n    lastFailure time.Time\n    threshold   int\n    timeout     time.Duration\n    fallbackMsg string\n}\n \nfunc (n *CircuitBreakerNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Check if circuit is open\n    if n.isCircuitOpen() {\n        return nil, fmt.Errorf(&quot;circuit breaker open&quot;)\n    }\n    \n    result, err := callService(prepResult)\n    if err != nil {\n        n.recordFailure()\n        return nil, err\n    }\n    \n    n.reset()\n    return result, nil\n}\n \nfunc (n *CircuitBreakerNode) ExecFallback(prepResult any, err error) (any, error) {\n    if n.isCircuitOpen() {\n        // Return cached or default response immediately\n        return map[string]any{\n            &quot;status&quot;: &quot;circuit_open&quot;,\n            &quot;message&quot;: n.fallbackMsg,\n            &quot;retry_after&quot;: n.timeout - time.Since(n.lastFailure),\n        }, nil\n    }\n    \n    // Circuit not open, but request failed\n    return map[string]any{\n        &quot;status&quot;: &quot;degraded&quot;,\n        &quot;message&quot;: &quot;Service temporarily unavailable&quot;,\n    }, nil\n}\n \nfunc (n *CircuitBreakerNode) isCircuitOpen() bool {\n    return n.failures &gt;= n.threshold &amp;&amp; \n           time.Since(n.lastFailure) &lt; n.timeout\n}\n \nfunc (n *CircuitBreakerNode) recordFailure() {\n    n.failures++\n    n.lastFailure = time.Now()\n}\n \nfunc (n *CircuitBreakerNode) reset() {\n    n.failures = 0\n}\n","title":"Circuit Breaker Fallback","titles":["Fallback on Failure"]},"259":{"href":"/patterns/fallback#fallback-with-metrics","html":"\n<p>Track fallback usage:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MetricsFallbackNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    primaryCalls   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fallbackCalls  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    lastFallback   </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MetricsFallbackNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.fallbackCalls, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.lastFallback </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Log metrics</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    total </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.primaryCalls) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.fallbackCalls)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fallbackRate </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.fallbackCalls) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(total) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Fallback metrics - Rate: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%.2f%%</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">, Total fallbacks: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        fallbackRate, n.fallbackCalls)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return fallback data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getDefaultResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTrack fallback usage:\ntype MetricsFallbackNode struct {\n    *flyt.BaseNode\n    primaryCalls   int64\n    fallbackCalls  int64\n    lastFallback   time.Time\n}\n \nfunc (n *MetricsFallbackNode) ExecFallback(prepResult any, err error) (any, error) {\n    atomic.AddInt64(&amp;n.fallbackCalls, 1)\n    n.lastFallback = time.Now()\n    \n    // Log metrics\n    total := atomic.LoadInt64(&amp;n.primaryCalls) + atomic.LoadInt64(&amp;n.fallbackCalls)\n    fallbackRate := float64(n.fallbackCalls) / float64(total) * 100\n    \n    log.Printf(&quot;Fallback metrics - Rate: %.2f%%, Total fallbacks: %d&quot;, \n        fallbackRate, n.fallbackCalls)\n    \n    // Return fallback data\n    return getDefaultResponse(), nil\n}\n","title":"Fallback with Metrics","titles":["Fallback on Failure"]},"260":{"href":"/patterns/fallback#conditional-fallback","html":"\n<p>Different fallbacks based on error type:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ConditionalFallbackNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Is</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err, ErrTimeout):</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // For timeouts, return cached data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCachedResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Is</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err, ErrRateLimit):</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // For rate limits, return throttled message</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;rate_limited&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;retry_after&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">60</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Is</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err, ErrNotFound):</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // For not found, return empty result</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;found&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Generic fallback</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Service unavailable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nDifferent fallbacks based on error type:\nfunc (n *ConditionalFallbackNode) ExecFallback(prepResult any, err error) (any, error) {\n    switch {\n    case errors.Is(err, ErrTimeout):\n        // For timeouts, return cached data\n        return n.getCachedResponse(), nil\n        \n    case errors.Is(err, ErrRateLimit):\n        // For rate limits, return throttled message\n        return map[string]any{\n            &quot;error&quot;: &quot;rate_limited&quot;,\n            &quot;retry_after&quot;: 60,\n        }, nil\n        \n    case errors.Is(err, ErrNotFound):\n        // For not found, return empty result\n        return map[string]any{\n            &quot;found&quot;: false,\n            &quot;data&quot;: nil,\n        }, nil\n        \n    default:\n        // Generic fallback\n        return map[string]any{\n            &quot;status&quot;: &quot;error&quot;,\n            &quot;message&quot;: &quot;Service unavailable&quot;,\n        }, nil\n    }\n}\n","title":"Conditional Fallback","titles":["Fallback on Failure"]},"261":{"href":"/patterns/fallback#best-practices","html":"\n<ol>\n<li><strong>Log Fallback Usage</strong>: Track when and why fallbacks are triggered</li>\n<li><strong>Monitor Fallback Rates</strong>: High rates indicate system issues</li>\n<li><strong>Set Appropriate Timeouts</strong>: Don&#x27;t wait too long before falling back</li>\n<li><strong>Provide Meaningful Defaults</strong>: Fallback data should be useful</li>\n<li><strong>Document Fallback Behavior</strong>: Make it clear what happens during failures</li>\n<li><strong>Test Fallback Paths</strong>: Ensure fallbacks work correctly</li>\n<li><strong>Consider User Experience</strong>: Degraded service is better than no service</li>\n</ol>\n","isPage":false,"text":"\n\nLog Fallback Usage: Track when and why fallbacks are triggered\nMonitor Fallback Rates: High rates indicate system issues\nSet Appropriate Timeouts: Don&#x27;t wait too long before falling back\nProvide Meaningful Defaults: Fallback data should be useful\nDocument Fallback Behavior: Make it clear what happens during failures\nTest Fallback Paths: Ensure fallbacks work correctly\nConsider User Experience: Degraded service is better than no service\n\n","title":"Best Practices","titles":["Fallback on Failure"]},"262":{"href":"/patterns/fallback#next-steps","html":"\n<ul>\n<li><a href=\"/patterns/error-handling\">Error Handling</a> - Comprehensive error strategies</li>\n<li><a href=\"/patterns/branching\">Conditional Branching</a> - Dynamic flow control</li>\n<li><a href=\"/patterns/error-handling#circuit-breaker-pattern\">Circuit Breaker Pattern</a> - Prevent cascading failures</li>\n</ul>","isPage":false,"text":"\n\nError Handling - Comprehensive error strategies\nConditional Branching - Dynamic flow control\nCircuit Breaker Pattern - Prevent cascading failures\n","title":"Next Steps","titles":["Fallback on Failure"]}},"dirtCount":0,"index":[["8s",{"2":{"242":1}}],["xlargehandler",{"2":{"219":1}}],["xlarge",{"2":{"219":2}}],["x27",{"0":{"108":1},"1":{"109":1,"110":1,"111":1},"2":{"29":1,"101":1,"102":1,"103":1,"105":1,"128":1,"161":1,"169":1,"215":1,"238":1,"247":2,"250":1,"261":1}}],["yes",{"2":{"218":1}}],["you",{"2":{"57":1,"69":1,"98":1,"100":1,"105":1}}],["your",{"0":{"97":1,"101":1},"2":{"41":1,"58":1,"99":1,"100":1,"105":1,"111":1,"113":1,"115":2,"187":1,"252":1}}],["zero",{"2":{"190":3,"194":2}}],["json",{"2":{"221":1,"230":1,"233":5,"236":1}}],["j",{"2":{"212":1}}],["join",{"2":{"155":1}}],["jitternode",{"2":{"246":1}}],["jitter",{"0":{"246":1},"2":{"151":4,"246":2}}],["just",{"2":{"101":1}}],["||",{"2":{"142":1}}],["│",{"2":{"109":4}}],["├──",{"2":{"109":6}}],["kind",{"2":{"186":1}}],["keep",{"2":{"169":1,"182":1,"202":1,"227":1}}],["keyerrorcount",{"2":{"89":1}}],["keyresults",{"2":{"89":1}}],["keyauthtoken",{"2":{"89":1}}],["keyuserid",{"2":{"89":1}}],["keys",{"0":{"134":1},"2":{"22":2,"56":1,"89":1,"92":2,"134":1}}],["key",{"0":{"89":1},"2":{"21":1,"73":1,"77":2,"81":2,"91":1,"111":2,"134":2,"135":3,"190":2,"200":4,"230":1,"233":2,"237":2,"244":6,"255":5}}],["k",{"2":{"93":2,"176":2,"192":2}}],["60",{"2":{"85":1,"260":1}}],["queue",{"0":{"209":1},"2":{"154":5,"209":4}}],["querydb",{"2":{"237":1}}],["queryrequest",{"2":{"150":1}}],["querycontext",{"2":{"67":1,"150":1,"232":1}}],["query",{"2":{"67":2,"150":3,"174":3,"232":2,"237":1}}],["quick",{"0":{"100":1,"107":1},"1":{"101":1,"102":1,"103":1,"104":1,"105":1},"2":{"99":1}}],["quot",{"2":{"2":4,"4":4,"6":2,"7":2,"18":4,"19":4,"21":10,"22":8,"24":2,"27":6,"30":8,"31":2,"33":8,"34":12,"35":8,"37":4,"38":8,"39":20,"40":2,"41":8,"45":6,"48":4,"49":4,"52":4,"53":6,"54":4,"55":2,"56":10,"58":4,"62":8,"63":2,"64":6,"70":2,"76":10,"77":2,"78":16,"79":4,"81":16,"82":4,"83":12,"84":14,"85":20,"86":10,"88":2,"89":8,"90":8,"91":4,"92":8,"93":6,"97":2,"98":12,"101":12,"102":26,"103":6,"104":12,"111":20,"113":6,"114":4,"119":26,"121":10,"122":6,"123":6,"125":2,"126":10,"128":12,"132":18,"134":8,"135":6,"136":8,"141":2,"142":2,"144":2,"148":8,"149":4,"150":2,"152":2,"153":14,"155":10,"160":2,"162":2,"163":6,"165":14,"166":6,"167":2,"172":4,"173":4,"174":2,"175":6,"176":2,"177":6,"178":14,"179":16,"180":6,"181":6,"185":12,"188":2,"190":2,"195":8,"196":2,"197":6,"201":2,"205":2,"210":2,"211":2,"213":10,"214":2,"218":8,"219":16,"220":40,"222":6,"223":30,"224":24,"225":14,"226":14,"230":12,"231":2,"232":12,"233":28,"235":8,"237":10,"241":2,"242":2,"243":2,"244":8,"245":4,"247":2,"248":10,"249":2,"254":12,"255":12,"256":18,"257":14,"258":18,"259":2,"260":18}}],["└──",{"2":{"109":3}}],["└─",{"2":{"58":1}}],["+=",{"2":{"140":1,"141":1,"191":1,"212":1,"222":2,"226":1}}],["+",{"2":{"38":1,"102":1,"125":1,"141":1,"151":1,"191":1,"223":1,"225":2,"226":1,"246":1,"259":1}}],["hour",{"2":{"237":1}}],["host",{"2":{"232":3}}],["how",{"0":{"30":1},"2":{"120":1,"161":1}}],["http",{"2":{"230":2,"233":2}}],["https",{"2":{"81":1,"107":1,"111":1,"230":1}}],["h",{"2":{"226":3}}],["hits",{"2":{"237":1}}],["high",{"2":{"216":1,"250":1,"261":1}}],["hierarchies",{"2":{"174":1}}],["hierarchical",{"0":{"174":1}}],["history",{"2":{"107":1}}],["herd",{"2":{"246":1}}],["here",{"2":{"113":1}}],["headers",{"2":{"233":3}}],["header",{"2":{"230":1,"233":1}}],["heavy",{"2":{"135":1,"168":1}}],["hello",{"2":{"101":1,"195":2}}],["help",{"2":{"100":1}}],["helper",{"0":{"66":1,"188":1,"197":1},"2":{"184":1}}],["happens",{"2":{"261":1}}],["hanging",{"2":{"249":1}}],["handles",{"2":{"64":1}}],["handle",{"2":{"41":1,"88":1,"128":1,"129":1,"136":1,"145":1,"146":1,"150":1,"154":1,"169":1,"177":1,"202":1,"210":1,"215":1,"227":1,"238":1,"241":1,"251":1}}],["handler",{"2":{"7":1,"177":1}}],["handling",{"0":{"4":1,"8":1,"53":1,"103":1,"136":1,"240":1,"249":1},"1":{"9":1,"10":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1},"2":{"7":1,"53":1,"71":2,"103":1,"105":1,"110":1,"122":1,"146":1,"156":1,"238":1,"239":1,"240":1,"251":1,"262":1}}],["hash",{"2":{"226":3}}],["has",{"2":{"61":1,"86":1,"119":1}}],["have",{"2":{"41":1,"169":1,"182":1,"227":1}}],["via",{"0":{"229":1},"1":{"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1}}],["visualizing",{"0":{"58":1}}],["volumes",{"2":{"145":1}}],["vs",{"0":{"120":1,"133":1},"2":{"250":1}}],["ve",{"2":{"105":1}}],["verify",{"0":{"98":1},"2":{"98":1}}],["version",{"2":{"78":1,"115":1}}],["variants",{"2":{"233":1}}],["variant",{"2":{"226":9}}],["variables",{"2":{"115":1,"238":1}}],["various",{"2":{"129":1,"185":1,"215":1}}],["var",{"2":{"79":1,"126":1,"142":1,"152":1,"155":1,"159":1,"164":1,"165":1,"180":1,"188":3,"189":1,"190":1,"191":1,"194":1,"198":2,"211":1,"221":1,"230":1,"232":1,"233":2,"236":1,"245":1}}],["val",{"2":{"98":2,"200":2}}],["valueof",{"2":{"186":1}}],["value",{"2":{"34":3,"73":1,"76":4,"77":2,"88":2,"98":2,"136":1,"139":3,"190":2,"194":4,"197":1,"200":2,"219":4,"233":2,"254":2}}],["values",{"0":{"197":1},"2":{"3":1,"76":1,"78":1,"149":12,"202":1,"254":1}}],["validitems",{"2":{"193":1}}],["validationflow",{"2":{"172":3}}],["validationrule",{"2":{"155":3}}],["validationnode",{"2":{"33":4,"155":5,"218":4}}],["validation",{"0":{"155":1},"2":{"6":1,"55":3,"109":1,"155":1,"162":3,"172":1,"224":1}}],["validatetoken",{"2":{"173":1}}],["validates",{"2":{"22":1}}],["validatenode",{"2":{"2":3,"50":2,"54":3,"58":3,"119":2,"122":4,"160":2,"224":4}}],["validate",{"2":{"2":1,"41":1,"58":1,"109":1,"155":2,"174":3,"180":1,"224":4}}],["valid",{"2":{"2":1,"6":1,"33":2,"54":1,"55":1,"58":1,"122":1,"155":1,"160":1,"162":1,"172":1,"173":1,"174":1,"218":2}}],["v",{"2":{"27":2,"56":2,"77":1,"93":4,"98":1,"102":1,"104":1,"111":1,"132":1,"136":2,"144":1,"153":1,"155":1,"176":2,"186":4,"192":2,"196":1,"197":1,"205":1,"210":1,"235":1,"237":1,"241":1,"242":1,"244":1,"254":1,"255":2,"256":1}}],["50",{"2":{"222":1}}],["5",{"0":{"92":1},"2":{"22":1,"69":1,"100":1,"135":2,"136":1,"150":1,"151":2,"194":1,"198":1,"206":1,"222":1,"242":1,"243":1}}],["4s",{"2":{"242":1}}],["456",{"2":{"90":1}}],["4",{"0":{"91":1},"2":{"22":1,"136":1}}],["34",{"2":{"226":2}}],["3306",{"2":{"232":1}}],["33",{"2":{"226":4}}],["3",{"0":{"64":1,"90":1},"2":{"22":1,"38":1,"68":2,"103":1,"104":1,"119":1,"136":1,"151":3,"161":1,"162":1,"174":1,"185":1,"188":1,"222":1,"223":1,"241":2,"247":1,"256":1}}],["30s",{"2":{"81":1}}],["30",{"2":{"10":1,"76":1,"104":1,"151":1,"222":1,"230":1,"243":1,"249":1}}],["2f",{"2":{"259":1}}],["2s",{"2":{"242":1}}],["20",{"2":{"222":1}}],["25",{"2":{"150":1}}],["21",{"2":{"95":1}}],["2",{"0":{"63":1,"89":1},"2":{"22":1,"68":2,"86":1,"103":1,"119":1,"136":2,"151":1,"154":1,"161":1,"162":1,"174":1,"185":1,"207":3,"222":1,"242":1,"256":1}}],["16s",{"2":{"242":1}}],["1s",{"2":{"242":1}}],["1f",{"2":{"125":1,"142":1}}],["123",{"2":{"76":1,"90":1,"230":1}}],["1",{"0":{"62":1,"88":1},"2":{"22":1,"38":1,"78":1,"79":1,"82":1,"86":1,"95":1,"119":1,"125":2,"136":1,"142":2,"143":1,"151":1,"153":3,"154":1,"161":1,"162":1,"164":1,"174":1,"185":1,"188":1,"189":1,"194":1,"196":1,"207":2,"208":1,"210":2,"211":1,"213":3,"214":1,"223":1,"241":1,"256":1,"259":1}}],["1000",{"2":{"219":1,"246":1}}],["100",{"2":{"34":1,"125":1,"135":1,"142":1,"191":1,"205":1,"218":1,"219":1,"226":1,"259":1}}],["10",{"2":{"13":2,"34":1,"79":1,"85":1,"135":2,"139":1,"142":1,"189":1,"205":2,"219":1,"232":1}}],["0",{"2":{"13":2,"33":1,"78":1,"79":1,"83":1,"103":1,"123":1,"126":1,"136":1,"141":2,"142":1,"149":2,"151":4,"154":1,"155":1,"164":2,"165":1,"178":1,"186":1,"188":1,"191":1,"193":1,"195":1,"196":2,"205":1,"212":1,"214":2,"218":1,"222":2,"223":1,"226":1,"231":1,"242":1,"243":2,"245":1,"247":1,"257":3,"258":1}}],["leverage",{"2":{"202":1}}],["levels",{"2":{"182":1}}],["level",{"0":{"256":1},"2":{"162":3,"174":4,"216":1,"241":1,"256":3}}],["learn",{"2":{"117":1}}],["let",{"2":{"101":1,"102":1,"103":1}}],["len",{"2":{"27":1,"33":1,"121":1,"125":1,"141":4,"142":2,"149":2,"154":1,"155":1,"164":1,"186":2,"189":1,"191":3,"196":3,"206":1,"211":2,"212":3,"218":2,"245":3,"257":5}}],["lightweight",{"2":{"168":1}}],["like",{"2":{"145":1}}],["limiter",{"2":{"143":3,"208":6}}],["limited",{"0":{"143":1,"208":1},"2":{"260":1}}],["limits",{"2":{"129":1,"145":1,"151":1,"250":1,"260":1}}],["limit",{"2":{"129":1,"143":1,"208":2}}],["lifecycle",{"0":{"61":1,"161":1},"1":{"62":1,"63":1,"64":1},"2":{"60":1,"94":1,"105":1}}],["linear",{"0":{"47":1}}],["list",{"2":{"41":1}}],["latency",{"2":{"153":7}}],["later",{"2":{"95":1,"128":1}}],["lastfallback",{"2":{"259":2}}],["lastfailure",{"2":{"214":3,"243":3,"258":4}}],["lasterr",{"2":{"188":3}}],["lasterror",{"2":{"151":10,"247":2}}],["last",{"2":{"83":1,"84":1,"198":1,"247":1,"248":1,"256":2}}],["largehandler",{"2":{"34":1,"219":1}}],["large",{"2":{"34":2,"141":1,"145":1,"219":2}}],["lazy",{"0":{"25":1}}],["localhost",{"2":{"232":1}}],["lock",{"2":{"12":1,"70":1,"124":1,"140":1,"149":1,"150":3,"196":2,"198":1,"200":1,"206":1,"207":1,"214":1,"222":1,"231":1,"255":1}}],["look",{"2":{"221":1}}],["loops",{"0":{"223":1},"2":{"223":1}}],["loop",{"0":{"49":1},"2":{"49":1,"223":3}}],["logger",{"2":{"237":4}}],["loggedflow",{"2":{"166":1}}],["loggingnode",{"2":{"197":1}}],["logging",{"2":{"56":1,"145":1,"156":1}}],["logend",{"2":{"166":2}}],["logstart",{"2":{"166":3}}],["logic",{"2":{"57":1,"66":3,"69":1,"103":1,"113":1,"148":2,"151":1,"156":1,"157":1,"168":3,"220":1,"227":1,"247":1}}],["log",{"2":{"27":4,"45":1,"56":3,"111":3,"125":1,"142":1,"153":2,"166":2,"197":1,"235":3,"237":1,"241":1,"242":1,"244":1,"250":1,"254":1,"255":1,"256":3,"259":2,"261":1}}],["loadbalancer",{"2":{"222":4}}],["loads",{"2":{"215":1}}],["loadint64",{"2":{"153":3,"213":3,"259":2}}],["loadint32",{"2":{"125":2,"214":1}}],["loading",{"0":{"25":1}}],["loaduserdata",{"2":{"25":1}}],["load",{"2":{"25":2,"207":4,"221":1,"222":1,"236":2,"244":1,"256":1}}],["longrunningoperation",{"2":{"249":1}}],["long",{"2":{"9":1,"129":1,"145":1,"215":1,"261":1}}],["lt",{"2":{"9":1,"13":2,"34":2,"38":1,"79":1,"103":1,"136":1,"141":1,"144":5,"152":1,"154":4,"164":1,"186":1,"188":2,"189":2,"191":1,"194":3,"205":1,"207":2,"210":6,"211":2,"212":1,"214":1,"218":1,"219":3,"222":1,"223":1,"226":1,"243":1,"248":1,"249":5,"258":1}}],["push",{"2":{"209":1}}],["purposes",{"2":{"169":1}}],["purpose",{"2":{"41":1,"182":1}}],["p",{"2":{"195":6,"207":16,"208":3,"209":9,"210":4,"213":12,"214":17}}],["pending",{"2":{"126":1,"213":1}}],["permanent",{"2":{"247":1,"250":1}}],["percentage",{"2":{"125":2,"226":2}}],["perfect",{"2":{"118":1}}],["performoperation",{"2":{"151":1,"223":1}}],["perform",{"2":{"63":1}}],["performs",{"2":{"63":1}}],["performance",{"0":{"23":1,"168":1},"1":{"24":1,"25":1},"2":{"168":1,"169":1,"213":1,"215":1}}],["persists",{"2":{"73":1}}],["pipelines",{"2":{"224":3}}],["pipelinenode",{"2":{"152":4}}],["pipeline",{"0":{"54":1,"195":1,"224":1},"2":{"54":1,"162":6,"164":3,"195":8,"224":1}}],["phases",{"2":{"61":1}}],["phase",{"0":{"62":1,"63":1,"64":1},"2":{"29":1,"30":1,"62":2,"63":2,"64":1}}],["port",{"2":{"232":3}}],["pop",{"2":{"209":1}}],["powerful",{"2":{"158":1}}],["pow",{"2":{"151":1,"242":1}}],["point",{"2":{"109":1}}],["position",{"2":{"222":2}}],["possible",{"2":{"24":1,"41":2,"227":2,"250":1,"252":1}}],["postnode",{"2":{"233":1}}],["postgres",{"2":{"150":1}}],["post",{"0":{"64":1},"2":{"21":1,"29":1,"30":2,"56":1,"64":2,"66":1,"82":1,"84":1,"148":2,"155":1,"159":1,"161":2,"167":1,"220":1,"221":1,"222":1,"225":1,"233":1,"235":1,"241":1,"248":1}}],["pools",{"2":{"211":1,"215":1,"216":1}}],["pool",{"0":{"204":1,"205":1,"206":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1},"1":{"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1},"2":{"16":1,"130":1,"146":1,"150":4,"157":1,"205":6,"206":5,"207":6,"208":5,"209":3,"210":3,"211":4,"212":4,"213":3,"214":2,"232":1}}],["pooling",{"0":{"16":1}}],["paused",{"2":{"220":2}}],["pause",{"2":{"220":1}}],["password",{"2":{"232":3}}],["pass",{"2":{"123":1,"176":1,"230":1}}],["panics",{"2":{"215":2}}],["panic",{"2":{"101":1,"102":1}}],["package",{"2":{"98":1,"101":1,"102":1,"111":1,"113":1,"114":1}}],["part2",{"2":{"179":2}}],["part1",{"2":{"179":2}}],["partial",{"0":{"257":1},"2":{"128":1,"257":4}}],["parallelprocessingnode",{"2":{"211":5}}],["parallelmap",{"2":{"189":2}}],["parallel",{"0":{"179":1,"189":1},"2":{"118":1,"120":1,"179":4}}],["parameters",{"2":{"118":1,"119":1,"202":1}}],["parentdata",{"2":{"176":2}}],["parentcontext",{"2":{"176":3}}],["parent",{"2":{"86":1,"121":1,"176":4}}],["parsenode",{"2":{"6":1}}],["path2",{"2":{"52":1}}],["path1",{"2":{"52":1}}],["path",{"2":{"43":1,"48":2,"92":2,"222":1,"227":1}}],["paths",{"2":{"7":1,"48":1,"52":1,"57":1,"219":1,"222":1,"227":2,"261":1}}],["pattern",{"0":{"37":1,"38":1,"39":1,"52":1,"54":1,"138":1,"139":1,"140":1,"220":1,"230":1,"235":1,"243":1},"2":{"262":1}}],["patterns",{"0":{"36":1,"51":1,"80":1,"137":1,"165":1},"1":{"37":1,"38":1,"39":1,"52":1,"53":1,"54":1,"81":1,"82":1,"83":1,"84":1,"138":1,"139":1,"140":1},"2":{"28":1,"42":1,"57":1,"72":1,"117":2,"158":1,"178":1,"239":1}}],["payment",{"2":{"22":1}}],["places",{"2":{"6":1,"173":1}}],["primarycalls",{"2":{"259":2}}],["primaryerr",{"2":{"256":2}}],["primaryurl",{"2":{"256":2}}],["primary",{"2":{"254":2,"256":2}}],["priorityqueue",{"2":{"209":1}}],["priorityworkerpool",{"2":{"209":5}}],["prioritytask",{"2":{"209":2}}],["priority",{"0":{"209":1},"2":{"209":5}}],["println",{"2":{"93":2,"101":1,"102":2,"132":1,"237":1}}],["printf",{"2":{"27":3,"56":3,"76":1,"77":1,"93":1,"98":1,"101":1,"102":1,"103":1,"104":1,"111":1,"125":1,"136":2,"142":1,"153":2,"166":2,"197":1,"205":1,"235":3,"237":1,"241":1,"242":1,"244":1,"254":1,"255":1,"256":3,"259":1}}],["prevent",{"2":{"214":1,"243":1,"246":1,"249":1,"258":1,"262":1}}],["previousnode",{"2":{"180":3}}],["previous",{"2":{"164":3}}],["predicate",{"2":{"193":2}}],["pre",{"2":{"99":1,"234":1}}],["prepdata",{"2":{"66":1}}],["prepared",{"2":{"150":7}}],["prepare",{"2":{"62":1,"148":1,"150":1}}],["prepares",{"2":{"62":1,"161":1}}],["preparation",{"2":{"62":1,"148":1}}],["prep",{"0":{"62":1},"2":{"21":1,"25":1,"56":1,"62":1,"66":1,"81":1,"148":1,"159":1,"161":3,"167":1,"235":2}}],["prepresult",{"2":{"2":1,"3":2,"9":2,"10":2,"12":1,"15":2,"27":2,"30":1,"33":3,"34":3,"37":1,"38":1,"39":1,"40":1,"56":3,"63":2,"64":1,"66":2,"67":2,"69":1,"70":1,"82":1,"84":2,"101":1,"102":4,"103":1,"104":2,"113":1,"119":2,"123":2,"124":2,"125":1,"128":3,"140":2,"141":2,"148":3,"149":2,"150":2,"151":2,"152":2,"153":2,"154":2,"155":4,"159":2,"163":3,"165":4,"166":4,"167":4,"168":4,"173":3,"175":3,"176":2,"178":4,"179":2,"181":1,"188":2,"197":3,"211":2,"218":3,"219":3,"220":1,"221":1,"222":1,"223":3,"224":3,"225":1,"226":3,"230":1,"231":1,"232":2,"233":2,"234":2,"235":4,"236":2,"237":2,"241":2,"242":1,"243":1,"244":4,"247":1,"248":2,"249":1,"253":1,"254":2,"255":4,"256":2,"257":3,"258":3,"259":1,"260":1}}],["problems",{"2":{"250":1}}],["prometheus",{"2":{"237":1}}],["propagation",{"0":{"177":1},"2":{"169":1}}],["proper",{"2":{"169":1,"240":1}}],["properly",{"2":{"156":1,"238":1}}],["progressbatchnode",{"2":{"142":2}}],["progresstracker",{"2":{"125":2}}],["progress",{"0":{"125":1,"142":1},"2":{"125":5,"129":2,"142":5,"145":1}}],["projects",{"2":{"202":1}}],["project",{"0":{"106":1,"109":1},"1":{"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1},"2":{"99":2,"106":1,"107":3,"109":2}}],["production",{"2":{"78":1,"116":1,"145":1}}],["provides",{"2":{"69":1,"73":1,"108":1}}],["provide",{"2":{"29":1,"156":1,"202":1,"248":1,"250":1,"252":1,"261":1}}],["protect",{"2":{"12":1}}],["processor",{"2":{"235":1}}],["processtask",{"2":{"154":1,"205":1}}],["processbatcheswithpool",{"2":{"212":1}}],["processbatch",{"2":{"149":2,"212":1,"245":1}}],["processwithworkerpool",{"2":{"206":1}}],["processwithcontext",{"2":{"176":1}}],["processwithconfig",{"2":{"123":1,"148":1,"236":1}}],["processwithprogress",{"2":{"142":1}}],["processchunk",{"2":{"141":1,"191":1}}],["processuser",{"2":{"119":1}}],["processdata",{"2":{"63":1,"234":1}}],["process2",{"2":{"52":2}}],["process1",{"2":{"52":2}}],["processed",{"2":{"27":1,"92":2,"102":1,"132":4,"135":1,"142":2}}],["processes",{"2":{"22":2,"101":1}}],["processflow",{"2":{"166":2}}],["processfunc",{"2":{"24":1,"132":2,"133":2,"134":1,"135":2,"136":2,"143":2,"144":2}}],["processfile",{"2":{"15":1}}],["processingpipeline",{"2":{"166":1}}],["processingflowfactory",{"2":{"164":2}}],["processingflow",{"2":{"160":5}}],["processing",{"0":{"85":1,"126":1,"131":1,"132":1,"137":1,"141":1,"143":1,"212":1},"1":{"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":2,"139":2,"140":2,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1},"2":{"24":1,"39":2,"64":1,"85":1,"89":1,"94":1,"101":1,"102":1,"109":1,"118":1,"123":1,"126":1,"127":1,"130":1,"132":2,"133":2,"135":2,"136":1,"142":1,"143":1,"144":1,"145":1,"146":1,"148":1,"168":1,"179":1,"185":2,"191":1,"197":1,"208":1,"211":1,"216":1,"220":3,"237":1,"257":2}}],["processitem",{"2":{"9":1,"135":1,"142":1,"144":1,"189":1,"196":1,"206":1,"211":1,"245":1,"257":1}}],["process",{"2":{"15":1,"24":3,"27":1,"39":1,"41":1,"45":1,"55":2,"58":1,"59":1,"67":1,"85":1,"109":1,"119":1,"124":1,"126":1,"130":1,"131":1,"132":2,"135":1,"139":1,"141":2,"143":1,"149":2,"176":1,"180":1,"197":1,"205":1,"209":1,"212":2,"232":1,"234":1,"248":1}}],["processnode",{"2":{"7":1,"9":1,"25":1,"27":4,"30":1,"33":1,"44":3,"49":3,"53":3,"58":2,"84":1,"102":2,"114":2,"122":4,"165":3,"172":1,"178":3,"218":1,"235":1}}],["practices",{"0":{"0":1,"41":1,"57":1,"71":1,"87":1,"115":1,"129":1,"145":1,"156":1,"169":1,"182":1,"202":1,"215":1,"227":1,"238":1,"250":1,"261":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"88":1,"89":1,"90":1,"91":1,"92":1},"2":{"28":1,"94":2,"203":1,"216":1,"239":1,"251":1}}],["about",{"2":{"255":1}}],["abort",{"2":{"177":1}}],["abnode",{"2":{"226":1}}],["ab",{"2":{"226":1}}],["audit",{"2":{"162":2,"174":2}}],["authorization",{"2":{"230":1}}],["authentication",{"2":{"173":1}}],["auth",{"2":{"89":1,"91":1,"151":1,"162":3,"174":3}}],["args",{"2":{"150":1}}],["are",{"2":{"29":1,"60":1,"120":1,"156":1,"202":1,"227":1,"230":1,"238":1,"261":1}}],["avg",{"2":{"153":1,"213":1}}],["available",{"2":{"150":1,"151":1,"209":1,"255":2}}],["avoid",{"0":{"13":1},"2":{"41":1,"182":1,"215":1,"227":1,"250":1}}],["age",{"2":{"138":2,"255":5}}],["aggregator",{"0":{"196":1},"2":{"196":3}}],["aggregate",{"2":{"140":1}}],["aggregatenode",{"2":{"127":1}}],["aggregation",{"0":{"124":1,"245":1}}],["afterfunc",{"2":{"198":1}}],["after",{"2":{"85":1,"150":1,"151":1,"179":1,"188":1,"210":2,"214":1,"238":1,"241":2,"243":1,"258":1,"260":1}}],["assignment",{"2":{"226":1}}],["assertion",{"0":{"190":1},"2":{"88":1}}],["assertions",{"2":{"88":1}}],["assert",{"2":{"18":3,"19":3,"167":4,"181":2}}],["asyncnode",{"2":{"154":6}}],["asynchronous",{"2":{"154":1}}],["async",{"0":{"154":1}}],["as",{"0":{"50":1,"158":1,"161":1,"167":1},"1":{"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1},"2":{"50":1,"57":1,"73":1,"160":2,"161":2,"164":1,"167":2,"168":2,"169":3,"172":1,"183":1}}],["acquiring",{"2":{"150":1}}],["accept",{"2":{"233":2}}],["access",{"2":{"79":2,"136":1,"176":1}}],["accumulated",{"2":{"149":1}}],["accumulator",{"2":{"149":1}}],["accumulatornode",{"2":{"149":5}}],["accumulating",{"0":{"82":1}}],["active",{"2":{"78":1}}],["actionerror",{"2":{"41":1}}],["actioncomplete",{"2":{"41":1}}],["actionprocess",{"2":{"41":1}}],["actionvalidate",{"2":{"41":1}}],["action",{"0":{"31":1,"32":1},"1":{"33":1,"34":1},"2":{"28":1,"30":3,"31":1,"33":1,"34":2,"35":1,"37":1,"38":1,"39":1,"40":3,"41":5,"56":1,"64":3,"66":1,"82":1,"84":1,"101":3,"102":1,"110":1,"125":1,"132":1,"136":1,"148":1,"155":1,"159":1,"161":2,"163":3,"165":2,"167":2,"175":2,"178":2,"203":1,"217":1,"218":1,"219":2,"220":3,"221":4,"222":4,"223":1,"224":2,"225":3,"226":2,"227":2,"228":1,"235":5,"248":3}}],["actions",{"0":{"29":1,"30":1,"40":1},"1":{"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1},"2":{"21":1,"29":1,"40":1,"41":4,"42":1,"43":1,"48":1,"72":2,"105":2,"227":1,"228":1}}],["actionable",{"2":{"4":1,"71":1}}],["acts",{"2":{"73":1}}],["across",{"2":{"41":1,"125":1,"149":1,"177":1,"202":1,"222":1,"231":1}}],["another",{"2":{"172":1}}],["analysis",{"2":{"128":1}}],["and",{"0":{"76":1},"2":{"44":1,"45":1,"50":1,"52":1,"62":2,"64":1,"76":1,"101":1,"103":1,"111":1,"115":3,"119":1,"129":1,"134":1,"145":1,"147":1,"156":2,"169":2,"171":1,"184":1,"202":1,"205":1,"215":2,"224":1,"227":2,"229":1,"230":1,"240":1,"252":1,"261":1}}],["an",{"2":{"30":1,"35":1,"101":1}}],["anywhere",{"2":{"158":1}}],["any",{"2":{"2":2,"3":2,"9":2,"10":2,"12":2,"15":2,"25":1,"27":2,"30":1,"33":3,"34":3,"37":1,"38":1,"39":1,"40":2,"56":4,"62":2,"63":3,"64":1,"66":4,"67":2,"69":2,"70":2,"76":1,"78":1,"81":2,"82":3,"84":2,"85":1,"101":2,"102":6,"103":2,"104":5,"113":2,"119":5,"121":1,"123":3,"124":3,"125":1,"128":4,"132":2,"135":2,"136":2,"138":2,"139":2,"140":2,"141":5,"142":4,"143":2,"144":3,"148":4,"149":7,"150":2,"151":2,"152":6,"153":4,"154":2,"155":4,"159":4,"163":3,"165":4,"166":4,"167":2,"168":4,"173":4,"175":3,"176":4,"178":4,"179":4,"181":2,"185":3,"186":5,"188":3,"189":2,"190":1,"191":1,"192":3,"193":1,"194":1,"195":2,"197":2,"200":4,"201":4,"211":2,"218":3,"219":3,"220":1,"221":1,"222":1,"223":7,"224":4,"225":1,"226":4,"230":3,"231":2,"232":3,"233":6,"234":2,"235":4,"236":5,"237":2,"241":4,"242":2,"243":2,"244":5,"247":2,"248":2,"249":3,"253":2,"254":5,"255":6,"256":5,"257":5,"258":6,"259":2,"260":5}}],["adjust",{"2":{"207":1}}],["admin",{"2":{"175":1}}],["adminnode",{"2":{"173":2}}],["adminflow",{"2":{"173":2}}],["advanced",{"0":{"135":1},"2":{"28":2,"42":1,"59":1,"72":1,"147":1,"228":1,"239":1}}],["additional",{"2":{"126":1,"166":1,"235":1}}],["addint64",{"2":{"153":4,"213":4,"259":1}}],["addint32",{"2":{"125":2,"142":1,"207":2,"214":1}}],["adding",{"0":{"103":1,"113":1}}],["add",{"0":{"27":1},"2":{"45":1,"56":1,"69":1,"79":1,"103":1,"114":1,"115":2,"142":1,"145":1,"149":1,"153":1,"154":1,"156":1,"189":1,"195":4,"196":2,"211":1,"246":1,"255":1}}],["a",{"0":{"74":1,"102":1,"226":1},"2":{"24":1,"29":2,"30":1,"41":2,"44":1,"45":2,"48":1,"50":1,"60":2,"66":1,"73":2,"76":2,"77":1,"86":1,"98":1,"99":1,"101":2,"102":1,"106":1,"110":1,"113":1,"119":3,"120":1,"130":1,"132":1,"135":1,"158":1,"160":4,"161":2,"167":2,"172":3,"182":1,"185":1,"205":2,"226":1}}],["atomic",{"2":{"125":4,"142":1,"153":7,"174":1,"207":2,"213":7,"214":4,"259":3}}],["attempt++",{"2":{"242":1}}],["attempt",{"2":{"103":1,"242":5,"246":1}}],["attempts++",{"2":{"103":1,"151":1}}],["attempts",{"2":{"38":4,"103":3,"151":3,"223":13,"248":4,"250":1}}],["at",{"2":{"24":1,"40":1,"78":1,"120":1,"135":1,"163":1,"180":1,"236":1,"241":1}}],["amp",{"0":{"240":1},"1":{"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1},"2":{"16":2,"38":2,"67":1,"69":1,"125":4,"135":1,"142":1,"148":1,"149":1,"150":1,"151":3,"152":1,"153":9,"154":2,"155":1,"163":1,"195":1,"196":1,"200":1,"206":1,"207":3,"208":1,"209":1,"210":1,"211":1,"213":7,"214":4,"218":2,"221":2,"222":1,"224":2,"225":3,"230":2,"231":1,"233":2,"234":2,"236":1,"243":1,"245":1,"247":2,"248":2,"258":2,"259":3}}],["apikey",{"2":{"230":3}}],["apiclient",{"2":{"21":2}}],["api",{"2":{"21":2,"81":5,"90":1,"91":1,"111":3,"119":1,"175":1,"230":1,"241":1}}],["apinode",{"2":{"10":1,"81":1,"230":1}}],["apiflow",{"2":{"6":1,"173":2}}],["apply",{"2":{"233":1}}],["application",{"2":{"41":1,"162":1,"174":1,"233":3}}],["app",{"2":{"162":4,"232":1}}],["appropriately",{"2":{"215":1}}],["appropriate",{"2":{"10":1,"202":1,"261":1}}],["append",{"2":{"9":1,"82":1,"123":1,"124":2,"126":1,"141":1,"149":1,"155":1,"164":1,"191":1,"193":1,"195":1,"196":1,"245":1,"257":2}}],["algorithm",{"2":{"225":3}}],["alternative",{"2":{"168":1}}],["alternatives",{"2":{"168":1}}],["always",{"2":{"9":1,"15":1,"71":1,"215":1}}],["allocate",{"2":{"234":1}}],["allowing",{"2":{"158":1}}],["allows",{"2":{"104":1,"253":1}}],["alldata",{"2":{"77":2}}],["all",{"2":{"7":1,"41":3,"77":1,"124":1,"126":1,"145":1,"154":1,"159":1,"205":1,"227":4,"241":1,"256":2}}],["`",{"2":{"3":2}}],["utility",{"0":{"187":1},"1":{"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1},"2":{"204":1}}],["utilities",{"0":{"184":1,"199":1},"1":{"185":1,"186":1,"187":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":2,"201":2,"202":1,"203":1},"2":{"184":1,"187":1,"202":3,"203":1}}],["url",{"2":{"81":1,"111":1,"230":2,"233":7}}],["using",{"0":{"66":1,"104":1},"2":{"31":1,"104":1,"106":1,"110":1,"115":1,"168":2,"204":1,"217":1,"230":1,"256":2}}],["usage",{"0":{"160":1},"2":{"28":1,"129":1,"145":1,"163":1,"166":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"201":1,"202":1,"222":1,"225":1,"226":1,"227":1,"230":1,"232":1,"235":1,"255":1,"259":1,"261":1}}],["useful",{"2":{"185":1,"261":1}}],["used",{"2":{"50":1,"70":1,"92":1,"158":1,"160":1,"161":1,"167":1,"169":2}}],["userconfig",{"2":{"192":1}}],["userop",{"2":{"174":3}}],["userdto",{"2":{"138":1}}],["userdata",{"2":{"25":2}}],["users",{"2":{"121":3,"226":3}}],["user3",{"2":{"119":1}}],["user2",{"2":{"119":1}}],["user1",{"2":{"119":1}}],["useridkey",{"2":{"197":1}}],["userid",{"2":{"4":1,"76":2,"90":2,"119":2,"190":2,"226":4}}],["user",{"2":{"4":1,"21":7,"76":3,"89":1,"119":6,"121":7,"138":5,"175":1,"190":1,"197":1,"226":2,"232":3,"252":1,"261":1}}],["use",{"2":{"3":1,"6":1,"13":1,"15":1,"41":2,"50":1,"88":2,"89":1,"93":1,"94":1,"105":1,"115":1,"116":1,"123":1,"134":1,"135":1,"145":1,"150":1,"156":1,"160":2,"162":1,"164":1,"168":1,"169":1,"172":2,"173":1,"182":1,"190":1,"202":2,"205":1,"211":1,"227":1,"229":1,"232":1,"236":1,"237":1,"238":1,"250":1,"255":1}}],["unavailable",{"2":{"244":1,"255":1,"256":2,"258":1,"260":1}}],["unmarshal",{"2":{"221":1,"236":1}}],["until",{"2":{"209":1}}],["unordered",{"2":{"133":1}}],["unknown",{"2":{"126":1}}],["understanding",{"2":{"161":1}}],["understand",{"2":{"99":1,"117":1}}],["unrecoverable",{"2":{"21":1}}],["unit",{"0":{"18":1},"2":{"60":1}}],["unlock",{"2":{"12":1,"70":1,"124":1,"140":1,"149":1,"150":2,"196":2,"198":1,"200":1,"206":1,"207":1,"214":1,"222":1,"231":1,"255":1}}],["up",{"0":{"15":1},"2":{"68":1,"71":1,"205":1,"207":1,"215":1,"221":1,"241":1}}],["updatestate",{"2":{"83":1}}],["update",{"2":{"3":1,"83":2,"142":1,"148":1,"237":1,"255":1}}],["upsert",{"2":{"3":1}}],["objects",{"0":{"232":1}}],["observability",{"0":{"27":1},"2":{"153":1,"156":1}}],["oldalgorithmnode",{"2":{"225":1}}],["out",{"2":{"249":1}}],["outerbatchfunc",{"2":{"127":1}}],["outerbatchflow",{"2":{"127":1}}],["outer",{"2":{"127":2}}],["outerflowfactory",{"2":{"127":2}}],["output",{"2":{"18":1,"19":1,"45":1,"64":1,"92":2,"134":4,"135":1}}],["o",{"2":{"116":1,"145":1}}],["own",{"2":{"86":2,"119":1,"187":1}}],["optimization",{"2":{"215":1}}],["options",{"0":{"68":1},"2":{"68":1}}],["open",{"2":{"15":1,"150":1,"214":1,"232":1,"234":1,"243":2,"258":4}}],["operations",{"0":{"24":1,"75":1},"1":{"76":1,"77":1,"78":1},"2":{"9":1,"70":1,"85":1,"94":1,"136":1,"144":1,"152":1,"154":1,"162":1,"174":2,"216":1,"245":1,"249":1,"252":1}}],["operation",{"2":{"3":1,"63":1,"103":1,"168":1,"188":3,"223":1,"249":1,"254":1}}],["organize",{"2":{"115":1}}],["or",{"2":{"41":1,"49":1,"57":1,"62":1,"81":1,"95":1,"115":1,"116":1,"118":1,"131":1,"145":1,"168":1,"177":1,"258":1}}],["orderdata",{"2":{"22":1}}],["order",{"2":{"22":3,"61":1,"133":1,"145":1}}],["orders",{"2":{"22":1}}],["overwhelming",{"2":{"250":1}}],["overload",{"2":{"214":1}}],["overhead",{"2":{"169":1}}],["overrides",{"2":{"192":1}}],["override",{"2":{"69":1}}],["over",{"2":{"29":1}}],["occurred",{"2":{"21":1}}],["ok",{"2":{"19":2,"76":2,"88":4,"98":2,"111":2,"136":2,"190":4,"197":2,"200":2,"220":4,"221":2,"225":2,"233":2,"244":2,"248":2,"256":2}}],["os",{"2":{"15":1,"81":1,"221":1,"234":1,"236":1}}],["once",{"2":{"78":1,"232":1}}],["only",{"2":{"25":2,"69":1,"139":1,"198":1,"224":6,"247":2,"250":1}}],["on",{"0":{"244":1,"252":1},"1":{"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1},"2":{"3":1,"21":1,"43":1,"48":1,"58":1,"63":1,"64":1,"121":1,"126":2,"145":1,"151":2,"163":1,"164":2,"182":1,"207":1,"214":1,"215":1,"217":1,"220":1,"221":1,"222":1,"226":2,"242":1,"243":1,"244":1,"247":1,"251":1,"254":1,"255":1,"260":1}}],["ones",{"2":{"55":1,"162":1}}],["one",{"2":{"2":1,"24":1,"71":1,"120":1,"129":1,"198":1}}],["official",{"2":{"106":1}}],["of",{"2":{"3":1,"24":1,"60":2,"77":1,"92":2,"119":1,"124":1,"129":1,"131":1,"145":1,"169":1,"222":3,"226":3}}],["graceful",{"2":{"157":1,"244":1,"251":1,"252":1}}],["gracefully",{"2":{"145":1,"238":1,"250":1}}],["grained",{"2":{"130":1,"204":1}}],["groups",{"2":{"226":1}}],["group",{"2":{"115":1}}],["guide",{"2":{"99":1,"100":1}}],["guidelines",{"2":{"0":1,"203":1,"216":1,"239":1,"251":1}}],["git",{"2":{"107":4,"115":1}}],["github",{"2":{"96":1,"97":1,"98":1,"101":1,"102":1,"107":1,"111":1,"113":1,"114":1}}],["give",{"2":{"57":1}}],["gt",{"2":{"33":1,"58":4,"139":1,"141":1,"149":1,"151":1,"155":1,"165":1,"178":1,"191":1,"207":1,"214":2,"218":1,"243":1,"245":1,"257":1,"258":1}}],["generateid",{"2":{"209":1}}],["generateinputs",{"2":{"125":1}}],["generate",{"2":{"121":1}}],["generation",{"0":{"121":1}}],["general",{"2":{"94":1,"203":1,"216":1,"239":1,"251":1}}],["generics",{"2":{"202":1}}],["generic",{"2":{"4":1,"202":1,"260":1}}],["getcachedresponse",{"2":{"260":1}}],["getcurrentworkers",{"2":{"207":3}}],["getdefaultresponse",{"2":{"259":1}}],["getnode",{"2":{"233":1}}],["getpendingcount",{"2":{"213":1}}],["getpendinginputs",{"2":{"126":1}}],["getrequestid",{"2":{"197":2}}],["getaveragetime",{"2":{"213":1}}],["getaveragelatency",{"2":{"153":1}}],["getallinputs",{"2":{"126":1}}],["getall",{"0":{"77":1},"2":{"56":1,"77":1,"93":2}}],["getmetrics",{"2":{"153":1}}],["getmaxretries",{"2":{"151":1,"242":1,"247":1}}],["getwait",{"2":{"151":1,"242":1,"246":1}}],["getorprepare",{"2":{"150":2}}],["getfailedinputs",{"2":{"126":1}}],["getstats",{"2":{"213":1}}],["getsuccessrate",{"2":{"153":1}}],["gets",{"2":{"86":1,"123":1}}],["getenv",{"2":{"81":1}}],["get",{"0":{"76":1,"96":1},"2":{"19":1,"38":1,"39":1,"45":2,"62":2,"76":2,"77":1,"81":1,"82":1,"85":2,"86":1,"88":1,"96":1,"98":1,"102":1,"104":1,"111":2,"119":2,"121":2,"123":1,"126":1,"132":2,"141":1,"148":1,"165":1,"176":2,"178":1,"179":2,"190":1,"200":1,"220":1,"223":1,"226":1,"230":1,"233":3,"237":1}}],["goroutines",{"2":{"79":1,"215":1}}],["go",{"0":{"96":1,"111":1},"2":{"13":2,"57":1,"79":1,"95":1,"96":1,"98":2,"107":3,"109":7,"113":1,"114":1,"115":1,"116":1,"142":1,"144":1,"154":2,"189":1,"194":1,"202":1,"209":1,"210":1,"211":1,"249":1}}],["good",{"2":{"2":1,"3":1,"4":1,"13":1,"168":1,"256":2}}],["✅",{"2":{"2":1,"3":1,"4":1,"13":1}}],["immediately",{"2":{"258":1}}],["immutable",{"2":{"238":1}}],["import",{"0":{"97":1},"2":{"97":1,"98":1,"101":1,"102":1,"111":1,"113":1,"114":1}}],["important",{"2":{"27":1,"102":1}}],["implementing",{"2":{"183":1}}],["implements",{"2":{"159":1}}],["implementation",{"0":{"151":1,"186":1}}],["implementations",{"2":{"69":1,"109":1,"117":1}}],["implement",{"2":{"50":1,"129":1,"158":1,"159":1,"220":1,"242":1,"244":1,"252":1}}],["io",{"2":{"233":1,"234":1}}],["i+batchsize",{"2":{"212":1}}],["i+1",{"2":{"164":1,"188":1}}],["i++",{"2":{"13":2,"79":1,"154":1,"164":1,"186":1,"188":1,"205":1}}],["it",{"2":{"73":1,"98":1,"167":1,"261":1}}],["its",{"2":{"30":1,"86":1,"119":1}}],["iteration",{"2":{"9":1,"49":1,"119":2}}],["itemctx",{"2":{"144":2}}],["item3",{"2":{"85":1,"132":2}}],["item2",{"2":{"85":1,"132":2}}],["item1",{"2":{"85":1,"132":2}}],["item",{"2":{"9":3,"24":2,"123":3,"132":3,"135":2,"136":5,"138":3,"139":3,"140":2,"142":2,"143":3,"144":5,"185":2,"186":1,"189":2,"193":6,"196":2,"206":3,"211":3,"212":1,"245":4,"257":3}}],["itemskey",{"2":{"135":1}}],["items",{"2":{"9":2,"24":4,"27":1,"85":2,"92":1,"123":3,"127":1,"130":1,"131":1,"132":3,"134":1,"135":2,"136":1,"139":1,"140":2,"141":9,"142":4,"185":1,"189":4,"191":1,"193":1,"196":1,"206":3,"211":4,"212":5,"245":4,"257":3}}],["iscircuitopen",{"2":{"258":3}}],["iscomplete",{"2":{"148":1}}],["isretryable",{"2":{"247":1}}],["isratelimiterror",{"2":{"151":2}}],["isopen",{"2":{"214":2}}],["isolate",{"2":{"129":1}}],["isolation",{"0":{"86":1},"2":{"18":1,"181":1,"182":1}}],["isautherror",{"2":{"151":1}}],["issues",{"2":{"151":1,"261":1}}],["isnetworkerror",{"2":{"151":1,"247":1}}],["is",{"2":{"31":1,"79":1,"86":1,"106":1,"116":1,"149":1,"158":1,"160":1,"161":1,"225":1,"243":1,"255":1,"258":1,"260":3,"261":1}}],["isvalid",{"2":{"2":1,"64":1,"193":1,"218":2}}],["i",{"2":{"13":4,"79":3,"121":2,"136":2,"141":5,"142":2,"145":1,"152":2,"154":4,"164":3,"186":4,"188":3,"189":2,"191":5,"205":3,"206":2,"211":2,"212":5,"245":2}}],["identify",{"2":{"250":1}}],["idempotent",{"2":{"3":1}}],["idempotency",{"0":{"3":1},"2":{"71":1}}],["idle",{"2":{"207":1}}],["idx",{"2":{"142":2}}],["id",{"2":{"3":4,"21":1,"22":2,"76":3,"79":2,"86":2,"89":1,"119":5,"121":2,"138":2,"190":1,"197":4,"209":2,"226":2}}],["injected",{"2":{"237":1}}],["inject",{"2":{"237":1}}],["injection",{"0":{"237":1}}],["inline",{"2":{"168":1}}],["indefinitely",{"2":{"250":1}}],["index",{"2":{"154":1,"186":1,"189":2,"206":2,"211":3}}],["independently",{"2":{"181":1,"182":1}}],["independent",{"2":{"129":1}}],["individual",{"2":{"76":1,"136":1}}],["indicate",{"2":{"41":1,"169":1,"227":1,"250":1,"261":1}}],["innerflow",{"2":{"167":4}}],["innerflowfactory",{"2":{"127":1}}],["innerbatchfunc",{"2":{"127":1}}],["innerbatchflow",{"2":{"127":3}}],["inner",{"2":{"127":1,"167":1}}],["inc",{"2":{"237":1}}],["includes",{"2":{"110":1,"127":1}}],["included",{"0":{"108":1},"1":{"109":1,"110":1,"111":1}}],["incrementally",{"2":{"57":1}}],["info",{"2":{"102":1}}],["information",{"2":{"84":1,"156":1}}],["initnode",{"2":{"161":2}}],["initialized",{"2":{"83":1}}],["initialize",{"2":{"83":1,"115":1}}],["initial",{"2":{"45":1,"81":1,"104":1,"111":1,"200":2}}],["init",{"2":{"39":1,"107":1,"220":2}}],["inventory",{"2":{"22":1}}],["invalid",{"2":{"2":1,"33":2,"54":1,"58":2,"122":1,"155":1,"172":1,"218":2}}],["inputs",{"2":{"59":1,"119":1,"121":4,"123":4,"125":3,"126":5,"146":1,"202":1}}],["input",{"0":{"121":1},"2":{"18":1,"19":1,"45":1,"62":5,"63":1,"84":1,"92":2,"119":1,"126":3,"128":1,"134":4,"135":1,"148":4,"181":1,"195":2,"201":1,"248":2}}],["intn",{"2":{"246":1}}],["intslice",{"2":{"185":1}}],["int64",{"2":{"153":4,"213":7,"259":2}}],["int32",{"2":{"125":2,"142":3,"207":3,"214":2}}],["integrity",{"2":{"155":1}}],["integration",{"0":{"19":1}}],["interfaces",{"2":{"156":2,"182":1}}],["interface",{"0":{"159":1,"253":1},"2":{"50":1,"155":1,"157":2,"158":1,"159":1,"164":1,"170":1,"183":1,"186":1,"244":1,"253":2}}],["intentionally",{"2":{"41":1}}],["int",{"2":{"12":1,"34":1,"38":1,"70":1,"76":1,"79":1,"88":1,"90":1,"92":1,"121":1,"125":1,"136":3,"139":1,"140":2,"141":1,"142":1,"143":1,"149":2,"151":2,"154":2,"165":4,"178":4,"185":1,"188":1,"189":2,"190":1,"191":1,"207":3,"208":2,"209":4,"210":1,"211":1,"212":2,"222":4,"223":3,"226":3,"232":2,"234":1,"242":2,"243":2,"247":1,"248":1,"258":2}}],["into",{"2":{"3":1,"57":1,"72":1,"105":1,"168":1,"228":1}}],["in",{"0":{"86":1,"97":1,"176":1,"211":1},"2":{"6":1,"9":1,"12":1,"18":1,"21":1,"24":2,"28":1,"29":1,"31":1,"50":1,"61":1,"70":1,"71":1,"73":1,"81":2,"83":1,"85":1,"86":1,"94":2,"100":1,"113":1,"115":1,"116":1,"120":1,"123":1,"128":1,"132":1,"134":1,"136":1,"141":2,"162":1,"172":2,"173":1,"179":1,"181":1,"182":1,"183":1,"184":1,"188":1,"191":1,"197":1,"201":1,"203":1,"212":1,"215":1,"221":1,"230":1,"238":1,"241":1}}],["installed",{"2":{"98":2}}],["install",{"0":{"96":1},"2":{"107":1}}],["installation",{"0":{"95":1,"98":1},"1":{"96":1,"97":1,"98":1,"99":1},"2":{"98":1}}],["instance",{"2":{"13":1,"119":1,"129":1}}],["instances",{"0":{"13":1},"2":{"13":2}}],["instead",{"2":{"3":1,"24":1}}],["insert",{"2":{"3":2,"56":1}}],["if",{"2":{"2":1,"15":1,"25":1,"27":1,"30":1,"33":1,"34":2,"35":2,"37":1,"38":1,"45":1,"63":2,"64":1,"67":1,"70":1,"76":1,"82":1,"84":1,"88":2,"98":1,"101":1,"102":1,"103":1,"111":2,"121":1,"124":1,"125":1,"126":1,"128":1,"136":4,"139":1,"141":1,"142":1,"143":1,"144":1,"148":1,"149":2,"150":7,"151":5,"152":1,"153":1,"155":3,"165":3,"167":1,"178":3,"180":1,"186":2,"188":2,"190":3,"191":1,"193":1,"196":5,"198":1,"207":5,"208":1,"209":1,"211":1,"213":1,"214":5,"218":1,"220":3,"221":1,"222":1,"223":4,"224":3,"225":2,"226":1,"230":1,"232":1,"233":2,"234":2,"236":1,"237":2,"242":1,"243":4,"244":3,"245":2,"247":3,"248":2,"249":1,"254":1,"255":2,"256":3,"257":2,"258":4}}],["eof",{"2":{"234":1}}],["edge",{"2":{"202":1}}],["empty",{"2":{"185":1,"202":1,"260":1}}],["embedded",{"2":{"168":1}}],["email",{"2":{"119":7}}],["e",{"2":{"136":3,"196":13}}],["efficiently",{"2":{"131":1,"212":1}}],["etc",{"2":{"119":1}}],["even",{"2":{"252":1}}],["event",{"2":{"220":4}}],["events",{"2":{"27":1}}],["every",{"2":{"61":1}}],["easier",{"2":{"57":1}}],["each",{"2":{"2":1,"9":1,"60":1,"71":1,"86":2,"115":1,"119":4,"122":1,"123":1,"129":1,"132":1,"138":1,"182":2,"227":1}}],["ensuring",{"2":{"252":1}}],["ensure",{"2":{"41":1,"155":1,"156":1,"169":1,"202":1,"227":1,"238":1,"261":1}}],["encapsulated",{"2":{"229":1}}],["enabled",{"2":{"225":5}}],["enables",{"2":{"158":1}}],["enrich",{"2":{"224":4}}],["enrichment",{"2":{"162":2,"224":1}}],["enrichnode",{"2":{"54":2,"160":1,"224":4}}],["entire",{"2":{"128":1,"161":2}}],["entities",{"2":{"118":1}}],["entry",{"2":{"109":1,"255":3}}],["environment",{"2":{"115":1}}],["env",{"2":{"78":1}}],["end",{"2":{"141":4,"191":4,"212":2}}],["endnode",{"2":{"44":2,"49":1,"161":1}}],["ends",{"2":{"35":1}}],["else",{"2":{"34":1,"88":1,"124":1,"125":1,"144":1,"153":1,"188":1,"213":1,"214":1,"224":2,"249":1}}],["equal",{"2":{"18":1,"19":1,"167":1}}],["exhausted",{"2":{"256":1}}],["exit",{"2":{"223":2}}],["exists",{"2":{"35":1,"150":4,"190":2,"255":2}}],["exist",{"2":{"21":1}}],["external",{"2":{"150":1,"156":1,"221":1}}],["extend",{"2":{"148":1}}],["extractretryafter",{"2":{"151":1}}],["extract",{"2":{"57":1,"151":1}}],["example",{"0":{"110":1},"2":{"81":1,"107":1,"109":6,"110":1,"111":2,"119":3,"230":1}}],["examples",{"2":{"28":1,"105":1,"117":1,"202":1,"203":1}}],["expired",{"2":{"173":1}}],["exponential",{"0":{"242":1},"2":{"151":1,"242":2}}],["explore",{"2":{"105":1}}],["explaining",{"2":{"57":1,"115":1}}],["explicitly",{"2":{"35":1}}],["experience",{"2":{"252":1,"261":1}}],["experiment",{"2":{"226":1}}],["experimental",{"2":{"225":1}}],["expects",{"2":{"169":1,"182":1}}],["expectedresult",{"2":{"19":1}}],["expected",{"2":{"18":1,"92":1,"158":1,"160":1}}],["expensive",{"2":{"16":1}}],["execfallback",{"2":{"244":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1}}],["execfn",{"2":{"201":2}}],["execfunc",{"2":{"68":1}}],["executes",{"2":{"161":1,"198":1}}],["executed",{"2":{"120":1}}],["execute",{"2":{"45":1,"61":1,"179":2,"195":2,"224":1}}],["executions",{"2":{"149":1,"153":4,"231":1}}],["execution",{"0":{"120":1},"2":{"29":1,"43":1,"47":1,"52":1,"57":1,"62":1,"63":1,"70":1,"73":1,"125":1,"131":1,"133":1,"148":1,"153":2,"179":1,"204":1,"217":1,"231":1,"247":1}}],["execresult",{"2":{"30":1,"33":2,"34":2,"37":2,"38":2,"39":1,"40":2,"56":2,"64":3,"66":1,"82":2,"84":2,"102":2,"125":2,"148":1,"155":2,"159":1,"163":2,"165":3,"167":2,"175":2,"178":3,"218":2,"219":2,"220":2,"221":2,"222":1,"223":2,"224":2,"225":2,"226":2,"235":2,"248":2}}],["exec",{"0":{"63":1},"2":{"3":2,"9":1,"10":1,"12":1,"15":1,"18":2,"21":1,"27":1,"56":1,"62":1,"63":1,"66":1,"67":1,"69":2,"70":1,"101":1,"140":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":2,"154":1,"155":1,"159":1,"161":2,"167":1,"188":1,"197":1,"211":1,"235":2,"242":1,"243":1,"244":1,"247":1,"249":1,"254":1,"255":1,"256":1,"257":1,"258":1}}],["errnotfound",{"2":{"260":1}}],["errratelimit",{"2":{"260":1}}],["errtimeout",{"2":{"260":1}}],["errs",{"2":{"245":6}}],["errchan",{"2":{"144":3,"210":4,"249":3}}],["err",{"2":{"3":2,"4":1,"9":1,"15":3,"18":4,"19":2,"27":4,"37":2,"45":3,"63":3,"67":3,"84":3,"101":3,"102":3,"111":3,"119":1,"121":3,"124":4,"128":4,"132":1,"136":3,"143":3,"144":5,"150":12,"151":4,"152":5,"153":4,"154":1,"155":3,"167":6,"181":4,"188":8,"194":6,"196":9,"208":3,"210":2,"211":6,"213":2,"214":2,"223":3,"230":3,"232":3,"233":3,"234":7,"235":4,"236":3,"237":6,"241":2,"242":4,"243":3,"244":5,"245":3,"247":5,"248":3,"249":6,"253":1,"254":6,"255":7,"256":5,"257":4,"258":4,"259":1,"260":4}}],["errorctx",{"2":{"248":2}}],["errorcontext",{"2":{"248":2}}],["erroraggregator",{"2":{"196":4}}],["errordata",{"2":{"128":2}}],["errornode",{"2":{"33":1,"58":1,"122":3,"218":1}}],["errorhandler",{"2":{"7":2,"53":3,"84":1,"177":4}}],["errorf",{"2":{"4":1,"103":1,"126":1,"136":1,"144":1,"152":1,"155":1,"188":1,"196":1,"210":1,"211":1,"214":1,"243":1,"245":1,"247":1,"249":1,"255":1,"257":1,"258":1}}],["errors",{"2":{"2":1,"4":2,"21":1,"71":1,"85":2,"92":2,"124":3,"136":3,"145":2,"146":1,"151":1,"155":5,"169":1,"177":1,"196":9,"211":4,"238":1,"245":2,"247":3,"250":1,"257":10,"260":3}}],["error",{"0":{"4":1,"7":1,"53":1,"84":1,"103":1,"128":1,"136":1,"177":1,"196":1,"240":1,"245":1,"248":1},"1":{"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1},"2":{"2":1,"3":1,"4":2,"7":3,"9":1,"10":1,"12":1,"15":1,"18":2,"21":2,"25":1,"27":2,"30":1,"33":2,"34":2,"37":2,"38":1,"39":1,"40":1,"41":1,"53":4,"56":3,"58":1,"62":1,"63":1,"64":1,"66":3,"67":1,"69":1,"70":1,"71":1,"81":1,"82":1,"84":7,"86":1,"89":1,"92":1,"101":1,"102":4,"103":2,"104":2,"105":1,"110":1,"113":1,"119":3,"121":1,"122":2,"123":2,"124":2,"125":2,"126":1,"128":6,"132":1,"135":1,"136":1,"138":1,"139":1,"140":1,"141":2,"142":1,"143":1,"144":2,"146":1,"148":3,"149":1,"150":4,"151":4,"152":4,"153":1,"154":1,"155":3,"156":2,"159":3,"163":2,"165":3,"166":2,"167":1,"168":2,"169":1,"173":2,"175":2,"176":2,"177":2,"178":3,"179":2,"181":1,"188":6,"194":4,"196":5,"197":1,"201":2,"208":1,"210":4,"211":2,"213":1,"214":2,"218":2,"219":2,"220":2,"221":1,"222":1,"223":5,"224":2,"225":1,"226":3,"230":1,"231":1,"232":1,"233":2,"234":1,"235":3,"236":2,"237":2,"238":1,"239":1,"240":1,"241":3,"242":1,"243":1,"244":4,"245":2,"247":3,"248":7,"249":2,"251":1,"253":2,"254":5,"255":6,"256":4,"257":6,"258":3,"259":2,"260":5,"262":2}}],["circuitbreakernode",{"2":{"243":4,"258":6}}],["circuitbreakerpool",{"2":{"214":3}}],["circuit",{"0":{"214":1,"243":1,"258":1},"2":{"214":2,"243":2,"258":4,"262":1}}],["c",{"2":{"185":1}}],["chan",{"2":{"144":2,"154":3,"189":1,"194":1,"210":2,"211":1,"249":2}}],["chunkresults",{"2":{"141":2}}],["chunk",{"0":{"191":1},"2":{"141":2,"191":2}}],["chunkslice",{"2":{"191":2}}],["chunksize",{"2":{"141":3,"191":3}}],["chunks",{"2":{"141":2,"191":6}}],["chunked",{"0":{"141":1}}],["choose",{"2":{"133":1,"145":1,"163":1,"175":1}}],["checkout",{"2":{"226":1}}],["checkdepth",{"2":{"178":4}}],["checktoken",{"2":{"173":4}}],["checkbusiness",{"2":{"55":2}}],["checkformat",{"2":{"55":3}}],["checks",{"2":{"22":1}}],["check",{"2":{"9":2,"149":1,"150":1,"211":1,"225":1,"237":1,"243":1,"247":1,"258":1}}],["criteria",{"2":{"126":1}}],["creation",{"2":{"238":1}}],["creating",{"0":{"44":1,"65":1,"74":1,"114":1},"1":{"66":1,"67":1},"2":{"110":1,"171":1}}],["createhttpnode",{"2":{"233":3}}],["createheavyflow",{"2":{"168":1}}],["createparallelnestedflow",{"2":{"179":1}}],["createprocessingflow2",{"2":{"179":1}}],["createprocessingflow1",{"2":{"179":1}}],["createprocessingflow",{"2":{"166":1,"180":1}}],["createprocessingpipeline",{"2":{"162":2}}],["createprocessnode",{"2":{"13":2,"18":1,"44":1,"55":1,"114":1,"122":1,"165":1,"178":1,"235":1}}],["createprogressbatchflow",{"2":{"125":1}}],["createnestedflowwithcontext",{"2":{"176":1}}],["createnotificationnode",{"2":{"174":1}}],["createnodefromconfig",{"2":{"164":1}}],["createnode",{"2":{"16":1}}],["createuserflow",{"2":{"175":1}}],["createuseroperation",{"2":{"174":2}}],["createquerynode",{"2":{"174":1}}],["createoptimizednode",{"2":{"168":1}}],["createorderflow",{"2":{"22":2}}],["createlightweightflow",{"2":{"168":1}}],["createloggingnode",{"2":{"56":3}}],["createdynamicflow",{"2":{"180":1}}],["createdynamicpipeline",{"2":{"164":1}}],["createdisconnectnode",{"2":{"174":1}}],["created",{"2":{"164":1}}],["createdatabasenode",{"2":{"232":2}}],["createdatabaseoperation",{"2":{"174":2}}],["createdatamergenode",{"2":{"162":1}}],["createdatafetchnode",{"2":{"162":1}}],["createabtestnode",{"2":{"226":2}}],["createapinode",{"2":{"230":2}}],["createapiflow",{"2":{"175":1}}],["createapplicationflow",{"2":{"162":1,"174":1}}],["createadminflow",{"2":{"175":1}}],["createauditflow",{"2":{"162":1,"174":1}}],["createauthflow",{"2":{"162":1,"173":3,"174":1}}],["createaggregatingbatchflow",{"2":{"124":1}}],["createtimeoutpool",{"2":{"210":1}}],["createtimeoutbatchnode",{"2":{"144":1}}],["createtransformnode",{"2":{"2":1}}],["createratelimitedpool",{"2":{"208":1}}],["createratelimitedbatchnode",{"2":{"143":1}}],["createrecursiveflow",{"2":{"178":1}}],["createrecursiveprocessingflow",{"2":{"165":1}}],["createrobustnode",{"2":{"103":1}}],["createcounternode",{"2":{"231":1}}],["createconfigurablenode",{"2":{"236":1}}],["createconfiguredbatchflow",{"2":{"123":1}}],["createconnectnode",{"2":{"174":1}}],["createcomplexflow",{"2":{"163":1}}],["createchunkedprocessor",{"2":{"141":1}}],["createcustomflow",{"2":{"114":1,"163":1}}],["createcustomnode",{"2":{"113":1,"114":1}}],["createbusinessvalidationnode",{"2":{"162":1}}],["createbusinessvalidator",{"2":{"6":1}}],["createbusinessrulesnode",{"2":{"172":1}}],["createbusinessrules",{"2":{"55":1}}],["createenrichmentflow",{"2":{"162":2}}],["createendnode",{"2":{"44":1}}],["createerrorhandlingflow",{"2":{"177":1}}],["createerrorhandlernode",{"2":{"177":1}}],["createerrorhandler",{"2":{"7":1}}],["createerrornode",{"2":{"122":1}}],["createexampleflow",{"2":{"111":1}}],["createmainflow",{"2":{"19":1,"55":1}}],["createfileprocessornode",{"2":{"234":1}}],["createflow",{"2":{"164":3}}],["createflowwitherrorhandling",{"2":{"7":1}}],["createformatchecker",{"2":{"55":1}}],["createfetchnode",{"2":{"2":1,"55":1,"122":1,"127":1}}],["createservicenode",{"2":{"237":1}}],["createselectornode",{"2":{"163":2}}],["createsaveflow",{"2":{"180":1}}],["createsavenode",{"2":{"2":1,"122":1}}],["createsubflow",{"2":{"177":1,"181":1}}],["createschemachecknode",{"2":{"172":1}}],["createschemavalidationnode",{"2":{"162":1}}],["createschemavalidator",{"2":{"6":1}}],["createsimpleflow",{"2":{"163":1}}],["createstartnode",{"2":{"44":1,"180":1}}],["creates",{"2":{"22":1}}],["createvalidateusernode",{"2":{"174":1}}],["createvalidatenode",{"2":{"2":1,"122":1}}],["createvalidationflow",{"2":{"6":3,"55":2,"162":2,"180":1}}],["create",{"2":{"6":1,"10":1,"13":2,"43":1,"44":1,"49":1,"50":1,"57":1,"66":1,"98":1,"101":2,"102":2,"111":2,"113":1,"114":1,"115":1,"119":2,"122":2,"127":1,"132":1,"144":1,"147":1,"160":1,"164":2,"167":1,"172":1,"173":1,"178":1,"179":1,"187":1,"205":2,"207":1,"223":1,"229":1,"232":1,"233":2,"249":1}}],["cd",{"2":{"107":1}}],["cycles",{"2":{"49":1}}],["cumulative",{"2":{"226":3}}],["customnode",{"2":{"148":6}}],["customizing",{"0":{"112":1},"1":{"113":1,"114":1}}],["custom",{"0":{"67":1,"134":1,"147":1,"148":1,"187":1},"1":{"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1},"2":{"69":2,"72":1,"109":1,"110":1,"113":3,"114":1,"134":3,"146":1,"147":1,"148":4,"151":1,"156":2,"157":1,"163":1,"203":1,"216":1,"239":1,"253":1}}],["customer",{"2":{"22":1}}],["currentweight",{"2":{"222":3}}],["currentload",{"2":{"207":2}}],["currentstate",{"2":{"39":2,"220":4}}],["current",{"2":{"12":2,"142":5,"207":3,"231":2}}],["client",{"2":{"230":3,"233":3,"237":1}}],["closure",{"0":{"230":1},"2":{"230":1}}],["closures",{"0":{"229":1},"1":{"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1},"2":{"229":1,"230":1,"237":1}}],["closed",{"2":{"238":1}}],["close",{"2":{"15":1,"67":1,"150":4,"154":3,"205":1,"206":1,"207":1,"211":3,"212":1,"215":1,"230":1,"232":1,"233":1,"234":1}}],["clone",{"2":{"107":2}}],["clarity",{"2":{"90":1}}],["cleanup",{"0":{"91":1},"2":{"15":2,"238":1}}],["clean",{"0":{"15":1},"2":{"71":1,"205":1,"215":1}}],["clearly",{"2":{"41":1,"169":1,"182":1,"238":1}}],["clear",{"2":{"4":1,"58":1,"71":1,"91":2,"149":1,"156":2,"169":1,"182":1,"202":1,"227":1,"261":1}}],["correctly",{"2":{"261":1}}],["core",{"2":{"28":1,"99":1,"117":1}}],["coupling",{"2":{"182":1}}],["could",{"2":{"119":1}}],["counts",{"2":{"215":1}}],["countkey",{"2":{"135":1}}],["counter++",{"2":{"70":1,"222":1}}],["counter",{"2":{"70":2,"222":3}}],["counternode",{"2":{"12":2}}],["count++",{"2":{"12":1,"231":1}}],["count",{"2":{"12":2,"38":3,"70":2,"83":1,"88":3,"89":1,"92":1,"135":1,"149":1,"151":1,"207":1,"215":1,"231":2,"257":2}}],["code",{"0":{"97":1,"110":1}}],["collector",{"2":{"124":7,"206":5}}],["collections",{"2":{"131":1}}],["collection",{"2":{"92":1}}],["collect",{"2":{"82":1,"124":1,"145":1,"206":1,"245":1}}],["copy",{"2":{"77":1}}],["combine",{"2":{"152":1,"162":1}}],["com",{"2":{"81":1,"96":1,"97":1,"98":1,"101":1,"102":1,"107":1,"111":2,"113":1,"114":1,"119":3,"230":1}}],["comment",{"2":{"227":1}}],["comments",{"2":{"57":1,"115":1}}],["commit",{"2":{"115":1}}],["communicate",{"2":{"104":1,"182":1}}],["common",{"0":{"36":1,"80":1},"1":{"37":1,"38":1,"39":1,"81":1,"82":1,"83":1,"84":1},"2":{"31":1,"57":1,"117":1,"184":1}}],["components",{"0":{"173":1},"2":{"171":1,"173":1}}],["composable",{"0":{"162":1}}],["composite",{"0":{"152":1}}],["composition",{"0":{"55":1,"180":1},"2":{"59":1,"109":1,"158":1,"170":1}}],["compose",{"2":{"42":1,"130":1,"171":1}}],["comprehensive",{"2":{"156":1,"262":1}}],["completion",{"2":{"154":1}}],["completed",{"2":{"101":1,"102":1,"125":3,"166":1,"205":1,"213":4}}],["completes",{"2":{"30":1}}],["complete",{"2":{"19":1,"39":1,"41":1,"148":1,"179":1,"205":1,"220":1,"257":1}}],["complex",{"0":{"51":1,"122":1},"1":{"52":1,"53":1,"54":1},"2":{"42":1,"55":1,"67":1,"130":1,"162":1,"163":1,"168":1,"170":1,"171":1,"228":1,"232":1}}],["computed",{"2":{"40":1}}],["convert",{"2":{"121":1,"185":2}}],["considerations",{"0":{"168":1}}],["consider",{"2":{"145":1,"168":2,"169":1,"202":1,"261":1}}],["consistent",{"2":{"41":2,"89":1,"226":1}}],["const",{"2":{"41":1,"89":1,"197":1}}],["constants",{"2":{"41":1}}],["constant",{"2":{"31":1}}],["containing",{"2":{"165":1}}],["content",{"2":{"233":1}}],["contents",{"2":{"93":1}}],["contextkey",{"2":{"197":3}}],["context",{"0":{"8":1,"84":1,"176":1,"197":1,"248":1},"1":{"9":1,"10":1},"2":{"2":2,"3":2,"9":4,"10":4,"12":2,"15":2,"18":1,"19":1,"25":2,"27":2,"30":2,"33":4,"34":4,"37":2,"38":2,"39":2,"40":2,"45":2,"56":6,"62":2,"63":2,"64":2,"66":6,"67":2,"69":2,"70":2,"71":2,"81":2,"82":2,"84":2,"86":2,"90":1,"101":5,"102":10,"103":2,"104":5,"111":2,"113":3,"119":6,"121":2,"123":4,"124":2,"125":4,"126":2,"128":2,"132":3,"135":2,"136":2,"138":2,"139":2,"140":2,"141":4,"142":2,"143":2,"144":4,"148":6,"149":2,"150":2,"151":2,"152":6,"153":2,"154":2,"155":4,"159":6,"163":4,"165":6,"166":4,"167":3,"168":4,"173":4,"175":4,"176":7,"178":6,"179":4,"181":4,"188":2,"194":7,"197":9,"201":4,"208":2,"211":3,"218":4,"219":4,"220":2,"221":2,"222":2,"223":6,"224":4,"225":2,"226":6,"230":2,"231":2,"232":2,"233":4,"234":2,"235":6,"236":4,"237":2,"241":2,"242":2,"243":2,"244":2,"245":2,"247":2,"248":3,"249":4,"254":2,"255":2,"256":2,"257":2,"258":2}}],["continue",{"2":{"30":2,"35":1,"38":1,"148":1,"178":3,"257":1}}],["control",{"2":{"29":1,"72":1,"105":1,"115":1,"120":1,"130":1,"143":1,"204":1,"208":1,"217":1,"225":1,"226":2,"262":1}}],["configpath",{"2":{"221":2,"236":2}}],["configs",{"2":{"164":2}}],["configurable",{"2":{"229":1}}],["configuration",{"0":{"81":1,"123":1,"135":1,"229":1,"232":1,"236":1,"241":1},"1":{"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1},"2":{"62":1,"81":1,"85":1,"115":1,"121":1,"123":2,"164":1,"221":3,"229":1,"230":1,"232":1,"236":2,"238":3}}],["configure",{"2":{"68":1,"145":1,"241":1}}],["configured",{"2":{"63":1,"99":1,"104":1,"233":1}}],["config",{"2":{"62":4,"76":1,"81":4,"85":1,"86":3,"104":7,"115":1,"121":3,"123":6,"135":2,"148":7,"164":5,"180":5,"192":1,"232":7,"236":6}}],["confirmation",{"2":{"22":1}}],["conflict",{"2":{"3":1}}],["conditions",{"2":{"126":1,"217":1,"223":1,"227":1}}],["conditionalfallbacknode",{"2":{"260":1}}],["conditional",{"0":{"126":1,"175":1,"217":1,"223":1,"260":1},"1":{"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1},"2":{"42":1,"262":1}}],["condition",{"2":{"13":1,"227":1}}],["concepts",{"2":{"28":1,"99":1,"117":1}}],["concerns",{"2":{"2":1}}],["concurrentnode",{"2":{"133":1}}],["concurrentbatch",{"2":{"120":1}}],["concurrent",{"0":{"120":1,"133":1},"2":{"13":1,"70":1,"79":1,"85":1,"119":1,"120":1,"129":1,"131":1,"132":1,"133":1,"134":1,"135":1,"145":1,"146":1,"156":1,"157":1,"202":1,"204":1,"238":1}}],["concurrency",{"0":{"11":1},"1":{"12":1,"13":1},"2":{"129":2,"130":1,"135":1,"145":2,"215":1}}],["connecting",{"2":{"35":1}}],["connections",{"0":{"46":1},"1":{"47":1,"48":1,"49":1},"2":{"31":1,"41":1,"44":1,"227":1}}],["connection",{"0":{"16":1},"2":{"16":1,"35":2,"178":1,"232":1}}],["connected",{"2":{"30":1}}],["connect",{"2":{"2":3,"6":3,"7":2,"30":2,"31":1,"33":2,"34":3,"35":2,"42":1,"43":1,"44":2,"47":3,"48":4,"49":3,"50":3,"52":4,"53":5,"54":5,"55":3,"56":2,"58":4,"72":1,"102":1,"114":1,"122":5,"127":2,"160":4,"161":2,"162":5,"163":2,"164":2,"165":3,"166":2,"172":4,"173":5,"174":9,"175":3,"177":5,"178":3,"179":5,"180":1,"181":1,"218":2,"219":4,"223":3,"224":8,"225":2}}],["cascading",{"2":{"243":1,"258":1,"262":1}}],["cases",{"2":{"41":1,"105":1,"202":1,"227":1}}],["case",{"2":{"9":1,"18":2,"39":2,"126":3,"144":3,"151":3,"152":1,"154":2,"180":3,"194":2,"210":2,"211":2,"219":3,"249":3,"260":3}}],["cacheentry",{"2":{"255":3}}],["cachedapinode",{"2":{"244":3,"255":3}}],["cached",{"0":{"255":1},"2":{"237":2,"244":5,"255":3,"256":3,"258":1,"260":1}}],["cache",{"2":{"237":6,"244":5,"255":7,"256":4}}],["captured",{"2":{"230":1,"238":1}}],["calculate",{"2":{"222":1}}],["called",{"2":{"241":1}}],["callflakeyapi",{"2":{"241":1}}],["call",{"2":{"167":1,"198":1}}],["callservice",{"2":{"243":1,"258":1}}],["calls",{"2":{"161":1}}],["callapi",{"2":{"10":1,"143":1,"188":1,"242":1,"247":1}}],["carefully",{"2":{"88":1}}],["can",{"2":{"40":1,"41":1,"50":1,"63":1,"79":1,"177":1}}],["cancelled",{"2":{"220":2}}],["cancellation",{"0":{"9":1},"2":{"71":1}}],["cancel",{"2":{"10":2,"144":2,"194":2,"220":2,"249":2}}],["categorynode",{"2":{"34":5,"219":6}}],["centralized",{"2":{"53":1}}],["centralize",{"2":{"7":1}}],["ctx",{"2":{"2":1,"3":1,"9":4,"10":4,"12":1,"13":2,"15":1,"18":3,"19":2,"25":1,"27":1,"30":1,"33":2,"34":2,"37":1,"38":1,"39":1,"40":1,"45":2,"56":3,"62":1,"63":1,"64":1,"66":3,"67":2,"69":1,"70":1,"81":1,"82":1,"84":1,"86":1,"101":3,"102":6,"103":1,"104":4,"111":2,"113":1,"119":4,"121":1,"123":2,"124":1,"125":2,"126":1,"128":1,"132":3,"135":1,"136":2,"138":1,"139":1,"140":1,"141":2,"142":1,"143":2,"144":2,"148":3,"149":1,"150":2,"151":2,"152":4,"153":2,"154":3,"155":2,"159":3,"163":2,"165":3,"166":2,"167":5,"168":2,"173":2,"175":2,"176":2,"178":3,"179":2,"181":1,"188":1,"194":9,"197":6,"201":1,"208":2,"211":3,"218":2,"219":2,"220":1,"221":1,"222":1,"223":3,"224":2,"225":1,"226":3,"230":1,"231":1,"232":2,"233":2,"234":1,"235":6,"236":2,"237":3,"241":1,"242":1,"243":1,"244":1,"245":1,"247":1,"248":1,"249":5,"254":1,"255":1,"256":1,"257":1,"258":1}}],["name",{"2":{"56":4,"57":1,"121":2,"138":2,"153":6,"155":2,"163":2,"166":3,"169":1,"182":1,"235":4}}],["names",{"2":{"41":1,"57":1,"169":1,"182":1,"227":2}}],["naming",{"0":{"89":1},"2":{"41":2}}],["number",{"2":{"22":1,"92":1}}],["nesting",{"0":{"175":1},"2":{"169":1,"171":1,"182":1,"227":1}}],["nested",{"0":{"127":1,"171":1,"172":1,"176":1,"179":1,"181":1},"1":{"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1},"2":{"42":1,"59":1,"130":1,"169":1,"170":1,"175":1,"176":1,"177":1,"179":1,"181":1,"182":2}}],["negative",{"2":{"136":1}}],["nextstate",{"2":{"220":5}}],["nextaction",{"2":{"40":2}}],["next",{"0":{"28":1,"42":1,"59":1,"72":1,"94":1,"99":1,"105":1,"117":1,"130":1,"146":1,"157":1,"170":1,"183":1,"203":1,"216":1,"228":1,"239":1,"251":1,"262":1},"2":{"29":1,"40":1,"64":2}}],["need",{"2":{"69":1,"81":1}}],["needsenrichment",{"2":{"224":3}}],["needsvalidation",{"2":{"224":3}}],["needsuserdata",{"2":{"25":1}}],["needs",{"2":{"25":1}}],["needed",{"2":{"25":1,"207":1}}],["network",{"2":{"21":1,"151":1,"247":1}}],["newcircuitbreakernode",{"2":{"243":1}}],["newcustomnode",{"2":{"148":1}}],["newreader",{"2":{"233":1}}],["newrequest",{"2":{"230":1,"233":1}}],["new32a",{"2":{"226":1}}],["newparallelprocessingnode",{"2":{"211":1}}],["newpriorityqueue",{"2":{"209":1}}],["newpriorityworkerpool",{"2":{"209":1}}],["newpool",{"2":{"207":2}}],["newpipeline",{"2":{"195":2}}],["newpipelinenode",{"2":{"152":1}}],["newloadbalancer",{"2":{"222":2}}],["newload",{"2":{"207":2}}],["newlimiter",{"2":{"143":1,"208":1}}],["newdecoder",{"2":{"230":1,"233":1}}],["newdynamicrouter",{"2":{"221":1}}],["newdynamicworkerpool",{"2":{"207":1}}],["newdatabasenode",{"2":{"67":1,"150":1}}],["newdatabaseflow",{"2":{"16":1}}],["newworkerpool",{"2":{"205":1,"206":1,"207":2,"208":1,"209":1,"210":1,"211":1,"212":1}}],["newvalidationnode",{"2":{"155":1}}],["newalgorithmnode",{"2":{"225":1}}],["newasyncnode",{"2":{"154":1}}],["newaccumulatornode",{"2":{"149":1}}],["newmocksharedstore",{"2":{"200":1}}],["newmonitorednode",{"2":{"153":1}}],["newmynode",{"2":{"69":1}}],["newsmartretrynode",{"2":{"151":1}}],["newstate",{"2":{"83":2,"148":1}}],["newsharedstore",{"2":{"19":1,"45":1,"74":1,"98":1,"101":1,"102":1,"104":1,"111":1,"119":1,"132":1,"167":1,"181":2}}],["newbatchflow",{"2":{"119":1,"120":2,"123":1,"125":1,"127":2}}],["newbatchnodewithconfig",{"2":{"135":1}}],["newbatchnodewithkeys",{"2":{"134":1}}],["newbatchnode",{"2":{"24":1,"132":1,"133":2,"136":1,"138":1,"139":1,"143":1,"144":1}}],["newbasenode",{"2":{"16":1,"67":1,"69":1,"148":1,"149":1,"150":1,"151":1,"152":1,"154":1,"155":1,"211":1,"221":1,"222":1,"225":1,"243":1}}],["newflow",{"2":{"2":1,"6":1,"7":1,"30":1,"33":1,"34":1,"35":1,"44":1,"47":1,"48":1,"49":1,"50":2,"52":1,"53":1,"54":1,"55":2,"58":1,"102":1,"114":1,"119":1,"122":1,"123":1,"124":1,"125":1,"127":1,"128":1,"160":2,"161":2,"162":4,"163":1,"164":2,"165":1,"166":1,"167":1,"168":1,"172":2,"173":3,"174":3,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"218":1,"219":1,"223":1,"224":1,"225":1}}],["new",{"0":{"113":1,"114":1},"2":{"2":1,"4":1,"13":2,"22":1,"106":1,"113":1,"119":1,"207":1,"220":1,"225":3}}],["newnode",{"2":{"2":1,"33":1,"34":1,"56":1,"66":1,"68":1,"101":1,"102":2,"103":1,"104":1,"113":1,"119":1,"123":1,"124":1,"125":1,"128":1,"141":1,"163":1,"165":1,"166":2,"167":1,"168":2,"173":2,"175":1,"176":1,"178":1,"179":2,"181":1,"201":1,"218":1,"219":1,"223":1,"224":1,"226":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"241":1}}],["no",{"2":{"35":2,"151":1,"218":1,"220":1,"244":1,"255":2,"261":1}}],["now",{"2":{"27":1,"78":1,"83":2,"84":1,"90":1,"102":1,"105":1,"128":1,"153":1,"213":1,"214":1,"235":1,"243":1,"248":1,"255":1,"258":1,"259":1}}],["notify",{"2":{"174":2}}],["not",{"2":{"21":2,"258":1,"260":1}}],["noerror",{"2":{"18":1,"19":1,"167":3,"181":2}}],["nodeconfig",{"2":{"164":2}}],["nodeb",{"2":{"48":2}}],["nodea",{"2":{"48":2}}],["node3",{"2":{"47":2}}],["node2",{"2":{"31":1,"35":1,"47":2,"56":1}}],["node1",{"2":{"31":1,"35":3,"47":2,"56":1,"82":1}}],["nodes",{"0":{"12":1,"18":1,"60":1,"65":1,"113":1,"149":1,"150":1,"152":1,"153":1,"154":1,"155":1,"167":1,"211":1,"231":1},"1":{"61":1,"62":1,"63":1,"64":1,"65":1,"66":2,"67":2,"68":1,"69":1,"70":1,"71":1,"72":1},"2":{"3":1,"12":1,"18":1,"42":1,"43":2,"44":1,"50":1,"56":2,"57":2,"59":1,"60":1,"67":1,"70":1,"71":1,"72":1,"73":1,"81":1,"82":1,"83":1,"94":1,"102":2,"104":1,"105":1,"109":1,"110":1,"113":3,"114":4,"115":3,"122":1,"147":1,"156":2,"161":1,"164":10,"167":1,"168":2,"169":3,"170":1,"197":1,"203":2,"211":1,"216":2,"229":1,"230":1,"233":1,"235":1,"239":1}}],["node",{"0":{"1":1,"13":1,"21":1,"50":1,"61":1,"67":1,"68":1,"101":1,"147":1,"148":1,"158":1,"159":1,"161":1,"201":1},"1":{"2":1,"3":1,"4":1,"62":1,"63":1,"64":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1},"2":{"2":3,"7":3,"13":3,"16":1,"18":3,"25":1,"29":1,"30":2,"41":1,"44":1,"50":1,"56":1,"60":1,"61":1,"66":2,"68":2,"71":1,"72":2,"81":2,"82":1,"84":1,"94":1,"101":5,"103":1,"104":2,"105":1,"109":4,"113":1,"115":1,"123":2,"124":2,"125":2,"128":2,"130":1,"132":1,"141":1,"143":1,"144":1,"153":1,"156":1,"158":2,"159":4,"160":3,"161":2,"163":1,"164":4,"167":1,"168":5,"170":1,"172":1,"176":2,"180":1,"183":2,"188":1,"201":2,"224":1,"226":1,"230":1,"231":1,"232":1,"233":2,"234":1,"235":6,"236":1,"237":1,"238":1,"239":2,"241":2,"248":2,"253":1}}],["n",{"2":{"3":1,"9":1,"10":1,"12":5,"15":1,"25":1,"27":1,"30":1,"62":1,"63":1,"64":1,"67":2,"69":1,"70":5,"76":1,"77":1,"81":1,"82":1,"84":1,"93":1,"98":1,"101":1,"102":1,"103":1,"104":1,"111":1,"136":2,"140":5,"142":6,"148":9,"149":12,"150":17,"151":17,"152":2,"153":14,"154":13,"155":3,"188":1,"197":1,"205":1,"211":4,"220":3,"221":2,"222":7,"225":2,"234":3,"242":7,"243":9,"244":4,"246":2,"247":4,"248":4,"249":1,"254":2,"255":8,"256":6,"257":15,"258":19,"259":7,"260":2}}],["nilvalue",{"2":{"185":1}}],["nil",{"2":{"2":2,"4":2,"9":2,"12":1,"15":2,"18":1,"25":3,"27":3,"30":2,"31":1,"33":3,"34":4,"35":2,"37":3,"38":3,"39":3,"40":1,"45":1,"47":1,"56":4,"62":1,"63":3,"64":2,"66":3,"67":3,"69":1,"70":1,"81":1,"82":2,"84":3,"86":1,"91":2,"101":2,"102":5,"103":2,"104":2,"111":1,"113":1,"119":3,"121":3,"123":2,"124":1,"125":3,"126":2,"128":3,"132":1,"136":4,"138":1,"139":3,"140":1,"141":2,"142":1,"143":2,"144":4,"148":4,"149":3,"150":12,"151":6,"152":4,"153":1,"154":2,"155":6,"159":1,"163":2,"165":6,"166":2,"167":1,"168":2,"172":1,"173":2,"175":2,"176":2,"177":1,"178":6,"179":3,"180":1,"181":1,"185":1,"186":1,"188":2,"196":5,"198":1,"201":1,"202":1,"208":2,"209":1,"211":3,"213":1,"214":2,"218":3,"219":5,"220":2,"221":2,"222":2,"223":8,"224":5,"225":2,"226":4,"230":4,"231":1,"232":3,"233":4,"234":5,"236":4,"237":5,"241":3,"242":3,"243":4,"244":5,"245":2,"247":5,"248":4,"249":4,"254":4,"255":5,"256":7,"257":4,"258":6,"259":1,"260":5}}],["===========================",{"2":{"93":1}}],["===",{"2":{"93":2}}],["==",{"2":{"38":1,"82":1,"142":2,"155":1,"165":2,"178":2,"186":2,"188":1,"196":3,"220":1,"223":1,"237":1,"244":1,"255":1,"256":2}}],["=",{"2":{"2":8,"3":3,"6":3,"7":3,"9":5,"10":1,"12":1,"13":3,"15":2,"18":4,"19":5,"24":2,"25":1,"27":3,"30":1,"33":3,"34":3,"35":1,"37":2,"38":2,"39":1,"40":2,"41":4,"44":4,"45":5,"47":1,"48":1,"49":1,"50":2,"52":1,"53":1,"54":1,"55":7,"58":1,"62":2,"63":3,"66":1,"67":3,"68":1,"70":1,"74":1,"76":2,"77":2,"79":1,"81":1,"82":4,"84":2,"85":2,"86":2,"88":2,"89":4,"93":3,"98":2,"101":5,"102":9,"103":1,"104":5,"111":6,"114":3,"119":9,"120":2,"121":8,"122":7,"123":7,"124":6,"125":8,"126":8,"127":5,"128":5,"132":6,"133":2,"134":1,"135":3,"136":7,"138":3,"139":3,"140":2,"141":9,"142":7,"143":4,"144":8,"148":2,"149":4,"150":13,"151":10,"152":4,"153":4,"154":9,"155":4,"159":1,"160":2,"161":2,"162":13,"163":6,"164":10,"165":8,"166":5,"167":6,"168":4,"172":5,"173":6,"174":12,"175":3,"176":3,"177":3,"178":8,"179":8,"180":9,"181":6,"185":4,"186":4,"188":5,"189":5,"190":3,"191":6,"192":5,"193":4,"194":5,"195":6,"196":7,"197":4,"198":3,"200":2,"201":1,"205":4,"206":7,"207":5,"208":4,"209":3,"210":3,"211":12,"212":9,"213":4,"214":6,"218":4,"219":3,"220":8,"221":3,"222":6,"223":9,"224":5,"225":4,"226":9,"230":6,"231":3,"232":6,"233":14,"234":7,"235":4,"236":3,"237":3,"241":1,"242":3,"243":6,"244":4,"245":4,"246":2,"247":3,"248":3,"249":7,"254":2,"255":6,"256":3,"257":8,"258":5,"259":3}}],["ms",{"2":{"213":1}}],["m",{"2":{"192":2,"200":8}}],["md",{"2":{"109":1}}],["mysql",{"2":{"232":1}}],["myapp",{"2":{"116":4,"232":1}}],["myproject",{"2":{"111":1,"114":1}}],["my",{"2":{"107":2,"109":1}}],["mynode",{"2":{"30":1,"62":1,"63":1,"64":1,"69":4,"188":1}}],["middleware",{"0":{"166":1,"235":1}}],["milliseconds",{"2":{"153":1}}],["millisecond",{"2":{"135":1,"246":1}}],["minimal",{"2":{"256":2}}],["minimize",{"2":{"182":1}}],["min",{"2":{"207":4,"212":1}}],["minworkers",{"2":{"207":2}}],["mindful",{"2":{"129":1,"145":1,"169":1}}],["minutes",{"2":{"100":1}}],["mismatch",{"2":{"88":1}}],["meaningful",{"2":{"169":1,"182":1,"261":1}}],["memory",{"2":{"145":2}}],["message",{"2":{"136":1,"245":1,"256":1,"258":2,"260":2}}],["method",{"2":{"233":2}}],["methods",{"2":{"69":1,"159":1,"167":1}}],["metricsfallbacknode",{"2":{"259":2}}],["metrics",{"0":{"259":1},"2":{"153":12,"156":1,"215":1,"237":2,"259":2}}],["metadata",{"2":{"78":1,"90":2,"255":1}}],["mergemaps",{"2":{"192":2}}],["merged",{"2":{"119":1}}],["merge",{"0":{"78":1,"192":1},"2":{"52":1,"78":2,"179":2,"224":1}}],["mergenode",{"2":{"48":2,"52":2,"162":2,"179":3,"224":4}}],["mediumhandler",{"2":{"34":1,"219":1}}],["medium",{"2":{"34":2,"219":2}}],["mocksharedstore",{"2":{"200":5}}],["mocksubflow",{"2":{"181":2}}],["mock",{"0":{"200":1}}],["mocked",{"2":{"181":2}}],["more",{"2":{"151":1,"207":1}}],["monitoredpool",{"2":{"213":3}}],["monitorednode",{"2":{"153":5}}],["monitor",{"2":{"142":1,"145":1,"215":1,"227":1,"250":1,"261":1}}],["monitoring",{"0":{"26":1,"153":1,"213":1},"1":{"27":1},"2":{"156":1}}],["modify",{"2":{"238":1}}],["mode",{"2":{"126":5,"133":1}}],["module",{"2":{"109":1}}],["modular",{"0":{"6":1},"2":{"171":1,"173":1}}],["mod",{"2":{"107":1,"109":1}}],["most",{"2":{"31":1,"227":1}}],["marshal",{"2":{"233":1}}],["mark3labs",{"2":{"96":1,"97":1,"98":1,"101":1,"102":1,"107":1,"111":1,"113":1,"114":1}}],["many",{"2":{"168":1,"169":1,"182":1}}],["managing",{"0":{"150":1}}],["manage",{"2":{"129":1,"156":1,"204":1,"234":1}}],["management",{"0":{"10":1,"14":1,"83":1,"234":1},"1":{"15":1,"16":1},"2":{"71":1,"147":1,"156":1,"157":1,"228":1}}],["maxconns",{"2":{"232":3}}],["maxworkers",{"2":{"207":4}}],["maxretries",{"2":{"188":4,"248":1}}],["max",{"2":{"178":2,"207":2}}],["maxdepth",{"2":{"165":2,"178":2}}],["maxsize",{"2":{"149":6}}],["math",{"2":{"151":1,"242":1}}],["matching",{"2":{"139":1}}],["make",{"2":{"121":1,"123":1,"126":1,"141":1,"142":1,"144":2,"149":1,"150":1,"154":3,"182":1,"186":1,"189":2,"192":1,"193":1,"194":1,"195":1,"202":1,"206":1,"210":2,"211":3,"212":1,"218":1,"234":1,"249":2,"257":2,"261":1}}],["makedecisionpost",{"2":{"37":1}}],["magic",{"2":{"41":1}}],["maps",{"0":{"192":1},"2":{"192":2}}],["mapnode",{"2":{"138":1}}],["mapfunc",{"2":{"138":2}}],["map",{"0":{"138":1,"189":1},"2":{"40":1,"62":1,"63":1,"76":1,"78":2,"81":1,"84":1,"85":1,"90":2,"102":2,"104":2,"119":2,"121":1,"128":2,"149":1,"150":2,"153":2,"163":2,"176":1,"179":1,"192":3,"200":2,"213":2,"220":2,"221":2,"222":3,"223":3,"224":1,"225":2,"226":2,"230":1,"232":1,"233":6,"236":2,"244":2,"254":1,"255":2,"256":2,"257":1,"258":2,"260":3}}],["machines",{"2":{"228":1}}],["machine",{"0":{"39":1,"220":1}}],["maintain",{"2":{"149":1,"231":1}}],["maintains",{"2":{"133":1}}],["maintainable",{"2":{"0":1}}],["main",{"0":{"111":1},"2":{"50":1,"63":2,"81":1,"98":3,"101":2,"102":2,"104":1,"107":1,"109":1,"111":2,"172":1,"181":1}}],["mainflow",{"2":{"6":1,"50":3,"160":3,"161":3,"163":3,"172":3,"175":4,"177":7,"179":6,"181":3}}],["must",{"2":{"179":1}}],["multilevelfallbacknode",{"2":{"256":3}}],["multi",{"0":{"34":1,"219":1,"256":1},"2":{"174":1}}],["multiple",{"2":{"6":1,"48":1,"59":1,"78":1,"79":1,"81":1,"82":1,"102":1,"118":2,"120":1,"146":1,"152":1,"173":1,"196":1,"198":1,"219":1,"256":1}}],["mutexes",{"2":{"238":1}}],["mutex",{"2":{"12":1,"70":1,"124":1,"140":1,"149":1,"196":1,"198":1,"206":1,"209":1,"222":1,"231":1}}],["mu",{"2":{"12":3,"70":3,"124":3,"140":3,"149":3,"150":7,"196":5,"198":3,"200":5,"206":3,"207":3,"209":1,"214":5,"222":3,"231":3,"255":5}}],["much",{"2":{"2":1}}],["❌",{"2":{"2":1,"4":1,"13":1}}],["weight",{"2":{"222":5}}],["weights",{"2":{"222":6}}],["weighted",{"0":{"222":1}}],["were",{"2":{"167":1}}],["well",{"2":{"2":1,"60":1,"71":1,"182":1,"202":1}}],["wrapper",{"0":{"194":1}}],["wrapped",{"2":{"166":4}}],["wrap",{"2":{"166":1,"235":1}}],["write",{"2":{"57":1,"150":1,"156":1,"226":1,"227":1}}],["why",{"2":{"261":1}}],["which",{"2":{"222":1,"224":1,"227":1}}],["where",{"2":{"202":1}}],["wherever",{"2":{"160":1}}],["whether",{"2":{"129":1,"145":1}}],["when",{"2":{"24":1,"25":1,"30":1,"91":1,"115":1,"145":1,"161":2,"167":1,"169":1,"215":1,"250":1,"252":1,"255":1,"257":1,"261":1}}],["what",{"0":{"108":1},"1":{"109":1,"110":1,"111":1},"2":{"115":1,"169":1,"182":1,"261":1}}],["world",{"2":{"105":1,"117":1,"195":2}}],["workload",{"2":{"215":1}}],["working",{"2":{"110":1}}],["workerpool",{"2":{"204":1,"207":1,"208":1,"209":1,"210":1,"211":1,"213":1,"214":1}}],["workers",{"2":{"135":1,"154":7,"189":2,"205":1,"207":1,"208":2,"209":5,"210":2,"211":2,"212":2,"215":1}}],["worker",{"0":{"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1},"1":{"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1},"2":{"79":1,"130":1,"146":1,"154":2,"157":1,"205":1,"206":1,"207":1,"211":1,"215":3,"216":1}}],["work",{"0":{"30":1},"2":{"60":1,"63":1,"261":1}}],["workflowcontext",{"2":{"90":2}}],["workflow",{"2":{"29":1,"83":3,"99":1,"100":1,"102":1,"105":1,"109":1,"171":1,"174":1,"178":1}}],["workflows",{"0":{"162":1,"174":1},"2":{"0":1,"19":1,"42":1,"43":1,"60":1,"72":1,"105":1,"118":1,"130":1,"162":1,"171":1,"184":1,"228":1,"240":1,"252":1}}],["wg",{"2":{"79":4,"142":4,"154":4,"189":4,"211":4}}],["waits",{"2":{"215":1}}],["waitgroup",{"2":{"79":1,"142":1,"154":1,"189":1,"211":1}}],["wait",{"2":{"68":1,"79":1,"142":1,"143":2,"154":2,"189":1,"205":2,"206":1,"208":2,"211":2,"212":1,"241":1,"261":1}}],["way",{"0":{"34":1,"219":1},"2":{"66":1,"106":1}}],["wisely",{"2":{"145":1}}],["will",{"2":{"63":1,"100":1,"134":1,"241":1,"247":1,"254":1}}],["withexecfallbackfunc",{"2":{"241":1}}],["withexecfunc",{"2":{"2":1,"33":1,"34":1,"56":1,"66":1,"68":1,"101":1,"102":2,"103":1,"104":1,"113":1,"119":1,"123":1,"124":1,"128":1,"141":1,"163":1,"165":1,"166":2,"167":1,"168":2,"173":2,"175":1,"176":1,"178":1,"179":1,"181":1,"201":1,"218":1,"219":1,"223":1,"224":1,"226":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"241":1}}],["withvalue",{"2":{"197":1}}],["withrequestid",{"2":{"197":1}}],["withlogging",{"2":{"166":2,"235":2}}],["within",{"2":{"127":1,"130":1,"171":1,"211":1}}],["withwait",{"2":{"68":1,"69":1,"103":1,"241":1}}],["withmaxretries",{"2":{"68":1,"69":1,"103":1,"241":1}}],["withprepfunc",{"2":{"56":1,"66":1,"102":1,"104":1,"119":1,"141":1,"165":1,"176":1,"178":1,"179":1,"223":1,"226":1,"233":1,"235":1,"236":1}}],["withpostfunc",{"2":{"33":1,"34":1,"56":1,"66":1,"102":1,"125":1,"163":1,"165":1,"175":1,"178":1,"218":1,"219":1,"223":1,"224":1,"226":1,"235":1}}],["with",{"0":{"96":1,"123":1,"125":1,"144":1,"206":1,"210":1,"212":1,"246":1,"259":1},"2":{"30":1,"42":1,"44":1,"45":1,"58":1,"60":1,"67":1,"68":1,"72":1,"99":1,"101":3,"102":1,"105":1,"109":1,"110":1,"111":1,"118":1,"119":1,"122":1,"129":2,"131":1,"132":1,"135":1,"145":2,"146":1,"147":1,"151":1,"166":1,"168":1,"176":1,"179":1,"181":1,"204":1,"205":1,"207":1,"211":1,"214":1,"215":2,"216":1,"223":1,"224":1,"225":1,"229":1,"235":1,"240":1,"242":1}}],["withtimeout",{"2":{"10":1,"144":1,"194":3,"249":1}}],["w",{"2":{"4":1,"152":1,"188":1,"211":1,"245":1,"247":1,"249":1,"255":1}}],["during",{"2":{"252":1,"261":1}}],["duration",{"2":{"144":1,"151":2,"188":2,"194":1,"198":1,"210":2,"213":2,"214":1,"242":2,"243":1,"246":3,"258":1}}],["due",{"2":{"244":1,"255":1,"256":2}}],["dms",{"2":{"153":2}}],["dsn",{"2":{"150":2,"232":2}}],["distribution",{"2":{"226":3}}],["distribute",{"2":{"222":1}}],["disabled",{"2":{"225":2}}],["dispatch",{"2":{"209":2}}],["dispatcher",{"2":{"209":1}}],["disconnect",{"2":{"174":2}}],["difficult",{"2":{"182":1}}],["different",{"2":{"57":1,"118":1,"163":1,"185":1,"224":1,"260":1}}],["dive",{"2":{"105":1,"228":1}}],["directly",{"2":{"167":1}}],["directory",{"2":{"92":1,"113":1,"114":1}}],["dir",{"2":{"92":1}}],["diagrams",{"2":{"57":1}}],["diamond",{"0":{"52":1}}],["dynamicrouter",{"2":{"221":4}}],["dynamicworkerpool",{"2":{"207":5}}],["dynamically",{"2":{"175":1,"217":1}}],["dynamicflow",{"2":{"163":1}}],["dynamicpost",{"2":{"40":1}}],["dynamic",{"0":{"40":1,"121":1,"163":1,"180":1,"207":1,"221":1,"236":1},"2":{"29":1,"151":1,"262":1}}],["d",{"2":{"4":1,"27":1,"70":1,"76":1,"79":1,"103":1,"125":2,"136":1,"142":2,"152":1,"188":1,"196":1,"205":1,"231":1,"232":1,"242":1,"245":3,"257":1,"259":1}}],["dbnode",{"2":{"232":1}}],["dbop",{"2":{"174":3}}],["db",{"2":{"3":1,"16":8,"67":7,"150":5,"232":3,"237":4}}],["degraded",{"2":{"254":1,"258":1,"261":1}}],["degrade",{"2":{"250":1}}],["degradation",{"2":{"157":1,"244":1,"251":1,"252":1}}],["decode",{"2":{"230":1,"233":1}}],["decisions",{"2":{"218":1}}],["decisionnode",{"2":{"48":3}}],["decides",{"2":{"224":1}}],["decide",{"2":{"129":1,"145":1}}],["delay",{"2":{"198":2}}],["debounce",{"0":{"198":1},"2":{"198":2}}],["debugsharedstore",{"2":{"93":1}}],["debug",{"2":{"56":2}}],["debugging",{"0":{"56":1,"93":1},"2":{"56":2,"57":1,"84":1,"93":1,"182":1,"248":1,"250":1}}],["demand",{"2":{"164":1}}],["demonstrateflowlifecycle",{"2":{"161":1}}],["demonstrates",{"2":{"110":1}}],["details",{"0":{"186":1},"2":{"170":1}}],["detailederrornode",{"2":{"248":2}}],["detailed",{"2":{"156":1}}],["determines",{"2":{"64":1}}],["determine",{"2":{"29":1,"64":1,"222":1,"226":1}}],["deps",{"2":{"237":7}}],["depth+1",{"2":{"165":1,"178":1}}],["depth",{"2":{"165":9,"178":11}}],["depthcheck",{"2":{"165":4}}],["dependency",{"0":{"237":1}}],["dependencies",{"2":{"107":1,"182":1,"237":4}}],["dependent",{"2":{"145":1}}],["deployment",{"0":{"116":1},"2":{"116":1}}],["deep",{"2":{"105":1,"182":1,"227":1,"228":1}}],["definitions",{"2":{"109":1}}],["defined",{"2":{"60":1,"182":1}}],["define",{"2":{"41":1,"43":1,"119":1,"132":1,"156":1}}],["defer",{"2":{"10":1,"15":2,"27":1,"67":1,"71":1,"79":1,"91":1,"142":1,"144":1,"149":1,"150":3,"189":2,"194":1,"196":1,"198":1,"200":2,"207":1,"211":1,"214":1,"222":1,"230":1,"232":1,"233":1,"234":1,"249":1}}],["defaults",{"2":{"261":1}}],["defaultvaluenode",{"2":{"254":3}}],["defaultconfig",{"2":{"192":1}}],["default",{"0":{"31":1},"2":{"9":1,"31":1,"39":1,"69":1,"126":1,"151":1,"152":1,"219":1,"221":1,"244":1,"254":4,"256":1,"258":1,"260":1}}],["defaultaction",{"2":{"2":2,"6":2,"31":3,"44":2,"47":3,"48":2,"49":1,"50":3,"52":2,"53":2,"54":3,"55":2,"56":3,"58":2,"66":1,"82":1,"84":1,"102":2,"114":1,"122":2,"125":1,"127":2,"160":3,"161":2,"162":4,"164":2,"165":1,"166":2,"167":1,"172":2,"173":3,"174":5,"177":2,"178":1,"179":2,"180":1,"181":1,"221":1,"222":1,"224":2,"248":1}}],["descriptive",{"2":{"4":1,"41":1,"57":1,"89":1,"227":1}}],["design",{"0":{"1":1,"5":1},"1":{"2":1,"3":1,"4":1,"6":1,"7":1},"2":{"3":1,"71":1}}],["datasets",{"2":{"141":1}}],["databaseconfig",{"2":{"232":3}}],["database",{"2":{"119":1,"121":1,"232":3,"237":1}}],["databasenode",{"2":{"16":1,"67":4,"150":6}}],["databaseflow",{"2":{"16":4}}],["data",{"0":{"90":1},"2":{"2":4,"3":9,"21":3,"22":2,"25":2,"33":2,"45":2,"54":1,"59":1,"62":4,"63":2,"73":1,"77":1,"90":1,"91":2,"93":2,"101":2,"102":11,"104":1,"111":1,"119":3,"121":3,"134":4,"135":1,"142":2,"145":2,"149":1,"155":1,"176":2,"179":5,"181":1,"185":1,"189":2,"200":4,"206":2,"211":2,"218":3,"221":2,"224":3,"230":4,"233":3,"236":2,"244":6,"254":1,"255":11,"256":6,"259":1,"260":2,"261":1}}],["down",{"2":{"207":1}}],["double",{"2":{"150":1}}],["don",{"2":{"128":1,"215":1,"238":1,"247":2,"250":1,"261":1}}],["done",{"2":{"9":1,"35":1,"39":1,"79":2,"91":1,"142":1,"144":1,"152":1,"154":5,"189":1,"194":4,"210":3,"211":5,"215":1,"220":1,"249":1}}],["docker",{"2":{"116":3}}],["document",{"0":{"21":1,"22":1},"2":{"41":1,"57":1,"58":1,"92":1,"115":1,"156":1,"169":2,"182":2,"202":1,"227":1,"238":1,"261":1}}],["documentation",{"0":{"20":1,"92":1},"1":{"21":1,"22":1},"2":{"109":1,"156":1,"238":1}}],["does",{"2":{"21":1,"115":1}}],["doing",{"2":{"2":1}}],["do",{"2":{"2":1,"3":1,"71":1,"230":1,"233":1}}],["system",{"2":{"228":1,"261":1}}],["sync",{"2":{"12":1,"70":1,"79":1,"124":1,"140":1,"142":1,"149":1,"150":1,"154":1,"189":1,"196":1,"198":1,"200":1,"206":1,"207":1,"209":1,"211":1,"214":1,"222":1,"231":1,"244":1,"255":1,"256":1}}],["slice",{"0":{"191":1,"193":1},"2":{"186":1,"191":5,"193":2}}],["slices",{"2":{"185":1}}],["sleep",{"2":{"135":1,"188":1}}],["smartretrynode",{"2":{"151":6}}],["smaller",{"2":{"168":1}}],["smallhandler",{"2":{"34":1,"219":1}}],["small",{"2":{"34":2,"219":2}}],["skip",{"2":{"139":1,"224":5}}],["scaledown",{"2":{"207":1}}],["scaleup",{"2":{"207":2}}],["scale",{"2":{"207":2}}],["scaling",{"0":{"207":1}}],["scanresults",{"2":{"150":1}}],["scenarios",{"2":{"129":1,"238":1}}],["schemanode",{"2":{"162":3}}],["schemacheck",{"2":{"6":3,"172":4}}],["scheme",{"2":{"41":1}}],["sophisticated",{"2":{"122":1,"147":1,"203":1}}],["sources",{"2":{"256":1}}],["source",{"2":{"90":1,"254":1,"256":3}}],["specific",{"2":{"247":1}}],["specialized",{"2":{"233":2}}],["sprintf",{"2":{"70":1,"79":1,"132":1,"155":1,"230":2,"231":1,"232":1,"245":1}}],["splitnode",{"2":{"52":3,"179":4,"224":6}}],["split",{"2":{"52":1,"179":2,"224":1}}],["switch",{"2":{"39":1,"126":1,"151":1,"180":1,"219":1,"260":1}}],["simplify",{"2":{"184":1}}],["simplest",{"2":{"66":1}}],["simpler",{"2":{"55":1,"162":1}}],["simple",{"0":{"33":1,"218":1},"2":{"47":1,"57":1,"98":1,"101":1,"102":1,"132":1,"163":1,"167":1,"168":1,"227":1}}],["simulate",{"2":{"103":1}}],["sizes",{"2":{"129":1}}],["size",{"2":{"85":1,"121":1,"145":1,"215":1}}],["since",{"2":{"27":1,"153":1,"213":1,"214":1,"235":1,"243":1,"255":1,"258":2}}],["singleitem",{"2":{"185":1}}],["single",{"0":{"2":1},"2":{"44":1,"60":1,"71":1,"130":1,"169":1,"182":1,"185":2,"186":1}}],["s",{"0":{"108":1},"1":{"109":1,"110":1,"111":1},"2":{"29":1,"56":3,"77":1,"93":1,"101":2,"102":1,"103":1,"126":1,"136":1,"153":2,"155":2,"161":1,"166":2,"195":2,"197":1,"224":1,"230":2,"232":4,"235":4,"244":1}}],["sum32",{"2":{"226":1}}],["sumnode",{"2":{"140":2}}],["succeeded",{"2":{"153":1}}],["successnode",{"2":{"177":1,"223":1}}],["successes",{"2":{"153":4}}],["success",{"0":{"37":1},"2":{"21":1,"27":1,"30":1,"37":1,"49":1,"64":1,"98":2,"103":1,"111":1,"151":1,"153":1,"214":1,"223":5,"242":1,"243":1,"255":1,"257":2}}],["successfully",{"2":{"21":1,"98":2,"102":1}}],["successful",{"2":{"18":1,"244":1}}],["subshared",{"2":{"181":3}}],["submitted",{"2":{"213":4}}],["submit",{"2":{"154":1,"205":2,"206":1,"207":2,"208":2,"209":2,"210":2,"211":1,"212":1,"213":2,"214":2}}],["subflow",{"2":{"50":4,"161":7,"177":5,"181":2}}],["sub",{"2":{"6":1,"50":2,"57":1,"161":1,"172":1,"179":1,"181":2}}],["sql",{"2":{"16":2,"67":2,"150":11,"232":1,"237":1}}],["stmt",{"2":{"150":14}}],["storage",{"0":{"81":1}}],["storeint32",{"2":{"214":2}}],["storeerror",{"2":{"128":1}}],["stored",{"2":{"77":1}}],["store",{"0":{"73":1,"104":1},"1":{"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1},"2":{"59":1,"64":1,"73":1,"76":1,"81":1,"84":1,"85":2,"90":1,"101":1,"111":1,"115":1,"121":1,"128":1,"132":1,"212":1,"244":1,"256":1}}],["stores",{"2":{"21":1}}],["stop",{"2":{"35":2,"129":1,"198":1}}],["stepflow",{"2":{"180":7}}],["step3",{"2":{"168":1}}],["step2",{"2":{"168":1}}],["step1",{"2":{"168":1}}],["step",{"2":{"29":1,"180":5}}],["steps",{"0":{"28":1,"42":1,"59":1,"72":1,"94":1,"99":1,"105":1,"117":1,"130":1,"146":1,"157":1,"170":1,"183":1,"203":1,"216":1,"228":1,"239":1,"251":1,"262":1},"2":{"180":1}}],["strategies",{"2":{"240":1,"256":1,"262":1}}],["stringslice",{"2":{"185":1}}],["strings",{"2":{"29":1,"41":1,"155":1,"195":3}}],["string",{"2":{"15":1,"22":3,"33":1,"34":1,"39":1,"40":2,"56":1,"62":1,"63":1,"67":1,"76":1,"78":3,"81":2,"83":1,"84":1,"85":2,"90":5,"92":2,"102":4,"104":2,"119":2,"121":1,"126":1,"128":2,"132":1,"149":1,"150":4,"153":4,"155":2,"163":4,"165":2,"166":1,"173":1,"175":1,"176":1,"178":2,"179":1,"185":1,"190":1,"192":3,"194":1,"195":3,"197":4,"200":4,"209":1,"213":2,"218":1,"219":1,"220":7,"221":6,"222":3,"223":3,"224":2,"225":3,"226":5,"230":3,"232":6,"233":11,"234":1,"235":1,"236":3,"244":3,"248":2,"254":1,"255":4,"256":3,"257":1,"258":3,"260":3}}],["structs",{"2":{"232":1}}],["structured",{"2":{"90":1}}],["structure",{"0":{"22":1,"90":1,"109":1},"2":{"58":2}}],["struct",{"2":{"12":1,"16":1,"21":1,"22":1,"67":1,"69":1,"70":1,"90":1,"124":1,"125":1,"140":1,"142":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":2,"154":2,"155":1,"163":1,"164":1,"189":2,"194":1,"195":1,"196":1,"200":1,"206":1,"207":1,"208":1,"209":2,"210":1,"211":2,"213":1,"214":1,"220":1,"221":1,"222":1,"225":1,"232":1,"237":1,"242":1,"243":1,"244":1,"248":1,"254":1,"255":2,"256":1,"257":1,"258":1,"259":1}}],["standalone",{"2":{"169":1}}],["stage",{"2":{"152":3,"195":4}}],["stages",{"2":{"152":5,"195":5}}],["status",{"2":{"78":1,"128":1,"244":1,"254":1,"256":1,"257":1,"258":2,"260":1}}],["statetransitions",{"2":{"220":2}}],["statemachine",{"2":{"220":3}}],["statement",{"2":{"150":1}}],["stateful",{"0":{"149":1,"231":1}}],["statepost",{"2":{"39":1}}],["state",{"0":{"39":1,"83":1,"220":1},"2":{"12":1,"39":3,"67":1,"83":5,"147":1,"148":8,"149":1,"220":10,"228":2,"229":1,"231":1,"238":1}}],["starting",{"2":{"166":1,"235":1}}],["starttime",{"2":{"90":2}}],["start",{"0":{"100":1},"1":{"101":1,"102":1,"103":1,"104":1,"105":1},"2":{"27":2,"44":1,"57":1,"58":1,"83":1,"99":2,"101":1,"106":1,"153":2,"154":1,"161":1,"209":1,"213":2,"220":1,"235":2}}],["startnode",{"2":{"7":2,"30":3,"44":3,"49":3,"53":3,"58":2,"114":3,"161":3,"164":2,"173":2,"177":2,"180":3,"181":2}}],["shipment",{"2":{"22":1}}],["share",{"2":{"59":1}}],["sharedstore",{"0":{"74":1,"200":1},"2":{"21":1,"22":2,"25":1,"30":1,"33":1,"34":1,"37":1,"38":1,"39":1,"40":1,"45":1,"56":3,"62":2,"64":1,"66":2,"73":1,"79":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":3,"92":1,"93":2,"94":2,"102":2,"104":2,"110":1,"115":1,"119":3,"121":1,"123":1,"125":2,"126":1,"141":1,"148":2,"155":1,"159":2,"163":1,"165":2,"175":1,"176":1,"178":2,"179":1,"190":1,"218":1,"219":1,"220":1,"221":1,"222":1,"223":2,"224":1,"225":1,"226":2,"233":1,"235":2,"236":1,"248":1}}],["shared",{"0":{"13":1,"73":1,"104":1,"176":1},"1":{"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1},"2":{"12":1,"13":2,"19":4,"24":1,"25":2,"30":1,"33":1,"34":1,"37":1,"38":3,"39":4,"40":1,"45":4,"56":3,"59":1,"62":3,"64":2,"66":2,"74":1,"76":3,"77":1,"78":1,"79":1,"81":3,"82":3,"83":6,"84":2,"85":4,"86":3,"88":1,"90":1,"91":2,"93":2,"98":3,"101":3,"102":6,"104":5,"111":6,"119":6,"121":3,"123":2,"125":2,"126":2,"132":5,"134":1,"136":2,"141":2,"148":4,"155":1,"159":2,"163":1,"165":4,"167":3,"175":1,"176":3,"178":4,"179":5,"185":1,"190":3,"218":1,"219":1,"220":3,"221":1,"222":1,"223":4,"224":1,"225":1,"226":4,"233":3,"234":1,"235":4,"236":1,"238":1,"248":2}}],["sharing",{"2":{"13":1,"73":1}}],["shouldprocess",{"2":{"126":1}}],["should",{"2":{"2":1,"41":1,"70":1,"71":1,"98":1,"129":2,"169":1,"182":2,"202":1,"261":1}}],["service",{"2":{"256":1,"258":1,"260":1,"261":2}}],["services",{"2":{"250":1}}],["server3",{"2":{"222":1}}],["server2",{"2":{"222":1}}],["server1",{"2":{"222":1}}],["secret",{"2":{"230":1,"232":1}}],["secondary",{"2":{"256":2}}],["secondaryurl",{"2":{"256":2}}],["seconds",{"2":{"68":1,"255":1}}],["second",{"2":{"10":1,"68":1,"69":1,"103":1,"151":1,"188":1,"194":1,"198":1,"230":1,"241":2,"242":1,"243":1,"246":1,"249":1}}],["self",{"2":{"223":1}}],["selectiveretrynode",{"2":{"247":2}}],["selective",{"0":{"247":1}}],["selection",{"0":{"163":1},"2":{"163":1}}],["selector",{"2":{"163":5}}],["select",{"2":{"9":1,"144":1,"152":1,"154":1,"194":1,"210":1,"211":1,"249":1}}],["semaphore",{"2":{"189":3}}],["sensitive",{"2":{"91":2}}],["sends",{"2":{"22":1}}],["sequentialnode",{"2":{"133":1}}],["sequentialbatch",{"2":{"120":1}}],["sequential",{"0":{"120":1,"133":1},"2":{"47":1,"120":1,"131":1,"133":1,"145":1}}],["see",{"2":{"28":1,"98":1,"117":1,"203":1}}],["setmaxidleconns",{"2":{"150":1}}],["setmaxopenconns",{"2":{"150":1,"232":1}}],["setup",{"0":{"107":1},"2":{"124":1}}],["sets",{"2":{"22":1}}],["set",{"0":{"76":1},"2":{"3":1,"10":1,"19":1,"24":1,"38":1,"39":2,"45":1,"64":1,"76":3,"79":1,"81":1,"82":1,"83":5,"84":1,"85":2,"90":1,"91":2,"98":1,"102":1,"104":2,"111":2,"119":1,"129":1,"132":2,"134":1,"136":1,"144":1,"145":1,"148":1,"165":1,"176":1,"178":1,"179":2,"181":1,"185":1,"200":1,"215":1,"220":1,"223":1,"226":1,"230":1,"233":1,"237":1,"248":1,"250":1,"261":1}}],["separate",{"2":{"2":1}}],["same",{"2":{"118":1,"123":1}}],["safeget",{"2":{"190":2}}],["safenode",{"2":{"70":2}}],["safe",{"0":{"12":1,"190":1},"2":{"70":1,"73":1,"79":1,"88":1,"156":1,"202":1,"254":1}}],["safety",{"0":{"11":1,"70":1,"79":1,"88":1},"1":{"12":1,"13":1},"2":{"156":1,"202":1,"238":1}}],["safely",{"2":{"3":1,"71":1,"79":1,"190":1}}],["savedebounced",{"2":{"198":4}}],["savenode",{"2":{"2":2,"3":1,"7":1,"50":1,"53":2,"54":1,"58":1,"122":2,"160":1}}],["savetodatabase",{"2":{"2":1,"198":1}}],["save",{"2":{"2":1,"58":1,"180":1}}],["r",{"2":{"189":4}}],["rv",{"2":{"186":5}}],["rule",{"2":{"155":3}}],["rules",{"2":{"155":5}}],["runs",{"2":{"161":2}}],["runlock",{"2":{"150":1,"200":1,"214":1,"255":1}}],["runtime",{"2":{"29":1,"40":1,"121":1,"163":1,"180":1,"217":1,"236":1}}],["run",{"2":{"13":2,"19":1,"45":2,"98":2,"101":2,"102":2,"104":1,"107":2,"111":2,"116":2,"118":1,"119":3,"132":2,"136":1,"146":1,"181":2}}],["running",{"0":{"45":1},"2":{"9":1,"129":1,"145":1,"183":1,"209":3}}],["rlock",{"2":{"150":1,"200":1,"214":1,"255":1}}],["rwmutex",{"2":{"150":1,"200":1,"207":1,"214":1,"255":1}}],["rps",{"2":{"143":2,"208":2}}],["right",{"2":{"133":1}}],["riskyoperation",{"2":{"128":1}}],["rf",{"2":{"107":1}}],["rm",{"2":{"107":1}}],["rows",{"2":{"67":3,"150":3,"232":3}}],["route",{"2":{"219":1,"221":3,"226":1}}],["routernode",{"2":{"175":5}}],["routes",{"2":{"30":1,"221":6}}],["routing",{"0":{"32":1,"221":1,"222":1},"1":{"33":1,"34":1},"2":{"42":1,"110":1,"217":1,"221":1}}],["robust",{"2":{"0":1}}],["randomization",{"2":{"246":1}}],["rand",{"2":{"151":1,"246":1}}],["range",{"2":{"7":1,"9":1,"24":1,"77":1,"93":1,"121":1,"123":1,"126":1,"136":1,"140":1,"142":1,"150":1,"152":1,"154":2,"155":1,"163":1,"164":2,"176":1,"180":1,"189":1,"191":1,"192":2,"193":1,"195":1,"196":1,"206":1,"211":2,"212":1,"222":2,"226":1,"233":1,"245":1,"257":1}}],["rates",{"2":{"250":2,"261":2}}],["ratelimitedpool",{"2":{"208":4}}],["rate",{"0":{"143":1,"208":1},"2":{"143":4,"151":1,"153":1,"208":5,"259":1,"260":2}}],["race",{"2":{"13":1}}],["remain",{"2":{"252":1}}],["remove",{"2":{"107":1}}],["registry",{"2":{"237":1}}],["regularly",{"2":{"115":1}}],["redis",{"2":{"237":1}}],["reduce",{"0":{"140":1}}],["replaceall",{"2":{"195":1}}],["represents",{"2":{"60":1}}],["reflect",{"2":{"186":2}}],["refreshauthtoken",{"2":{"173":1}}],["refreshtoken",{"2":{"173":3}}],["reference",{"2":{"165":1}}],["re",{"2":{"169":1}}],["recurse",{"2":{"165":3}}],["recursion",{"2":{"165":2}}],["recursive",{"0":{"165":1,"178":1},"2":{"165":1,"178":2}}],["recover",{"2":{"177":1,"215":1}}],["recovery",{"0":{"128":1}}],["recordfailure",{"2":{"258":2}}],["records",{"2":{"3":1}}],["record",{"2":{"3":1}}],["related",{"2":{"115":1}}],["reasonable",{"2":{"129":1,"145":1,"250":1}}],["real",{"2":{"105":1,"117":1,"145":1}}],["reader",{"2":{"233":1}}],["readable",{"2":{"227":1}}],["readfile",{"2":{"221":1,"236":1}}],["ready",{"2":{"116":1}}],["readme",{"2":{"109":1}}],["read",{"2":{"62":1,"234":1}}],["reads",{"2":{"21":1,"62":1}}],["req",{"2":{"90":1,"230":3,"233":3}}],["request",{"2":{"175":3,"197":1,"237":1,"258":1}}],["requestidkey",{"2":{"197":3}}],["requestid",{"2":{"90":2,"197":4}}],["requirements",{"2":{"156":1}}],["requires",{"2":{"95":1}}],["required",{"2":{"22":1,"238":1}}],["rejectnode",{"2":{"54":1}}],["review",{"2":{"28":1}}],["reusability",{"2":{"41":1}}],["reusable",{"0":{"173":1},"2":{"6":2,"57":1,"109":1,"160":1,"171":1,"173":1,"202":1,"229":1}}],["reuse",{"2":{"16":2,"57":1,"234":1}}],["resume",{"2":{"220":1}}],["result2",{"2":{"179":4}}],["result1",{"2":{"179":4}}],["resultchan",{"2":{"144":3,"249":3}}],["resultcollector",{"2":{"124":2,"206":2}}],["resultlist",{"2":{"82":4}}],["result",{"0":{"124":1},"2":{"9":3,"18":3,"19":2,"27":3,"40":2,"45":1,"56":1,"63":2,"66":1,"69":1,"111":4,"113":1,"124":3,"128":3,"142":2,"144":4,"148":3,"149":2,"151":2,"152":4,"153":2,"154":1,"167":1,"168":6,"181":1,"186":3,"188":3,"192":3,"193":4,"194":4,"195":6,"201":1,"205":2,"206":5,"211":3,"212":4,"221":2,"223":6,"233":3,"235":2,"237":4,"242":2,"243":2,"244":1,"247":2,"249":4,"254":2,"257":4,"258":2,"260":1}}],["resultskey",{"2":{"135":1}}],["results",{"0":{"82":1,"206":1},"2":{"9":4,"45":1,"64":3,"67":1,"82":7,"85":2,"89":1,"111":1,"124":4,"132":4,"134":1,"135":1,"140":1,"141":4,"142":3,"154":4,"179":1,"189":4,"206":5,"211":4,"212":4,"232":2,"257":10}}],["res",{"2":{"194":3}}],["resettime",{"2":{"214":2}}],["reset",{"2":{"151":1,"214":2,"242":1,"243":2,"258":2}}],["rest",{"2":{"124":1}}],["resilient",{"2":{"105":1,"239":1,"240":1,"252":1}}],["resources",{"0":{"15":1},"2":{"16":1,"71":1,"129":1,"145":1,"150":1,"156":1,"215":1,"234":1,"238":1}}],["resource",{"0":{"14":1,"150":1,"234":1},"1":{"15":1,"16":1},"2":{"71":1,"129":1,"156":1,"238":1}}],["response",{"2":{"256":1,"258":1}}],["responsibility",{"0":{"2":1},"2":{"71":1}}],["resp",{"2":{"230":3,"233":3}}],["respect",{"0":{"9":1},"2":{"71":1}}],["retrieve",{"2":{"76":1}}],["retried",{"2":{"63":1,"241":1,"247":1}}],["retries",{"0":{"240":1},"1":{"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1},"2":{"21":1,"68":1,"104":1,"110":1,"151":3,"188":1,"241":4}}],["retryoperation",{"2":{"188":2}}],["retryafter",{"2":{"151":3}}],["retryablenode",{"0":{"151":1},"2":{"157":1,"242":1}}],["retryablepost",{"2":{"38":1}}],["retryable",{"2":{"3":1,"71":1}}],["retrynode",{"2":{"30":1,"223":6}}],["retry",{"0":{"38":1,"188":1,"241":1,"246":1,"247":1},"2":{"30":2,"38":1,"49":2,"63":1,"68":1,"83":1,"103":1,"151":3,"157":1,"177":2,"223":2,"240":1,"247":4,"248":1,"250":5,"258":1,"260":1}}],["returning",{"2":{"235":1,"244":1,"254":1,"255":1,"256":1}}],["returns",{"2":{"30":1,"31":1,"35":1,"119":1,"161":2,"169":1,"185":2}}],["returned",{"2":{"29":1,"43":1}}],["return",{"2":{"2":2,"3":1,"4":3,"6":1,"7":1,"9":2,"10":1,"12":1,"15":2,"16":2,"25":2,"27":2,"30":2,"31":1,"33":3,"34":4,"37":2,"38":2,"39":3,"40":1,"41":1,"55":2,"56":4,"62":2,"63":2,"64":2,"66":3,"67":3,"69":2,"70":1,"71":1,"81":1,"82":1,"84":2,"86":1,"101":1,"102":4,"103":3,"104":2,"113":2,"114":1,"119":4,"121":2,"122":1,"123":4,"124":2,"125":4,"126":2,"127":1,"128":4,"132":1,"135":1,"136":2,"138":1,"139":2,"140":1,"141":3,"142":1,"143":3,"144":4,"148":5,"149":4,"150":10,"151":10,"152":4,"153":3,"154":3,"155":5,"162":4,"163":4,"164":2,"165":5,"166":3,"167":1,"168":4,"172":1,"173":3,"174":3,"175":2,"176":3,"177":1,"178":5,"179":3,"180":1,"181":1,"186":3,"188":4,"189":1,"190":3,"191":1,"192":1,"193":2,"194":3,"195":4,"196":5,"197":3,"198":1,"200":2,"201":2,"206":1,"207":1,"208":3,"209":1,"210":2,"211":4,"212":1,"213":1,"214":4,"218":3,"219":5,"220":4,"221":3,"222":3,"223":6,"224":5,"225":2,"226":5,"230":3,"231":2,"232":3,"233":4,"234":4,"235":4,"236":4,"237":4,"241":3,"242":4,"243":4,"244":6,"245":2,"246":1,"247":5,"248":3,"249":3,"254":5,"255":4,"256":6,"257":5,"258":7,"259":2,"260":7}}],["fresh",{"2":{"244":1,"255":2}}],["frequently",{"2":{"227":1}}],["from",{"2":{"21":3,"55":1,"62":1,"82":1,"86":1,"119":1,"121":2,"124":1,"151":1,"161":1,"162":1,"176":1,"206":1,"215":1,"245":1,"247":1}}],["fnv",{"2":{"226":1}}],["fn",{"2":{"189":2,"194":2,"198":2}}],["fs",{"2":{"163":4}}],["full",{"2":{"149":1}}],["fundamental",{"2":{"60":1}}],["fundamentals",{"2":{"28":1,"99":1,"117":1,"170":1,"183":1}}],["functionality",{"2":{"148":1}}],["function",{"0":{"198":1},"2":{"101":1,"132":2,"182":1}}],["functions",{"0":{"66":1,"187":1,"233":1},"1":{"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1},"2":{"184":1}}],["func",{"2":{"2":1,"3":1,"6":1,"7":1,"9":1,"10":1,"12":1,"15":1,"16":2,"18":1,"19":1,"22":1,"25":1,"27":2,"30":1,"33":2,"34":2,"37":1,"38":1,"39":1,"40":1,"55":2,"56":4,"62":1,"63":1,"64":1,"66":3,"67":2,"69":2,"70":1,"79":1,"81":1,"82":1,"83":1,"84":1,"86":1,"91":1,"93":1,"98":1,"101":2,"102":5,"103":2,"104":3,"111":1,"113":2,"114":1,"119":4,"121":1,"122":1,"123":4,"124":3,"125":4,"126":1,"127":1,"128":2,"132":1,"135":1,"136":1,"138":1,"139":1,"140":1,"141":3,"142":2,"143":2,"144":3,"148":4,"149":3,"150":4,"151":4,"152":4,"153":3,"154":5,"155":3,"161":1,"162":4,"163":4,"164":2,"165":4,"166":3,"167":2,"168":5,"172":1,"173":3,"174":3,"175":2,"176":3,"177":1,"178":4,"179":3,"180":1,"181":2,"186":1,"188":4,"189":4,"190":1,"191":1,"192":1,"193":3,"194":4,"195":7,"196":2,"197":3,"198":5,"200":3,"201":3,"205":1,"206":2,"207":5,"208":3,"209":5,"210":5,"211":5,"212":2,"213":4,"214":4,"218":2,"219":2,"220":2,"221":2,"222":2,"223":3,"224":2,"225":1,"226":4,"230":2,"231":2,"232":2,"233":3,"234":2,"235":4,"236":3,"237":2,"241":2,"242":3,"243":2,"244":2,"245":1,"246":1,"247":2,"248":1,"249":2,"254":2,"255":2,"256":2,"257":2,"258":5,"259":1,"260":1}}],["fewer",{"2":{"151":1}}],["featureflagnode",{"2":{"225":3}}],["features",{"2":{"147":1}}],["feature",{"0":{"225":1},"2":{"115":1,"225":7}}],["fetchfromurl",{"2":{"256":2}}],["fetchfromprimarysource",{"2":{"254":1}}],["fetchfromapi",{"2":{"2":1,"244":1,"255":1}}],["fetchdata",{"2":{"194":1}}],["fetchusers",{"2":{"121":1}}],["fetchusernode",{"2":{"21":2}}],["fetching",{"2":{"102":1}}],["fetched",{"2":{"21":1,"102":2}}],["fetches",{"2":{"21":2}}],["fetchnode",{"2":{"2":3,"6":1,"50":2,"54":2,"102":3,"122":3,"127":3,"160":2,"162":3,"172":2}}],["fetch",{"2":{"2":1,"4":1,"55":3,"109":2,"119":1,"121":1,"244":1,"255":1}}],["factories",{"0":{"164":1}}],["factory",{"0":{"122":1,"233":1},"2":{"119":1,"164":3}}],["falling",{"2":{"261":1}}],["fallbackrate",{"2":{"259":2}}],["fallbackcalls",{"2":{"259":5}}],["fallbackmsg",{"2":{"258":2}}],["fallbacks",{"2":{"250":1,"256":1,"259":1,"260":1,"261":2}}],["fallback",{"0":{"244":1,"252":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1},"1":{"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1},"2":{"251":1,"253":1,"254":1,"255":1,"256":1,"259":3,"260":1,"261":5}}],["fallbacknode",{"0":{"253":1},"2":{"157":1,"244":1,"253":2}}],["false",{"2":{"120":1,"127":1,"133":1,"190":2,"214":1,"223":1,"225":1,"244":1,"260":1}}],["fast",{"2":{"145":1}}],["faster",{"2":{"133":1}}],["fastest",{"2":{"106":1}}],["fatal",{"2":{"45":1,"111":1}}],["fails",{"2":{"257":1}}],["failing",{"2":{"250":1,"256":1}}],["fail",{"2":{"128":1,"145":1,"241":1,"252":1}}],["failurenode",{"2":{"223":1}}],["failures++",{"2":{"243":1,"258":1}}],["failures",{"2":{"128":1,"129":1,"153":4,"214":7,"243":5,"250":2,"251":1,"252":1,"258":4,"261":1,"262":1}}],["failure",{"0":{"37":1,"244":1,"252":1},"1":{"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1},"2":{"37":1,"63":1,"64":1,"103":1,"129":2,"244":1,"251":1,"254":1}}],["failed",{"2":{"4":2,"125":3,"126":1,"128":1,"136":2,"152":1,"153":1,"155":1,"188":1,"211":1,"213":4,"220":1,"223":2,"241":1,"242":1,"245":1,"254":1,"257":1,"258":1}}],["fine",{"2":{"130":1,"135":1,"204":1}}],["final",{"2":{"111":1,"161":2}}],["finalize",{"2":{"39":1}}],["finalnode",{"2":{"35":1}}],["filterslice",{"2":{"193":2}}],["filternode",{"2":{"139":1}}],["filterfunc",{"2":{"139":2}}],["filtered",{"2":{"126":4}}],["filter",{"0":{"139":1,"193":1},"2":{"126":1}}],["filepath",{"2":{"234":2}}],["files",{"2":{"115":1}}],["file",{"2":{"15":4,"92":2,"98":1,"109":1,"113":1,"234":3,"236":1}}],["filenode",{"2":{"15":1}}],["first",{"0":{"101":1},"2":{"99":1,"100":1,"105":1}}],["fields",{"2":{"69":1}}],["f",{"2":{"16":2,"164":1}}],["focused",{"2":{"169":1,"182":1}}],["found",{"2":{"21":1,"260":2}}],["for",{"2":{"7":1,"9":1,"13":3,"15":1,"24":1,"35":2,"41":1,"49":1,"56":2,"57":2,"62":2,"67":1,"77":1,"79":2,"84":1,"90":1,"93":2,"115":1,"116":1,"118":1,"119":4,"121":1,"122":1,"123":1,"126":1,"127":1,"128":1,"129":1,"132":1,"134":1,"135":3,"136":1,"140":1,"141":1,"142":1,"143":1,"144":3,"145":3,"148":1,"150":1,"151":3,"152":1,"154":4,"155":1,"156":4,"163":1,"164":3,"168":1,"172":1,"176":1,"179":1,"180":1,"185":2,"186":1,"188":1,"189":1,"191":2,"192":2,"193":1,"195":1,"196":1,"202":1,"205":2,"206":1,"208":1,"209":1,"211":3,"212":2,"215":1,"222":2,"226":2,"227":1,"232":1,"233":1,"238":1,"244":2,"245":1,"248":1,"250":1,"257":1,"260":3}}],["follow",{"2":{"0":1}}],["fmt",{"2":{"4":1,"70":1,"76":1,"77":1,"79":1,"93":3,"98":2,"101":3,"102":4,"103":2,"104":1,"126":1,"132":2,"136":3,"144":1,"152":1,"155":2,"188":1,"196":1,"205":1,"210":1,"211":1,"214":1,"230":2,"231":1,"232":1,"243":1,"245":2,"247":1,"249":1,"255":1,"257":1,"258":1}}],["flagnode",{"2":{"225":4}}],["flags",{"0":{"225":1},"2":{"225":3}}],["flaky",{"2":{"103":1}}],["float64",{"2":{"125":2,"142":2,"151":4,"219":1,"242":1,"259":2}}],["flow2",{"2":{"179":4}}],["flow1",{"2":{"179":4}}],["flowconfig",{"2":{"164":3,"180":1}}],["flowtype",{"2":{"163":2}}],["flowfactory",{"2":{"119":2,"120":2,"122":1,"123":2,"124":1,"125":2,"128":1,"164":2}}],["flowinputs",{"2":{"86":2,"119":3,"121":4,"123":3,"125":1,"126":3}}],["flowselector",{"2":{"163":4}}],["flows",{"0":{"6":1,"19":1,"43":1,"44":1,"45":1,"56":1,"58":1,"86":1,"114":1,"118":1,"127":1,"167":1,"171":1,"176":1,"178":1,"179":1,"181":1},"1":{"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1},"2":{"6":1,"42":2,"43":1,"50":1,"55":1,"57":5,"58":1,"59":2,"72":1,"109":1,"110":1,"111":2,"114":4,"115":2,"120":2,"122":1,"123":1,"124":1,"127":2,"128":1,"129":2,"130":1,"146":2,"158":1,"159":1,"161":1,"162":1,"163":5,"164":2,"165":1,"166":1,"168":2,"169":6,"170":2,"171":2,"175":1,"176":1,"177":1,"179":3,"180":1,"181":1,"182":4,"183":4,"228":1}}],["flow",{"0":{"5":1,"22":1,"35":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"53":1,"55":1,"102":1,"119":1,"122":1,"123":1,"125":1,"158":1,"161":1,"163":1,"164":1,"165":1,"166":1,"172":1,"173":1,"180":1},"1":{"6":1,"7":1,"47":1,"48":1,"49":1,"52":1,"53":1,"54":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1},"2":{"2":4,"6":5,"7":4,"19":2,"22":1,"29":1,"30":4,"31":2,"33":3,"34":4,"35":5,"44":4,"45":3,"47":4,"48":5,"49":4,"50":3,"52":5,"53":6,"54":6,"55":9,"56":2,"57":1,"58":6,"72":1,"73":2,"86":1,"92":1,"102":6,"105":1,"109":2,"111":3,"114":5,"118":1,"119":7,"120":1,"122":9,"123":3,"124":3,"125":2,"127":8,"128":1,"129":1,"159":2,"160":4,"161":5,"162":10,"163":5,"164":10,"165":9,"166":7,"167":4,"168":5,"169":1,"170":2,"172":9,"173":8,"174":16,"176":2,"177":1,"178":7,"179":1,"180":5,"181":3,"182":2,"183":2,"217":1,"218":3,"219":5,"223":4,"224":10,"225":4,"226":1,"262":1}}],["flyt",{"2":{"0":1,"2":5,"6":4,"7":3,"12":1,"13":2,"16":2,"19":1,"21":1,"22":1,"24":1,"25":1,"30":3,"31":3,"33":6,"34":7,"35":1,"37":2,"38":2,"39":2,"40":3,"41":4,"44":3,"45":1,"47":4,"48":3,"49":2,"50":5,"52":3,"53":3,"54":4,"55":6,"56":11,"58":3,"60":1,"62":1,"64":2,"66":8,"67":2,"68":4,"69":4,"70":1,"74":1,"81":1,"82":3,"83":1,"84":3,"86":3,"93":1,"94":1,"95":1,"96":1,"97":1,"98":4,"100":1,"101":6,"102":14,"103":5,"104":6,"106":1,"107":3,"109":1,"111":2,"113":4,"114":4,"117":1,"119":11,"120":2,"121":4,"122":4,"123":10,"124":5,"125":11,"126":4,"127":6,"128":4,"132":3,"133":2,"134":1,"135":2,"136":3,"138":1,"139":1,"140":1,"141":5,"142":1,"143":2,"144":2,"148":5,"149":2,"150":2,"151":2,"152":2,"153":3,"154":2,"155":4,"160":5,"161":4,"162":12,"163":12,"164":9,"165":12,"166":9,"167":5,"168":8,"172":5,"173":11,"174":11,"175":7,"176":6,"177":4,"178":11,"179":9,"180":5,"181":6,"184":1,"185":5,"190":1,"201":3,"205":1,"206":1,"207":3,"208":2,"209":2,"210":2,"211":4,"212":1,"213":1,"214":1,"218":6,"219":7,"220":4,"221":6,"222":6,"223":8,"224":9,"225":7,"226":9,"230":3,"231":3,"232":3,"233":5,"234":3,"235":9,"236":5,"237":3,"241":5,"242":1,"243":2,"244":1,"245":1,"248":3,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1}}],["block",{"2":{"215":1}}],["blocking",{"2":{"215":1}}],["blocks",{"2":{"60":1,"71":1,"209":1}}],["branches",{"2":{"227":2}}],["branch",{"2":{"224":1,"227":2}}],["branching",{"0":{"33":1,"34":1,"48":1,"217":1,"218":1,"219":1,"224":1},"1":{"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1},"2":{"42":1,"227":1,"262":1}}],["breaker",{"0":{"214":1,"243":1,"258":1},"2":{"214":2,"243":1,"258":1,"262":1}}],["breaking",{"2":{"168":1}}],["binary",{"0":{"218":1},"2":{"116":1}}],["b",{"0":{"226":1},"2":{"48":1,"185":1,"226":1}}],["bodybytes",{"2":{"233":2}}],["bodyreader",{"2":{"233":3}}],["body",{"2":{"230":2,"233":9}}],["both",{"2":{"169":1,"179":2,"224":4}}],["bound",{"2":{"145":1}}],["boundaries",{"0":{"7":1}}],["bool",{"2":{"33":1,"190":1,"193":2,"197":1,"200":1,"209":1,"214":1,"218":1,"223":1,"224":2,"225":2,"258":1}}],["bytes",{"2":{"233":1}}],["byte",{"2":{"226":1,"234":1}}],["by",{"2":{"29":1,"35":1,"43":1,"92":1,"115":1,"171":1,"209":1}}],["balancer",{"2":{"222":1}}],["basic",{"0":{"75":1,"119":1,"132":1,"148":1,"160":1,"172":1,"205":1,"230":1,"241":1,"254":1},"1":{"76":1,"77":1,"78":1},"2":{"162":2}}],["baseurl",{"2":{"230":3}}],["baseconfig",{"2":{"86":3}}],["base",{"2":{"81":1,"86":1,"111":1,"151":3,"246":2}}],["based",{"0":{"32":1},"1":{"33":1,"34":1},"2":{"43":1,"48":1,"64":1,"110":1,"121":1,"126":2,"145":1,"151":1,"163":1,"164":1,"182":1,"207":1,"215":1,"217":2,"220":1,"221":1,"222":1,"226":2,"260":1}}],["basenode",{"0":{"69":1},"2":{"12":1,"16":1,"21":1,"67":2,"69":3,"70":1,"140":1,"142":1,"148":3,"149":2,"150":2,"151":2,"152":2,"153":6,"154":2,"155":2,"211":2,"220":1,"221":2,"222":2,"225":2,"242":1,"243":2,"244":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1}}],["backoffnode",{"2":{"242":4}}],["backoff",{"0":{"242":1},"2":{"151":1,"188":2,"242":2,"250":1}}],["backofffactor",{"2":{"151":3}}],["back",{"2":{"49":1,"223":2,"261":1}}],["background",{"2":{"18":1,"19":1,"45":1,"101":1,"102":1,"104":1,"111":1,"132":1,"167":1,"181":2}}],["batchprocessornode",{"2":{"257":3}}],["batchresults",{"2":{"212":2}}],["batchstart+j",{"2":{"212":1}}],["batchstart",{"2":{"212":1}}],["batchsize",{"2":{"121":2,"135":1,"212":2}}],["batcherror",{"2":{"136":1,"245":1}}],["batcherr",{"2":{"136":3}}],["batches",{"2":{"24":2,"126":1,"129":1,"145":2,"183":1,"212":2}}],["batchconfig",{"2":{"135":2}}],["batchflow",{"2":{"119":2}}],["batchfunc",{"2":{"86":1,"119":2,"120":2,"121":1,"123":2,"125":2,"126":1}}],["batchnode",{"2":{"24":1,"132":2,"134":1,"135":1,"136":2}}],["batch",{"0":{"24":1,"85":1,"86":1,"118":1,"119":1,"123":1,"125":1,"126":1,"127":1,"131":1,"132":1,"137":1,"143":1,"144":1,"212":1},"1":{"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":2,"139":2,"140":2,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1},"2":{"59":1,"70":1,"85":5,"86":1,"94":2,"119":1,"121":1,"122":1,"123":1,"124":1,"125":2,"127":5,"128":2,"129":2,"130":1,"132":2,"135":1,"136":2,"142":1,"144":1,"145":1,"146":2,"149":1,"168":1,"183":1,"185":2,"191":1,"212":2,"216":2,"245":1,"251":2}}],["bad",{"2":{"2":1,"4":1,"13":1}}],["bucket",{"2":{"226":2}}],["business",{"2":{"174":1,"182":1,"247":1}}],["businessnode",{"2":{"162":2}}],["businessrules",{"2":{"6":2,"172":2}}],["buffersize",{"2":{"234":2}}],["buffer",{"2":{"149":2,"234":6}}],["but",{"2":{"133":1,"258":1}}],["built",{"2":{"105":1}}],["builder",{"0":{"195":1,"201":1}}],["builddynamicflow",{"2":{"163":2}}],["building",{"0":{"102":1},"2":{"60":1,"110":1,"228":1}}],["build",{"2":{"0":1,"44":2,"55":1,"57":1,"99":1,"100":1,"102":1,"105":1,"114":1,"116":3,"122":1,"162":1,"164":1,"174":1,"180":1,"203":1,"216":1,"224":1,"239":1,"240":1}}],["bearer",{"2":{"230":1}}],["better",{"2":{"261":1}}],["beta",{"2":{"225":1}}],["between",{"2":{"56":1,"59":1,"68":1,"73":1,"241":1}}],["behave",{"2":{"161":1}}],["behavior",{"0":{"21":1},"2":{"68":1,"147":1,"156":1,"166":1,"167":1,"169":1,"235":1,"253":1,"261":1}}],["before",{"2":{"9":1,"179":1,"261":1}}],["be",{"2":{"3":1,"40":1,"50":1,"63":1,"70":1,"71":1,"129":2,"134":1,"145":1,"158":1,"169":1,"202":1,"241":1,"247":1,"261":1}}],["best",{"0":{"0":1,"41":1,"57":1,"71":1,"87":1,"115":1,"129":1,"145":1,"156":1,"169":1,"182":1,"202":1,"215":1,"227":1,"238":1,"250":1,"261":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"88":1,"89":1,"90":1,"91":1,"92":1},"2":{"28":1,"94":2,"203":1,"216":1,"239":1,"251":1,"252":1}}],["tcp",{"2":{"232":1}}],["taken",{"2":{"227":1}}],["taskid",{"2":{"205":3}}],["tasks",{"2":{"154":4,"184":1,"205":2,"209":1}}],["task",{"2":{"154":9,"157":1,"204":1,"205":2,"207":2,"208":2,"209":9,"210":4,"213":2,"214":2}}],["tune",{"2":{"135":1}}],["tidy",{"2":{"107":1}}],["timed",{"2":{"249":1}}],["timer",{"2":{"198":5}}],["timestamp",{"2":{"78":1,"84":1,"248":2,"255":3}}],["times",{"2":{"68":1,"118":1,"198":1,"241":1}}],["time",{"2":{"10":1,"24":1,"27":2,"68":1,"69":1,"78":1,"83":3,"84":1,"90":3,"103":1,"120":1,"128":2,"135":3,"144":1,"151":3,"153":2,"188":4,"194":2,"198":4,"210":3,"213":3,"214":5,"230":1,"235":2,"237":1,"241":1,"242":3,"243":6,"246":5,"248":3,"249":1,"255":4,"258":6,"259":3}}],["timeoutnode",{"2":{"249":1}}],["timeoutpool",{"2":{"210":4}}],["timeouts",{"2":{"10":1,"144":1,"210":1,"260":1,"261":1}}],["timeout",{"0":{"10":1,"144":1,"194":1,"210":1,"249":1},"2":{"10":1,"76":1,"81":1,"85":1,"104":1,"144":4,"194":2,"210":7,"214":1,"230":1,"243":4,"249":1,"258":3}}],["temporarily",{"2":{"256":1,"258":1}}],["temporary",{"2":{"103":1}}],["template",{"0":{"106":1,"112":1},"1":{"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":2,"114":2,"115":1,"116":1,"117":1},"2":{"99":1,"106":1,"107":3,"108":1,"110":1,"115":1,"116":1}}],["terminate",{"2":{"35":1,"41":1,"47":1,"165":2}}],["terminates",{"2":{"35":1}}],["termination",{"0":{"35":1}}],["tested",{"2":{"202":1}}],["testname",{"2":{"226":2}}],["testnode",{"2":{"201":2}}],["testnestedflow",{"2":{"181":1}}],["testflowasnode",{"2":{"167":1}}],["tests",{"2":{"57":1,"115":1,"156":1,"201":1,"227":1}}],["testdata",{"2":{"19":1}}],["testcompleteflow",{"2":{"19":1}}],["testprocessnode",{"2":{"18":1}}],["test",{"0":{"18":1,"19":1,"201":1},"2":{"18":4,"19":1,"57":1,"98":3,"115":1,"129":2,"145":2,"167":2,"169":2,"181":4,"182":2,"201":1,"202":1,"215":2,"227":1,"261":1}}],["testing",{"0":{"17":1,"167":1,"181":1,"199":1,"226":1},"1":{"18":1,"19":1,"200":1,"201":1},"2":{"18":1,"19":1,"57":1,"156":1,"167":1,"181":1}}],["try",{"2":{"223":1,"244":1,"254":1,"255":1,"256":4}}],["trimspace",{"2":{"195":1}}],["triggered",{"2":{"261":1}}],["trigger",{"2":{"63":1,"254":1}}],["traffic",{"2":{"222":3}}],["transient",{"2":{"250":2}}],["transition",{"2":{"220":4}}],["transitions",{"2":{"220":3}}],["transformation",{"2":{"54":1}}],["transformnode",{"2":{"2":3,"50":1,"54":2,"160":2}}],["transformed",{"2":{"2":3}}],["transform",{"2":{"2":2,"138":1,"168":1}}],["tracker",{"2":{"125":8}}],["track",{"2":{"83":1,"125":1,"129":1,"213":1,"215":1,"227":1,"250":1,"259":1,"261":1}}],["tracking",{"0":{"142":1},"2":{"22":1,"129":1}}],["true",{"2":{"19":1,"24":1,"85":1,"119":2,"120":1,"123":1,"125":1,"127":1,"132":2,"133":1,"134":1,"135":1,"136":1,"138":1,"139":1,"143":1,"144":1,"190":1,"209":1,"214":1,"223":1,"225":2,"255":1}}],["t",{"2":{"18":5,"19":5,"93":1,"116":1,"128":1,"167":6,"181":4,"189":4,"190":4,"191":4,"193":5,"194":5,"195":15,"215":1,"238":1,"247":2,"250":1,"261":1}}],["typed",{"2":{"190":2}}],["types",{"0":{"67":1,"147":1},"1":{"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1},"2":{"72":1,"185":2,"239":1}}],["type",{"0":{"88":1,"190":1},"2":{"12":1,"16":1,"21":1,"67":1,"69":1,"70":1,"88":3,"90":1,"124":1,"125":1,"140":1,"142":1,"148":1,"149":1,"150":1,"151":2,"152":1,"153":2,"154":1,"155":2,"159":1,"163":1,"164":2,"175":1,"180":1,"194":1,"195":1,"196":1,"197":1,"200":1,"202":1,"206":1,"207":1,"208":1,"209":2,"210":1,"211":1,"213":1,"214":1,"220":1,"221":1,"222":1,"225":1,"232":1,"233":1,"237":1,"242":1,"243":1,"244":1,"247":1,"248":1,"253":1,"254":1,"255":2,"256":1,"257":1,"258":1,"259":1,"260":1}}],["than",{"2":{"261":1}}],["that",{"2":{"29":1,"30":1,"61":1,"73":1,"81":1,"101":1,"105":1,"110":1,"127":1,"227":1}}],["thundering",{"2":{"246":1}}],["thoroughly",{"2":{"129":1,"169":1,"202":1}}],["throttled",{"2":{"260":1}}],["through",{"2":{"169":1,"176":1,"182":1,"237":1}}],["throughout",{"2":{"73":1}}],["threshold",{"2":{"214":3,"243":3,"258":2}}],["three",{"2":{"61":1}}],["thread",{"0":{"12":1,"70":1,"79":1},"2":{"70":1,"73":1,"156":2,"202":1,"238":1}}],["this",{"2":{"25":1,"63":1,"86":1,"92":1,"100":1,"139":1,"144":1,"158":1,"241":1}}],["thing",{"2":{"2":1,"71":1}}],["themselves",{"2":{"165":1}}],["them",{"2":{"158":1,"202":1}}],["their",{"2":{"41":1,"182":1,"227":1}}],["then",{"2":{"30":1}}],["they",{"2":{"29":1,"43":1,"169":1}}],["the",{"0":{"112":1,"159":1},"1":{"113":1,"114":1},"2":{"21":1,"25":1,"29":1,"30":2,"31":2,"35":1,"43":1,"45":1,"50":1,"60":1,"62":2,"63":3,"64":2,"66":1,"69":2,"73":1,"86":1,"98":1,"99":1,"101":1,"102":2,"104":1,"106":2,"107":2,"108":1,"110":2,"111":1,"113":1,"114":1,"115":1,"116":2,"118":1,"123":1,"127":1,"128":1,"129":1,"133":1,"158":1,"160":1,"161":6,"167":1,"168":1,"169":1,"204":1,"227":1,"230":1,"241":1,"244":1,"252":1,"253":1}}],["these",{"2":{"0":1}}],["toggles",{"2":{"225":1}}],["together",{"2":{"43":1,"115":1}}],["tolower",{"2":{"195":1}}],["toslice",{"0":{"185":1},"1":{"186":1},"2":{"185":5,"186":1}}],["totalweight",{"2":{"222":3}}],["totaltime",{"2":{"213":2}}],["totallatency",{"2":{"153":2}}],["total",{"2":{"125":4,"135":1,"140":3,"142":5,"222":1,"259":3}}],["token",{"2":{"89":1,"91":1,"173":2}}],["took",{"2":{"27":1,"235":1}}],["too",{"2":{"2":1,"182":1,"261":1}}],["to",{"2":{"0":1,"3":1,"4":1,"7":1,"30":1,"35":1,"43":1,"45":1,"66":1,"68":1,"71":1,"85":1,"92":1,"98":1,"104":1,"106":1,"114":1,"121":1,"123":1,"145":1,"149":1,"158":1,"169":1,"184":1,"185":2,"205":1,"219":1,"223":1,"224":1,"229":1,"230":1,"241":2,"244":2,"246":1,"255":2,"256":2}}]],"serializationVersion":2}
