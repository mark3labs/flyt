{"documentCount":272,"nextId":272,"documentIds":{"0":"docs/pages/best-practices.mdx#best-practices","1":"docs/pages/best-practices.mdx#node-design","2":"docs/pages/best-practices.mdx#single-responsibility","3":"docs/pages/best-practices.mdx#idempotency","4":"docs/pages/best-practices.mdx#error-handling","5":"docs/pages/best-practices.mdx#type-safe-sharedstore-access","6":"docs/pages/best-practices.mdx#flow-design","7":"docs/pages/best-practices.mdx#modular-flows","8":"docs/pages/best-practices.mdx#error-boundaries","9":"docs/pages/best-practices.mdx#context-handling","10":"docs/pages/best-practices.mdx#respect-cancellation","11":"docs/pages/best-practices.mdx#timeout-management","12":"docs/pages/best-practices.mdx#concurrency-safety","13":"docs/pages/best-practices.mdx#thread-safe-nodes","14":"docs/pages/best-practices.mdx#avoid-shared-node-instances","15":"docs/pages/best-practices.mdx#resource-management","16":"docs/pages/best-practices.mdx#clean-up-resources","17":"docs/pages/best-practices.mdx#connection-pooling","18":"docs/pages/best-practices.mdx#testing","19":"docs/pages/best-practices.mdx#unit-test-nodes","20":"docs/pages/best-practices.mdx#integration-test-flows","21":"docs/pages/best-practices.mdx#documentation","22":"docs/pages/best-practices.mdx#document-node-behavior","23":"docs/pages/best-practices.mdx#document-flow-structure","24":"docs/pages/best-practices.mdx#performance","25":"docs/pages/best-practices.mdx#batch-operations","26":"docs/pages/best-practices.mdx#lazy-loading","27":"docs/pages/best-practices.mdx#monitoring","28":"docs/pages/best-practices.mdx#add-observability","29":"docs/pages/best-practices.mdx#next-steps","30":"docs/pages/advanced/batch-flows.mdx#batch-flows","31":"docs/pages/advanced/batch-flows.mdx#basic-batch-flow","32":"docs/pages/advanced/batch-flows.mdx#sequential-vs-concurrent-execution","33":"docs/pages/advanced/batch-flows.mdx#dynamic-input-generation","34":"docs/pages/advanced/batch-flows.mdx#complex-processing-pipeline","35":"docs/pages/advanced/batch-flows.mdx#batch-with-configuration","36":"docs/pages/advanced/batch-flows.mdx#result-aggregation","37":"docs/pages/advanced/batch-flows.mdx#progress-tracking","38":"docs/pages/advanced/batch-flows.mdx#conditional-batch-processing","39":"docs/pages/advanced/batch-flows.mdx#error-recovery","40":"docs/pages/advanced/batch-flows.mdx#best-practices","41":"docs/pages/advanced/batch-flows.mdx#next-steps","42":"docs/pages/advanced/batch-processing.mdx#batch-processing","43":"docs/pages/advanced/batch-processing.mdx#basic-batch-processing","44":"docs/pages/advanced/batch-processing.mdx#sequential-vs-concurrent","45":"docs/pages/advanced/batch-processing.mdx#advanced-configuration","46":"docs/pages/advanced/batch-processing.mdx#error-handling","47":"docs/pages/advanced/batch-processing.mdx#batch-processing-patterns","48":"docs/pages/advanced/batch-processing.mdx#map-pattern","49":"docs/pages/advanced/batch-processing.mdx#filter-pattern","50":"docs/pages/advanced/batch-processing.mdx#aggregation-pattern","51":"docs/pages/advanced/batch-processing.mdx#progress-tracking","52":"docs/pages/advanced/batch-processing.mdx#rate-limited-batch-processing","53":"docs/pages/advanced/batch-processing.mdx#batch-with-timeout","54":"docs/pages/advanced/batch-processing.mdx#best-practices","55":"docs/pages/advanced/batch-processing.mdx#key-benefits","56":"docs/pages/advanced/batch-processing.mdx#next-steps","57":"docs/pages/advanced/custom-nodes.mdx#custom-node-types","58":"docs/pages/advanced/custom-nodes.mdx#basic-custom-node","59":"docs/pages/advanced/custom-nodes.mdx#stateful-nodes","60":"docs/pages/advanced/custom-nodes.mdx#resource-managing-nodes","61":"docs/pages/advanced/custom-nodes.mdx#retryablenode-implementation","62":"docs/pages/advanced/custom-nodes.mdx#composite-nodes","63":"docs/pages/advanced/custom-nodes.mdx#monitoring-nodes","64":"docs/pages/advanced/custom-nodes.mdx#async-nodes","65":"docs/pages/advanced/custom-nodes.mdx#validation-nodes","66":"docs/pages/advanced/custom-nodes.mdx#using-result-type-with-custom-nodes","67":"docs/pages/advanced/custom-nodes.mdx#helper-functions-vs-custom-nodes","68":"docs/pages/advanced/custom-nodes.mdx#best-practices","69":"docs/pages/advanced/custom-nodes.mdx#next-steps","70":"docs/pages/advanced/flow-as-node.mdx#flow-as-node","71":"docs/pages/advanced/flow-as-node.mdx#the-node-interface","72":"docs/pages/advanced/flow-as-node.mdx#basic-usage","73":"docs/pages/advanced/flow-as-node.mdx#flow-lifecycle-as-node","74":"docs/pages/advanced/flow-as-node.mdx#composable-workflows","75":"docs/pages/advanced/flow-as-node.mdx#dynamic-flow-selection","76":"docs/pages/advanced/flow-as-node.mdx#flow-factories","77":"docs/pages/advanced/flow-as-node.mdx#recursive-flow-patterns","78":"docs/pages/advanced/flow-as-node.mdx#flow-middleware","79":"docs/pages/advanced/flow-as-node.mdx#testing-flows-as-nodes","80":"docs/pages/advanced/flow-as-node.mdx#performance-considerations","81":"docs/pages/advanced/flow-as-node.mdx#best-practices","82":"docs/pages/advanced/flow-as-node.mdx#next-steps","83":"docs/pages/advanced/nested-flows.mdx#nested-flows","84":"docs/pages/advanced/nested-flows.mdx#basic-nested-flow","85":"docs/pages/advanced/nested-flows.mdx#reusable-flow-components","86":"docs/pages/advanced/nested-flows.mdx#hierarchical-workflows","87":"docs/pages/advanced/nested-flows.mdx#conditional-nesting","88":"docs/pages/advanced/nested-flows.mdx#shared-context-in-nested-flows","89":"docs/pages/advanced/nested-flows.mdx#error-propagation","90":"docs/pages/advanced/nested-flows.mdx#recursive-flows","91":"docs/pages/advanced/nested-flows.mdx#parallel-nested-flows","92":"docs/pages/advanced/nested-flows.mdx#dynamic-flow-composition","93":"docs/pages/advanced/nested-flows.mdx#testing-nested-flows","94":"docs/pages/advanced/nested-flows.mdx#best-practices","95":"docs/pages/advanced/nested-flows.mdx#next-steps","96":"docs/pages/advanced/utilities.mdx#utilities","97":"docs/pages/advanced/utilities.mdx#toslice","98":"docs/pages/advanced/utilities.mdx#implementation-details","99":"docs/pages/advanced/utilities.mdx#custom-utility-functions","100":"docs/pages/advanced/utilities.mdx#retry-helper","101":"docs/pages/advanced/utilities.mdx#parallel-map","102":"docs/pages/advanced/utilities.mdx#type-safe-getters","103":"docs/pages/advanced/utilities.mdx#chunk-slice","104":"docs/pages/advanced/utilities.mdx#merge-maps","105":"docs/pages/advanced/utilities.mdx#filter-slice","106":"docs/pages/advanced/utilities.mdx#timeout-wrapper","107":"docs/pages/advanced/utilities.mdx#pipeline-builder","108":"docs/pages/advanced/utilities.mdx#error-aggregator","109":"docs/pages/advanced/utilities.mdx#context-values-helper","110":"docs/pages/advanced/utilities.mdx#debounce-function","111":"docs/pages/advanced/utilities.mdx#testing-utilities","112":"docs/pages/advanced/utilities.mdx#mock-sharedstore","113":"docs/pages/advanced/utilities.mdx#test-node-builder","114":"docs/pages/advanced/utilities.mdx#best-practices","115":"docs/pages/advanced/utilities.mdx#next-steps","116":"docs/pages/advanced/worker-pool.mdx#worker-pool","117":"docs/pages/advanced/worker-pool.mdx#basic-worker-pool","118":"docs/pages/advanced/worker-pool.mdx#worker-pool-with-results","119":"docs/pages/advanced/worker-pool.mdx#dynamic-worker-scaling","120":"docs/pages/advanced/worker-pool.mdx#rate-limited-worker-pool","121":"docs/pages/advanced/worker-pool.mdx#priority-queue-worker-pool","122":"docs/pages/advanced/worker-pool.mdx#worker-pool-with-timeout","123":"docs/pages/advanced/worker-pool.mdx#worker-pool-in-nodes","124":"docs/pages/advanced/worker-pool.mdx#batch-processing-with-worker-pool","125":"docs/pages/advanced/worker-pool.mdx#monitoring-worker-pool","126":"docs/pages/advanced/worker-pool.mdx#circuit-breaker-pool","127":"docs/pages/advanced/worker-pool.mdx#best-practices","128":"docs/pages/advanced/worker-pool.mdx#next-steps","129":"docs/pages/concepts/actions.mdx#actions","130":"docs/pages/concepts/actions.mdx#how-actions-work","131":"docs/pages/concepts/actions.mdx#default-action","132":"docs/pages/concepts/actions.mdx#action-based-routing","133":"docs/pages/concepts/actions.mdx#simple-branching","134":"docs/pages/concepts/actions.mdx#multi-way-branching","135":"docs/pages/concepts/actions.mdx#flow-termination","136":"docs/pages/concepts/actions.mdx#common-patterns","137":"docs/pages/concepts/actions.mdx#successfailure-pattern","138":"docs/pages/concepts/actions.mdx#retry-pattern","139":"docs/pages/concepts/actions.mdx#state-machine-pattern","140":"docs/pages/concepts/actions.mdx#dynamic-actions","141":"docs/pages/concepts/actions.mdx#best-practices","142":"docs/pages/concepts/actions.mdx#next-steps","143":"docs/pages/concepts/flows.mdx#flows","144":"docs/pages/concepts/flows.mdx#creating-flows","145":"docs/pages/concepts/flows.mdx#running-flows","146":"docs/pages/concepts/flows.mdx#flow-connections","147":"docs/pages/concepts/flows.mdx#linear-flow","148":"docs/pages/concepts/flows.mdx#branching-flow","149":"docs/pages/concepts/flows.mdx#loop-flow","150":"docs/pages/concepts/flows.mdx#flow-as-node","151":"docs/pages/concepts/flows.mdx#complex-flow-patterns","152":"docs/pages/concepts/flows.mdx#diamond-pattern","153":"docs/pages/concepts/flows.mdx#error-handling-flow","154":"docs/pages/concepts/flows.mdx#pipeline-pattern","155":"docs/pages/concepts/flows.mdx#flow-composition","156":"docs/pages/concepts/flows.mdx#debugging-flows","157":"docs/pages/concepts/flows.mdx#best-practices","158":"docs/pages/concepts/flows.mdx#visualizing-flows","159":"docs/pages/concepts/flows.mdx#next-steps","160":"docs/pages/concepts/nodes.mdx#nodes","161":"docs/pages/concepts/nodes.mdx#node-lifecycle","162":"docs/pages/concepts/nodes.mdx#1-prep-phase","163":"docs/pages/concepts/nodes.mdx#2-exec-phase","164":"docs/pages/concepts/nodes.mdx#3-post-phase","165":"docs/pages/concepts/nodes.mdx#creating-nodes","166":"docs/pages/concepts/nodes.mdx#using-helper-functions","167":"docs/pages/concepts/nodes.mdx#result-based-functions-type-safe","168":"docs/pages/concepts/nodes.mdx#any-based-functions-simple","169":"docs/pages/concepts/nodes.mdx#choosing-between-result-and-any","170":"docs/pages/concepts/nodes.mdx#custom-node-types","171":"docs/pages/concepts/nodes.mdx#node-options","172":"docs/pages/concepts/nodes.mdx#basenode","173":"docs/pages/concepts/nodes.mdx#thread-safety","174":"docs/pages/concepts/nodes.mdx#best-practices","175":"docs/pages/concepts/nodes.mdx#next-steps","176":"docs/pages/concepts/shared-store.mdx#shared-store","177":"docs/pages/concepts/shared-store.mdx#creating-a-sharedstore","178":"docs/pages/concepts/shared-store.mdx#basic-operations","179":"docs/pages/concepts/shared-store.mdx#set-and-get","180":"docs/pages/concepts/shared-store.mdx#type-safe-getters","181":"docs/pages/concepts/shared-store.mdx#bind-method","182":"docs/pages/concepts/shared-store.mdx#utility-methods","183":"docs/pages/concepts/shared-store.mdx#getall","184":"docs/pages/concepts/shared-store.mdx#merge","185":"docs/pages/concepts/shared-store.mdx#thread-safety","186":"docs/pages/concepts/shared-store.mdx#common-patterns","187":"docs/pages/concepts/shared-store.mdx#configuration-storage","188":"docs/pages/concepts/shared-store.mdx#accumulating-results","189":"docs/pages/concepts/shared-store.mdx#state-management","190":"docs/pages/concepts/shared-store.mdx#error-context","191":"docs/pages/concepts/shared-store.mdx#batch-processing","192":"docs/pages/concepts/shared-store.mdx#isolation-in-batch-flows","193":"docs/pages/concepts/shared-store.mdx#best-practices","194":"docs/pages/concepts/shared-store.mdx#1-type-safety","195":"docs/pages/concepts/shared-store.mdx#2-key-naming","196":"docs/pages/concepts/shared-store.mdx#3-data-structure","197":"docs/pages/concepts/shared-store.mdx#4-cleanup","198":"docs/pages/concepts/shared-store.mdx#5-documentation","199":"docs/pages/concepts/shared-store.mdx#debugging","200":"docs/pages/concepts/shared-store.mdx#next-steps","201":"docs/pages/getting-started/installation.mdx#installation","202":"docs/pages/getting-started/installation.mdx#install-with-go-get","203":"docs/pages/getting-started/installation.mdx#import-in-your-code","204":"docs/pages/getting-started/installation.mdx#verify-installation","205":"docs/pages/getting-started/installation.mdx#next-steps","206":"docs/pages/getting-started/quick-start.mdx#quick-start","207":"docs/pages/getting-started/quick-start.mdx#your-first-node","208":"docs/pages/getting-started/quick-start.mdx#using-result-type-recommended-for-type-safety","209":"docs/pages/getting-started/quick-start.mdx#using-any-type-simple-approach","210":"docs/pages/getting-started/quick-start.mdx#building-a-flow","211":"docs/pages/getting-started/quick-start.mdx#adding-error-handling","212":"docs/pages/getting-started/quick-start.mdx#using-shared-store","213":"docs/pages/getting-started/quick-start.mdx#next-steps","214":"docs/pages/getting-started/template.mdx#project-template","215":"docs/pages/getting-started/template.mdx#quick-setup","216":"docs/pages/getting-started/template.mdx#whats-included","217":"docs/pages/getting-started/template.mdx#project-structure","218":"docs/pages/getting-started/template.mdx#example-code","219":"docs/pages/getting-started/template.mdx#maingo","220":"docs/pages/getting-started/template.mdx#customizing-the-template","221":"docs/pages/getting-started/template.mdx#adding-new-nodes","222":"docs/pages/getting-started/template.mdx#creating-new-flows","223":"docs/pages/getting-started/template.mdx#best-practices","224":"docs/pages/getting-started/template.mdx#deployment","225":"docs/pages/getting-started/template.mdx#next-steps","226":"docs/pages/patterns/branching.mdx#conditional-branching","227":"docs/pages/patterns/branching.mdx#simple-binary-branching","228":"docs/pages/patterns/branching.mdx#multi-way-branching","229":"docs/pages/patterns/branching.mdx#state-machine-pattern","230":"docs/pages/patterns/branching.mdx#dynamic-routing","231":"docs/pages/patterns/branching.mdx#weighted-routing","232":"docs/pages/patterns/branching.mdx#conditional-loops","233":"docs/pages/patterns/branching.mdx#pipeline-branching","234":"docs/pages/patterns/branching.mdx#feature-flags","235":"docs/pages/patterns/branching.mdx#ab-testing","236":"docs/pages/patterns/branching.mdx#best-practices","237":"docs/pages/patterns/branching.mdx#next-steps","238":"docs/pages/patterns/closures.mdx#configuration-via-closures","239":"docs/pages/patterns/closures.mdx#basic-closure-pattern","240":"docs/pages/patterns/closures.mdx#stateful-nodes","241":"docs/pages/patterns/closures.mdx#configuration-objects","242":"docs/pages/patterns/closures.mdx#factory-functions","243":"docs/pages/patterns/closures.mdx#resource-management","244":"docs/pages/patterns/closures.mdx#middleware-pattern","245":"docs/pages/patterns/closures.mdx#dynamic-configuration","246":"docs/pages/patterns/closures.mdx#dependency-injection","247":"docs/pages/patterns/closures.mdx#best-practices","248":"docs/pages/patterns/closures.mdx#next-steps","249":"docs/pages/patterns/error-handling.mdx#error-handling--retries","250":"docs/pages/patterns/error-handling.mdx#basic-retry-configuration","251":"docs/pages/patterns/error-handling.mdx#exponential-backoff","252":"docs/pages/patterns/error-handling.mdx#circuit-breaker-pattern","253":"docs/pages/patterns/error-handling.mdx#fallback-on-failure","254":"docs/pages/patterns/error-handling.mdx#error-aggregation","255":"docs/pages/patterns/error-handling.mdx#retry-with-jitter","256":"docs/pages/patterns/error-handling.mdx#selective-retry","257":"docs/pages/patterns/error-handling.mdx#error-context","258":"docs/pages/patterns/error-handling.mdx#timeout-handling","259":"docs/pages/patterns/error-handling.mdx#best-practices","260":"docs/pages/patterns/error-handling.mdx#next-steps","261":"docs/pages/patterns/fallback.mdx#fallback-on-failure","262":"docs/pages/patterns/fallback.mdx#fallbacknode-interface","263":"docs/pages/patterns/fallback.mdx#basic-fallback","264":"docs/pages/patterns/fallback.mdx#cached-fallback","265":"docs/pages/patterns/fallback.mdx#multi-level-fallback","266":"docs/pages/patterns/fallback.mdx#partial-fallback","267":"docs/pages/patterns/fallback.mdx#circuit-breaker-fallback","268":"docs/pages/patterns/fallback.mdx#fallback-with-metrics","269":"docs/pages/patterns/fallback.mdx#conditional-fallback","270":"docs/pages/patterns/fallback.mdx#best-practices","271":"docs/pages/patterns/fallback.mdx#next-steps"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[2,1,10],"1":[2,2,1],"2":[2,4,59],"3":[1,4,45],"4":[2,4,26],"5":[4,4,66],"6":[2,2,1],"7":[2,4,31],"8":[2,4,27],"9":[2,2,1],"10":[2,4,40],"11":[2,4,25],"12":[2,2,1],"13":[3,4,32],"14":[4,4,28],"15":[2,2,1],"16":[3,4,28],"17":[2,4,23],"18":[1,2,1],"19":[3,3,32],"20":[3,3,41],"21":[1,2,1],"22":[3,3,41],"23":[3,3,36],"24":[1,2,1],"25":[2,3,61],"26":[2,3,31],"27":[1,2,1],"28":[2,3,36],"29":[2,2,14],"30":[2,1,16],"31":[3,2,103],"32":[4,2,38],"33":[3,2,89],"34":[3,2,97],"35":[3,2,85],"36":[2,2,80],"37":[2,2,79],"38":[3,2,83],"39":[2,2,83],"40":[2,2,53],"41":[2,2,16],"42":[2,1,13],"43":[3,2,92],"44":[3,2,34],"45":[2,2,95],"46":[2,2,93],"47":[3,2,1],"48":[2,3,53],"49":[2,3,56],"50":[2,3,63],"51":[2,2,64],"52":[4,2,81],"53":[3,2,80],"54":[2,2,56],"55":[2,2,40],"56":[2,2,16],"57":[3,1,12],"58":[3,3,54],"59":[2,3,58],"60":[3,3,74],"61":[2,3,85],"62":[2,3,45],"63":[2,3,63],"64":[2,3,64],"65":[2,3,59],"66":[6,3,85],"67":[5,8,33],"68":[2,3,45],"69":[2,3,14],"70":[3,1,21],"71":[3,3,26],"72":[2,3,28],"73":[4,3,47],"74":[2,3,50],"75":[3,3,56],"76":[2,3,52],"77":[3,3,49],"78":[2,3,41],"79":[4,3,54],"80":[2,3,57],"81":[2,3,53],"82":[2,3,12],"83":[2,1,14],"84":[3,2,33],"85":[3,2,42],"86":[2,2,44],"87":[2,2,38],"88":[5,2,45],"89":[2,2,32],"90":[2,2,48],"91":[3,2,64],"92":[3,2,40],"93":[3,2,50],"94":[2,2,50],"95":[2,2,13],"96":[1,1,12],"97":[1,1,37],"98":[2,2,27],"99":[3,1,5],"100":[2,4,50],"101":[2,4,38],"102":[3,4,45],"103":[2,4,32],"104":[2,4,21],"105":[2,4,23],"106":[2,4,40],"107":[2,4,37],"108":[2,4,40],"109":[3,4,39],"110":[2,4,34],"111":[2,1,1],"112":[2,2,30],"113":[3,2,24],"114":[2,1,46],"115":[2,1,15],"116":[2,1,39],"117":[3,2,42],"118":[4,2,39],"119":[3,2,59],"120":[4,2,37],"121":[4,2,49],"122":[4,2,40],"123":[4,2,75],"124":[5,2,72],"125":[3,2,44],"126":[3,2,63],"127":[2,2,46],"128":[2,2,18],"129":[1,1,27],"130":[3,1,47],"131":[2,1,22],"132":[3,1,1],"133":[2,4,41],"134":[3,4,44],"135":[2,1,30],"136":[2,1,1],"137":[3,3,22],"138":[2,3,31],"139":[3,3,31],"140":[2,1,30],"141":[2,1,57],"142":[2,1,15],"143":[1,1,18],"144":[2,1,24],"145":[2,1,34],"146":[2,1,1],"147":[2,3,15],"148":[2,3,20],"149":[2,3,20],"150":[3,1,30],"151":[3,1,1],"152":[2,4,19],"153":[3,4,15],"154":[2,4,19],"155":[2,1,29],"156":[2,1,47],"157":[2,1,41],"158":[2,1,30],"159":[2,1,15],"160":[1,1,21],"161":[2,1,10],"162":[3,3,56],"163":[3,3,42],"164":[3,3,40],"165":[2,1,1],"166":[3,2,11],"167":[6,5,66],"168":[5,5,63],"169":[5,2,51],"170":[3,2,39],"171":[2,1,52],"172":[1,1,42],"173":[2,1,43],"174":[2,1,36],"175":[2,1,17],"176":[2,1,29],"177":[3,2,5],"178":[2,2,1],"179":[3,4,37],"180":[3,4,71],"181":[2,4,63],"182":[2,4,34],"183":[1,4,22],"184":[1,4,22],"185":[2,2,38],"186":[2,2,1],"187":[2,4,64],"188":[2,4,43],"189":[2,4,37],"190":[2,4,38],"191":[2,2,32],"192":[4,2,54],"193":[2,2,1],"194":[3,4,45],"195":[3,4,20],"196":[3,4,28],"197":[2,4,16],"198":[2,4,29],"199":[1,2,25],"200":[2,2,17],"201":[1,1,8],"202":[4,1,7],"203":[4,1,7],"204":[2,1,41],"205":[2,1,20],"206":[2,1,14],"207":[3,2,18],"208":[7,5,55],"209":[6,5,45],"210":[3,2,86],"211":[3,2,53],"212":[3,2,45],"213":[2,2,32],"214":[2,1,15],"215":[2,2,28],"216":[4,2,4],"217":[2,6,37],"218":[2,6,24],"219":[2,6,52],"220":[3,2,1],"221":[3,4,38],"222":[3,4,32],"223":[2,2,46],"224":[1,2,23],"225":[2,2,15],"226":[2,1,12],"227":[3,2,50],"228":[3,2,52],"229":[3,2,55],"230":[2,2,52],"231":[2,2,74],"232":[2,2,66],"233":[2,2,61],"234":[2,2,53],"235":[3,2,80],"236":[2,2,54],"237":[2,2,16],"238":[3,1,13],"239":[3,3,77],"240":[2,3,40],"241":[2,3,72],"242":[2,3,80],"243":[2,3,48],"244":[2,3,52],"245":[2,3,39],"246":[2,3,61],"247":[2,3,39],"248":[2,3,16],"249":[4,1,11],"250":[3,4,58],"251":[2,4,57],"252":[3,4,56],"253":[3,4,63],"254":[2,4,78],"255":[3,4,24],"256":[2,4,50],"257":[2,4,49],"258":[2,4,47],"259":[2,4,42],"260":[2,4,16],"261":[3,1,22],"262":[2,3,15],"263":[2,3,50],"264":[2,3,77],"265":[3,3,72],"266":[2,3,53],"267":[3,3,74],"268":[3,3,50],"269":[2,3,50],"270":[2,3,60],"271":[2,3,17]},"averageFieldLength":[2.4522058823529416,2.5551470588235308,38.628676470588275],"storedFields":{"0":{"href":"/best-practices#best-practices","html":"</header>\n<p>Follow these guidelines to build robust, maintainable Flyt workflows.</p>\n","isPage":true,"text":"\nFollow these guidelines to build robust, maintainable Flyt workflows.\n","title":"Best Practices","titles":[]},"1":{"href":"/best-practices#node-design","html":"\n","isPage":false,"text":"\n","title":"Node Design","titles":["Best Practices"]},"2":{"href":"/best-practices#single-responsibility","html":"\n<p>Each node should do one thing well:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ❌ Bad: Node doing too much</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Fetch data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Validate</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isValid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">New</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Transform</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        transformed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> transform</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Save</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        saveToDatabase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transformed)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> transformed, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ✅ Good: Separate concerns</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fetchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFetchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">validateNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidateNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">transformNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTransformNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">saveNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSaveNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, transformNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transformNode, flyt.DefaultAction, saveNode)</span></span></code></pre>\n","isPage":false,"text":"\nEach node should do one thing well:\n// ❌ Bad: Node doing too much\nnode := flyt.NewNode(\n    flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n        // Fetch data\n        data := fetchFromAPI()\n        // Validate\n        if !isValid(data) {\n            return nil, errors.New(&quot;invalid&quot;)\n        }\n        // Transform\n        transformed := transform(data)\n        // Save\n        saveToDatabase(transformed)\n        return transformed, nil\n    }),\n)\n \n// ✅ Good: Separate concerns\nfetchNode := createFetchNode()\nvalidateNode := createValidateNode()\ntransformNode := createTransformNode()\nsaveNode := createSaveNode()\n \nflow := flyt.NewFlow(fetchNode)\nflow.Connect(fetchNode, flyt.DefaultAction, validateNode)\nflow.Connect(validateNode, &quot;valid&quot;, transformNode)\nflow.Connect(transformNode, flyt.DefaultAction, saveNode)\n","title":"Single Responsibility","titles":["Best Practices","Node Design"]},"3":{"href":"/best-practices#idempotency","html":"\n<p>Design nodes to be safely retryable:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ✅ Good: Idempotent operation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SaveNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Record</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Use upsert instead of insert</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    _, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> db.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        INSERT INTO records (id, data) VALUES (?, ?)</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        ON CONFLICT (id) DO UPDATE SET data = ?</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    `</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data.ID, data.Data, data.Data)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data.ID, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nDesign nodes to be safely retryable:\n// ✅ Good: Idempotent operation\nfunc (n *SaveNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    data := prepResult.(Record)\n    \n    // Use upsert instead of insert\n    _, err := db.Exec(`\n        INSERT INTO records (id, data) VALUES (?, ?)\n        ON CONFLICT (id) DO UPDATE SET data = ?\n    `, data.ID, data.Data, data.Data)\n    \n    return data.ID, err\n}\n","title":"Idempotency","titles":["Best Practices","Node Design"]},"4":{"href":"/best-practices#error-handling","html":"\n<p>Return clear, actionable errors:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ❌ Bad: Generic error</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">New</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ✅ Good: Descriptive error</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed to fetch user </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, userID, err)</span></span></code></pre>\n","isPage":false,"text":"\nReturn clear, actionable errors:\n// ❌ Bad: Generic error\nreturn nil, errors.New(&quot;failed&quot;)\n \n// ✅ Good: Descriptive error\nreturn nil, fmt.Errorf(&quot;failed to fetch user %d: %w&quot;, userID, err)\n","title":"Error Handling","titles":["Best Practices","Node Design"]},"5":{"href":"/best-practices#type-safe-sharedstore-access","html":"\n<p>Use type-safe helpers to avoid runtime panics:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ❌ Bad: Manual type assertion can panic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    val, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Panics if val is nil or not int</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ✅ Good: Type-safe getter with default</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns 0 if not found</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Or with custom default</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ✅ Good: Bind complex types</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Config</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid config: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUse type-safe helpers to avoid runtime panics:\n// ❌ Bad: Manual type assertion can panic\nfunc (n *MyNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    val, _ := shared.Get(&quot;count&quot;)\n    count := val.(int)  // Panics if val is nil or not int\n    return count, nil\n}\n \n// ✅ Good: Type-safe getter with default\nfunc (n *MyNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    count := shared.GetInt(&quot;count&quot;)  // Returns 0 if not found\n    // Or with custom default\n    count := shared.GetIntOr(&quot;count&quot;, -1)\n    return count, nil\n}\n \n// ✅ Good: Bind complex types\nfunc (n *MyNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    var config Config\n    if err := shared.Bind(&quot;config&quot;, &amp;config); err != nil {\n        return nil, fmt.Errorf(&quot;invalid config: %w&quot;, err)\n    }\n    return config, nil\n}\n","title":"Type-Safe SharedStore Access","titles":["Best Practices","Node Design"]},"6":{"href":"/best-practices#flow-design","html":"\n","isPage":false,"text":"\n","title":"Flow Design","titles":["Best Practices"]},"7":{"href":"/best-practices#modular-flows","html":"\n<p>Create reusable sub-flows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Reusable validation flow</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    schemaCheck </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSchemaValidator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    businessRules </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createBusinessValidator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaCheck)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaCheck, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, businessRules)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use in multiple places</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">apiFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(parseNode, flyt.DefaultAction, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nCreate reusable sub-flows:\n// Reusable validation flow\nfunc createValidationFlow() *flyt.Flow {\n    schemaCheck := createSchemaValidator()\n    businessRules := createBusinessValidator()\n    \n    flow := flyt.NewFlow(schemaCheck)\n    flow.Connect(schemaCheck, &quot;valid&quot;, businessRules)\n    return flow\n}\n \n// Use in multiple places\nmainFlow.Connect(fetchNode, flyt.DefaultAction, createValidationFlow())\napiFlow.Connect(parseNode, flyt.DefaultAction, createValidationFlow())\n","title":"Modular Flows","titles":["Best Practices","Flow Design"]},"8":{"href":"/best-practices#error-boundaries","html":"\n<p>Centralize error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFlowWithErrorHandling</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errorHandler </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createErrorHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Connect all error paths to handler</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{startNode, processNode, saveNode} {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCentralize error handling:\nfunc createFlowWithErrorHandling() *flyt.Flow {\n    flow := flyt.NewFlow(startNode)\n    errorHandler := createErrorHandler()\n    \n    // Connect all error paths to handler\n    for _, node := range []flyt.Node{startNode, processNode, saveNode} {\n        flow.Connect(node, &quot;error&quot;, errorHandler)\n    }\n    \n    return flow\n}\n","title":"Error Boundaries","titles":["Best Practices","Flow Design"]},"9":{"href":"/best-practices#context-handling","html":"\n","isPage":false,"text":"\n","title":"Context Handling","titles":["Best Practices"]},"10":{"href":"/best-practices#respect-cancellation","html":"\n<p>Always check context in long-running operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Check context before each iteration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(results, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAlways check context in long-running operations:\nfunc (n *ProcessNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    items := prepResult.([]Item)\n    results := []Result{}\n    \n    for _, item := range items {\n        // Check context before each iteration\n        select {\n        case &lt;-ctx.Done():\n            return nil, ctx.Err()\n        default:\n        }\n        \n        result := processItem(ctx, item)\n        results = append(results, result)\n    }\n    \n    return results, nil\n}\n","title":"Respect Cancellation","titles":["Best Practices","Context Handling"]},"11":{"href":"/best-practices#timeout-management","html":"\n<p>Set appropriate timeouts:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">APINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create timeout context</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx, cancel </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithTimeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> cancel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nSet appropriate timeouts:\nfunc (n *APINode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Create timeout context\n    ctx, cancel := context.WithTimeout(ctx, 30*time.Second)\n    defer cancel()\n    \n    return callAPI(ctx, prepResult)\n}\n","title":"Timeout Management","titles":["Best Practices","Context Handling"]},"12":{"href":"/best-practices#concurrency-safety","html":"\n","isPage":false,"text":"\n","title":"Concurrency Safety","titles":["Best Practices"]},"13":{"href":"/best-practices#thread-safe-nodes","html":"\n<p>Protect shared state in nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CounterNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu    </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CounterNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    current </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.count</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> current, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nProtect shared state in nodes:\ntype CounterNode struct {\n    *flyt.BaseNode\n    mu    sync.Mutex\n    count int\n}\n \nfunc (n *CounterNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    n.mu.Lock()\n    n.count++\n    current := n.count\n    n.mu.Unlock()\n    \n    return current, nil\n}\n","title":"Thread-Safe Nodes","titles":["Best Practices","Concurrency Safety"]},"14":{"href":"/best-practices#avoid-shared-node-instances","html":"\n<p>Create new instances for concurrent use:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ❌ Bad: Sharing node instance</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, node, shared) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Race condition!</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ✅ Good: Create new instances</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), shared)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCreate new instances for concurrent use:\n// ❌ Bad: Sharing node instance\nnode := createProcessNode()\nfor i := 0; i &lt; 10; i++ {\n    go flyt.Run(ctx, node, shared) // Race condition!\n}\n \n// ✅ Good: Create new instances\nfor i := 0; i &lt; 10; i++ {\n    go flyt.Run(ctx, createProcessNode(), shared)\n}\n","title":"Avoid Shared Node Instances","titles":["Best Practices","Concurrency Safety"]},"15":{"href":"/best-practices#resource-management","html":"\n","isPage":false,"text":"\n","title":"Resource Management","titles":["Best Practices"]},"16":{"href":"/best-practices#clean-up-resources","html":"\n<p>Use defer for cleanup:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FileNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    file, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> os.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Open</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> file.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Always cleanup</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process file...</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(file)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUse defer for cleanup:\nfunc (n *FileNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    file, err := os.Open(prepResult.(string))\n    if err != nil {\n        return nil, err\n    }\n    defer file.Close() // Always cleanup\n    \n    // Process file...\n    return processFile(file)\n}\n","title":"Clean Up Resources","titles":["Best Practices","Resource Management"]},"17":{"href":"/best-practices#connection-pooling","html":"\n<p>Reuse expensive resources:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DatabaseFlow</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DB</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewDatabaseFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">db</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DB</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{db: db}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">f </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        db: f.db, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Reuse connection pool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nReuse expensive resources:\ntype DatabaseFlow struct {\n    db *sql.DB\n}\n \nfunc NewDatabaseFlow(db *sql.DB) *DatabaseFlow {\n    return &amp;DatabaseFlow{db: db}\n}\n \nfunc (f *DatabaseFlow) CreateNode() flyt.Node {\n    return &amp;DatabaseNode{\n        BaseNode: flyt.NewBaseNode(),\n        db: f.db, // Reuse connection pool\n    }\n}\n","title":"Connection Pooling","titles":["Best Practices","Resource Management"]},"18":{"href":"/best-practices#testing","html":"\n","isPage":false,"text":"\n","title":"Testing","titles":["Best Practices"]},"19":{"href":"/best-practices#unit-test-nodes","html":"\n<p>Test nodes in isolation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">testing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test successful case</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;test input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Equal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;expected output&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test error case</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTest nodes in isolation:\nfunc TestProcessNode(t *testing.T) {\n    node := createProcessNode()\n    ctx := context.Background()\n    \n    // Test successful case\n    result, err := node.Exec(ctx, &quot;test input&quot;)\n    assert.NoError(t, err)\n    assert.Equal(t, &quot;expected output&quot;, result)\n    \n    // Test error case\n    result, err = node.Exec(ctx, nil)\n    assert.Error(t, err)\n}\n","title":"Unit Test Nodes","titles":["Best Practices","Testing"]},"20":{"href":"/best-practices#integration-test-flows","html":"\n<p>Test complete workflows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestCompleteFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">testing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMainFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, testData)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Use type-safe getter or Bind for results</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">OutputData</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;output&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Equal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, expectedResult, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTest complete workflows:\nfunc TestCompleteFlow(t *testing.T) {\n    flow := createMainFlow()\n    shared := flyt.NewSharedStore()\n    shared.Set(&quot;input&quot;, testData)\n    \n    ctx := context.Background()\n    err := flow.Run(ctx, shared)\n    assert.NoError(t, err)\n    \n    // Use type-safe getter or Bind for results\n    var result OutputData\n    err = shared.Bind(&quot;output&quot;, &amp;result)\n    assert.NoError(t, err)\n    assert.Equal(t, expectedResult, result)\n}\n","title":"Integration Test Flows","titles":["Best Practices","Testing"]},"21":{"href":"/best-practices#documentation","html":"\n","isPage":false,"text":"\n","title":"Documentation","titles":["Best Practices"]},"22":{"href":"/best-practices#document-node-behavior","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// FetchUserNode fetches user data from the API.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Prep: Reads &quot;user_id&quot; from SharedStore</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Exec: Fetches user from API, retries on network errors</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Post: Stores user data in &quot;user_data&quot; key</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Actions:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;success&quot;: User fetched successfully</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;not_found&quot;: User does not exist</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;error&quot;: Unrecoverable error occurred</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FetchUserNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    apiClient </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">APIClient</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// FetchUserNode fetches user data from the API.\n// \n// Prep: Reads &quot;user_id&quot; from SharedStore\n// Exec: Fetches user from API, retries on network errors\n// Post: Stores user data in &quot;user_data&quot; key\n// Actions:\n//   - &quot;success&quot;: User fetched successfully\n//   - &quot;not_found&quot;: User does not exist\n//   - &quot;error&quot;: Unrecoverable error occurred\ntype FetchUserNode struct {\n    *flyt.BaseNode\n    apiClient *APIClient\n}\n","title":"Document Node Behavior","titles":["Best Practices","Documentation"]},"23":{"href":"/best-practices#document-flow-structure","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// CreateOrderFlow processes new orders:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1. Validates order data</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 2. Checks inventory</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 3. Processes payment</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 4. Creates shipment</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 5. Sends confirmation</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Required SharedStore keys:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;order_data&quot;: OrderData struct</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;customer_id&quot;: string</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Sets SharedStore keys:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;order_id&quot;: string</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   - &quot;tracking_number&quot;: string</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> CreateOrderFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// CreateOrderFlow processes new orders:\n// 1. Validates order data\n// 2. Checks inventory\n// 3. Processes payment\n// 4. Creates shipment\n// 5. Sends confirmation\n//\n// Required SharedStore keys:\n//   - &quot;order_data&quot;: OrderData struct\n//   - &quot;customer_id&quot;: string\n//\n// Sets SharedStore keys:\n//   - &quot;order_id&quot;: string\n//   - &quot;tracking_number&quot;: string\nfunc CreateOrderFlow() *flyt.Flow {\n    // ...\n}\n","title":"Document Flow Structure","titles":["Best Practices","Documentation"]},"24":{"href":"/best-practices#performance","html":"\n","isPage":false,"text":"\n","title":"Performance","titles":["Best Practices"]},"25":{"href":"/best-practices#batch-operations","html":"\n<p>Process items in batches when possible:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Instead of processing one at a time</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    process</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use BatchNode for efficient batch processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">process</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Aggregate results</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> processed []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, r </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">r.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                processed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processed, r.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processed)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchConcurrency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process concurrently</span></span></code></pre>\n","isPage":false,"text":"\nProcess items in batches when possible:\n// Instead of processing one at a time\nfor _, item := range items {\n    process(item)\n}\n \n// Use BatchNode for efficient batch processing\nbatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        items := shared.GetSlice(&quot;items&quot;)\n        results := make([]flyt.Result, len(items))\n        for i, item := range items {\n            results[i] = flyt.NewResult(item)\n        }\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n        return flyt.NewResult(process(item.Value()))\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n        // Aggregate results\n        var processed []any\n        for _, r := range results {\n            if !r.IsError() {\n                processed = append(processed, r.Value())\n            }\n        }\n        shared.Set(&quot;processed&quot;, processed)\n        return flyt.DefaultAction, nil\n    }).\n    WithBatchConcurrency(10)  // Process concurrently\n","title":"Batch Operations","titles":["Best Practices","Performance"]},"26":{"href":"/best-practices#lazy-loading","html":"\n<p>Load data only when needed:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Only load the data this node needs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> needsUserData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(shared) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        userData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> loadUserData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> userData, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nLoad data only when needed:\nfunc (n *ProcessNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    // Only load the data this node needs\n    if needsUserData(shared) {\n        userData := loadUserData()\n        return userData, nil\n    }\n    return nil, nil\n}\n","title":"Lazy Loading","titles":["Best Practices","Performance"]},"27":{"href":"/best-practices#monitoring","html":"\n","isPage":false,"text":"\n","title":"Monitoring","titles":["Best Practices"]},"28":{"href":"/best-practices#add-observability","html":"\n<p>Log important events:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    start </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ProcessNode took </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(start))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ProcessNode error: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ProcessNode success: processed </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nLog important events:\nfunc (n *ProcessNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    start := time.Now()\n    defer func() {\n        log.Printf(&quot;ProcessNode took %v&quot;, time.Since(start))\n    }()\n    \n    result, err := process(prepResult)\n    if err != nil {\n        log.Printf(&quot;ProcessNode error: %v&quot;, err)\n        return nil, err\n    }\n    \n    log.Printf(&quot;ProcessNode success: processed %d items&quot;, len(result))\n    return result, nil\n}\n","title":"Add Observability","titles":["Best Practices","Monitoring"]},"29":{"href":"/best-practices#next-steps","html":"\n<ul>\n<li><a href=\"https://github.com/mark3labs/flyt/tree/main/cookbook\">Examples</a> - See best practices in action</li>\n<li><a href=\"/advanced/custom-nodes\">Advanced Usage</a> - Advanced patterns</li>\n<li><a href=\"/concepts/nodes\">Core Concepts</a> - Review fundamentals</li>\n</ul>","isPage":false,"text":"\n\nExamples - See best practices in action\nAdvanced Usage - Advanced patterns\nCore Concepts - Review fundamentals\n","title":"Next Steps","titles":["Best Practices"]},"30":{"href":"/advanced/batch-flows#batch-flows","html":"</header>\n<p>Process multiple parameter sets through flows using BatchNode, perfect for handling multiple entities or parallel workflows.</p>\n","isPage":true,"text":"\nProcess multiple parameter sets through flows using BatchNode, perfect for handling multiple entities or parallel workflows.\n","title":"Batch Flows","titles":[]},"31":{"href":"/advanced/batch-flows#basic-batch-flow","html":"\n<p>Use BatchNode to process multiple parameter sets:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a batch node that processes multiple user parameters</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Prepare multiple parameter sets</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;email&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user1@example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;email&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user2@example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;email&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user3@example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">params</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process each parameter set</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> params.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">MustMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        email </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;email&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Run your processing logic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processUser</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(userID, email)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">params</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Aggregate results from all parameter sets</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> allResults []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, r </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> r.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Failed to process user </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, params[i].</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), r.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors, r.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                allResults </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(allResults, r.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;all_results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, allResults)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;partial_success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a flow starting with the batch node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(batchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(batchNode, flyt.DefaultAction, aggregateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(batchNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;partial_success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorHandlerNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Run the flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared)</span></span></code></pre>\n","isPage":false,"text":"\nUse BatchNode to process multiple parameter sets:\n// Create a batch node that processes multiple user parameters\nbatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        // Prepare multiple parameter sets\n        return []flyt.Result{\n            flyt.NewResult(map[string]any{&quot;user_id&quot;: 1, &quot;email&quot;: &quot;user1@example.com&quot;}),\n            flyt.NewResult(map[string]any{&quot;user_id&quot;: 2, &quot;email&quot;: &quot;user2@example.com&quot;}),\n            flyt.NewResult(map[string]any{&quot;user_id&quot;: 3, &quot;email&quot;: &quot;user3@example.com&quot;}),\n        }, nil\n    }).\n    WithExecFunc(func(ctx context.Context, params flyt.Result) (flyt.Result, error) {\n        // Process each parameter set\n        data := params.MustMap()\n        userID := data[&quot;user_id&quot;].(int)\n        email := data[&quot;email&quot;].(string)\n        \n        // Run your processing logic\n        result := processUser(userID, email)\n        return flyt.NewResult(result), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, params, results []flyt.Result) (flyt.Action, error) {\n        // Aggregate results from all parameter sets\n        var allResults []any\n        var errors []error\n        \n        for i, r := range results {\n            if r.IsError() {\n                log.Printf(&quot;Failed to process user %v: %v&quot;, params[i].Value(), r.Error())\n                errors = append(errors, r.Error())\n            } else {\n                allResults = append(allResults, r.Value())\n            }\n        }\n        \n        shared.Set(&quot;all_results&quot;, allResults)\n        shared.Set(&quot;error_count&quot;, len(errors))\n        \n        if len(errors) &gt; 0 {\n            return &quot;partial_success&quot;, nil\n        }\n        return flyt.DefaultAction, nil\n    })\n \n// Create a flow starting with the batch node\nflow := flyt.NewFlow(batchNode)\nflow.Connect(batchNode, flyt.DefaultAction, aggregateNode)\nflow.Connect(batchNode, &quot;partial_success&quot;, errorHandlerNode)\n \n// Run the flow\nshared := flyt.NewSharedStore()\nerr := flow.Run(ctx, shared)\n","title":"Basic Batch Flow","titles":["Batch Flows"]},"32":{"href":"/advanced/batch-flows#sequential-vs-concurrent-execution","html":"\n<p>Control how parameter sets are processed:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Sequential - process one at a time, maintains order</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sequentialBatch </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepFunc).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execFunc).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(postFunc).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchConcurrency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0 = sequential</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Concurrent - process multiple in parallel</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">concurrentBatch </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepFunc).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execFunc).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(postFunc).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchConcurrency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process up to 10 concurrently</span></span></code></pre>\n","isPage":false,"text":"\nControl how parameter sets are processed:\n// Sequential - process one at a time, maintains order\nsequentialBatch := flyt.NewBatchNode().\n    WithPrepFunc(prepFunc).\n    WithExecFunc(execFunc).\n    WithPostFunc(postFunc).\n    WithBatchConcurrency(0)  // 0 = sequential\n \n// Concurrent - process multiple in parallel\nconcurrentBatch := flyt.NewBatchNode().\n    WithPrepFunc(prepFunc).\n    WithExecFunc(execFunc).\n    WithPostFunc(postFunc).\n    WithBatchConcurrency(10)  // Process up to 10 concurrently\n","title":"Sequential vs Concurrent Execution","titles":["Batch Flows"]},"33":{"href":"/advanced/batch-flows#dynamic-input-generation","html":"\n<p>Generate inputs based on runtime data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Get configuration from shared store</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;batch_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        batchSize </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;size&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Fetch data from database</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        users, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchUsers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(batchSize)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed to fetch users: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Convert to Results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(users))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, user </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> users {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   user.ID,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;user_name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: user.Name,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;user_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: user,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">userResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        userData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> userResult.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">MustMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        user </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> userData[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">User</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process individual user</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        processed, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processUserData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(user)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed to process user </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, user.ID, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processed), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">users</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        successCount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                successCount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Processed </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> users successfully&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, successCount, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(users))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;success_rate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(successCount)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(users)))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span></code></pre>\n","isPage":false,"text":"\nGenerate inputs based on runtime data:\nbatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        // Get configuration from shared store\n        config := shared.GetMap(&quot;batch_config&quot;)\n        batchSize := config[&quot;size&quot;].(int)\n        \n        // Fetch data from database\n        users, err := fetchUsers(batchSize)\n        if err != nil {\n            return nil, fmt.Errorf(&quot;failed to fetch users: %w&quot;, err)\n        }\n        \n        // Convert to Results\n        results := make([]flyt.Result, len(users))\n        for i, user := range users {\n            results[i] = flyt.NewResult(map[string]any{\n                &quot;user_id&quot;:   user.ID,\n                &quot;user_name&quot;: user.Name,\n                &quot;user_data&quot;: user,\n            })\n        }\n        \n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, userResult flyt.Result) (flyt.Result, error) {\n        userData := userResult.MustMap()\n        user := userData[&quot;user_data&quot;].(User)\n        \n        // Process individual user\n        processed, err := processUserData(user)\n        if err != nil {\n            return flyt.Result{}, fmt.Errorf(&quot;failed to process user %d: %w&quot;, user.ID, err)\n        }\n        \n        return flyt.NewResult(processed), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, users, results []flyt.Result) (flyt.Action, error) {\n        successCount := 0\n        for _, result := range results {\n            if !result.IsError() {\n                successCount++\n            }\n        }\n        \n        log.Printf(&quot;Processed %d/%d users successfully&quot;, successCount, len(users))\n        shared.Set(&quot;success_rate&quot;, float64(successCount)/float64(len(users)))\n        \n        return flyt.DefaultAction, nil\n    })\n","title":"Dynamic Input Generation","titles":["Batch Flows"]},"34":{"href":"/advanced/batch-flows#complex-processing-pipeline","html":"\n<p>Create sophisticated processing for each batch item:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a batch node that runs a multi-step pipeline for each item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pipelineBatchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        orders </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;orders&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(orders))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, order </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> orders {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(order)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">orderResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> order </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Order</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> orderResult.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">order); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Multi-step processing pipeline</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Step 1: Validate</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> validateOrder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(order); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;validation failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Step 2: Enrich</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        enrichedOrder, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> enrichOrderData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(order)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;enrichment failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Step 3: Process</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        processedOrder, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processOrder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(enrichedOrder)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Step 4: Save</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> saveOrder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processedOrder); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;save failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processedOrder), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">orders</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> processed []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Order</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> failed []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                original </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> orders[i].</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                failed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(failed, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                    &quot;order&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: original,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                    &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> order </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Order</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">order)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                processed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processed, order)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processed_orders&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processed)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed_orders&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, failed)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(failed) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;has_failures&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;all_success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchConcurrency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchErrorHandling</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Continue processing despite failures</span></span></code></pre>\n","isPage":false,"text":"\nCreate sophisticated processing for each batch item:\n// Create a batch node that runs a multi-step pipeline for each item\npipelineBatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        orders := shared.GetSlice(&quot;orders&quot;)\n        results := make([]flyt.Result, len(orders))\n        for i, order := range orders {\n            results[i] = flyt.NewResult(order)\n        }\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, orderResult flyt.Result) (flyt.Result, error) {\n        var order Order\n        if err := orderResult.Bind(&amp;order); err != nil {\n            return flyt.Result{}, err\n        }\n        \n        // Multi-step processing pipeline\n        // Step 1: Validate\n        if err := validateOrder(order); err != nil {\n            return flyt.Result{}, fmt.Errorf(&quot;validation failed: %w&quot;, err)\n        }\n        \n        // Step 2: Enrich\n        enrichedOrder, err := enrichOrderData(order)\n        if err != nil {\n            return flyt.Result{}, fmt.Errorf(&quot;enrichment failed: %w&quot;, err)\n        }\n        \n        // Step 3: Process\n        processedOrder, err := processOrder(enrichedOrder)\n        if err != nil {\n            return flyt.Result{}, fmt.Errorf(&quot;processing failed: %w&quot;, err)\n        }\n        \n        // Step 4: Save\n        if err := saveOrder(processedOrder); err != nil {\n            return flyt.Result{}, fmt.Errorf(&quot;save failed: %w&quot;, err)\n        }\n        \n        return flyt.NewResult(processedOrder), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, orders, results []flyt.Result) (flyt.Action, error) {\n        var processed []Order\n        var failed []map[string]any\n        \n        for i, result := range results {\n            if result.IsError() {\n                original := orders[i].Value()\n                failed = append(failed, map[string]any{\n                    &quot;order&quot;: original,\n                    &quot;error&quot;: result.Error().Error(),\n                })\n            } else {\n                var order Order\n                result.Bind(&amp;order)\n                processed = append(processed, order)\n            }\n        }\n        \n        shared.Set(&quot;processed_orders&quot;, processed)\n        shared.Set(&quot;failed_orders&quot;, failed)\n        \n        if len(failed) &gt; 0 {\n            return &quot;has_failures&quot;, nil\n        }\n        return &quot;all_success&quot;, nil\n    }).\n    WithBatchConcurrency(5).\n    WithBatchErrorHandling(true)  // Continue processing despite failures\n","title":"Complex Processing Pipeline","titles":["Batch Flows"]},"35":{"href":"/advanced/batch-flows#batch-with-configuration","html":"\n<p>Pass configuration to batch processing:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createConfiguredBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">config</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ProcessConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BatchNodeBuilder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Use config to determine what to process</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config.Source {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;database&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                data, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromDB</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config.DBConfig)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items, flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;api&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                data, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config.APIConfig)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items, flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;unknown source: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, config.Source)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Apply configuration to processing</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config.ValidateEnabled {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> validate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                    return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), config.ProcessOptions)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config.TransformEnabled {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> transform</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result, config.TransformOptions)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Save based on configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> successful []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    successful </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(successful, result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config.SaveEnabled {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> saveResults</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(successful, config.SaveOptions); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;save failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, successful)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithBatchConcurrency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config.Concurrency).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config.MaxRetries)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPass configuration to batch processing:\nfunc createConfiguredBatchNode(config ProcessConfig) *flyt.BatchNodeBuilder {\n    return flyt.NewBatchNode().\n        WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n            // Use config to determine what to process\n            var items []flyt.Result\n            \n            switch config.Source {\n            case &quot;database&quot;:\n                data, err := fetchFromDB(config.DBConfig)\n                if err != nil {\n                    return nil, err\n                }\n                for _, item := range data {\n                    items = append(items, flyt.NewResult(item))\n                }\n            case &quot;api&quot;:\n                data, err := fetchFromAPI(config.APIConfig)\n                if err != nil {\n                    return nil, err\n                }\n                for _, item := range data {\n                    items = append(items, flyt.NewResult(item))\n                }\n            default:\n                return nil, fmt.Errorf(&quot;unknown source: %s&quot;, config.Source)\n            }\n            \n            return items, nil\n        }).\n        WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n            // Apply configuration to processing\n            if config.ValidateEnabled {\n                if err := validate(item.Value()); err != nil {\n                    return flyt.Result{}, err\n                }\n            }\n            \n            result := process(item.Value(), config.ProcessOptions)\n            \n            if config.TransformEnabled {\n                result = transform(result, config.TransformOptions)\n            }\n            \n            return flyt.NewResult(result), nil\n        }).\n        WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n            // Save based on configuration\n            var successful []any\n            for _, result := range results {\n                if !result.IsError() {\n                    successful = append(successful, result.Value())\n                }\n            }\n            \n            if config.SaveEnabled {\n                if err := saveResults(successful, config.SaveOptions); err != nil {\n                    return &quot;&quot;, fmt.Errorf(&quot;save failed: %w&quot;, err)\n                }\n            }\n            \n            shared.Set(&quot;results&quot;, successful)\n            return flyt.DefaultAction, nil\n        }).\n        WithBatchConcurrency(config.Concurrency).\n        WithMaxRetries(config.MaxRetries)\n}\n","title":"Batch with Configuration","titles":["Batch Flows"]},"36":{"href":"/advanced/batch-flows#result-aggregation","html":"\n<p>Collect and aggregate results from batch processing:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">aggregatingBatchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        metrics </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;metrics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(metrics))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, metric </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> metrics {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(metric)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">metric</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Metric</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> metric.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">m); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Calculate metric value</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> calculateMetric</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(m)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  m.Name,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: value,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;timestamp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">metrics</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Aggregate all metric results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        aggregated </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;timestamp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;metrics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{},</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;summary&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> total </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> min, max </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                metricData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">MustMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                aggregated[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;metrics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    aggregated[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;metrics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    metricData,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> metricData[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                total </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> min {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    min </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> max {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    max </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            aggregated[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;summary&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   count,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;total&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   total,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;average&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: total </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(count),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;min&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     min,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;max&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     max,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;aggregated_metrics&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, aggregated)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span></code></pre>\n","isPage":false,"text":"\nCollect and aggregate results from batch processing:\naggregatingBatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        metrics := shared.GetSlice(&quot;metrics&quot;)\n        results := make([]flyt.Result, len(metrics))\n        for i, metric := range metrics {\n            results[i] = flyt.NewResult(metric)\n        }\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, metric flyt.Result) (flyt.Result, error) {\n        var m Metric\n        if err := metric.Bind(&amp;m); err != nil {\n            return flyt.Result{}, err\n        }\n        \n        // Calculate metric value\n        value, err := calculateMetric(m)\n        if err != nil {\n            return flyt.Result{}, err\n        }\n        \n        return flyt.NewResult(map[string]any{\n            &quot;name&quot;:  m.Name,\n            &quot;value&quot;: value,\n            &quot;timestamp&quot;: time.Now(),\n        }), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, metrics, results []flyt.Result) (flyt.Action, error) {\n        // Aggregate all metric results\n        aggregated := map[string]any{\n            &quot;timestamp&quot;: time.Now(),\n            &quot;metrics&quot;:   []map[string]any{},\n            &quot;summary&quot;:   map[string]any{},\n        }\n        \n        var total float64\n        var count int\n        var min, max float64\n        \n        for _, result := range results {\n            if !result.IsError() {\n                metricData := result.MustMap()\n                aggregated[&quot;metrics&quot;] = append(\n                    aggregated[&quot;metrics&quot;].([]map[string]any),\n                    metricData,\n                )\n                \n                value := metricData[&quot;value&quot;].(float64)\n                total += value\n                count++\n                \n                if count == 1 || value &lt; min {\n                    min = value\n                }\n                if value &gt; max {\n                    max = value\n                }\n            }\n        }\n        \n        if count &gt; 0 {\n            aggregated[&quot;summary&quot;] = map[string]any{\n                &quot;count&quot;:   count,\n                &quot;total&quot;:   total,\n                &quot;average&quot;: total / float64(count),\n                &quot;min&quot;:     min,\n                &quot;max&quot;:     max,\n            }\n        }\n        \n        shared.Set(&quot;aggregated_metrics&quot;, aggregated)\n        return flyt.DefaultAction, nil\n    })\n","title":"Result Aggregation","titles":["Batch Flows"]},"37":{"href":"/advanced/batch-flows#progress-tracking","html":"\n<p>Track progress across batch execution:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">progressBatchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        tasks </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;tasks&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tasks))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Starting batch processing of </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tasks&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tasks))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;total_tasks&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tasks))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;start_time&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, task </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tasks {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(task)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process task</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processTask</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(task.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">tasks</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        startTime </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;start_time&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        duration </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startTime)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        successful </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        failed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                failed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                successful</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Batch completed in </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successful, </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed out of </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> total&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                   duration, successful, failed, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tasks))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;batch_stats&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;total&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:      </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tasks),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;successful&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: successful,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     failed,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;duration&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   duration.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Seconds</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;rate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:       </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tasks)) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> duration.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Seconds</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchConcurrency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nTrack progress across batch execution:\nprogressBatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        tasks := shared.GetSlice(&quot;tasks&quot;)\n        results := make([]flyt.Result, len(tasks))\n        \n        log.Printf(&quot;Starting batch processing of %d tasks&quot;, len(tasks))\n        shared.Set(&quot;total_tasks&quot;, len(tasks))\n        shared.Set(&quot;start_time&quot;, time.Now())\n        \n        for i, task := range tasks {\n            results[i] = flyt.NewResult(task)\n        }\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, task flyt.Result) (flyt.Result, error) {\n        // Process task\n        result, err := processTask(task.Value())\n        if err != nil {\n            return flyt.Result{}, err\n        }\n        return flyt.NewResult(result), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, tasks, results []flyt.Result) (flyt.Action, error) {\n        startTime := shared.Get(&quot;start_time&quot;).(time.Time)\n        duration := time.Since(startTime)\n        \n        successful := 0\n        failed := 0\n        \n        for _, result := range results {\n            if result.IsError() {\n                failed++\n            } else {\n                successful++\n            }\n        }\n        \n        log.Printf(&quot;Batch completed in %v: %d successful, %d failed out of %d total&quot;,\n                   duration, successful, failed, len(tasks))\n        \n        shared.Set(&quot;batch_stats&quot;, map[string]any{\n            &quot;total&quot;:      len(tasks),\n            &quot;successful&quot;: successful,\n            &quot;failed&quot;:     failed,\n            &quot;duration&quot;:   duration.Seconds(),\n            &quot;rate&quot;:       float64(len(tasks)) / duration.Seconds(),\n        })\n        \n        return flyt.DefaultAction, nil\n    }).\n    WithBatchConcurrency(10)\n","title":"Progress Tracking","titles":["Batch Flows"]},"38":{"href":"/advanced/batch-flows#conditional-batch-processing","html":"\n<p>Process batches based on conditions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">conditionalBatchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        allItems </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        processingMode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;mode&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> itemsToProcess []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> allItems {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            itemMap </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Apply conditional logic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shouldProcess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> false</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> processingMode {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;priority&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                shouldProcess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> itemMap[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;priority&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;high&quot;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;recent&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                timestamp </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> itemMap[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;timestamp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                shouldProcess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(timestamp) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 24</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">time.Hour</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;pending&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                shouldProcess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> itemMap[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;pending&quot;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                shouldProcess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shouldProcess {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                itemsToProcess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(itemsToProcess, flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Processing </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> out of </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> items based on </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mode&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">                   len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(itemsToProcess), </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(allItems), processingMode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> itemsToProcess, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process selected item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        processed, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processed), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> processed []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                processed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processed, result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processed_items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processed)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span></code></pre>\n","isPage":false,"text":"\nProcess batches based on conditions:\nconditionalBatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        allItems := shared.GetSlice(&quot;items&quot;)\n        processingMode := shared.GetString(&quot;mode&quot;)\n        \n        var itemsToProcess []flyt.Result\n        \n        for _, item := range allItems {\n            itemMap := item.(map[string]any)\n            \n            // Apply conditional logic\n            shouldProcess := false\n            switch processingMode {\n            case &quot;priority&quot;:\n                shouldProcess = itemMap[&quot;priority&quot;].(string) == &quot;high&quot;\n            case &quot;recent&quot;:\n                timestamp := itemMap[&quot;timestamp&quot;].(time.Time)\n                shouldProcess = time.Since(timestamp) &lt; 24*time.Hour\n            case &quot;pending&quot;:\n                shouldProcess = itemMap[&quot;status&quot;].(string) == &quot;pending&quot;\n            default:\n                shouldProcess = true\n            }\n            \n            if shouldProcess {\n                itemsToProcess = append(itemsToProcess, flyt.NewResult(item))\n            }\n        }\n        \n        log.Printf(&quot;Processing %d out of %d items based on %s mode&quot;,\n                   len(itemsToProcess), len(allItems), processingMode)\n        \n        return itemsToProcess, nil\n    }).\n    WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n        // Process selected item\n        processed, err := processItem(item.Value())\n        if err != nil {\n            return flyt.Result{}, err\n        }\n        return flyt.NewResult(processed), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n        var processed []any\n        for _, result := range results {\n            if !result.IsError() {\n                processed = append(processed, result.Value())\n            }\n        }\n        \n        shared.Set(&quot;processed_items&quot;, processed)\n        return flyt.DefaultAction, nil\n    })\n","title":"Conditional Batch Processing","titles":["Batch Flows"]},"39":{"href":"/advanced/batch-flows#error-recovery","html":"\n<p>Handle and recover from batch failures:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">recoverableBatchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Try processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> riskyOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Try recovery</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> recoverable, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err.(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RecoverableError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); ok {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Attempting recovery for: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, recoverable)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> recoverOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), recoverable)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                    return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;recovery failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                    &quot;result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:    result,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                    &quot;recovered&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:    result,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;recovered&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> successful []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> recovered []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> failed []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                failed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(failed, items[i].</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">MustMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;recovered&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    recovered </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(recovered, data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    successful </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(successful, data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;successful&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, successful)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;recovered&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, recovered)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, failed)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Results: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successful, </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> recovered, </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">                   len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(successful), </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(recovered), </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(failed))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(failed) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;has_failures&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchErrorHandling</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Continue despite failures</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)              </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Retry failed items</span></span></code></pre>\n","isPage":false,"text":"\nHandle and recover from batch failures:\nrecoverableBatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        items := shared.GetSlice(&quot;items&quot;)\n        results := make([]flyt.Result, len(items))\n        for i, item := range items {\n            results[i] = flyt.NewResult(item)\n        }\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n        // Try processing\n        result, err := riskyOperation(item.Value())\n        if err != nil {\n            // Try recovery\n            if recoverable, ok := err.(RecoverableError); ok {\n                log.Printf(&quot;Attempting recovery for: %v&quot;, recoverable)\n                result, err = recoverOperation(item.Value(), recoverable)\n                if err != nil {\n                    return flyt.Result{}, fmt.Errorf(&quot;recovery failed: %w&quot;, err)\n                }\n                return flyt.NewResult(map[string]any{\n                    &quot;result&quot;:    result,\n                    &quot;recovered&quot;: true,\n                })\n            }\n            return flyt.Result{}, err\n        }\n        \n        return flyt.NewResult(map[string]any{\n            &quot;result&quot;:    result,\n            &quot;recovered&quot;: false,\n        })\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n        var successful []any\n        var recovered []any\n        var failed []any\n        \n        for i, result := range results {\n            if result.IsError() {\n                failed = append(failed, items[i].Value())\n            } else {\n                data := result.MustMap()\n                if data[&quot;recovered&quot;].(bool) {\n                    recovered = append(recovered, data[&quot;result&quot;])\n                } else {\n                    successful = append(successful, data[&quot;result&quot;])\n                }\n            }\n        }\n        \n        shared.Set(&quot;successful&quot;, successful)\n        shared.Set(&quot;recovered&quot;, recovered)\n        shared.Set(&quot;failed&quot;, failed)\n        \n        log.Printf(&quot;Results: %d successful, %d recovered, %d failed&quot;,\n                   len(successful), len(recovered), len(failed))\n        \n        if len(failed) &gt; 0 {\n            return &quot;has_failures&quot;, nil\n        }\n        return flyt.DefaultAction, nil\n    }).\n    WithBatchErrorHandling(true).  // Continue despite failures\n    WithMaxRetries(3)              // Retry failed items\n","title":"Error Recovery","titles":["Batch Flows"]},"40":{"href":"/advanced/batch-flows#best-practices","html":"\n<ol>\n<li><strong>Use Results Properly</strong>: Always check <code>Result.IsError()</code> before accessing values</li>\n<li><strong>Log Progress</strong>: Add logging in Post to track batch completion</li>\n<li><strong>Handle Failures</strong>: Decide whether one failure should affect others</li>\n<li><strong>Track Progress</strong>: Implement progress tracking for long-running batches</li>\n<li><strong>Configure Concurrency</strong>: Set appropriate concurrency based on resource constraints</li>\n<li><strong>Clean Error Handling</strong>: Use Result error tracking for clean error propagation</li>\n</ol>\n","isPage":false,"text":"\n\nUse Results Properly: Always check Result.IsError() before accessing values\nLog Progress: Add logging in Post to track batch completion\nHandle Failures: Decide whether one failure should affect others\nTrack Progress: Implement progress tracking for long-running batches\nConfigure Concurrency: Set appropriate concurrency based on resource constraints\nClean Error Handling: Use Result error tracking for clean error propagation\n\n","title":"Best Practices","titles":["Batch Flows"]},"41":{"href":"/advanced/batch-flows#next-steps","html":"\n<ul>\n<li><a href=\"/advanced/batch-processing\">Batch Processing</a> - Core batch processing concepts</li>\n<li><a href=\"/patterns/error-handling\">Error Handling</a> - Handle errors effectively</li>\n<li><a href=\"/advanced/worker-pool\">Worker Pool</a> - Custom concurrent processing</li>\n</ul>","isPage":false,"text":"\n\nBatch Processing - Core batch processing concepts\nError Handling - Handle errors effectively\nWorker Pool - Custom concurrent processing\n","title":"Next Steps","titles":["Batch Flows"]},"42":{"href":"/advanced/batch-processing#batch-processing","html":"</header>\n<p>Process collections of items efficiently with concurrent or sequential execution using BatchNode.</p>\n","isPage":true,"text":"\nProcess collections of items efficiently with concurrent or sequential execution using BatchNode.\n","title":"Batch Processing","titles":[]},"43":{"href":"/advanced/batch-processing#basic-batch-processing","html":"\n<p>BatchNode simplifies batch processing by working almost exactly like regular nodes. The framework automatically handles iteration when Prep returns <code>[]Result</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a batch node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Return []Result to trigger batch processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process individual item - called automatically for each item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        processed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processed), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Called once with all results aggregated</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> successful []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                successful </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(successful, result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, successful)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set items and run</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item3&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">action, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, batchNode, shared)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(results) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [&quot;processed: item1&quot;, &quot;processed: item2&quot;, &quot;processed: item3&quot;]</span></span></code></pre>\n","isPage":false,"text":"\nBatchNode simplifies batch processing by working almost exactly like regular nodes. The framework automatically handles iteration when Prep returns []Result:\n// Create a batch node\nbatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        // Return []Result to trigger batch processing\n        items := shared.GetSlice(&quot;items&quot;)\n        results := make([]flyt.Result, len(items))\n        for i, item := range items {\n            results[i] = flyt.NewResult(item)\n        }\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n        // Process individual item - called automatically for each item\n        data := item.Value().(string)\n        processed := fmt.Sprintf(&quot;processed: %v&quot;, data)\n        return flyt.NewResult(processed), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n        // Called once with all results aggregated\n        var successful []any\n        for _, result := range results {\n            if !result.IsError() {\n                successful = append(successful, result.Value())\n            }\n        }\n        shared.Set(&quot;results&quot;, successful)\n        return flyt.DefaultAction, nil\n    })\n \n// Set items and run\nshared := flyt.NewSharedStore()\nshared.Set(&quot;items&quot;, []string{&quot;item1&quot;, &quot;item2&quot;, &quot;item3&quot;})\n \nctx := context.Background()\naction, err := flyt.Run(ctx, batchNode, shared)\n \n// Get results\nresults := shared.GetSlice(&quot;results&quot;)\nfmt.Println(results) // [&quot;processed: item1&quot;, &quot;processed: item2&quot;, &quot;processed: item3&quot;]\n","title":"Basic Batch Processing","titles":["Batch Processing"]},"44":{"href":"/advanced/batch-processing#sequential-vs-concurrent","html":"\n<p>Configure concurrency for your needs:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Sequential processing - maintains order</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sequentialNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepFunc).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execFunc).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(postFunc).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchConcurrency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0 = sequential</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Concurrent processing - faster but unordered</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">concurrentNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepFunc).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execFunc).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(postFunc).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchConcurrency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process up to 10 items concurrently</span></span></code></pre>\n","isPage":false,"text":"\nConfigure concurrency for your needs:\n// Sequential processing - maintains order\nsequentialNode := flyt.NewBatchNode().\n    WithPrepFunc(prepFunc).\n    WithExecFunc(execFunc).\n    WithPostFunc(postFunc).\n    WithBatchConcurrency(0)  // 0 = sequential\n \n// Concurrent processing - faster but unordered\nconcurrentNode := flyt.NewBatchNode().\n    WithPrepFunc(prepFunc).\n    WithExecFunc(execFunc).\n    WithPostFunc(postFunc).\n    WithBatchConcurrency(10)  // Process up to 10 items concurrently\n","title":"Sequential vs Concurrent","titles":["Batch Processing"]},"45":{"href":"/advanced/batch-processing#advanced-configuration","html":"\n<p>Configure batch processing behavior:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        users </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;users&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(users))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, user </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> users {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(user)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">user</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Heavy processing for each user</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        userData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> user.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AsMapOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> userData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid user data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sleep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.Millisecond)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Simulate work</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        processed, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processUser</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(userData)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processed), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">users</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        successCount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        errorCount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                errorCount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                successCount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;success_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, successCount)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorCount)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Processed </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successfully, </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, successCount, errorCount)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchConcurrency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).       </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use 5 concurrent workers</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchErrorHandling</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Continue processing even if some items fail</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).             </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Retry each item up to 3 times</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second)          </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait between retries</span></span></code></pre>\n","isPage":false,"text":"\nConfigure batch processing behavior:\nbatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        users := shared.GetSlice(&quot;users&quot;)\n        results := make([]flyt.Result, len(users))\n        for i, user := range users {\n            results[i] = flyt.NewResult(user)\n        }\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, user flyt.Result) (flyt.Result, error) {\n        // Heavy processing for each user\n        userData := user.AsMapOr(nil)\n        if userData == nil {\n            return flyt.Result{}, fmt.Errorf(&quot;invalid user data&quot;)\n        }\n        \n        time.Sleep(100 * time.Millisecond)  // Simulate work\n        processed, err := processUser(userData)\n        if err != nil {\n            return flyt.Result{}, err\n        }\n        return flyt.NewResult(processed), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, users, results []flyt.Result) (flyt.Action, error) {\n        successCount := 0\n        errorCount := 0\n        \n        for _, result := range results {\n            if result.IsError() {\n                errorCount++\n            } else {\n                successCount++\n            }\n        }\n        \n        shared.Set(&quot;success_count&quot;, successCount)\n        shared.Set(&quot;error_count&quot;, errorCount)\n        \n        log.Printf(&quot;Processed %d successfully, %d failed&quot;, successCount, errorCount)\n        return flyt.DefaultAction, nil\n    }).\n    WithBatchConcurrency(5).       // Use 5 concurrent workers\n    WithBatchErrorHandling(true).  // Continue processing even if some items fail\n    WithMaxRetries(3).             // Retry each item up to 3 times\n    WithWait(time.Second)          // Wait between retries\n","title":"Advanced Configuration","titles":["Batch Processing"]},"46":{"href":"/advanced/batch-processing#error-handling","html":"\n<p>The BatchNode API provides clean per-item error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Some items might already be invalid</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Will cause error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewErrorResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">New</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;pre-existing error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Check for pre-existing errors</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Pass through</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AsIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;negative value: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, value)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> successful []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors, result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Item </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, i, result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                successful </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(successful, result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AsIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;successful&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, successful)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Return different actions based on results</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(results) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;all_failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;partial_success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;all_success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchErrorHandling</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Continue processing despite errors</span></span></code></pre>\n","isPage":false,"text":"\nThe BatchNode API provides clean per-item error handling:\nbatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        // Some items might already be invalid\n        return []flyt.Result{\n            flyt.NewResult(1),\n            flyt.NewResult(-2),  // Will cause error\n            flyt.NewResult(3),\n            flyt.NewErrorResult(errors.New(&quot;pre-existing error&quot;)),\n            flyt.NewResult(5),\n        }, nil\n    }).\n    WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n        // Check for pre-existing errors\n        if item.IsError() {\n            return item, nil  // Pass through\n        }\n        \n        value := item.AsIntOr(0)\n        if value &lt; 0 {\n            return flyt.Result{}, fmt.Errorf(&quot;negative value: %d&quot;, value)\n        }\n        return flyt.NewResult(value * 2), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n        var successful []int\n        var errors []error\n        \n        for i, result := range results {\n            if result.IsError() {\n                errors = append(errors, result.Error())\n                log.Printf(&quot;Item %d failed: %v&quot;, i, result.Error())\n            } else {\n                successful = append(successful, result.AsIntOr(0))\n            }\n        }\n        \n        shared.Set(&quot;successful&quot;, successful)\n        shared.Set(&quot;error_count&quot;, len(errors))\n        \n        // Return different actions based on results\n        if len(errors) == len(results) {\n            return &quot;all_failed&quot;, nil\n        } else if len(errors) &gt; 0 {\n            return &quot;partial_success&quot;, nil\n        }\n        return &quot;all_success&quot;, nil\n    }).\n    WithBatchErrorHandling(true)  // Continue processing despite errors\n","title":"Error Handling","titles":["Batch Processing"]},"47":{"href":"/advanced/batch-processing#batch-processing-patterns","html":"\n","isPage":false,"text":"\n","title":"Batch Processing Patterns","titles":["Batch Processing"]},"48":{"href":"/advanced/batch-processing#map-pattern","html":"\n<p>Transform each item:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mapNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        users </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;users&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(users))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, user </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> users {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(user)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> user </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">User</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">user); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Transform to DTO</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        dto </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> UserDTO</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            ID:   user.ID,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Name: user.Name,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Age:  user.Age,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(dto), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> dtos []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UserDTO</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> dto </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UserDTO</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">dto)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                dtos </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(dtos, dto)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_dtos&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, dtos)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span></code></pre>\n","isPage":false,"text":"\nTransform each item:\nmapNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        users := shared.GetSlice(&quot;users&quot;)\n        results := make([]flyt.Result, len(users))\n        for i, user := range users {\n            results[i] = flyt.NewResult(user)\n        }\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n        var user User\n        if err := item.Bind(&amp;user); err != nil {\n            return flyt.Result{}, err\n        }\n        \n        // Transform to DTO\n        dto := UserDTO{\n            ID:   user.ID,\n            Name: user.Name,\n            Age:  user.Age,\n        }\n        return flyt.NewResult(dto), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n        var dtos []UserDTO\n        for _, result := range results {\n            if !result.IsError() {\n                var dto UserDTO\n                result.Bind(&amp;dto)\n                dtos = append(dtos, dto)\n            }\n        }\n        shared.Set(&quot;user_dtos&quot;, dtos)\n        return flyt.DefaultAction, nil\n    })\n","title":"Map Pattern","titles":["Batch Processing","Batch Processing Patterns"]},"49":{"href":"/advanced/batch-processing#filter-pattern","html":"\n<p>Process only matching items:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">filterNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        numbers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;numbers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(numbers))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, num </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> numbers {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(num)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AsIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Keep this item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewErrorResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;filtered out: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, value)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> filtered []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                filtered </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(filtered, result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AsIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;filtered&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, filtered)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span></code></pre>\n","isPage":false,"text":"\nProcess only matching items:\nfilterNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        numbers := shared.GetSlice(&quot;numbers&quot;)\n        results := make([]flyt.Result, len(numbers))\n        for i, num := range numbers {\n            results[i] = flyt.NewResult(num)\n        }\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n        value := item.AsIntOr(0)\n        if value &gt; 10 {\n            return item, nil  // Keep this item\n        }\n        return flyt.NewErrorResult(fmt.Errorf(&quot;filtered out: %d&quot;, value)), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n        var filtered []int\n        for _, result := range results {\n            if !result.IsError() {\n                filtered = append(filtered, result.AsIntOr(0))\n            }\n        }\n        shared.Set(&quot;filtered&quot;, filtered)\n        return flyt.DefaultAction, nil\n    })\n","title":"Filter Pattern","titles":["Batch Processing","Batch Processing Patterns"]},"50":{"href":"/advanced/batch-processing#aggregation-pattern","html":"\n<p>Aggregate results in Post:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sumNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        numbers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;numbers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(numbers))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, num </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> numbers {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(num)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Just validate and pass through</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AsIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;negative number not allowed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        total </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                total </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AsIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sum&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, total)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, count)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;average&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(total)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(count))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span></code></pre>\n","isPage":false,"text":"\nAggregate results in Post:\nsumNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        numbers := shared.GetSlice(&quot;numbers&quot;)\n        results := make([]flyt.Result, len(numbers))\n        for i, num := range numbers {\n            results[i] = flyt.NewResult(num)\n        }\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n        // Just validate and pass through\n        value := item.AsIntOr(0)\n        if value &lt; 0 {\n            return flyt.Result{}, fmt.Errorf(&quot;negative number not allowed&quot;)\n        }\n        return item, nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n        total := 0\n        count := 0\n        \n        for _, result := range results {\n            if !result.IsError() {\n                total += result.AsIntOr(0)\n                count++\n            }\n        }\n        \n        shared.Set(&quot;sum&quot;, total)\n        shared.Set(&quot;count&quot;, count)\n        if count &gt; 0 {\n            shared.Set(&quot;average&quot;, float64(total)/float64(count))\n        }\n        \n        return flyt.DefaultAction, nil\n    })\n","title":"Aggregation Pattern","titles":["Batch Processing","Batch Processing Patterns"]},"51":{"href":"/advanced/batch-processing#progress-tracking","html":"\n<p>Monitor batch processing progress:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Starting batch processing of </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(results))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        processed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        failed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                failed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                processed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Batch complete: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successful, </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                   processed, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items), failed)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;stats&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;total&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:      </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;processed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  processed,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     failed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchConcurrency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nMonitor batch processing progress:\nbatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        items := shared.GetSlice(&quot;items&quot;)\n        results := make([]flyt.Result, len(items))\n        for i, item := range items {\n            results[i] = flyt.NewResult(item)\n        }\n        log.Printf(&quot;Starting batch processing of %d items&quot;, len(results))\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n        // Process item\n        result, err := processItem(item.Value())\n        if err != nil {\n            return flyt.Result{}, err\n        }\n        return flyt.NewResult(result), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n        processed := 0\n        failed := 0\n        \n        for _, result := range results {\n            if result.IsError() {\n                failed++\n            } else {\n                processed++\n            }\n        }\n        \n        log.Printf(&quot;Batch complete: %d/%d successful, %d failed&quot;, \n                   processed, len(items), failed)\n        \n        shared.Set(&quot;stats&quot;, map[string]int{\n            &quot;total&quot;:      len(items),\n            &quot;processed&quot;:  processed,\n            &quot;failed&quot;:     failed,\n        })\n        \n        return flyt.DefaultAction, nil\n    }).\n    WithBatchConcurrency(5)\n","title":"Progress Tracking","titles":["Batch Processing"]},"52":{"href":"/advanced/batch-processing#rate-limited-batch-processing","html":"\n<p>Control processing rate with external limiters:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createRateLimitedBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">limiter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Limiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BatchNodeBuilder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api_requests&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Wait for rate limiter</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> limiter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;rate limit wait failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Make API call</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            request </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">APIRequest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            response, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(request)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(response), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> responses []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">APIResponse</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> resp </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">APIResponse</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">resp)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    responses </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(responses, resp)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api_responses&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, responses)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithBatchConcurrency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Limit concurrent API calls</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">limiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rate.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewLimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rate.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Limit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 10 requests per second</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createRateLimitedBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(limiter)</span></span></code></pre>\n","isPage":false,"text":"\nControl processing rate with external limiters:\nfunc createRateLimitedBatchNode(limiter *rate.Limiter) *flyt.BatchNodeBuilder {\n    return flyt.NewBatchNode().\n        WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n            items := shared.GetSlice(&quot;api_requests&quot;)\n            results := make([]flyt.Result, len(items))\n            for i, item := range items {\n                results[i] = flyt.NewResult(item)\n            }\n            return results, nil\n        }).\n        WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n            // Wait for rate limiter\n            if err := limiter.Wait(ctx); err != nil {\n                return flyt.Result{}, fmt.Errorf(&quot;rate limit wait failed: %w&quot;, err)\n            }\n            \n            // Make API call\n            request := item.Value().(APIRequest)\n            response, err := callAPI(request)\n            if err != nil {\n                return flyt.Result{}, err\n            }\n            \n            return flyt.NewResult(response), nil\n        }).\n        WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n            var responses []APIResponse\n            for _, result := range results {\n                if !result.IsError() {\n                    var resp APIResponse\n                    result.Bind(&amp;resp)\n                    responses = append(responses, resp)\n                }\n            }\n            shared.Set(&quot;api_responses&quot;, responses)\n            return flyt.DefaultAction, nil\n        }).\n        WithBatchConcurrency(3)  // Limit concurrent API calls\n}\n \n// Usage\nlimiter := rate.NewLimiter(rate.Limit(10), 1)  // 10 requests per second\nbatchNode := createRateLimitedBatchNode(limiter)\n","title":"Rate-Limited Batch Processing","titles":["Batch Processing"]},"53":{"href":"/advanced/batch-processing#batch-with-timeout","html":"\n<p>Set timeouts for batch operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        tasks </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;tasks&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tasks))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, task </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tasks {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(task)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Create timeout context for this item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        itemCtx, cancel </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithTimeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        defer</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> cancel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        resultChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processTaskWithContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(itemCtx, item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                resultChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">resultChan:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">errChan:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">itemCtx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;task timeout: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> completed []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> timedOut []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> strings.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Contains</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;timeout&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                timedOut </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(timedOut, items[i].</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                completed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(completed, result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;completed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, completed)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;timed_out&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, timedOut)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(timedOut) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;has_timeouts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchConcurrency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nSet timeouts for batch operations:\nbatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        tasks := shared.GetSlice(&quot;tasks&quot;)\n        results := make([]flyt.Result, len(tasks))\n        for i, task := range tasks {\n            results[i] = flyt.NewResult(task)\n        }\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n        // Create timeout context for this item\n        itemCtx, cancel := context.WithTimeout(ctx, 5*time.Second)\n        defer cancel()\n        \n        resultChan := make(chan flyt.Result)\n        errChan := make(chan error)\n        \n        go func() {\n            result, err := processTaskWithContext(itemCtx, item.Value())\n            if err != nil {\n                errChan &lt;- err\n            } else {\n                resultChan &lt;- flyt.NewResult(result)\n            }\n        }()\n        \n        select {\n        case result := &lt;-resultChan:\n            return result, nil\n        case err := &lt;-errChan:\n            return flyt.Result{}, err\n        case &lt;-itemCtx.Done():\n            return flyt.Result{}, fmt.Errorf(&quot;task timeout: %v&quot;, item.Value())\n        }\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n        var completed []any\n        var timedOut []any\n        \n        for i, result := range results {\n            if result.IsError() &amp;&amp; strings.Contains(result.Error().Error(), &quot;timeout&quot;) {\n                timedOut = append(timedOut, items[i].Value())\n            } else if !result.IsError() {\n                completed = append(completed, result.Value())\n            }\n        }\n        \n        shared.Set(&quot;completed&quot;, completed)\n        shared.Set(&quot;timed_out&quot;, timedOut)\n        \n        if len(timedOut) &gt; 0 {\n            return &quot;has_timeouts&quot;, nil\n        }\n        return flyt.DefaultAction, nil\n    }).\n    WithBatchConcurrency(5)\n","title":"Batch with Timeout","titles":["Batch Processing"]},"54":{"href":"/advanced/batch-processing#best-practices","html":"\n<ol>\n<li><strong>Choose Concurrency Wisely</strong>: Use concurrent for I/O-bound, sequential for order-dependent operations</li>\n<li><strong>Handle Errors Gracefully</strong>: Use <code>WithBatchErrorHandling(true)</code> to continue despite failures</li>\n<li><strong>Monitor Progress</strong>: Log in Post to track batch completion</li>\n<li><strong>Set Reasonable Limits</strong>: Configure concurrency based on resources</li>\n<li><strong>Test with Real Data</strong>: Test with production-like data volumes</li>\n<li><strong>Use Result Error Tracking</strong>: Leverage <code>Result.IsError()</code> and <code>Result.Error()</code> for clean error handling</li>\n</ol>\n","isPage":false,"text":"\n\nChoose Concurrency Wisely: Use concurrent for I/O-bound, sequential for order-dependent operations\nHandle Errors Gracefully: Use WithBatchErrorHandling(true) to continue despite failures\nMonitor Progress: Log in Post to track batch completion\nSet Reasonable Limits: Configure concurrency based on resources\nTest with Real Data: Test with production-like data volumes\nUse Result Error Tracking: Leverage Result.IsError() and Result.Error() for clean error handling\n\n","title":"Best Practices","titles":["Batch Processing"]},"55":{"href":"/advanced/batch-processing#key-benefits","html":"\n<ol>\n<li><strong>Simplicity</strong>: BatchNode works almost exactly like regular nodes</li>\n<li><strong>Automatic Handling</strong>: Framework detects <code>[]Result</code> and handles iteration</li>\n<li><strong>Clean Error Tracking</strong>: Each Result can carry its own error state</li>\n<li><strong>Flexible Configuration</strong>: Concurrency and error handling are configurable</li>\n<li><strong>Type Safety</strong>: Strong typing with Result type throughout</li>\n</ol>\n","isPage":false,"text":"\n\nSimplicity: BatchNode works almost exactly like regular nodes\nAutomatic Handling: Framework detects []Result and handles iteration\nClean Error Tracking: Each Result can carry its own error state\nFlexible Configuration: Concurrency and error handling are configurable\nType Safety: Strong typing with Result type throughout\n\n","title":"Key Benefits","titles":["Batch Processing"]},"56":{"href":"/advanced/batch-processing#next-steps","html":"\n<ul>\n<li><a href=\"/advanced/worker-pool\">Worker Pool</a> - Custom concurrent processing</li>\n<li><a href=\"/patterns/error-handling\">Error Handling</a> - Handle errors effectively</li>\n<li><a href=\"/patterns/branching\">Flow Patterns</a> - Complex flow control</li>\n</ul>","isPage":false,"text":"\n\nWorker Pool - Custom concurrent processing\nError Handling - Handle errors effectively\nFlow Patterns - Complex flow control\n","title":"Next Steps","titles":["Batch Processing"]},"57":{"href":"/advanced/custom-nodes#custom-node-types","html":"</header>\n<p>Create sophisticated nodes with custom behavior, state management, and advanced features.</p>\n","isPage":true,"text":"\nCreate sophisticated nodes with custom behavior, state management, and advanced features.\n","title":"Custom Node Types","titles":[]},"58":{"href":"/advanced/custom-nodes#basic-custom-node","html":"\n<p>Extend BaseNode for custom functionality:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CustomNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    config </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Config</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    state  </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">State</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewCustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">config</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Config</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        config:   config,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        state:    </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Custom preparation logic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    input </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prepare</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> input, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Custom execution logic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processWithConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult, n.config)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Update</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Custom post-processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, n.state)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsComplete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;complete&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nExtend BaseNode for custom functionality:\ntype CustomNode struct {\n    *flyt.BaseNode\n    config Config\n    state  State\n}\n \nfunc NewCustomNode(config Config) *CustomNode {\n    return &amp;CustomNode{\n        BaseNode: flyt.NewBaseNode(),\n        config:   config,\n        state:    NewState(),\n    }\n}\n \nfunc (n *CustomNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    // Custom preparation logic\n    input := shared.GetString(&quot;input&quot;)\n    n.state.Prepare(input)\n    return input, nil\n}\n \nfunc (n *CustomNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Custom execution logic\n    result := n.processWithConfig(prepResult, n.config)\n    n.state.Update(result)\n    return result, nil\n}\n \nfunc (n *CustomNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    // Custom post-processing\n    shared.Set(&quot;state&quot;, n.state)\n    \n    if n.state.IsComplete() {\n        return &quot;complete&quot;, nil\n    }\n    return &quot;continue&quot;, nil\n}\n","title":"Basic Custom Node","titles":["Custom Node Types"]},"59":{"href":"/advanced/custom-nodes#stateful-nodes","html":"\n<p>Maintain state across executions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AccumulatorNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu       </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    values   []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    maxSize  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewAccumulatorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">maxSize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AccumulatorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AccumulatorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        values:   </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, maxSize),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        maxSize:  maxSize,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AccumulatorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Add to accumulator</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.values </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.values, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Check if buffer is full</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.values) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.maxSize {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process batch</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.values)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.values </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.values[:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear buffer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AccumulatorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process accumulated values</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(values),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  values,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nMaintain state across executions:\ntype AccumulatorNode struct {\n    *flyt.BaseNode\n    mu       sync.Mutex\n    values   []any\n    maxSize  int\n}\n \nfunc NewAccumulatorNode(maxSize int) *AccumulatorNode {\n    return &amp;AccumulatorNode{\n        BaseNode: flyt.NewBaseNode(),\n        values:   make([]any, 0, maxSize),\n        maxSize:  maxSize,\n    }\n}\n \nfunc (n *AccumulatorNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    n.mu.Lock()\n    defer n.mu.Unlock()\n    \n    // Add to accumulator\n    n.values = append(n.values, prepResult)\n    \n    // Check if buffer is full\n    if len(n.values) &gt;= n.maxSize {\n        // Process batch\n        result := n.processBatch(n.values)\n        n.values = n.values[:0] // Clear buffer\n        return result, nil\n    }\n    \n    return nil, nil\n}\n \nfunc (n *AccumulatorNode) processBatch(values []any) any {\n    // Process accumulated values\n    return map[string]any{\n        &quot;count&quot;: len(values),\n        &quot;data&quot;:  values,\n    }\n}\n","title":"Stateful Nodes","titles":["Custom Node Types"]},"60":{"href":"/advanced/custom-nodes#resource-managing-nodes","html":"\n<p>Handle external resources:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DatabaseNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DB</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    prepared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Stmt</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu       </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RWMutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewDatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">dsn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sql.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Open</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;postgres&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, dsn)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SetMaxOpenConns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">25</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SetMaxIdleConns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool:     db,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        prepared: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Stmt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    query </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">QueryRequest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Use prepared statement if available</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stmt, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getOrPrepare</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(query.SQL)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    rows, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">QueryContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, query.Args</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rows.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">scanResults</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rows)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getOrPrepare</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">sql</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Stmt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RLock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stmt, exists </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.prepared[sql]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RUnlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> exists {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stmt, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Double-check after acquiring write lock</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stmt, exists </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.prepared[sql]; exists {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stmt, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stmt, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prepare</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sql)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.prepared[sql] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stmt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stmt, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, stmt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.prepared {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        stmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle external resources:\ntype DatabaseNode struct {\n    *flyt.BaseNode\n    pool     *sql.DB\n    prepared map[string]*sql.Stmt\n    mu       sync.RWMutex\n}\n \nfunc NewDatabaseNode(dsn string) (*DatabaseNode, error) {\n    db, err := sql.Open(&quot;postgres&quot;, dsn)\n    if err != nil {\n        return nil, err\n    }\n    \n    db.SetMaxOpenConns(25)\n    db.SetMaxIdleConns(5)\n    \n    return &amp;DatabaseNode{\n        BaseNode: flyt.NewBaseNode(),\n        pool:     db,\n        prepared: make(map[string]*sql.Stmt),\n    }, nil\n}\n \nfunc (n *DatabaseNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    query := prepResult.(QueryRequest)\n    \n    // Use prepared statement if available\n    stmt, err := n.getOrPrepare(query.SQL)\n    if err != nil {\n        return nil, err\n    }\n    \n    rows, err := stmt.QueryContext(ctx, query.Args...)\n    if err != nil {\n        return nil, err\n    }\n    defer rows.Close()\n    \n    return n.scanResults(rows)\n}\n \nfunc (n *DatabaseNode) getOrPrepare(sql string) (*sql.Stmt, error) {\n    n.mu.RLock()\n    stmt, exists := n.prepared[sql]\n    n.mu.RUnlock()\n    \n    if exists {\n        return stmt, nil\n    }\n    \n    n.mu.Lock()\n    defer n.mu.Unlock()\n    \n    // Double-check after acquiring write lock\n    if stmt, exists := n.prepared[sql]; exists {\n        return stmt, nil\n    }\n    \n    stmt, err := n.pool.Prepare(sql)\n    if err != nil {\n        return nil, err\n    }\n    \n    n.prepared[sql] = stmt\n    return stmt, nil\n}\n \nfunc (n *DatabaseNode) Close() error {\n    n.mu.Lock()\n    defer n.mu.Unlock()\n    \n    for _, stmt := range n.prepared {\n        stmt.Close()\n    }\n    \n    return n.pool.Close()\n}\n","title":"Resource-Managing Nodes","titles":["Custom Node Types"]},"61":{"href":"/advanced/custom-nodes#retryablenode-implementation","html":"\n<p>Custom retry logic:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SmartRetryNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    attempts      </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    lastError     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    backoffFactor </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewSmartRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SmartRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SmartRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode:      flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        backoffFactor: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1.5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SmartRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Dynamic retry count based on error type</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.lastError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isNetworkError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastError):</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 5</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // More retries for network issues</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isRateLimitError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastError):</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Fewer retries for rate limits</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isAuthError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastError):</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // No retries for auth errors</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SmartRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.lastError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isRateLimitError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastError) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Extract retry-after from error if available</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> retryAfter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> extractRetryAfter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastError); retryAfter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> retryAfter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Exponential backoff with jitter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    base </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> math.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Pow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.backoffFactor, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.attempts))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    jitter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rand.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.3</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> base  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 30% jitter</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((base </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jitter) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SmartRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.attempts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">performOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.lastError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Reset on success</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.lastError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCustom retry logic:\ntype SmartRetryNode struct {\n    *flyt.BaseNode\n    attempts      int\n    lastError     error\n    backoffFactor float64\n}\n \nfunc NewSmartRetryNode() *SmartRetryNode {\n    return &amp;SmartRetryNode{\n        BaseNode:      flyt.NewBaseNode(),\n        backoffFactor: 1.5,\n    }\n}\n \nfunc (n *SmartRetryNode) GetMaxRetries() int {\n    // Dynamic retry count based on error type\n    if n.lastError != nil {\n        switch {\n        case isNetworkError(n.lastError):\n            return 5  // More retries for network issues\n        case isRateLimitError(n.lastError):\n            return 3  // Fewer retries for rate limits\n        case isAuthError(n.lastError):\n            return 0  // No retries for auth errors\n        default:\n            return 2\n        }\n    }\n    return 3\n}\n \nfunc (n *SmartRetryNode) GetWait() time.Duration {\n    if n.lastError != nil &amp;&amp; isRateLimitError(n.lastError) {\n        // Extract retry-after from error if available\n        if retryAfter := extractRetryAfter(n.lastError); retryAfter &gt; 0 {\n            return retryAfter\n        }\n    }\n    \n    // Exponential backoff with jitter\n    base := math.Pow(n.backoffFactor, float64(n.attempts))\n    jitter := rand.Float64() * 0.3 * base  // 30% jitter\n    return time.Duration((base + jitter) * float64(time.Second))\n}\n \nfunc (n *SmartRetryNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    n.attempts++\n    \n    result, err := n.performOperation(ctx, prepResult)\n    if err != nil {\n        n.lastError = err\n        return nil, err\n    }\n    \n    // Reset on success\n    n.attempts = 0\n    n.lastError = nil\n    return result, nil\n}\n","title":"RetryableNode Implementation","titles":["Custom Node Types"]},"62":{"href":"/advanced/custom-nodes#composite-nodes","html":"\n<p>Combine multiple operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PipelineNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stages []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewPipelineNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">stages</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ...func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PipelineNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PipelineNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        stages:   stages,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PipelineNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, stage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.stages {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> stage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, result)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;stage </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, i, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCombine multiple operations:\ntype PipelineNode struct {\n    *flyt.BaseNode\n    stages []func(context.Context, any) (any, error)\n}\n \nfunc NewPipelineNode(stages ...func(context.Context, any) (any, error)) *PipelineNode {\n    return &amp;PipelineNode{\n        BaseNode: flyt.NewBaseNode(),\n        stages:   stages,\n    }\n}\n \nfunc (n *PipelineNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    result := prepResult\n    \n    for i, stage := range n.stages {\n        select {\n        case &lt;-ctx.Done():\n            return nil, ctx.Err()\n        default:\n        }\n        \n        var err error\n        result, err = stage(ctx, result)\n        if err != nil {\n            return nil, fmt.Errorf(&quot;stage %d failed: %w&quot;, i, err)\n        }\n    }\n    \n    return result, nil\n}\n","title":"Composite Nodes","titles":["Custom Node Types"]},"63":{"href":"/advanced/custom-nodes#monitoring-nodes","html":"\n<p>Add observability:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MonitoredNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    name    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    metrics </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Metrics</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Metrics</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    executions   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    successes    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    failures     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    totalLatency </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewMonitoredNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">baseNode</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MonitoredNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MonitoredNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: baseNode.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        name:     name,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        metrics:  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Metrics</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MonitoredNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    start </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.executions, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.BaseNode.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    latency </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(start).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Milliseconds</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.totalLatency, latency)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.failures, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Execution failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> (latency: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">ms)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, n.name, err, latency)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.successes, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Execution succeeded (latency: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">ms)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, n.name, latency)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MonitoredNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMetrics</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;executions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:    atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.executions),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;successes&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.successes),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;failures&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:      atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.metrics.failures),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;avg_latency&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAverageLatency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;success_rate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSuccessRate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAdd observability:\ntype MonitoredNode struct {\n    *flyt.BaseNode\n    name    string\n    metrics *Metrics\n}\n \ntype Metrics struct {\n    executions   int64\n    successes    int64\n    failures     int64\n    totalLatency int64\n}\n \nfunc NewMonitoredNode(name string, baseNode flyt.Node) *MonitoredNode {\n    return &amp;MonitoredNode{\n        BaseNode: baseNode.(*flyt.BaseNode),\n        name:     name,\n        metrics:  &amp;Metrics{},\n    }\n}\n \nfunc (n *MonitoredNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    start := time.Now()\n    atomic.AddInt64(&amp;n.metrics.executions, 1)\n    \n    result, err := n.BaseNode.Exec(ctx, prepResult)\n    \n    latency := time.Since(start).Milliseconds()\n    atomic.AddInt64(&amp;n.metrics.totalLatency, latency)\n    \n    if err != nil {\n        atomic.AddInt64(&amp;n.metrics.failures, 1)\n        log.Printf(&quot;[%s] Execution failed: %v (latency: %dms)&quot;, n.name, err, latency)\n    } else {\n        atomic.AddInt64(&amp;n.metrics.successes, 1)\n        log.Printf(&quot;[%s] Execution succeeded (latency: %dms)&quot;, n.name, latency)\n    }\n    \n    return result, err\n}\n \nfunc (n *MonitoredNode) GetMetrics() map[string]any {\n    return map[string]any{\n        &quot;executions&quot;:    atomic.LoadInt64(&amp;n.metrics.executions),\n        &quot;successes&quot;:     atomic.LoadInt64(&amp;n.metrics.successes),\n        &quot;failures&quot;:      atomic.LoadInt64(&amp;n.metrics.failures),\n        &quot;avg_latency&quot;:   n.getAverageLatency(),\n        &quot;success_rate&quot;:  n.getSuccessRate(),\n    }\n}\n","title":"Monitoring Nodes","titles":["Custom Node Types"]},"64":{"href":"/advanced/custom-nodes#async-nodes","html":"\n<p>Handle asynchronous operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AsyncNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    workers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    queue   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Task</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wg      </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WaitGroup</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewAsyncNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AsyncNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AsyncNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        workers:  workers,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        queue:    </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Start workers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> workers; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        go</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">worker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AsyncNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">worker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> task </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.queue {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processTask</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(task)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AsyncNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    tasks </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tasks))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Submit all tasks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, task </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tasks {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        task.Index </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        task.Results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.queue </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> task</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Wait for completion</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    done </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{})</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(done)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">done:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">AsyncNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.queue)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle asynchronous operations:\ntype AsyncNode struct {\n    *flyt.BaseNode\n    workers int\n    queue   chan Task\n    wg      sync.WaitGroup\n}\n \nfunc NewAsyncNode(workers int) *AsyncNode {\n    n := &amp;AsyncNode{\n        BaseNode: flyt.NewBaseNode(),\n        workers:  workers,\n        queue:    make(chan Task, workers*2),\n    }\n    \n    // Start workers\n    for i := 0; i &lt; workers; i++ {\n        go n.worker()\n    }\n    \n    return n\n}\n \nfunc (n *AsyncNode) worker() {\n    for task := range n.queue {\n        n.processTask(task)\n        n.wg.Done()\n    }\n}\n \nfunc (n *AsyncNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    tasks := prepResult.([]Task)\n    results := make([]Result, len(tasks))\n    \n    // Submit all tasks\n    for i, task := range tasks {\n        n.wg.Add(1)\n        task.Index = i\n        task.Results = &amp;results\n        n.queue &lt;- task\n    }\n    \n    // Wait for completion\n    done := make(chan struct{})\n    go func() {\n        n.wg.Wait()\n        close(done)\n    }()\n    \n    select {\n    case &lt;-ctx.Done():\n        return nil, ctx.Err()\n    case &lt;-done:\n        return results, nil\n    }\n}\n \nfunc (n *AsyncNode) Close() {\n    close(n.queue)\n}\n","title":"Async Nodes","titles":["Custom Node Types"]},"65":{"href":"/advanced/custom-nodes#validation-nodes","html":"\n<p>Ensure data integrity:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ValidationNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    rules []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ValidationRule</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ValidationRule</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Validate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">rules</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ...</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ValidationRule</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        rules:    rules,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, rule </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.rules {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rule.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Validate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, rule.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), err))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;validation failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, strings.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Join</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;; &quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nEnsure data integrity:\ntype ValidationNode struct {\n    *flyt.BaseNode\n    rules []ValidationRule\n}\n \ntype ValidationRule interface {\n    Validate(any) error\n    Name() string\n}\n \nfunc NewValidationNode(rules ...ValidationRule) *ValidationNode {\n    return &amp;ValidationNode{\n        BaseNode: flyt.NewBaseNode(),\n        rules:    rules,\n    }\n}\n \nfunc (n *ValidationNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    var errors []string\n    \n    for _, rule := range n.rules {\n        if err := rule.Validate(prepResult); err != nil {\n            errors = append(errors, fmt.Sprintf(&quot;%s: %v&quot;, rule.Name(), err))\n        }\n    }\n    \n    if len(errors) &gt; 0 {\n        return nil, fmt.Errorf(&quot;validation failed: %s&quot;, strings.Join(errors, &quot;; &quot;))\n    }\n    \n    return prepResult, nil\n}\n \nfunc (n *ValidationNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    if execResult == nil {\n        return &quot;invalid&quot;, nil\n    }\n    return &quot;valid&quot;, nil\n}\n","title":"Validation Nodes","titles":["Custom Node Types"]},"66":{"href":"/advanced/custom-nodes#using-result-type-with-custom-nodes","html":"\n<p>When implementing custom nodes, you can leverage the Result type for better type safety:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TypeSafeNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TypeSafeNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return Result wrapped value</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TypeSafeNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Wrap input in Result for type-safe access</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    input </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Use Result&#x27;s convenience methods</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> input.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AsMapOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        timeout </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;timeout&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AsIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        retries </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retries&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AsIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processWithConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(timeout, retries)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid configuration&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TypeSafeNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Use Result for safe type conversion</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsNil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Bind to struct for complex types</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ProcessedData</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">output); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, output)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nWhen implementing custom nodes, you can leverage the Result type for better type safety:\ntype TypeSafeNode struct {\n    *flyt.BaseNode\n}\n \nfunc (n *TypeSafeNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    // Return Result wrapped value\n    data := shared.GetMap(&quot;config&quot;)\n    return flyt.NewResult(data).Value(), nil\n}\n \nfunc (n *TypeSafeNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Wrap input in Result for type-safe access\n    input := flyt.NewResult(prepResult)\n    \n    // Use Result&#x27;s convenience methods\n    if config := input.AsMapOr(nil); config != nil {\n        timeout := flyt.NewResult(config[&quot;timeout&quot;]).AsIntOr(30)\n        retries := flyt.NewResult(config[&quot;retries&quot;]).AsIntOr(3)\n        \n        result := n.processWithConfig(timeout, retries)\n        return result, nil\n    }\n    \n    return nil, fmt.Errorf(&quot;invalid configuration&quot;)\n}\n \nfunc (n *TypeSafeNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    // Use Result for safe type conversion\n    result := flyt.NewResult(execResult)\n    \n    if result.IsNil() {\n        return &quot;failed&quot;, nil\n    }\n    \n    // Bind to struct for complex types\n    var output ProcessedData\n    if err := result.Bind(&amp;output); err == nil {\n        shared.Set(&quot;processed&quot;, output)\n        return &quot;success&quot;, nil\n    }\n    \n    return flyt.DefaultAction, nil\n}\n","title":"Using Result Type with Custom Nodes","titles":["Custom Node Types"]},"67":{"href":"/advanced/custom-nodes#helper-functions-vs-custom-nodes","html":"\n<strong>Use helper functions (WithExecFunc, etc.) when:</strong>\n<ul>\n<li>Building simple, stateless operations</li>\n<li>Prototyping workflows quickly</li>\n<li>Creating one-off transformations</li>\n</ul>\n<strong>Implement custom nodes when:</strong>\n<ul>\n<li>Managing state or resources</li>\n<li>Need complex initialization</li>\n<li>Building reusable components</li>\n<li>Require custom retry logic</li>\n</ul>\n","isPage":false,"text":"\nUse helper functions (WithExecFunc, etc.) when:\n\nBuilding simple, stateless operations\nPrototyping workflows quickly\nCreating one-off transformations\n\nImplement custom nodes when:\n\nManaging state or resources\nNeed complex initialization\nBuilding reusable components\nRequire custom retry logic\n\n","title":"Helper Functions vs Custom Nodes","titles":["Custom Node Types","Using Result Type with Custom Nodes"]},"68":{"href":"/advanced/custom-nodes#best-practices","html":"\n<ol>\n<li><strong>Clear Interfaces</strong>: Define clear interfaces for custom nodes</li>\n<li><strong>Thread Safety</strong>: Ensure nodes are thread-safe for concurrent use</li>\n<li><strong>Resource Management</strong>: Properly manage external resources</li>\n<li><strong>Error Handling</strong>: Provide detailed error information</li>\n<li><strong>Testing</strong>: Write comprehensive tests for custom logic</li>\n<li><strong>Documentation</strong>: Document node behavior and requirements</li>\n<li><strong>Monitoring</strong>: Add metrics and logging for observability</li>\n</ol>\n","isPage":false,"text":"\n\nClear Interfaces: Define clear interfaces for custom nodes\nThread Safety: Ensure nodes are thread-safe for concurrent use\nResource Management: Properly manage external resources\nError Handling: Provide detailed error information\nTesting: Write comprehensive tests for custom logic\nDocumentation: Document node behavior and requirements\nMonitoring: Add metrics and logging for observability\n\n","title":"Best Practices","titles":["Custom Node Types"]},"69":{"href":"/advanced/custom-nodes#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/nodes#retryablenode-interface\">RetryableNode Interface</a> - Custom retry logic</li>\n<li><a href=\"/patterns/fallback\">FallbackNode Interface</a> - Graceful degradation</li>\n<li><a href=\"/advanced/worker-pool\">Worker Pool</a> - Concurrent task management</li>\n</ul>","isPage":false,"text":"\n\nRetryableNode Interface - Custom retry logic\nFallbackNode Interface - Graceful degradation\nWorker Pool - Concurrent task management\n","title":"Next Steps","titles":["Custom Node Types"]},"70":{"href":"/advanced/flow-as-node#flow-as-node","html":"</header>\n<p>Flows implement the Node interface, allowing them to be used anywhere a node is expected. This enables powerful composition patterns.</p>\n","isPage":true,"text":"\nFlows implement the Node interface, allowing them to be used anywhere a node is expected. This enables powerful composition patterns.\n","title":"Flow as Node","titles":[]},"71":{"href":"/advanced/flow-as-node#the-node-interface","html":"\n<p>Flows implement all Node methods:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Flow implements Node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _ </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nFlows implement all Node methods:\ntype Node interface {\n    Prep(ctx context.Context, shared *SharedStore) (any, error)\n    Exec(ctx context.Context, prepResult any) (any, error)\n    Post(ctx context.Context, shared *SharedStore, prepResult, execResult any) (Action, error)\n}\n \n// Flow implements Node\nvar _ Node = (*Flow)(nil)\n","title":"The Node Interface","titles":["Flow as Node"]},"72":{"href":"/advanced/flow-as-node#basic-usage","html":"\n<p>Use a flow wherever a node is expected:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a reusable flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processingFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processingFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, transformNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processingFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transformNode, flyt.DefaultAction, enrichNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use the flow as a node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, processingFlow) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Flow used as node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processingFlow, flyt.DefaultAction, saveNode)</span></span></code></pre>\n","isPage":false,"text":"\nUse a flow wherever a node is expected:\n// Create a reusable flow\nprocessingFlow := flyt.NewFlow(validateNode)\nprocessingFlow.Connect(validateNode, &quot;valid&quot;, transformNode)\nprocessingFlow.Connect(transformNode, flyt.DefaultAction, enrichNode)\n \n// Use the flow as a node\nmainFlow := flyt.NewFlow(fetchNode)\nmainFlow.Connect(fetchNode, flyt.DefaultAction, processingFlow) // Flow used as node\nmainFlow.Connect(processingFlow, flyt.DefaultAction, saveNode)\n","title":"Basic Usage","titles":["Flow as Node"]},"73":{"href":"/advanced/flow-as-node#flow-lifecycle-as-node","html":"\n<p>Understanding how flows behave as nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// When a flow is used as a node:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1. Prep: Prepares the flow&#x27;s start node</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 2. Exec: Runs the entire flow</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 3. Post: Returns the final action from the flow</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> demonstrateFlowLifecycle</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    subFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    subFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, endNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // When mainFlow executes subFlow:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // - subFlow.Prep() calls startNode.Prep()</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // - subFlow.Exec() runs the entire sub-flow</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // - subFlow.Post() returns the final action</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(initNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(initNode, flyt.DefaultAction, subFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUnderstanding how flows behave as nodes:\n// When a flow is used as a node:\n// 1. Prep: Prepares the flow&#x27;s start node\n// 2. Exec: Runs the entire flow\n// 3. Post: Returns the final action from the flow\n \nfunc demonstrateFlowLifecycle() {\n    subFlow := flyt.NewFlow(startNode)\n    subFlow.Connect(startNode, flyt.DefaultAction, endNode)\n    \n    // When mainFlow executes subFlow:\n    // - subFlow.Prep() calls startNode.Prep()\n    // - subFlow.Exec() runs the entire sub-flow\n    // - subFlow.Post() returns the final action\n    \n    mainFlow := flyt.NewFlow(initNode)\n    mainFlow.Connect(initNode, flyt.DefaultAction, subFlow)\n}\n","title":"Flow Lifecycle as Node","titles":["Flow as Node"]},"74":{"href":"/advanced/flow-as-node#composable-workflows","html":"\n<p>Build complex workflows from simpler ones:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Level 1: Basic operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    schemaNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSchemaValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    businessNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createBusinessValidationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, businessNode)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEnrichmentFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fetchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDataFetchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mergeNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDataMergeNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, mergeNode)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Level 2: Combine basic flows</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessingPipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    validation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    enrichment </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEnrichmentFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pipeline </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validation)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pipeline.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validation, flyt.DefaultAction, enrichment)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pipeline</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Level 3: Use in application</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createApplicationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    auth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAuthFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pipeline </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessingPipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    audit </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAuditFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    app </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(auth)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    app.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(auth, flyt.DefaultAction, pipeline)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    app.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(pipeline, flyt.DefaultAction, audit)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> app</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nBuild complex workflows from simpler ones:\n// Level 1: Basic operations\nfunc createValidationFlow() *flyt.Flow {\n    schemaNode := createSchemaValidationNode()\n    businessNode := createBusinessValidationNode()\n    \n    flow := flyt.NewFlow(schemaNode)\n    flow.Connect(schemaNode, &quot;valid&quot;, businessNode)\n    return flow\n}\n \nfunc createEnrichmentFlow() *flyt.Flow {\n    fetchNode := createDataFetchNode()\n    mergeNode := createDataMergeNode()\n    \n    flow := flyt.NewFlow(fetchNode)\n    flow.Connect(fetchNode, flyt.DefaultAction, mergeNode)\n    return flow\n}\n \n// Level 2: Combine basic flows\nfunc createProcessingPipeline() *flyt.Flow {\n    validation := createValidationFlow()\n    enrichment := createEnrichmentFlow()\n    \n    pipeline := flyt.NewFlow(validation)\n    pipeline.Connect(validation, flyt.DefaultAction, enrichment)\n    return pipeline\n}\n \n// Level 3: Use in application\nfunc createApplicationFlow() *flyt.Flow {\n    auth := createAuthFlow()\n    pipeline := createProcessingPipeline()\n    audit := createAuditFlow()\n    \n    app := flyt.NewFlow(auth)\n    app.Connect(auth, flyt.DefaultAction, pipeline)\n    app.Connect(pipeline, flyt.DefaultAction, audit)\n    return app\n}\n","title":"Composable Workflows","titles":["Flow as Node"]},"75":{"href":"/advanced/flow-as-node#dynamic-flow-selection","html":"\n<p>Choose flows at runtime:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FlowSelector</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flows </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateSelectorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flowType </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flowType, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">BuildDynamicFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    selector </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fs.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateSelectorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(selector)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Connect different flows based on selection</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> name, flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fs.flows {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(selector, flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(name), flow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mainFlow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">selector </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flows: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;simple&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createSimpleFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;complex&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createComplexFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;custom&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCustomFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">dynamicFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> selector.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">BuildDynamicFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nChoose flows at runtime:\ntype FlowSelector struct {\n    flows map[string]*flyt.Flow\n}\n \nfunc (fs *FlowSelector) CreateSelectorNode() flyt.Node {\n    return flyt.NewNode(\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            flowType := prepResult.(string)\n            return flowType, nil\n        }),\n        flyt.WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            return flyt.Action(execResult.(string)), nil\n        }),\n    )\n}\n \nfunc (fs *FlowSelector) BuildDynamicFlow() *flyt.Flow {\n    selector := fs.CreateSelectorNode()\n    mainFlow := flyt.NewFlow(selector)\n    \n    // Connect different flows based on selection\n    for name, flow := range fs.flows {\n        mainFlow.Connect(selector, flyt.Action(name), flow)\n    }\n    \n    return mainFlow\n}\n \n// Usage\nselector := &amp;FlowSelector{\n    flows: map[string]*flyt.Flow{\n        &quot;simple&quot;:  createSimpleFlow(),\n        &quot;complex&quot;: createComplexFlow(),\n        &quot;custom&quot;:  createCustomFlow(),\n    },\n}\n \ndynamicFlow := selector.BuildDynamicFlow()\n","title":"Dynamic Flow Selection","titles":["Flow as Node"]},"76":{"href":"/advanced/flow-as-node#flow-factories","html":"\n<p>Create flows on demand:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FlowFactory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    CreateFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">config</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FlowConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ProcessingFlowFactory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">f </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ProcessingFlowFactory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">config</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FlowConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create nodes based on configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nodes []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, nodeConfig </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config.Nodes {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createNodeFromConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodeConfig)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        nodes </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodes, node)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Build flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodes[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodes)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodes[i], flyt.DefaultAction, nodes[i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use factory-created flows as nodes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDynamicPipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">factory</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FlowFactory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">configs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FlowConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pipeline </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    previous </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> configs {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> factory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pipeline.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(previous, flyt.DefaultAction, flow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        previous </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pipeline</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCreate flows on demand:\ntype FlowFactory interface {\n    CreateFlow(config FlowConfig) *flyt.Flow\n}\n \ntype ProcessingFlowFactory struct{}\n \nfunc (f *ProcessingFlowFactory) CreateFlow(config FlowConfig) *flyt.Flow {\n    // Create nodes based on configuration\n    var nodes []flyt.Node\n    \n    for _, nodeConfig := range config.Nodes {\n        node := createNodeFromConfig(nodeConfig)\n        nodes = append(nodes, node)\n    }\n    \n    // Build flow\n    flow := flyt.NewFlow(nodes[0])\n    for i := 0; i &lt; len(nodes)-1; i++ {\n        flow.Connect(nodes[i], flyt.DefaultAction, nodes[i+1])\n    }\n    \n    return flow\n}\n \n// Use factory-created flows as nodes\nfunc createDynamicPipeline(factory FlowFactory, configs []FlowConfig) *flyt.Flow {\n    pipeline := flyt.NewFlow(startNode)\n    previous := flyt.Node(startNode)\n    \n    for _, config := range configs {\n        flow := factory.CreateFlow(config)\n        pipeline.Connect(previous, flyt.DefaultAction, flow)\n        previous = flow\n    }\n    \n    return pipeline\n}\n","title":"Flow Factories","titles":["Flow as Node"]},"77":{"href":"/advanced/flow-as-node#recursive-flow-patterns","html":"\n<p>Flows containing themselves:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createRecursiveProcessingFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">maxDepth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    depthCheck </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;recursion_depth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> depth, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> maxDepth {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;terminate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;recurse&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;recurse&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;recursion_depth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, depth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(depthCheck)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(depthCheck, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;recurse&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, flyt.DefaultAction, flow) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Recursive reference</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(depthCheck, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;terminate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nFlows containing themselves:\nfunc createRecursiveProcessingFlow(maxDepth int) *flyt.Flow {\n    var flow *flyt.Flow\n    \n    depthCheck := flyt.NewNode(\n        flyt.WithPrepFuncAny(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            depth := shared.GetInt(&quot;recursion_depth&quot;)\n            return depth, nil\n        }),\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            depth := prepResult.(int)\n            if depth &gt;= maxDepth {\n                return &quot;terminate&quot;, nil\n            }\n            return &quot;recurse&quot;, nil\n        }),\n        flyt.WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            if execResult.(string) == &quot;recurse&quot; {\n                depth := prepResult.(int)\n                shared.Set(&quot;recursion_depth&quot;, depth+1)\n            }\n            return flyt.Action(execResult.(string)), nil\n        }),\n    )\n    \n    processNode := createProcessNode()\n    \n    flow = flyt.NewFlow(depthCheck)\n    flow.Connect(depthCheck, &quot;recurse&quot;, processNode)\n    flow.Connect(processNode, flyt.DefaultAction, flow) // Recursive reference\n    flow.Connect(depthCheck, &quot;terminate&quot;, nil)\n    \n    return flow\n}\n","title":"Recursive Flow Patterns","titles":["Flow as Node"]},"78":{"href":"/advanced/flow-as-node#flow-middleware","html":"\n<p>Wrap flows with additional behavior:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> withLogging</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">flow</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    logStart </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Flow starting&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    logEnd </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Flow completed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wrapped </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logStart)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wrapped.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logStart, flyt.DefaultAction, flow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wrapped.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flow, flyt.DefaultAction, logEnd)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wrapped</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessingFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">loggedFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> withLogging</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ProcessingPipeline&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processFlow)</span></span></code></pre>\n","isPage":false,"text":"\nWrap flows with additional behavior:\nfunc withLogging(name string, flow *flyt.Flow) *flyt.Flow {\n    logStart := flyt.NewNode(\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            log.Printf(&quot;[%s] Flow starting&quot;, name)\n            return prepResult, nil\n        }),\n    )\n    \n    logEnd := flyt.NewNode(\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            log.Printf(&quot;[%s] Flow completed&quot;, name)\n            return prepResult, nil\n        }),\n    )\n    \n    wrapped := flyt.NewFlow(logStart)\n    wrapped.Connect(logStart, flyt.DefaultAction, flow)\n    wrapped.Connect(flow, flyt.DefaultAction, logEnd)\n    \n    return wrapped\n}\n \n// Usage\nprocessFlow := createProcessingFlow()\nloggedFlow := withLogging(&quot;ProcessingPipeline&quot;, processFlow)\n","title":"Flow Middleware","titles":["Flow as Node"]},"79":{"href":"/advanced/flow-as-node#testing-flows-as-nodes","html":"\n<p>Test flow behavior when used as nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestFlowAsNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">testing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create a simple flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    innerFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;inner_result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test the flow directly</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Call flow methods as if it were a node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    prepResult, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> innerFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    execResult, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> innerFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    action, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> innerFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared, prepResult, execResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Equal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, flyt.DefaultAction, action)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTest flow behavior when used as nodes:\nfunc TestFlowAsNode(t *testing.T) {\n    // Create a simple flow\n    innerFlow := flyt.NewFlow(\n        flyt.NewNode(\n            flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n                return &quot;inner_result&quot;, nil\n            }),\n        ),\n    )\n    \n    // Test the flow directly\n    ctx := context.Background()\n    shared := flyt.NewSharedStore()\n    \n    // Call flow methods as if it were a node\n    prepResult, err := innerFlow.Prep(ctx, shared)\n    assert.NoError(t, err)\n    \n    execResult, err := innerFlow.Exec(ctx, prepResult)\n    assert.NoError(t, err)\n    \n    action, err := innerFlow.Post(ctx, shared, prepResult, execResult)\n    assert.NoError(t, err)\n    assert.Equal(t, flyt.DefaultAction, action)\n}\n","title":"Testing Flows as Nodes","titles":["Flow as Node"]},"80":{"href":"/advanced/flow-as-node#performance-considerations","html":"\n<p>Using flows as nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Lightweight flow - good as node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createLightweightFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Simple operation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> transform</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Heavy flow - consider alternatives</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createHeavyFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Many nodes, complex logic</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Consider breaking into smaller flows</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // or using batch processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Alternative: Use node with embedded logic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createOptimizedNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Inline the flow logic for performance</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> step1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> step2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> step3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUsing flows as nodes:\n// Lightweight flow - good as node\nfunc createLightweightFlow() *flyt.Flow {\n    node := flyt.NewNode(\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            // Simple operation\n            return transform(prepResult), nil\n        }),\n    )\n    return flyt.NewFlow(node)\n}\n \n// Heavy flow - consider alternatives\nfunc createHeavyFlow() *flyt.Flow {\n    // Many nodes, complex logic\n    // Consider breaking into smaller flows\n    // or using batch processing\n}\n \n// Alternative: Use node with embedded logic\nfunc createOptimizedNode() flyt.Node {\n    return flyt.NewNode(\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            // Inline the flow logic for performance\n            result := step1(prepResult)\n            result = step2(result)\n            result = step3(result)\n            return result, nil\n        }),\n    )\n}\n","title":"Performance Considerations","titles":["Flow as Node"]},"81":{"href":"/advanced/flow-as-node#best-practices","html":"\n<ol>\n<li><strong>Keep Flows Focused</strong>: Flows used as nodes should have clear, single purposes</li>\n<li><strong>Document Behavior</strong>: Clearly document what the flow expects and returns</li>\n<li><strong>Test Thoroughly</strong>: Test flows both standalone and as nodes</li>\n<li><strong>Consider Performance</strong>: Be mindful of overhead when nesting many flows</li>\n<li><strong>Use Meaningful Names</strong>: Name flows to indicate they&#x27;re used as nodes</li>\n<li><strong>Handle Errors</strong>: Ensure proper error propagation through nested flows</li>\n</ol>\n","isPage":false,"text":"\n\nKeep Flows Focused: Flows used as nodes should have clear, single purposes\nDocument Behavior: Clearly document what the flow expects and returns\nTest Thoroughly: Test flows both standalone and as nodes\nConsider Performance: Be mindful of overhead when nesting many flows\nUse Meaningful Names: Name flows to indicate they&#x27;re used as nodes\nHandle Errors: Ensure proper error propagation through nested flows\n\n","title":"Best Practices","titles":["Flow as Node"]},"82":{"href":"/advanced/flow-as-node#next-steps","html":"\n<ul>\n<li><a href=\"/advanced/nested-flows\">Nested Flows</a> - Complex flow composition</li>\n<li><a href=\"/concepts/nodes\">Nodes</a> - Node interface details</li>\n<li><a href=\"/concepts/flows\">Flows</a> - Flow fundamentals</li>\n</ul>","isPage":false,"text":"\n\nNested Flows - Complex flow composition\nNodes - Node interface details\nFlows - Flow fundamentals\n","title":"Next Steps","titles":["Flow as Node"]},"83":{"href":"/advanced/nested-flows#nested-flows","html":"</header>\n<p>Compose complex workflows by nesting flows within flows, creating modular and reusable workflow components.</p>\n","isPage":true,"text":"\nCompose complex workflows by nesting flows within flows, creating modular and reusable workflow components.\n","title":"Nested Flows","titles":[]},"84":{"href":"/advanced/nested-flows#basic-nested-flow","html":"\n<p>Use a flow as a node in another flow:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a sub-flow for validation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">validationFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    schemaCheck </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSchemaCheckNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    businessRules </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createBusinessRulesNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaCheck)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaCheck, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, businessRules)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(schemaCheck, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use in main flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, validationFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationFlow, flyt.DefaultAction, processNode)</span></span></code></pre>\n","isPage":false,"text":"\nUse a flow as a node in another flow:\n// Create a sub-flow for validation\nvalidationFlow := func() *flyt.Flow {\n    schemaCheck := createSchemaCheckNode()\n    businessRules := createBusinessRulesNode()\n    \n    flow := flyt.NewFlow(schemaCheck)\n    flow.Connect(schemaCheck, &quot;valid&quot;, businessRules)\n    flow.Connect(schemaCheck, &quot;invalid&quot;, nil)\n    \n    return flow\n}()\n \n// Use in main flow\nmainFlow := flyt.NewFlow(fetchNode)\nmainFlow.Connect(fetchNode, flyt.DefaultAction, validationFlow)\nmainFlow.Connect(validationFlow, flyt.DefaultAction, processNode)\n","title":"Basic Nested Flow","titles":["Nested Flows"]},"85":{"href":"/advanced/nested-flows#reusable-flow-components","html":"\n<p>Create modular flow components:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Reusable authentication flow</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAuthFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    checkToken </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            token </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> validateToken</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    refreshToken </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> refreshAuthToken</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkToken)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkToken, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;expired&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, refreshToken)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkToken, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(refreshToken, flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use in multiple places</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">apiFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">apiFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAuthFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">adminFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(adminNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">adminFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(adminNode, flyt.DefaultAction, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAuthFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nCreate modular flow components:\n// Reusable authentication flow\nfunc createAuthFlow() *flyt.Flow {\n    checkToken := flyt.NewNode(\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            token := prepResult.(string)\n            return validateToken(token)\n        }),\n    )\n    \n    refreshToken := flyt.NewNode(\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            return refreshAuthToken()\n        }),\n    )\n    \n    flow := flyt.NewFlow(checkToken)\n    flow.Connect(checkToken, &quot;expired&quot;, refreshToken)\n    flow.Connect(checkToken, &quot;valid&quot;, nil)\n    flow.Connect(refreshToken, flyt.DefaultAction, nil)\n    \n    return flow\n}\n \n// Use in multiple places\napiFlow := flyt.NewFlow(startNode)\napiFlow.Connect(startNode, flyt.DefaultAction, createAuthFlow())\n \nadminFlow := flyt.NewFlow(adminNode)\nadminFlow.Connect(adminNode, flyt.DefaultAction, createAuthFlow())\n","title":"Reusable Flow Components","titles":["Nested Flows"]},"86":{"href":"/advanced/nested-flows#hierarchical-workflows","html":"\n<p>Build multi-level workflow hierarchies:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Level 3: Atomic operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDatabaseOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    connect </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createConnectNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    query </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createQueryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    disconnect </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDisconnectNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(connect)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(connect, flyt.DefaultAction, query)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(query, flyt.DefaultAction, disconnect)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Level 2: Business operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createUserOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    validate </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidateUserNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    dbOp </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDatabaseOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    notify </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createNotificationNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validate)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validate, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, dbOp)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(dbOp, flyt.DefaultAction, notify)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Level 1: Application flow</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createApplicationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    auth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAuthFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    userOp </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createUserOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    audit </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAuditFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(auth)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(auth, flyt.DefaultAction, userOp)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(userOp, flyt.DefaultAction, audit)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nBuild multi-level workflow hierarchies:\n// Level 3: Atomic operations\nfunc createDatabaseOperation() *flyt.Flow {\n    connect := createConnectNode()\n    query := createQueryNode()\n    disconnect := createDisconnectNode()\n    \n    flow := flyt.NewFlow(connect)\n    flow.Connect(connect, flyt.DefaultAction, query)\n    flow.Connect(query, flyt.DefaultAction, disconnect)\n    \n    return flow\n}\n \n// Level 2: Business operations\nfunc createUserOperation() *flyt.Flow {\n    validate := createValidateUserNode()\n    dbOp := createDatabaseOperation()\n    notify := createNotificationNode()\n    \n    flow := flyt.NewFlow(validate)\n    flow.Connect(validate, &quot;valid&quot;, dbOp)\n    flow.Connect(dbOp, flyt.DefaultAction, notify)\n    \n    return flow\n}\n \n// Level 1: Application flow\nfunc createApplicationFlow() *flyt.Flow {\n    auth := createAuthFlow()\n    userOp := createUserOperation()\n    audit := createAuditFlow()\n    \n    flow := flyt.NewFlow(auth)\n    flow.Connect(auth, flyt.DefaultAction, userOp)\n    flow.Connect(userOp, flyt.DefaultAction, audit)\n    \n    return flow\n}\n","title":"Hierarchical Workflows","titles":["Nested Flows"]},"87":{"href":"/advanced/nested-flows#conditional-nesting","html":"\n<p>Dynamically choose nested flows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">routerNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        request </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> request.Type, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(routerNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(routerNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createUserFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(routerNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;admin&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAdminFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(routerNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAPIFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nDynamically choose nested flows:\nrouterNode := flyt.NewNode(\n    flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n        request := prepResult.(Request)\n        return request.Type, nil\n    }),\n    flyt.WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        return flyt.Action(execResult.(string)), nil\n    }),\n)\n \nmainFlow := flyt.NewFlow(routerNode)\nmainFlow.Connect(routerNode, &quot;user&quot;, createUserFlow())\nmainFlow.Connect(routerNode, &quot;admin&quot;, createAdminFlow())\nmainFlow.Connect(routerNode, &quot;api&quot;, createAPIFlow())\n","title":"Conditional Nesting","titles":["Nested Flows"]},"88":{"href":"/advanced/nested-flows#shared-context-in-nested-flows","html":"\n<p>Pass context through nested flows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createNestedFlowWithContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">parentContext</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Access parent context</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> k, v </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> parentContext {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(k, v)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Get data from parent flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            parentData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;parent_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> parentData, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Process with parent context</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processWithContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult, parentContext), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPass context through nested flows:\nfunc createNestedFlowWithContext(parentContext map[string]any) *flyt.Flow {\n    node := flyt.NewNode(\n        flyt.WithPrepFuncAny(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            // Access parent context\n            for k, v := range parentContext {\n                shared.Set(k, v)\n            }\n            \n            // Get data from parent flow\n            parentData := shared.GetMap(&quot;parent_data&quot;)\n            return parentData, nil\n        }),\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            // Process with parent context\n            return processWithContext(prepResult, parentContext), nil\n        }),\n    )\n    \n    return flyt.NewFlow(node)\n}\n","title":"Shared Context in Nested Flows","titles":["Nested Flows"]},"89":{"href":"/advanced/nested-flows#error-propagation","html":"\n<p>Handle errors across nested flows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createErrorHandlingFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    subFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSubFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errorHandler </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createErrorHandlerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, subFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(subFlow, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(subFlow, flyt.DefaultAction, successNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Error handler can retry or recover</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errorHandler, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, subFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errorHandler, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;abort&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mainFlow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle errors across nested flows:\nfunc createErrorHandlingFlow() *flyt.Flow {\n    subFlow := createSubFlow()\n    errorHandler := createErrorHandlerNode()\n    \n    mainFlow := flyt.NewFlow(startNode)\n    mainFlow.Connect(startNode, flyt.DefaultAction, subFlow)\n    mainFlow.Connect(subFlow, &quot;error&quot;, errorHandler)\n    mainFlow.Connect(subFlow, flyt.DefaultAction, successNode)\n    \n    // Error handler can retry or recover\n    mainFlow.Connect(errorHandler, &quot;retry&quot;, subFlow)\n    mainFlow.Connect(errorHandler, &quot;abort&quot;, nil)\n    \n    return mainFlow\n}\n","title":"Error Propagation","titles":["Nested Flows"]},"90":{"href":"/advanced/nested-flows#recursive-flows","html":"\n<p>Create recursive workflow patterns:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createRecursiveFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">maxDepth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    checkDepth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;depth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> depth, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> maxDepth {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;max_depth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                depth </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;depth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, depth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkDepth)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkDepth, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, flyt.DefaultAction, flow) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Recursive connection</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkDepth, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;max_depth&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCreate recursive workflow patterns:\nfunc createRecursiveFlow(maxDepth int) *flyt.Flow {\n    checkDepth := flyt.NewNode(\n        flyt.WithPrepFuncAny(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            depth := shared.GetInt(&quot;depth&quot;)\n            return depth, nil\n        }),\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            depth := prepResult.(int)\n            if depth &gt;= maxDepth {\n                return &quot;max_depth&quot;, nil\n            }\n            return &quot;continue&quot;, nil\n        }),\n        flyt.WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            if execResult.(string) == &quot;continue&quot; {\n                depth := prepResult.(int)\n                shared.Set(&quot;depth&quot;, depth+1)\n            }\n            return flyt.Action(execResult.(string)), nil\n        }),\n    )\n    \n    processNode := createProcessNode()\n    \n    flow := flyt.NewFlow(checkDepth)\n    flow.Connect(checkDepth, &quot;continue&quot;, processNode)\n    flow.Connect(processNode, flyt.DefaultAction, flow) // Recursive connection\n    flow.Connect(checkDepth, &quot;max_depth&quot;, nil)\n    \n    return flow\n}\n","title":"Recursive Flows","titles":["Nested Flows"]},"91":{"href":"/advanced/nested-flows#parallel-nested-flows","html":"\n<p>Execute nested flows in parallel:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createParallelNestedFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    splitNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Split data for parallel processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;part1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data.Part1)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;part2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data.Part2)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create parallel sub-flows</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow1 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessingFlow1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow2 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessingFlow2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Merge results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mergeNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result1 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;result1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result2 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;result2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;result1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: result1,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;result2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: result2,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Connect with parallel execution</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Both flows execute after split</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;flow1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, flow1)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;flow2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, flow2)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Both must complete before merge</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flow1, flyt.DefaultAction, mergeNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flow2, flyt.DefaultAction, mergeNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mainFlow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nExecute nested flows in parallel:\nfunc createParallelNestedFlow() *flyt.Flow {\n    splitNode := flyt.NewNode(\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            // Split data for parallel processing\n            data := prepResult.(Data)\n            shared.Set(&quot;part1&quot;, data.Part1)\n            shared.Set(&quot;part2&quot;, data.Part2)\n            return nil, nil\n        }),\n    )\n    \n    // Create parallel sub-flows\n    flow1 := createProcessingFlow1()\n    flow2 := createProcessingFlow2()\n    \n    // Merge results\n    mergeNode := flyt.NewNode(\n        flyt.WithPrepFuncAny(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            result1 := shared.GetMap(&quot;result1&quot;)\n            result2 := shared.GetMap(&quot;result2&quot;)\n            return map[string]any{\n                &quot;result1&quot;: result1,\n                &quot;result2&quot;: result2,\n            }, nil\n        }),\n    )\n    \n    // Connect with parallel execution\n    mainFlow := flyt.NewFlow(splitNode)\n    \n    // Both flows execute after split\n    mainFlow.Connect(splitNode, &quot;flow1&quot;, flow1)\n    mainFlow.Connect(splitNode, &quot;flow2&quot;, flow2)\n    \n    // Both must complete before merge\n    mainFlow.Connect(flow1, flyt.DefaultAction, mergeNode)\n    mainFlow.Connect(flow2, flyt.DefaultAction, mergeNode)\n    \n    return mainFlow\n}\n","title":"Parallel Nested Flows","titles":["Nested Flows"]},"92":{"href":"/advanced/nested-flows#dynamic-flow-composition","html":"\n<p>Build flows at runtime:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDynamicFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">config</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FlowConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    startNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createStartNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    previousNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, step </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config.Steps {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stepFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> step.Type {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;validate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            stepFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(step.Config)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;process&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            stepFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessingFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(step.Config)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;save&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            stepFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSaveFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(step.Config)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stepFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(previousNode, flyt.DefaultAction, stepFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            previousNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stepFlow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nBuild flows at runtime:\nfunc createDynamicFlow(config FlowConfig) *flyt.Flow {\n    startNode := createStartNode()\n    flow := flyt.NewFlow(startNode)\n    \n    previousNode := flyt.Node(startNode)\n    \n    for _, step := range config.Steps {\n        var stepFlow *flyt.Flow\n        \n        switch step.Type {\n        case &quot;validate&quot;:\n            stepFlow = createValidationFlow(step.Config)\n        case &quot;process&quot;:\n            stepFlow = createProcessingFlow(step.Config)\n        case &quot;save&quot;:\n            stepFlow = createSaveFlow(step.Config)\n        }\n        \n        if stepFlow != nil {\n            flow.Connect(previousNode, flyt.DefaultAction, stepFlow)\n            previousNode = stepFlow\n        }\n    }\n    \n    return flow\n}\n","title":"Dynamic Flow Composition","titles":["Nested Flows"]},"93":{"href":"/advanced/nested-flows#testing-nested-flows","html":"\n<p>Test nested flows in isolation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestNestedFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">t</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">testing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test sub-flow independently</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    subFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSubFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    subShared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    subShared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;test_input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> subFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), subShared)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test main flow with mocked sub-flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mockSubFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;mocked_result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, mockSubFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assert.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NoError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(t, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTest nested flows in isolation:\nfunc TestNestedFlow(t *testing.T) {\n    // Test sub-flow independently\n    subFlow := createSubFlow()\n    subShared := flyt.NewSharedStore()\n    subShared.Set(&quot;test_input&quot;, &quot;data&quot;)\n    \n    err := subFlow.Run(context.Background(), subShared)\n    assert.NoError(t, err)\n    \n    // Test main flow with mocked sub-flow\n    mockSubFlow := flyt.NewNode(\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            return &quot;mocked_result&quot;, nil\n        }),\n    )\n    \n    mainFlow := flyt.NewFlow(startNode)\n    mainFlow.Connect(startNode, flyt.DefaultAction, mockSubFlow)\n    \n    err = mainFlow.Run(context.Background(), flyt.NewSharedStore())\n    assert.NoError(t, err)\n}\n","title":"Testing Nested Flows","titles":["Nested Flows"]},"94":{"href":"/advanced/nested-flows#best-practices","html":"\n<ol>\n<li><strong>Keep Flows Focused</strong>: Each flow should have a single, clear purpose</li>\n<li><strong>Minimize Coupling</strong>: Flows should communicate through well-defined interfaces</li>\n<li><strong>Document Dependencies</strong>: Clearly document what each nested flow expects</li>\n<li><strong>Test in Isolation</strong>: Test nested flows independently</li>\n<li><strong>Avoid Deep Nesting</strong>: Too many levels make debugging difficult</li>\n<li><strong>Use Meaningful Names</strong>: Name flows based on their business function</li>\n</ol>\n","isPage":false,"text":"\n\nKeep Flows Focused: Each flow should have a single, clear purpose\nMinimize Coupling: Flows should communicate through well-defined interfaces\nDocument Dependencies: Clearly document what each nested flow expects\nTest in Isolation: Test nested flows independently\nAvoid Deep Nesting: Too many levels make debugging difficult\nUse Meaningful Names: Name flows based on their business function\n\n","title":"Best Practices","titles":["Nested Flows"]},"95":{"href":"/advanced/nested-flows#next-steps","html":"\n<ul>\n<li><a href=\"/advanced/flow-as-node\">Flow as Node</a> - Flows implementing Node interface</li>\n<li><a href=\"/advanced/batch-flows\">Batch Flows</a> - Running flows in batches</li>\n<li><a href=\"/concepts/flows\">Flows</a> - Flow fundamentals</li>\n</ul>","isPage":false,"text":"\n\nFlow as Node - Flows implementing Node interface\nBatch Flows - Running flows in batches\nFlows - Flow fundamentals\n","title":"Next Steps","titles":["Nested Flows"]},"96":{"href":"/advanced/utilities#utilities","html":"</header>\n<p>Helper functions and utilities to simplify common tasks in Flyt workflows.</p>\n","isPage":true,"text":"\nHelper functions and utilities to simplify common tasks in Flyt workflows.\n","title":"Utilities","titles":[]},"97":{"href":"/advanced/utilities#toslice","html":"\n<p>Convert various types to slices for batch processing:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert different types to []any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stringSlice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ToSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;a&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;c&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">intSlice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ToSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">singleItem </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ToSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;single item&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns []any{&quot;single item&quot;}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">nilValue </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ToSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns empty []any{}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Useful for batch processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ToSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data))</span></span></code></pre>\n","isPage":false,"text":"\nConvert various types to slices for batch processing:\n// Convert different types to []any\nstringSlice := flyt.ToSlice([]string{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;})\nintSlice := flyt.ToSlice([]int{1, 2, 3})\nsingleItem := flyt.ToSlice(&quot;single item&quot;) // Returns []any{&quot;single item&quot;}\nnilValue := flyt.ToSlice(nil) // Returns empty []any{}\n \n// Useful for batch processing\nshared.Set(&quot;items&quot;, flyt.ToSlice(data))\n","title":"ToSlice","titles":["Utilities"]},"98":{"href":"/advanced/utilities#implementation-details","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ToSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">v</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> v </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    rv </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> reflect.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ValueOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(v)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rv.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Kind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> reflect.Slice {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, rv.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rv.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(); i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rv.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Index</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(i).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Single item</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{v}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc ToSlice(v any) []any {\n    if v == nil {\n        return []any{}\n    }\n    \n    rv := reflect.ValueOf(v)\n    if rv.Kind() == reflect.Slice {\n        result := make([]any, rv.Len())\n        for i := 0; i &lt; rv.Len(); i++ {\n            result[i] = rv.Index(i).Interface()\n        }\n        return result\n    }\n    \n    // Single item\n    return []any{v}\n}\n","title":"Implementation Details","titles":["Utilities","ToSlice"]},"99":{"href":"/advanced/utilities#custom-utility-functions","html":"\n<p>Create your own utilities:</p>\n","isPage":false,"text":"\nCreate your own utilities:\n","title":"Custom Utility Functions","titles":["Utilities"]},"100":{"href":"/advanced/utilities#retry-helper","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> RetryOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">operation</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">maxRetries</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">backoff</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> lastErr </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> maxRetries; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> operation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            lastErr </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> maxRetries</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sleep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(backoff </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;operation failed after </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> retries: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, maxRetries, lastErr)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage in node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> RetryOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc RetryOperation(operation func() error, maxRetries int, backoff time.Duration) error {\n    var lastErr error\n    \n    for i := 0; i &lt; maxRetries; i++ {\n        if err := operation(); err == nil {\n            return nil\n        } else {\n            lastErr = err\n            if i &lt; maxRetries-1 {\n                time.Sleep(backoff * time.Duration(i+1))\n            }\n        }\n    }\n    \n    return fmt.Errorf(&quot;operation failed after %d retries: %w&quot;, maxRetries, lastErr)\n}\n \n// Usage in node\nfunc (n *MyNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    var result any\n    \n    err := RetryOperation(func() error {\n        var err error\n        result, err = callAPI(prepResult)\n        return err\n    }, 3, time.Second)\n    \n    return result, err\n}\n","title":"Retry Helper","titles":["Utilities","Custom Utility Functions"]},"101":{"href":"/advanced/utilities#parallel-map","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ParallelMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">R</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">R</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">R</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">R</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WaitGroup</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    semaphore </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, workers)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">index</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            semaphore </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}{}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() { </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">semaphore }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[index] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }(i, item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ParallelMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items, processItem, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nfunc ParallelMap[T any, R any](items []T, fn func(T) R, workers int) []R {\n    results := make([]R, len(items))\n    \n    var wg sync.WaitGroup\n    semaphore := make(chan struct{}, workers)\n    \n    for i, item := range items {\n        wg.Add(1)\n        go func(index int, data T) {\n            defer wg.Done()\n            \n            semaphore &lt;- struct{}{}\n            defer func() { &lt;-semaphore }()\n            \n            results[index] = fn(data)\n        }(i, item)\n    }\n    \n    wg.Wait()\n    return results\n}\n \n// Usage\nresults := ParallelMap(items, processItem, 10)\n","title":"Parallel Map","titles":["Utilities","Custom Utility Functions"]},"102":{"href":"/advanced/utilities#type-safe-getters","html":"\n<p>Flyt provides built-in type-safe getters:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Built-in type-safe getters</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)           </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns 0 if not found</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">name </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)              </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns &quot;&quot; if not found</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">enabled </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetBool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;enabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)          </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns false if not found</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// With custom defaults</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">name </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetStringOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;anonymous&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">enabled </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetBoolOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;enabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// For complex types, use Bind</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Config</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config)</span></span></code></pre>\n","isPage":false,"text":"\nFlyt provides built-in type-safe getters:\n// Built-in type-safe getters\nuserID := shared.GetInt(&quot;user_id&quot;)           // Returns 0 if not found\nname := shared.GetString(&quot;name&quot;)              // Returns &quot;&quot; if not found\nenabled := shared.GetBool(&quot;enabled&quot;)          // Returns false if not found\n \n// With custom defaults\nuserID = shared.GetIntOr(&quot;user_id&quot;, -1)\nname = shared.GetStringOr(&quot;name&quot;, &quot;anonymous&quot;)\nenabled = shared.GetBoolOr(&quot;enabled&quot;, true)\n \n// For complex types, use Bind\nvar config Config\nerr := shared.Bind(&quot;config&quot;, &amp;config)\n","title":"Type-Safe Getters","titles":["Utilities","Custom Utility Functions"]},"103":{"href":"/advanced/utilities#chunk-slice","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ChunkSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">slice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">chunkSize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) [][]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunks [][]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(slice); i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunkSize {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunkSize</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(slice) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(slice)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        chunks </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(chunks, slice[i:end])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage in batch processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">chunks </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ChunkSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, chunk </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunks {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    processChunk</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(chunk)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc ChunkSlice[T any](slice []T, chunkSize int) [][]T {\n    var chunks [][]T\n    \n    for i := 0; i &lt; len(slice); i += chunkSize {\n        end := i + chunkSize\n        if end &gt; len(slice) {\n            end = len(slice)\n        }\n        chunks = append(chunks, slice[i:end])\n    }\n    \n    return chunks\n}\n \n// Usage in batch processing\nchunks := ChunkSlice(items, 100)\nfor _, chunk := range chunks {\n    processChunk(chunk)\n}\n","title":"Chunk Slice","titles":["Utilities","Custom Utility Functions"]},"104":{"href":"/advanced/utilities#merge-maps","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MergeMaps</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">maps</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ...map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, m </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> maps {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> k, v </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result[k] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> v</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MergeMaps</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(defaultConfig, userConfig, overrides)</span></span></code></pre>\n","isPage":false,"text":"\nfunc MergeMaps(maps ...map[string]any) map[string]any {\n    result := make(map[string]any)\n    \n    for _, m := range maps {\n        for k, v := range m {\n            result[k] = v\n        }\n    }\n    \n    return result\n}\n \n// Usage\nconfig := MergeMaps(defaultConfig, userConfig, overrides)\n","title":"Merge Maps","titles":["Utilities","Custom Utility Functions"]},"105":{"href":"/advanced/utilities#filter-slice","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> FilterSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">slice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">predicate</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slice {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> predicate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result, item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">validItems </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> FilterSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsValid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nfunc FilterSlice[T any](slice []T, predicate func(T) bool) []T {\n    result := make([]T, 0)\n    \n    for _, item := range slice {\n        if predicate(item) {\n            result = append(result, item)\n        }\n    }\n    \n    return result\n}\n \n// Usage\nvalidItems := FilterSlice(items, func(item Item) bool {\n    return item.IsValid()\n})\n","title":"Filter Slice","titles":["Utilities","Custom Utility Functions"]},"106":{"href":"/advanced/utilities#timeout-wrapper","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> WithTimeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">](</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">timeout</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx, cancel </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithTimeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, timeout)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> cancel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        err   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    done </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        done </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{value, err}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">done:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res.value, res.err</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> zero </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> zero, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> WithTimeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">time.Second, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nfunc WithTimeout[T any](ctx context.Context, timeout time.Duration, fn func(context.Context) (T, error)) (T, error) {\n    ctx, cancel := context.WithTimeout(ctx, timeout)\n    defer cancel()\n    \n    type result struct {\n        value T\n        err   error\n    }\n    \n    done := make(chan result, 1)\n    \n    go func() {\n        value, err := fn(ctx)\n        done &lt;- result{value, err}\n    }()\n    \n    select {\n    case res := &lt;-done:\n        return res.value, res.err\n    case &lt;-ctx.Done():\n        var zero T\n        return zero, ctx.Err()\n    }\n}\n \n// Usage\nresult, err := WithTimeout(ctx, 5*time.Second, func(ctx context.Context) (string, error) {\n    return fetchData(ctx)\n})\n","title":"Timeout Wrapper","titles":["Utilities","Custom Utility Functions"]},"107":{"href":"/advanced/utilities#pipeline-builder","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Pipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stages []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewPipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">T</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Pipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Pipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        stages: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(T) T, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Pipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">stage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Pipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.stages </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(p.stages, stage)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Pipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Execute</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">input</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> input</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, stage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.stages {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> stage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pipeline </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewPipeline</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(strings.TrimSpace).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(strings.ToLower).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">s</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> strings.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ReplaceAll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(s, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot; &quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;_&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pipeline.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Execute</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;  Hello World  &quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Result: &quot;hello_world&quot;</span></span></code></pre>\n","isPage":false,"text":"\ntype Pipeline[T any] struct {\n    stages []func(T) T\n}\n \nfunc NewPipeline[T any]() *Pipeline[T] {\n    return &amp;Pipeline[T]{\n        stages: make([]func(T) T, 0),\n    }\n}\n \nfunc (p *Pipeline[T]) Add(stage func(T) T) *Pipeline[T] {\n    p.stages = append(p.stages, stage)\n    return p\n}\n \nfunc (p *Pipeline[T]) Execute(input T) T {\n    result := input\n    for _, stage := range p.stages {\n        result = stage(result)\n    }\n    return result\n}\n \n// Usage\npipeline := NewPipeline[string]().\n    Add(strings.TrimSpace).\n    Add(strings.ToLower).\n    Add(func(s string) string {\n        return strings.ReplaceAll(s, &quot; &quot;, &quot;_&quot;)\n    })\n \nresult := pipeline.Execute(&quot;  Hello World  &quot;)\n// Result: &quot;hello_world&quot;\n","title":"Pipeline Builder","titles":["Utilities","Custom Utility Functions"]},"108":{"href":"/advanced/utilities#error-aggregator","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ErrorAggregator</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errors []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu     </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">e </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ErrorAggregator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    e.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    e.errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(e.errors, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    e.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">e </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ErrorAggregator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    e.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> e.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(e.errors) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(e.errors) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> e.errors[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;multiple errors (</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">): </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(e.errors), e.errors)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">aggregator </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ErrorAggregator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        aggregator.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> aggregator.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype ErrorAggregator struct {\n    errors []error\n    mu     sync.Mutex\n}\n \nfunc (e *ErrorAggregator) Add(err error) {\n    if err == nil {\n        return\n    }\n    \n    e.mu.Lock()\n    e.errors = append(e.errors, err)\n    e.mu.Unlock()\n}\n \nfunc (e *ErrorAggregator) Error() error {\n    e.mu.Lock()\n    defer e.mu.Unlock()\n    \n    if len(e.errors) == 0 {\n        return nil\n    }\n    \n    if len(e.errors) == 1 {\n        return e.errors[0]\n    }\n    \n    return fmt.Errorf(&quot;multiple errors (%d): %v&quot;, len(e.errors), e.errors)\n}\n \n// Usage\naggregator := &amp;ErrorAggregator{}\n \nfor _, item := range items {\n    if err := processItem(item); err != nil {\n        aggregator.Add(err)\n    }\n}\n \nif err := aggregator.Error(); err != nil {\n    return nil, err\n}\n","title":"Error Aggregator","titles":["Utilities","Custom Utility Functions"]},"109":{"href":"/advanced/utilities#context-values-helper","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContextKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    RequestIDKey</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContextKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;request_id&quot;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    UserIDKey</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    ContextKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;user_id&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> WithRequestID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">requestID</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, RequestIDKey, requestID)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetRequestID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    id, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(RequestIDKey).(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> id, ok</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage in nodes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">LoggingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    requestID, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> GetRequestID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Processing: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, requestID, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> process</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype ContextKey string\n \nconst (\n    RequestIDKey ContextKey = &quot;request_id&quot;\n    UserIDKey    ContextKey = &quot;user_id&quot;\n)\n \nfunc WithRequestID(ctx context.Context, requestID string) context.Context {\n    return context.WithValue(ctx, RequestIDKey, requestID)\n}\n \nfunc GetRequestID(ctx context.Context) (string, bool) {\n    id, ok := ctx.Value(RequestIDKey).(string)\n    return id, ok\n}\n \n// Usage in nodes\nfunc (n *LoggingNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    requestID, _ := GetRequestID(ctx)\n    log.Printf(&quot;[%s] Processing: %v&quot;, requestID, prepResult)\n    \n    return process(prepResult)\n}\n","title":"Context Values Helper","titles":["Utilities","Custom Utility Functions"]},"110":{"href":"/advanced/utilities#debounce-function","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Debounce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">delay</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> timer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Timer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mu </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> timer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            timer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Stop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        timer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AfterFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(delay, fn)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">saveDebounced </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Debounce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    saveToDatabase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Second</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Call multiple times, only last one executes</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">saveDebounced</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">saveDebounced</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">saveDebounced</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nfunc Debounce(fn func(), delay time.Duration) func() {\n    var timer *time.Timer\n    var mu sync.Mutex\n    \n    return func() {\n        mu.Lock()\n        defer mu.Unlock()\n        \n        if timer != nil {\n            timer.Stop()\n        }\n        \n        timer = time.AfterFunc(delay, fn)\n    }\n}\n \n// Usage\nsaveDebounced := Debounce(func() {\n    saveToDatabase()\n}, 5*time.Second)\n \n// Call multiple times, only last one executes\nsaveDebounced()\nsaveDebounced()\nsaveDebounced()\n","title":"Debounce Function","titles":["Utilities","Custom Utility Functions"]},"111":{"href":"/advanced/utilities#testing-utilities","html":"\n","isPage":false,"text":"\n","title":"Testing Utilities","titles":["Utilities"]},"112":{"href":"/advanced/utilities#mock-sharedstore","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MockSharedStore</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu   </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RWMutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewMockSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">initial</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MockSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MockSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data: initial,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">m </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MockSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    m.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RLock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RUnlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    val, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m.data[key]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val, ok</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">m </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MockSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">value</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    m.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    m.data[key] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype MockSharedStore struct {\n    data map[string]any\n    mu   sync.RWMutex\n}\n \nfunc NewMockSharedStore(initial map[string]any) *MockSharedStore {\n    return &amp;MockSharedStore{\n        data: initial,\n    }\n}\n \nfunc (m *MockSharedStore) Get(key string) (any, bool) {\n    m.mu.RLock()\n    defer m.mu.RUnlock()\n    val, ok := m.data[key]\n    return val, ok\n}\n \nfunc (m *MockSharedStore) Set(key string, value any) {\n    m.mu.Lock()\n    defer m.mu.Unlock()\n    m.data[key] = value\n}\n","title":"Mock SharedStore","titles":["Utilities","Testing Utilities"]},"113":{"href":"/advanced/utilities#test-node-builder","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execFn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execFn),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage in tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">input</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;test_result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nfunc TestNode(execFn func(context.Context, any) (any, error)) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithExecFuncAny(execFn),\n    )\n}\n \n// Usage in tests\nnode := TestNode(func(ctx context.Context, input any) (any, error) {\n    return &quot;test_result&quot;, nil\n})\n","title":"Test Node Builder","titles":["Utilities","Testing Utilities"]},"114":{"href":"/advanced/utilities#best-practices","html":"\n<ol>\n<li><strong>Keep Utilities Generic</strong>: Make them reusable across projects</li>\n<li><strong>Document Usage</strong>: Provide clear examples</li>\n<li><strong>Test Thoroughly</strong>: Utilities should be well-tested</li>\n<li><strong>Handle Edge Cases</strong>: Consider nil values and empty inputs</li>\n<li><strong>Use Type Parameters</strong>: Leverage Go generics where appropriate</li>\n<li><strong>Thread Safety</strong>: Ensure utilities are safe for concurrent use</li>\n</ol>\n","isPage":false,"text":"\n\nKeep Utilities Generic: Make them reusable across projects\nDocument Usage: Provide clear examples\nTest Thoroughly: Utilities should be well-tested\nHandle Edge Cases: Consider nil values and empty inputs\nUse Type Parameters: Leverage Go generics where appropriate\nThread Safety: Ensure utilities are safe for concurrent use\n\n","title":"Best Practices","titles":["Utilities"]},"115":{"href":"/advanced/utilities#next-steps","html":"\n<ul>\n<li><a href=\"/advanced/custom-nodes\">Custom Nodes</a> - Build sophisticated nodes</li>\n<li><a href=\"/best-practices\">Best Practices</a> - General guidelines</li>\n<li><a href=\"https://github.com/mark3labs/flyt/tree/main/cookbook\">Examples</a> - See utilities in action</li>\n</ul>","isPage":false,"text":"\n\nCustom Nodes - Build sophisticated nodes\nBest Practices - General guidelines\nExamples - See utilities in action\n","title":"Next Steps","titles":["Utilities"]},"116":{"href":"/advanced/worker-pool#worker-pool","html":"</header>\n<p>Manage concurrent task execution with fine-grained control using the WorkerPool utility.</p>\n<blockquote>\n<p><strong>Note:</strong> BatchNode internally uses WorkerPool for concurrent batch processing. For most batch processing scenarios, use <code>BatchNode</code> with <code>WithBatchConcurrency(n)</code> for a simpler API. Use WorkerPool directly when you need custom concurrent task management outside of the batch processing pattern.</p>\n</blockquote>\n","isPage":true,"text":"\nManage concurrent task execution with fine-grained control using the WorkerPool utility.\n\nNote: BatchNode internally uses WorkerPool for concurrent batch processing. For most batch processing scenarios, use BatchNode with WithBatchConcurrency(n) for a simpler API. Use WorkerPool directly when you need custom concurrent task management outside of the batch processing pattern.\n\n","title":"Worker Pool","titles":[]},"117":{"href":"/advanced/worker-pool#basic-worker-pool","html":"\n<p>Create and use a worker pool:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a pool with 10 workers</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Submit tasks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    taskID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process task</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processTask</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(taskID)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Task </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, taskID, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait for all tasks to complete</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clean up</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nCreate and use a worker pool:\n// Create a pool with 10 workers\npool := flyt.NewWorkerPool(10)\n \n// Submit tasks\nfor i := 0; i &lt; 100; i++ {\n    taskID := i\n    pool.Submit(func() {\n        // Process task\n        result := processTask(taskID)\n        fmt.Printf(&quot;Task %d completed: %v\\n&quot;, taskID, result)\n    })\n}\n \n// Wait for all tasks to complete\npool.Wait()\n \n// Clean up\npool.Close()\n","title":"Basic Worker Pool","titles":["Worker Pool"]},"118":{"href":"/advanced/worker-pool#worker-pool-with-results","html":"\n<p>Collect results from worker pool:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ResultCollector</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu      </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processWithWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    collector </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ResultCollector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        index </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            collector.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            collector.results[index] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            collector.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> collector.results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCollect results from worker pool:\ntype ResultCollector struct {\n    mu      sync.Mutex\n    results []Result\n}\n \nfunc processWithWorkerPool(items []Item) []Result {\n    pool := flyt.NewWorkerPool(5)\n    collector := &amp;ResultCollector{\n        results: make([]Result, len(items)),\n    }\n    \n    for i, item := range items {\n        index := i\n        data := item\n        \n        pool.Submit(func() {\n            result := processItem(data)\n            \n            collector.mu.Lock()\n            collector.results[index] = result\n            collector.mu.Unlock()\n        })\n    }\n    \n    pool.Wait()\n    pool.Close()\n    \n    return collector.results\n}\n","title":"Worker Pool with Results","titles":["Worker Pool"]},"119":{"href":"/advanced/worker-pool#dynamic-worker-scaling","html":"\n<p>Adjust worker count based on load:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DynamicWorkerPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    minWorkers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    maxWorkers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool       </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    load       </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int32</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu         </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RWMutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewDynamicWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">min</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">max</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        minWorkers: min,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        maxWorkers: max,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool:       flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(min),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    currentLoad </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.load, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Scale up if needed</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentLoad </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCurrentWorkers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">scaleUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        newLoad </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.load, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Scale down if idle</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> newLoad </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCurrentWorkers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">scaleDown</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">scaleUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    current </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCurrentWorkers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> current </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.maxWorkers {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Create new pool with more workers</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        newPool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">min</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(current</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, p.maxWorkers))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        p.pool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> newPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAdjust worker count based on load:\ntype DynamicWorkerPool struct {\n    minWorkers int\n    maxWorkers int\n    pool       *flyt.WorkerPool\n    load       int32\n    mu         sync.RWMutex\n}\n \nfunc NewDynamicWorkerPool(min, max int) *DynamicWorkerPool {\n    return &amp;DynamicWorkerPool{\n        minWorkers: min,\n        maxWorkers: max,\n        pool:       flyt.NewWorkerPool(min),\n    }\n}\n \nfunc (p *DynamicWorkerPool) Submit(task func()) {\n    currentLoad := atomic.AddInt32(&amp;p.load, 1)\n    \n    // Scale up if needed\n    if currentLoad &gt; int32(p.getCurrentWorkers()*2) {\n        p.scaleUp()\n    }\n    \n    p.pool.Submit(func() {\n        task()\n        \n        newLoad := atomic.AddInt32(&amp;p.load, -1)\n        \n        // Scale down if idle\n        if newLoad &lt; int32(p.getCurrentWorkers()/2) {\n            p.scaleDown()\n        }\n    })\n}\n \nfunc (p *DynamicWorkerPool) scaleUp() {\n    p.mu.Lock()\n    defer p.mu.Unlock()\n    \n    current := p.getCurrentWorkers()\n    if current &lt; p.maxWorkers {\n        // Create new pool with more workers\n        newPool := flyt.NewWorkerPool(min(current*2, p.maxWorkers))\n        p.pool.Close()\n        p.pool = newPool\n    }\n}\n","title":"Dynamic Worker Scaling","titles":["Worker Pool"]},"120":{"href":"/advanced/worker-pool#rate-limited-worker-pool","html":"\n<p>Control processing rate:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createRateLimitedPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">rps</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RateLimitedPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    limiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rate.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewLimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rate.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Limit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rps), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(workers)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RateLimitedPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool:    pool,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        limiter: limiter,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> RateLimitedPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    limiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Limiter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RateLimitedPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Wait for rate limit</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.limiter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(task)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nControl processing rate:\nfunc createRateLimitedPool(workers int, rps int) *RateLimitedPool {\n    limiter := rate.NewLimiter(rate.Limit(rps), 1)\n    pool := flyt.NewWorkerPool(workers)\n    \n    return &amp;RateLimitedPool{\n        pool:    pool,\n        limiter: limiter,\n    }\n}\n \ntype RateLimitedPool struct {\n    pool    *flyt.WorkerPool\n    limiter *rate.Limiter\n}\n \nfunc (p *RateLimitedPool) Submit(ctx context.Context, task func()) error {\n    // Wait for rate limit\n    if err := p.limiter.Wait(ctx); err != nil {\n        return err\n    }\n    \n    p.pool.Submit(task)\n    return nil\n}\n","title":"Rate-Limited Worker Pool","titles":["Worker Pool"]},"121":{"href":"/advanced/worker-pool#priority-queue-worker-pool","html":"\n<p>Process tasks by priority:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PriorityTask</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Priority </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Task     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ID       </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PriorityWorkerPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    workers </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    queue   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PriorityQueue</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    running </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu      </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewPriorityWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PriorityWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PriorityWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        workers: workers,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        queue:   </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewPriorityQueue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool:    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(workers),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        running: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Start dispatcher</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dispatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PriorityWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">priority</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.queue.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PriorityTask</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Priority: priority,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Task:     task,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ID:       </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">generateID</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PriorityWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dispatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.running {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        task </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.queue.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Pop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Blocks until task available</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> task </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(task.Task)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nProcess tasks by priority:\ntype PriorityTask struct {\n    Priority int\n    Task     func()\n    ID       string\n}\n \ntype PriorityWorkerPool struct {\n    workers int\n    queue   *PriorityQueue\n    pool    *flyt.WorkerPool\n    running bool\n    mu      sync.Mutex\n}\n \nfunc NewPriorityWorkerPool(workers int) *PriorityWorkerPool {\n    p := &amp;PriorityWorkerPool{\n        workers: workers,\n        queue:   NewPriorityQueue(),\n        pool:    flyt.NewWorkerPool(workers),\n        running: true,\n    }\n    \n    // Start dispatcher\n    go p.dispatch()\n    \n    return p\n}\n \nfunc (p *PriorityWorkerPool) Submit(priority int, task func()) {\n    p.queue.Push(PriorityTask{\n        Priority: priority,\n        Task:     task,\n        ID:       generateID(),\n    })\n}\n \nfunc (p *PriorityWorkerPool) dispatch() {\n    for p.running {\n        task := p.queue.Pop() // Blocks until task available\n        if task != nil {\n            p.pool.Submit(task.Task)\n        }\n    }\n}\n","title":"Priority Queue Worker Pool","titles":["Worker Pool"]},"122":{"href":"/advanced/worker-pool#worker-pool-with-timeout","html":"\n<p>Handle task timeouts:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTimeoutPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">timeout</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TimeoutPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TimeoutPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool:    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(workers),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        timeout: timeout,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TimeoutPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    timeout </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TimeoutPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        done </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            done </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">done:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">After</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(p.timeout):</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;task timeout after </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, p.timeout)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">errChan</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle task timeouts:\nfunc createTimeoutPool(workers int, timeout time.Duration) *TimeoutPool {\n    return &amp;TimeoutPool{\n        pool:    flyt.NewWorkerPool(workers),\n        timeout: timeout,\n    }\n}\n \ntype TimeoutPool struct {\n    pool    *flyt.WorkerPool\n    timeout time.Duration\n}\n \nfunc (p *TimeoutPool) Submit(task func() error) error {\n    errChan := make(chan error, 1)\n    \n    p.pool.Submit(func() {\n        done := make(chan error, 1)\n        \n        go func() {\n            done &lt;- task()\n        }()\n        \n        select {\n        case err := &lt;-done:\n            errChan &lt;- err\n        case &lt;-time.After(p.timeout):\n            errChan &lt;- fmt.Errorf(&quot;task timeout after %v&quot;, p.timeout)\n        }\n    })\n    \n    return &lt;-errChan\n}\n","title":"Worker Pool with Timeout","titles":["Worker Pool"]},"123":{"href":"/advanced/worker-pool#worker-pool-in-nodes","html":"\n<p>Use worker pools within nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ParallelProcessingNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewParallelProcessingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ParallelProcessingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ParallelProcessingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool:     flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(workers),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ParallelProcessingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WaitGroup</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        index </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[index] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            errors[index] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Wait with context</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    done </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{})</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(done)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">done:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Check for errors</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ParallelProcessingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUse worker pools within nodes:\ntype ParallelProcessingNode struct {\n    *flyt.BaseNode\n    pool *flyt.WorkerPool\n}\n \nfunc NewParallelProcessingNode(workers int) *ParallelProcessingNode {\n    return &amp;ParallelProcessingNode{\n        BaseNode: flyt.NewBaseNode(),\n        pool:     flyt.NewWorkerPool(workers),\n    }\n}\n \nfunc (n *ParallelProcessingNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    items := prepResult.([]Item)\n    results := make([]Result, len(items))\n    errors := make([]error, len(items))\n    \n    var wg sync.WaitGroup\n    \n    for i, item := range items {\n        wg.Add(1)\n        index := i\n        data := item\n        \n        n.pool.Submit(func() {\n            defer wg.Done()\n            \n            result, err := processItem(data)\n            results[index] = result\n            errors[index] = err\n        })\n    }\n    \n    // Wait with context\n    done := make(chan struct{})\n    go func() {\n        wg.Wait()\n        close(done)\n    }()\n    \n    select {\n    case &lt;-ctx.Done():\n        return nil, ctx.Err()\n    case &lt;-done:\n        // Check for errors\n        for _, err := range errors {\n            if err != nil {\n                return results, fmt.Errorf(&quot;processing failed: %w&quot;, err)\n            }\n        }\n        return results, nil\n    }\n}\n \nfunc (n *ParallelProcessingNode) Close() {\n    n.pool.Close()\n}\n","title":"Worker Pool in Nodes","titles":["Worker Pool"]},"124":{"href":"/advanced/worker-pool#batch-processing-with-worker-pool","html":"\n<p>BatchNode uses WorkerPool internally for concurrent processing. You can also use WorkerPool directly for custom batch operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processBatchesWithPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">batchSize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">workers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewWorkerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(workers)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process in batches</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items); i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> batchSize {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> min</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchSize, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        batch </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items[i:end]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        batchStart </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            batchResults </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processBatch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(batch)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Store results</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> j, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> batchResults {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                results[batchStart</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">j] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p><strong>Note:</strong> For most batch processing needs, consider using <code>BatchNode</code> which provides a simpler API and handles worker pool management automatically with <code>WithBatchConcurrency(n)</code>.</p>\n","isPage":false,"text":"\nBatchNode uses WorkerPool internally for concurrent processing. You can also use WorkerPool directly for custom batch operations:\nfunc processBatchesWithPool(items []Item, batchSize int, workers int) []Result {\n    pool := flyt.NewWorkerPool(workers)\n    results := make([]Result, len(items))\n    \n    // Process in batches\n    for i := 0; i &lt; len(items); i += batchSize {\n        end := min(i+batchSize, len(items))\n        batch := items[i:end]\n        batchStart := i\n        \n        pool.Submit(func() {\n            batchResults := processBatch(batch)\n            \n            // Store results\n            for j, result := range batchResults {\n                results[batchStart+j] = result\n            }\n        })\n    }\n    \n    pool.Wait()\n    pool.Close()\n    \n    return results\n}\nNote: For most batch processing needs, consider using BatchNode which provides a simpler API and handles worker pool management automatically with WithBatchConcurrency(n).\n","title":"Batch Processing with Worker Pool","titles":["Worker Pool"]},"125":{"href":"/advanced/worker-pool#monitoring-worker-pool","html":"\n<p>Track pool performance:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MonitoredPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool      </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    submitted </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    completed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    failed    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    totalTime </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MonitoredPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.submitted, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        start </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        duration </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(start)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.totalTime, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(duration))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.failed, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.completed, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MonitoredPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetStats</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;submitted&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.submitted),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;completed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.completed),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:        atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.failed),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;avg_time_ms&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAverageTime</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;pending&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:       p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPendingCount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTrack pool performance:\ntype MonitoredPool struct {\n    pool      *flyt.WorkerPool\n    submitted int64\n    completed int64\n    failed    int64\n    totalTime int64\n}\n \nfunc (p *MonitoredPool) Submit(task func() error) {\n    atomic.AddInt64(&amp;p.submitted, 1)\n    \n    p.pool.Submit(func() {\n        start := time.Now()\n        \n        err := task()\n        \n        duration := time.Since(start)\n        atomic.AddInt64(&amp;p.totalTime, int64(duration))\n        \n        if err != nil {\n            atomic.AddInt64(&amp;p.failed, 1)\n        } else {\n            atomic.AddInt64(&amp;p.completed, 1)\n        }\n    })\n}\n \nfunc (p *MonitoredPool) GetStats() map[string]int64 {\n    return map[string]int64{\n        &quot;submitted&quot;:     atomic.LoadInt64(&amp;p.submitted),\n        &quot;completed&quot;:     atomic.LoadInt64(&amp;p.completed),\n        &quot;failed&quot;:        atomic.LoadInt64(&amp;p.failed),\n        &quot;avg_time_ms&quot;:   p.getAverageTime(),\n        &quot;pending&quot;:       p.getPendingCount(),\n    }\n}\n","title":"Monitoring Worker Pool","titles":["Worker Pool"]},"126":{"href":"/advanced/worker-pool#circuit-breaker-pool","html":"\n<p>Prevent overload with circuit breaker:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CircuitBreakerPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool        </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkerPool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    failures    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int32</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    threshold   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int32</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    resetTime   </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    lastFailure </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu          </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RWMutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">task</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isOpen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;circuit breaker open&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Submit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> task</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.failures, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.threshold {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                p.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                p.lastFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                p.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Reset on success</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">StoreInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.failures, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">p </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isOpen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    p.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RLock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RUnlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.failures) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.threshold {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(p.lastFailure) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> p.resetTime {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Reset after timeout</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">StoreInt32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">p.failures, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPrevent overload with circuit breaker:\ntype CircuitBreakerPool struct {\n    pool        *flyt.WorkerPool\n    failures    int32\n    threshold   int32\n    resetTime   time.Duration\n    lastFailure time.Time\n    mu          sync.RWMutex\n}\n \nfunc (p *CircuitBreakerPool) Submit(task func() error) error {\n    if p.isOpen() {\n        return fmt.Errorf(&quot;circuit breaker open&quot;)\n    }\n    \n    p.pool.Submit(func() {\n        err := task()\n        \n        if err != nil {\n            failures := atomic.AddInt32(&amp;p.failures, 1)\n            \n            if failures &gt;= p.threshold {\n                p.mu.Lock()\n                p.lastFailure = time.Now()\n                p.mu.Unlock()\n            }\n        } else {\n            // Reset on success\n            atomic.StoreInt32(&amp;p.failures, 0)\n        }\n    })\n    \n    return nil\n}\n \nfunc (p *CircuitBreakerPool) isOpen() bool {\n    p.mu.RLock()\n    defer p.mu.RUnlock()\n    \n    if atomic.LoadInt32(&amp;p.failures) &gt;= p.threshold {\n        if time.Since(p.lastFailure) &lt; p.resetTime {\n            return true\n        }\n        // Reset after timeout\n        atomic.StoreInt32(&amp;p.failures, 0)\n    }\n    \n    return false\n}\n","title":"Circuit Breaker Pool","titles":["Worker Pool"]},"127":{"href":"/advanced/worker-pool#best-practices","html":"\n<ol>\n<li><strong>Size Appropriately</strong>: Set worker count based on workload and resources</li>\n<li><strong>Handle Panics</strong>: Recover from panics in worker goroutines</li>\n<li><strong>Clean Up</strong>: Always close pools when done</li>\n<li><strong>Monitor Performance</strong>: Track metrics for optimization</li>\n<li><strong>Avoid Blocking</strong>: Don&#x27;t block workers with long waits</li>\n<li><strong>Test Concurrency</strong>: Test with various worker counts and loads</li>\n</ol>\n","isPage":false,"text":"\n\nSize Appropriately: Set worker count based on workload and resources\nHandle Panics: Recover from panics in worker goroutines\nClean Up: Always close pools when done\nMonitor Performance: Track metrics for optimization\nAvoid Blocking: Don&#x27;t block workers with long waits\nTest Concurrency: Test with various worker counts and loads\n\n","title":"Best Practices","titles":["Worker Pool"]},"128":{"href":"/advanced/worker-pool#next-steps","html":"\n<ul>\n<li><a href=\"/advanced/batch-processing\">Batch Processing</a> - High-level batch operations</li>\n<li><a href=\"/advanced/custom-nodes\">Custom Nodes</a> - Build nodes with worker pools</li>\n<li><a href=\"/best-practices\">Best Practices</a> - General guidelines</li>\n</ul>","isPage":false,"text":"\n\nBatch Processing - High-level batch operations\nCustom Nodes - Build nodes with worker pools\nBest Practices - General guidelines\n","title":"Next Steps","titles":["Worker Pool"]},"129":{"href":"/concepts/actions#actions","html":"</header>\n<p>Actions are strings returned by a node&#x27;s Post phase that determine the next step in a workflow. They provide dynamic, runtime control over flow execution.</p>\n","isPage":true,"text":"\nActions are strings returned by a node&#x27;s Post phase that determine the next step in a workflow. They provide dynamic, runtime control over flow execution.\n","title":"Actions","titles":[]},"130":{"href":"/concepts/actions#how-actions-work","html":"\n<p>When a node completes, its Post phase returns an action:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> success {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The flow then routes to the node connected with that action:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, retryNode)</span></span></code></pre>\n","isPage":false,"text":"\nWhen a node completes, its Post phase returns an action:\nfunc (n *MyNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    if success {\n        return &quot;continue&quot;, nil\n    }\n    return &quot;retry&quot;, nil\n}\nThe flow then routes to the node connected with that action:\nflow := flyt.NewFlow(startNode)\nflow.Connect(startNode, &quot;continue&quot;, processNode)\nflow.Connect(startNode, &quot;retry&quot;, retryNode)\n","title":"How Actions Work","titles":["Actions"]},"131":{"href":"/concepts/actions#default-action","html":"\n<p>The most common action is <code>flyt.DefaultAction</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Using the constant</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Returns &quot;default&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// In flow connections</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node1, flyt.DefaultAction, node2)</span></span></code></pre>\n","isPage":false,"text":"\nThe most common action is flyt.DefaultAction:\n// Using the constant\nreturn flyt.DefaultAction, nil  // Returns &quot;default&quot;\n \n// In flow connections\nflow.Connect(node1, flyt.DefaultAction, node2)\n","title":"Default Action","titles":["Actions"]},"132":{"href":"/concepts/actions#action-based-routing","html":"\n","isPage":false,"text":"\n","title":"Action-Based Routing","titles":["Actions"]},"133":{"href":"/concepts/actions#simple-branching","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Using fluent API for cleaner code</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">validationNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorNode)</span></span></code></pre>\n","isPage":false,"text":"\n// Using fluent API for cleaner code\nvalidationNode := flyt.NewNode().\n    WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n        data := prepResult.(string)\n        return len(data) &gt; 0, nil\n    }).\n    WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        if execResult.(bool) {\n            return &quot;valid&quot;, nil\n        }\n        return &quot;invalid&quot;, nil\n    })\n \nflow := flyt.NewFlow(validationNode)\nflow.Connect(validationNode, &quot;valid&quot;, processNode)\nflow.Connect(validationNode, &quot;invalid&quot;, errorNode)\n","title":"Simple Branching","titles":["Actions","Action-Based Routing"]},"134":{"href":"/concepts/actions#multi-way-branching","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Fluent API for multi-way branching</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">categoryNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;small&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;medium&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;large&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;small&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, smallHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;medium&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, mediumHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;large&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, largeHandler)</span></span></code></pre>\n","isPage":false,"text":"\n// Fluent API for multi-way branching\ncategoryNode := flyt.NewNode().\n    WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n        value := prepResult.(int)\n        if value &lt; 10 {\n            return &quot;small&quot;, nil\n        } else if value &lt; 100 {\n            return &quot;medium&quot;, nil\n        }\n        return &quot;large&quot;, nil\n    }).\n    WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        return flyt.Action(execResult.(string)), nil\n    })\n \nflow := flyt.NewFlow(categoryNode)\nflow.Connect(categoryNode, &quot;small&quot;, smallHandler)\nflow.Connect(categoryNode, &quot;medium&quot;, mediumHandler)\nflow.Connect(categoryNode, &quot;large&quot;, largeHandler)\n","title":"Multi-Way Branching","titles":["Actions","Action-Based Routing"]},"135":{"href":"/concepts/actions#flow-termination","html":"\n<p>If no connection exists for an action, the flow terminates:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node1)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node1, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, node2)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// If node1 returns &quot;stop&quot;, flow ends (no connection for &quot;stop&quot;)</span></span></code></pre>\n<p>Explicitly terminate by connecting to nil:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(finalNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;done&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nIf no connection exists for an action, the flow terminates:\nflow := flyt.NewFlow(node1)\nflow.Connect(node1, &quot;continue&quot;, node2)\n// If node1 returns &quot;stop&quot;, flow ends (no connection for &quot;stop&quot;)\nExplicitly terminate by connecting to nil:\nflow.Connect(finalNode, &quot;done&quot;, nil)\n","title":"Flow Termination","titles":["Actions"]},"136":{"href":"/concepts/actions#common-patterns","html":"\n","isPage":false,"text":"\n","title":"Common Patterns","titles":["Actions"]},"137":{"href":"/concepts/actions#successfailure-pattern","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeDecisionPost</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;failure&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc makeDecisionPost(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    if err := execResult.(error); err != nil {\n        return &quot;failure&quot;, nil\n    }\n    return &quot;success&quot;, nil\n}\n","title":"Success/Failure Pattern","titles":["Actions","Common Patterns"]},"138":{"href":"/concepts/actions#retry-pattern","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> retryablePost</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;attempts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;attempts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;continue&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc retryablePost(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    count := shared.GetInt(&quot;attempts&quot;)\n    \n    if execResult == nil &amp;&amp; count &lt; 3 {\n        shared.Set(&quot;attempts&quot;, count + 1)\n        return &quot;retry&quot;, nil\n    }\n    return &quot;continue&quot;, nil\n}\n","title":"Retry Pattern","titles":["Actions","Common Patterns"]},"139":{"href":"/concepts/actions#state-machine-pattern","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> statePost</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    currentState </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentState {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;init&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;process&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;processing&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;complete&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;finalize&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;done&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc statePost(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    currentState := shared.GetString(&quot;state&quot;)\n    \n    switch currentState {\n    case &quot;init&quot;:\n        shared.Set(&quot;state&quot;, &quot;processing&quot;)\n        return &quot;process&quot;, nil\n    case &quot;processing&quot;:\n        shared.Set(&quot;state&quot;, &quot;complete&quot;)\n        return &quot;finalize&quot;, nil\n    default:\n        return &quot;done&quot;, nil\n    }\n}\n","title":"State Machine Pattern","titles":["Actions","Common Patterns"]},"140":{"href":"/concepts/actions#dynamic-actions","html":"\n<p>Actions can be computed at runtime:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> dynamicPost</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    nextAction </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;next_action&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nextAction), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nActions can be computed at runtime:\nfunc dynamicPost(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    result := execResult.(map[string]any)\n    nextAction := result[&quot;next_action&quot;].(string)\n    return flyt.Action(nextAction), nil\n}\n","title":"Dynamic Actions","titles":["Actions"]},"141":{"href":"/concepts/actions#best-practices","html":"\n<ol>\n<li><strong>Use Descriptive Names</strong>: Actions should clearly indicate their purpose</li>\n<li><strong>Document Actions</strong>: List all possible actions a node can return</li>\n<li><strong>Handle All Cases</strong>: Ensure all possible actions have connections or intentionally terminate</li>\n<li><strong>Consistent Naming</strong>: Use a consistent naming scheme across your application</li>\n<li><strong>Avoid Magic Strings</strong>: Define action constants for reusability</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    ActionValidate</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;validate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    ActionProcess</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">  =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;process&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    ActionComplete</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;complete&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    ActionError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">    =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\n\nUse Descriptive Names: Actions should clearly indicate their purpose\nDocument Actions: List all possible actions a node can return\nHandle All Cases: Ensure all possible actions have connections or intentionally terminate\nConsistent Naming: Use a consistent naming scheme across your application\nAvoid Magic Strings: Define action constants for reusability\n\nconst (\n    ActionValidate = flyt.Action(&quot;validate&quot;)\n    ActionProcess  = flyt.Action(&quot;process&quot;)\n    ActionComplete = flyt.Action(&quot;complete&quot;)\n    ActionError    = flyt.Action(&quot;error&quot;)\n)\n","title":"Best Practices","titles":["Actions"]},"142":{"href":"/concepts/actions#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/flows\">Flows</a> - Connect nodes with actions</li>\n<li><a href=\"/patterns/branching\">Conditional Branching</a> - Advanced routing patterns</li>\n<li><a href=\"/advanced/nested-flows\">Nested Flows</a> - Compose complex workflows</li>\n</ul>","isPage":false,"text":"\n\nFlows - Connect nodes with actions\nConditional Branching - Advanced routing patterns\nNested Flows - Compose complex workflows\n","title":"Next Steps","titles":["Actions"]},"143":{"href":"/concepts/flows#flows","html":"</header>\n<p>Flows connect nodes together to create workflows. They define the execution path based on actions returned by nodes.</p>\n","isPage":true,"text":"\nFlows connect nodes together to create workflows. They define the execution path based on actions returned by nodes.\n","title":"Flows","titles":[]},"144":{"href":"/concepts/flows#creating-flows","html":"\n<p>Start with a single node and build connections:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create nodes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">startNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createStartNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">endNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEndNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Build flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, flyt.DefaultAction, endNode)</span></span></code></pre>\n","isPage":false,"text":"\nStart with a single node and build connections:\n// Create nodes\nstartNode := createStartNode()\nprocessNode := createProcessNode()\nendNode := createEndNode()\n \n// Build flow\nflow := flyt.NewFlow(startNode)\nflow.Connect(startNode, flyt.DefaultAction, processNode)\nflow.Connect(processNode, flyt.DefaultAction, endNode)\n","title":"Creating Flows","titles":["Flows"]},"145":{"href":"/concepts/flows#running-flows","html":"\n<p>Execute a flow with a context and SharedStore:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add initial data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;data to process&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Run the flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Fatal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;output&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nExecute a flow with a context and SharedStore:\nctx := context.Background()\nshared := flyt.NewSharedStore()\n \n// Add initial data\nshared.Set(&quot;input&quot;, &quot;data to process&quot;)\n \n// Run the flow\nerr := flow.Run(ctx, shared)\nif err != nil {\n    log.Fatal(err)\n}\n \n// Get results\nresult := shared.GetString(&quot;output&quot;)\n","title":"Running Flows","titles":["Flows"]},"146":{"href":"/concepts/flows#flow-connections","html":"\n","isPage":false,"text":"\n","title":"Flow Connections","titles":["Flows"]},"147":{"href":"/concepts/flows#linear-flow","html":"\n<p>Simple sequential execution:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node1)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node1, flyt.DefaultAction, node2)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node2, flyt.DefaultAction, node3)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node3, flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Terminate</span></span></code></pre>\n","isPage":false,"text":"\nSimple sequential execution:\nflow := flyt.NewFlow(node1)\nflow.Connect(node1, flyt.DefaultAction, node2)\nflow.Connect(node2, flyt.DefaultAction, node3)\nflow.Connect(node3, flyt.DefaultAction, nil) // Terminate\n","title":"Linear Flow","titles":["Flows","Flow Connections"]},"148":{"href":"/concepts/flows#branching-flow","html":"\n<p>Multiple paths based on actions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(decisionNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(decisionNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;path_a&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, nodeA)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(decisionNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;path_b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, nodeB)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodeA, flyt.DefaultAction, mergeNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nodeB, flyt.DefaultAction, mergeNode)</span></span></code></pre>\n","isPage":false,"text":"\nMultiple paths based on actions:\nflow := flyt.NewFlow(decisionNode)\nflow.Connect(decisionNode, &quot;path_a&quot;, nodeA)\nflow.Connect(decisionNode, &quot;path_b&quot;, nodeB)\nflow.Connect(nodeA, flyt.DefaultAction, mergeNode)\nflow.Connect(nodeB, flyt.DefaultAction, mergeNode)\n","title":"Branching Flow","titles":["Flows","Flow Connections"]},"149":{"href":"/concepts/flows#loop-flow","html":"\n<p>Create cycles for retry or iteration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, startNode)    </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Loop back</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, endNode)</span></span></code></pre>\n","isPage":false,"text":"\nCreate cycles for retry or iteration:\nflow := flyt.NewFlow(startNode)\nflow.Connect(startNode, flyt.DefaultAction, processNode)\nflow.Connect(processNode, &quot;retry&quot;, startNode)    // Loop back\nflow.Connect(processNode, &quot;success&quot;, endNode)\n","title":"Loop Flow","titles":["Flows","Flow Connections"]},"150":{"href":"/concepts/flows#flow-as-node","html":"\n<p>Flows implement the Node interface and can be used as nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a sub-flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">subFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">subFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, flyt.DefaultAction, transformNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use sub-flow in main flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, subFlow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainFlow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(subFlow, flyt.DefaultAction, saveNode)</span></span></code></pre>\n","isPage":false,"text":"\nFlows implement the Node interface and can be used as nodes:\n// Create a sub-flow\nsubFlow := flyt.NewFlow(validateNode)\nsubFlow.Connect(validateNode, flyt.DefaultAction, transformNode)\n \n// Use sub-flow in main flow\nmainFlow := flyt.NewFlow(fetchNode)\nmainFlow.Connect(fetchNode, flyt.DefaultAction, subFlow)\nmainFlow.Connect(subFlow, flyt.DefaultAction, saveNode)\n","title":"Flow as Node","titles":["Flows"]},"151":{"href":"/concepts/flows#complex-flow-patterns","html":"\n","isPage":false,"text":"\n","title":"Complex Flow Patterns","titles":["Flows"]},"152":{"href":"/concepts/flows#diamond-pattern","html":"\n<p>Split and merge execution paths:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;path1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, process1)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;path2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, process2)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(process1, flyt.DefaultAction, mergeNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(process2, flyt.DefaultAction, mergeNode)</span></span></code></pre>\n","isPage":false,"text":"\nSplit and merge execution paths:\nflow := flyt.NewFlow(splitNode)\nflow.Connect(splitNode, &quot;path1&quot;, process1)\nflow.Connect(splitNode, &quot;path2&quot;, process2)\nflow.Connect(process1, flyt.DefaultAction, mergeNode)\nflow.Connect(process2, flyt.DefaultAction, mergeNode)\n","title":"Diamond Pattern","titles":["Flows","Complex Flow Patterns"]},"153":{"href":"/concepts/flows#error-handling-flow","html":"\n<p>Centralized error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, flyt.DefaultAction, saveNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(saveNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorHandler)</span></span></code></pre>\n","isPage":false,"text":"\nCentralized error handling:\nflow := flyt.NewFlow(startNode)\nflow.Connect(startNode, &quot;error&quot;, errorHandler)\nflow.Connect(startNode, flyt.DefaultAction, processNode)\nflow.Connect(processNode, &quot;error&quot;, errorHandler)\nflow.Connect(processNode, flyt.DefaultAction, saveNode)\nflow.Connect(saveNode, &quot;error&quot;, errorHandler)\n","title":"Error Handling Flow","titles":["Flows","Complex Flow Patterns"]},"154":{"href":"/concepts/flows#pipeline-pattern","html":"\n<p>Data transformation pipeline:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, transformNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, rejectNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transformNode, flyt.DefaultAction, enrichNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(enrichNode, flyt.DefaultAction, saveNode)</span></span></code></pre>\n","isPage":false,"text":"\nData transformation pipeline:\nflow := flyt.NewFlow(fetchNode)\nflow.Connect(fetchNode, flyt.DefaultAction, validateNode)\nflow.Connect(validateNode, &quot;valid&quot;, transformNode)\nflow.Connect(validateNode, &quot;invalid&quot;, rejectNode)\nflow.Connect(transformNode, flyt.DefaultAction, enrichNode)\nflow.Connect(enrichNode, flyt.DefaultAction, saveNode)\n","title":"Pipeline Pattern","titles":["Flows","Complex Flow Patterns"]},"155":{"href":"/concepts/flows#flow-composition","html":"\n<p>Build complex flows from simpler ones:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    checkFormat </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFormatChecker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    checkBusiness </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createBusinessRules</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkFormat)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(checkFormat, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, checkBusiness)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMainFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fetch </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFetchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    validation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createValidationFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    process </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetch)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetch, flyt.DefaultAction, validation)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validation, flyt.DefaultAction, process)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nBuild complex flows from simpler ones:\nfunc createValidationFlow() *flyt.Flow {\n    checkFormat := createFormatChecker()\n    checkBusiness := createBusinessRules()\n    \n    flow := flyt.NewFlow(checkFormat)\n    flow.Connect(checkFormat, &quot;valid&quot;, checkBusiness)\n    return flow\n}\n \nfunc createMainFlow() *flyt.Flow {\n    fetch := createFetchNode()\n    validation := createValidationFlow()\n    process := createProcessNode()\n    \n    flow := flyt.NewFlow(fetch)\n    flow.Connect(fetch, flyt.DefaultAction, validation)\n    flow.Connect(validation, flyt.DefaultAction, process)\n    return flow\n}\n","title":"Flow Composition","titles":["Flows"]},"156":{"href":"/concepts/flows#debugging-flows","html":"\n<p>Add logging nodes for debugging:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createLoggingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Prep: SharedStore keys: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name, shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetAll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Exec&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Post: Result: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name, execResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Insert between nodes for debugging</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node1, flyt.DefaultAction, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createLoggingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;debug&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createLoggingNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;debug&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), flyt.DefaultAction, node2)</span></span></code></pre>\n","isPage":false,"text":"\nAdd logging nodes for debugging:\nfunc createLoggingNode(name string) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithPrepFuncAny(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            log.Printf(&quot;[%s] Prep: SharedStore keys: %v&quot;, name, shared.GetAll())\n            return nil, nil\n        }),\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            log.Printf(&quot;[%s] Exec&quot;, name)\n            return prepResult, nil\n        }),\n        flyt.WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            log.Printf(&quot;[%s] Post: Result: %v&quot;, name, execResult)\n            return flyt.DefaultAction, nil\n        }),\n    )\n}\n \n// Insert between nodes for debugging\nflow.Connect(node1, flyt.DefaultAction, createLoggingNode(&quot;debug&quot;))\nflow.Connect(createLoggingNode(&quot;debug&quot;), flyt.DefaultAction, node2)\n","title":"Debugging Flows","titles":["Flows"]},"157":{"href":"/concepts/flows#best-practices","html":"\n<ol>\n<li><strong>Start Simple</strong>: Build flows incrementally, testing as you go</li>\n<li><strong>Name Nodes</strong>: Give nodes descriptive names for easier debugging</li>\n<li><strong>Document Flows</strong>: Create diagrams or comments explaining flow logic</li>\n<li><strong>Reuse Flows</strong>: Extract common patterns into reusable sub-flows</li>\n<li><strong>Test Flows</strong>: Write tests for different execution paths</li>\n</ol>\n","isPage":false,"text":"\n\nStart Simple: Build flows incrementally, testing as you go\nName Nodes: Give nodes descriptive names for easier debugging\nDocument Flows: Create diagrams or comments explaining flow logic\nReuse Flows: Extract common patterns into reusable sub-flows\nTest Flows: Write tests for different execution paths\n\n","title":"Best Practices","titles":["Flows"]},"158":{"href":"/concepts/flows#visualizing-flows","html":"\n<p>Document your flows with clear structure:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Flow structure:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Start -&gt; Validate -&gt; Process -&gt; Save</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//              └─&gt; Error (on invalid)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processNode, flyt.DefaultAction, saveNode)</span></span></code></pre>\n","isPage":false,"text":"\nDocument your flows with clear structure:\n// Flow structure:\n// Start -&gt; Validate -&gt; Process -&gt; Save\n//              └─&gt; Error (on invalid)\n \nflow := flyt.NewFlow(startNode)\nflow.Connect(startNode, flyt.DefaultAction, validateNode)\nflow.Connect(validateNode, &quot;valid&quot;, processNode)\nflow.Connect(validateNode, &quot;invalid&quot;, errorNode)\nflow.Connect(processNode, flyt.DefaultAction, saveNode)\n","title":"Visualizing Flows","titles":["Flows"]},"159":{"href":"/concepts/flows#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/shared-store\">Shared Store</a> - Share data between nodes</li>\n<li><a href=\"/advanced/nested-flows\">Nested Flows</a> - Advanced composition</li>\n<li><a href=\"/advanced/batch-flows\">Batch Flows</a> - Process multiple inputs</li>\n</ul>","isPage":false,"text":"\n\nShared Store - Share data between nodes\nNested Flows - Advanced composition\nBatch Flows - Process multiple inputs\n","title":"Next Steps","titles":["Flows"]},"160":{"href":"/concepts/nodes#nodes","html":"</header>\n<p>Nodes are the fundamental building blocks of Flyt workflows. Each node represents a single unit of work with a well-defined lifecycle.</p>\n","isPage":true,"text":"\nNodes are the fundamental building blocks of Flyt workflows. Each node represents a single unit of work with a well-defined lifecycle.\n","title":"Nodes","titles":[]},"161":{"href":"/concepts/nodes#node-lifecycle","html":"\n<p>Every node has three phases that execute in order:</p>\n","isPage":false,"text":"\nEvery node has three phases that execute in order:\n","title":"Node Lifecycle","titles":["Nodes"]},"162":{"href":"/concepts/nodes#1-prep-phase","html":"\n<p>The preparation phase reads from the SharedStore and prepares data for execution.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Read data using type-safe getters</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    apiKey </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api_key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Or bind complex types</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Config</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Prepare and return data for Exec phase</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;userID&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: userID,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;apiKey&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: apiKey,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: config,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe preparation phase reads from the SharedStore and prepares data for execution.\nfunc (n *MyNode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    // Read data using type-safe getters\n    userID := shared.GetInt(&quot;user_id&quot;)\n    apiKey := shared.GetString(&quot;api_key&quot;)\n    \n    // Or bind complex types\n    var config Config\n    if err := shared.Bind(&quot;config&quot;, &amp;config); err != nil {\n        return nil, err\n    }\n    \n    // Prepare and return data for Exec phase\n    return map[string]any{\n        &quot;userID&quot;: userID,\n        &quot;apiKey&quot;: apiKey,\n        &quot;config&quot;: config,\n    }, nil\n}\n","title":"1. Prep Phase","titles":["Nodes","Node Lifecycle"]},"163":{"href":"/concepts/nodes#2-exec-phase","html":"\n<p>The execution phase performs the main work. This phase can be retried on failure.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Perform the main operation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Will trigger retry if configured</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe execution phase performs the main work. This phase can be retried on failure.\nfunc (n *MyNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    data := prepResult.(map[string]any)\n    \n    // Perform the main operation\n    result, err := processData(data[&quot;input&quot;])\n    if err != nil {\n        return nil, err // Will trigger retry if configured\n    }\n    \n    return result, nil\n}\n","title":"2. Exec Phase","titles":["Nodes","Node Lifecycle"]},"164":{"href":"/concepts/nodes#3-post-phase","html":"\n<p>The post-processing phase handles results and determines the next action.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Store results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;output&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, execResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Determine next action based on results</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isValid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;failure&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe post-processing phase handles results and determines the next action.\nfunc (n *MyNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    // Store results\n    shared.Set(&quot;output&quot;, execResult)\n    \n    // Determine next action based on results\n    if isValid(execResult) {\n        return &quot;success&quot;, nil\n    }\n    return &quot;failure&quot;, nil\n}\n","title":"3. Post Phase","titles":["Nodes","Node Lifecycle"]},"165":{"href":"/concepts/nodes#creating-nodes","html":"\n","isPage":false,"text":"\n","title":"Creating Nodes","titles":["Nodes"]},"166":{"href":"/concepts/nodes#using-helper-functions","html":"\n<p>Flyt provides two styles of helper functions for creating nodes:</p>\n","isPage":false,"text":"\nFlyt provides two styles of helper functions for creating nodes:\n","title":"Using Helper Functions","titles":["Nodes","Creating Nodes"]},"167":{"href":"/concepts/nodes#result-based-functions-type-safe","html":"\n<p>Use <code>WithPrepFunc</code>, <code>WithExecFunc</code>, and <code>WithPostFunc</code> for type-safe operations with the Result type:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Using fluent API for cleaner chaining</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Use type-safe getters</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        message </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        retryCount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: message,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: retryCount,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Type-safe access to data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AsMapOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        message </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process and return Result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        processed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(message)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(processed), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Type-safe result handling</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;max_retries&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span></code></pre>\n","isPage":false,"text":"\nUse WithPrepFunc, WithExecFunc, and WithPostFunc for type-safe operations with the Result type:\n// Using fluent API for cleaner chaining\nnode := flyt.NewNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (flyt.Result, error) {\n        // Use type-safe getters\n        message := shared.GetString(&quot;message&quot;)\n        retryCount := shared.GetIntOr(&quot;retry_count&quot;, 0)\n        \n        return flyt.NewResult(map[string]any{\n            &quot;message&quot;: message,\n            &quot;retry&quot;: retryCount,\n        }), nil\n    }).\n    WithExecFunc(func(ctx context.Context, prepResult flyt.Result) (flyt.Result, error) {\n        // Type-safe access to data\n        data := prepResult.AsMapOr(nil)\n        message := data[&quot;message&quot;].(string)\n        \n        // Process and return Result\n        processed := processMessage(message)\n        return flyt.NewResult(processed), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult flyt.Result) (flyt.Action, error) {\n        // Type-safe result handling\n        result := execResult.Value()\n        shared.Set(&quot;result&quot;, result)\n        \n        if shared.GetInt(&quot;retry_count&quot;) &gt; 3 {\n            return &quot;max_retries&quot;, nil\n        }\n        return flyt.DefaultAction, nil\n    })\n","title":"Result-based Functions (Type-Safe)","titles":["Nodes","Creating Nodes","Using Helper Functions"]},"168":{"href":"/concepts/nodes#any-based-functions-simple","html":"\n<p>Use <code>WithPrepFuncAny</code>, <code>WithExecFuncAny</code>, and <code>WithPostFuncAny</code> for simpler cases or backward compatibility:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Using fluent API with any-based functions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Direct any types</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        message </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        retryCount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: message,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: retryCount,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process the data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Store result and determine action</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, execResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;max_retries&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span></code></pre>\n","isPage":false,"text":"\nUse WithPrepFuncAny, WithExecFuncAny, and WithPostFuncAny for simpler cases or backward compatibility:\n// Using fluent API with any-based functions\nnode := flyt.NewNode().\n    WithPrepFuncAny(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n        // Direct any types\n        message := shared.GetString(&quot;message&quot;)\n        retryCount := shared.GetIntOr(&quot;retry_count&quot;, 0)\n        \n        return map[string]any{\n            &quot;message&quot;: message,\n            &quot;retry&quot;: retryCount,\n        }, nil\n    }).\n    WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n        data := prepResult.(map[string]any)\n        // Process the data\n        return processMessage(data[&quot;message&quot;].(string)), nil\n    }).\n    WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        // Store result and determine action\n        shared.Set(&quot;result&quot;, execResult)\n        \n        if shared.GetInt(&quot;retry_count&quot;) &gt; 3 {\n            return &quot;max_retries&quot;, nil\n        }\n        return flyt.DefaultAction, nil\n    })\n","title":"Any-based Functions (Simple)","titles":["Nodes","Creating Nodes","Using Helper Functions"]},"169":{"href":"/concepts/nodes#choosing-between-result-and-any","html":"\n<strong>Use Result-based functions when:</strong>\n<ul>\n<li>You need type-safe access to data with convenience methods</li>\n<li>Working with complex data transformations</li>\n<li>You want better IDE support and type checking</li>\n<li>Building reusable components that handle various data types</li>\n</ul>\n<strong>Use Any-based functions when:</strong>\n<ul>\n<li>Building simple nodes with straightforward logic</li>\n<li>Migrating existing code that uses <code>any</code> types</li>\n<li>The overhead of Result wrapping isn&#x27;t justified</li>\n<li>Working with known, simple data types</li>\n</ul>\n","isPage":false,"text":"\nUse Result-based functions when:\n\nYou need type-safe access to data with convenience methods\nWorking with complex data transformations\nYou want better IDE support and type checking\nBuilding reusable components that handle various data types\n\nUse Any-based functions when:\n\nBuilding simple nodes with straightforward logic\nMigrating existing code that uses any types\nThe overhead of Result wrapping isn&#x27;t justified\nWorking with known, simple data types\n\n","title":"Choosing Between Result and Any","titles":["Nodes","Creating Nodes"]},"170":{"href":"/concepts/nodes#custom-node-types","html":"\n<p>For complex nodes with state:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DatabaseNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DB</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewDatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">db</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DB</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        db: db,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    query </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    rows, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.db.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">QueryContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, query)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rows.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process rows...</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nFor complex nodes with state:\ntype DatabaseNode struct {\n    *flyt.BaseNode\n    db *sql.DB\n}\n \nfunc NewDatabaseNode(db *sql.DB) *DatabaseNode {\n    return &amp;DatabaseNode{\n        BaseNode: flyt.NewBaseNode(),\n        db: db,\n    }\n}\n \nfunc (n *DatabaseNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    query := prepResult.(string)\n    rows, err := n.db.QueryContext(ctx, query)\n    if err != nil {\n        return nil, err\n    }\n    defer rows.Close()\n    \n    // Process rows...\n    return results, nil\n}\n","title":"Custom Node Types","titles":["Nodes","Creating Nodes"]},"171":{"href":"/concepts/nodes#node-options","html":"\n<p>Configure node behavior with options:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// With Result type using fluent API</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">input</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Type-safe operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).        </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Retry up to 3 times</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait 2 seconds between retries</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// With any type using fluent API  </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">input</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Direct any handling</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).        </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Retry up to 3 times</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait 2 seconds between retries</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Traditional style still supported</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">input</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nConfigure node behavior with options:\n// With Result type using fluent API\nnode := flyt.NewNode().\n    WithExecFunc(func(ctx context.Context, input flyt.Result) (flyt.Result, error) {\n        // Type-safe operations\n        return flyt.NewResult(processData(input.Value())), nil\n    }).\n    WithMaxRetries(3).        // Retry up to 3 times\n    WithWait(time.Second * 2) // Wait 2 seconds between retries\n \n// With any type using fluent API  \nnode := flyt.NewNode().\n    WithExecFuncAny(func(ctx context.Context, input any) (any, error) {\n        // Direct any handling\n        return processData(input), nil\n    }).\n    WithMaxRetries(3).        // Retry up to 3 times\n    WithWait(time.Second * 2) // Wait 2 seconds between retries\n \n// Traditional style still supported\nnode := flyt.NewNode(\n    flyt.WithExecFuncAny(func(ctx context.Context, input any) (any, error) {\n        return processData(input), nil\n    }),\n    flyt.WithMaxRetries(3),\n    flyt.WithWait(time.Second * 2),\n)\n","title":"Node Options","titles":["Nodes"]},"172":{"href":"/concepts/nodes#basenode","html":"\n<p>The <code>BaseNode</code> provides default implementations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Add custom fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewMyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Override only the methods you need</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Custom exec logic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe BaseNode provides default implementations:\ntype MyNode struct {\n    *flyt.BaseNode\n    // Add custom fields\n}\n \nfunc NewMyNode() *MyNode {\n    return &amp;MyNode{\n        BaseNode: flyt.NewBaseNode(\n            flyt.WithMaxRetries(5),\n            flyt.WithWait(time.Second),\n        ),\n    }\n}\n \n// Override only the methods you need\nfunc (n *MyNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Custom exec logic\n    return result, nil\n}\n","title":"BaseNode","titles":["Nodes"]},"173":{"href":"/concepts/nodes#thread-safety","html":"\n<p>Nodes should be thread-safe if used in concurrent batch operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SafeNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu      </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    counter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SafeNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.counter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.counter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Execution #</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, count), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nNodes should be thread-safe if used in concurrent batch operations:\ntype SafeNode struct {\n    *flyt.BaseNode\n    mu      sync.Mutex\n    counter int\n}\n \nfunc (n *SafeNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    n.mu.Lock()\n    n.counter++\n    count := n.counter\n    n.mu.Unlock()\n    \n    return fmt.Sprintf(&quot;Execution #%d&quot;, count), nil\n}\n","title":"Thread Safety","titles":["Nodes"]},"174":{"href":"/concepts/nodes#best-practices","html":"\n<ol>\n<li><strong>Single Responsibility</strong>: Each node should do one thing well</li>\n<li><strong>Idempotency</strong>: Design nodes to be safely retryable</li>\n<li><strong>Context Handling</strong>: Always respect context cancellation</li>\n<li><strong>Error Handling</strong>: Return clear, actionable errors</li>\n<li><strong>Resource Management</strong>: Clean up resources in defer blocks</li>\n</ol>\n","isPage":false,"text":"\n\nSingle Responsibility: Each node should do one thing well\nIdempotency: Design nodes to be safely retryable\nContext Handling: Always respect context cancellation\nError Handling: Return clear, actionable errors\nResource Management: Clean up resources in defer blocks\n\n","title":"Best Practices","titles":["Nodes"]},"175":{"href":"/concepts/nodes#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/actions\">Actions</a> - Control flow with actions</li>\n<li><a href=\"/concepts/flows\">Flows</a> - Connect nodes into workflows</li>\n<li><a href=\"/advanced/custom-nodes\">Custom Node Types</a> - Advanced node patterns</li>\n</ul>","isPage":false,"text":"\n\nActions - Control flow with actions\nFlows - Connect nodes into workflows\nCustom Node Types - Advanced node patterns\n","title":"Next Steps","titles":["Nodes"]},"176":{"href":"/concepts/shared-store#shared-store","html":"</header>\n<p>The SharedStore provides thread-safe data sharing between nodes in a flow. It acts as a key-value store that persists throughout flow execution with type-safe helpers for common operations.</p>\n","isPage":true,"text":"\nThe SharedStore provides thread-safe data sharing between nodes in a flow. It acts as a key-value store that persists throughout flow execution with type-safe helpers for common operations.\n","title":"Shared Store","titles":[]},"177":{"href":"/concepts/shared-store#creating-a-sharedstore","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nshared := flyt.NewSharedStore()\n","title":"Creating a SharedStore","titles":["Shared Store"]},"178":{"href":"/concepts/shared-store#basic-operations","html":"\n","isPage":false,"text":"\n","title":"Basic Operations","titles":["Shared Store"]},"179":{"href":"/concepts/shared-store#set-and-get","html":"\n<p>Store and retrieve individual values with the original API:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set a value</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;timeout&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Type-safe getter (recommended)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;User ID: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, userID)</span></span></code></pre>\n","isPage":false,"text":"\nStore and retrieve individual values with the original API:\n// Set a value\nshared.Set(&quot;user_id&quot;, 123)\nshared.Set(&quot;config&quot;, map[string]any{&quot;timeout&quot;: 30})\n \n// Type-safe getter (recommended)\nuserID := shared.GetInt(&quot;user_id&quot;)\nfmt.Printf(&quot;User ID: %d\\n&quot;, userID)\n","title":"Set and Get","titles":["Shared Store","Basic Operations"]},"180":{"href":"/concepts/shared-store#type-safe-getters","html":"\n<p>Use type-specific getters to avoid manual type assertions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Type-safe getters (return zero values if not found or wrong type)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)           </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns 0 if not found</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">name </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)              </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns &quot;&quot; if not found</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">price </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetFloat64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;price&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)           </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns 0.0 if not found</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">enabled </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetBool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;enabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)          </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns false if not found</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)             </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns nil if not found</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)             </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns nil if not found</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Type-safe getters with custom defaults</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)              </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns -1 if not found</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">name </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetStringOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;anonymous&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)       </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns &quot;anonymous&quot; if not found</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">price </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetFloat64Or</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;price&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">99.99</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)          </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns 99.99 if not found</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">enabled </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetBoolOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;enabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)          </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns true if not found</span></span></code></pre>\n<p>The type-safe getters handle numeric conversions automatically:</p>\n<ul>\n<li><code>GetInt()</code> converts from int8, int16, int32, int64, uint variants, and float types</li>\n<li><code>GetFloat64()</code> converts from all numeric types including int and float32</li>\n</ul>\n","isPage":false,"text":"\nUse type-specific getters to avoid manual type assertions:\n// Type-safe getters (return zero values if not found or wrong type)\nuserID := shared.GetInt(&quot;user_id&quot;)           // Returns 0 if not found\nname := shared.GetString(&quot;name&quot;)              // Returns &quot;&quot; if not found\nprice := shared.GetFloat64(&quot;price&quot;)           // Returns 0.0 if not found\nenabled := shared.GetBool(&quot;enabled&quot;)          // Returns false if not found\nitems := shared.GetSlice(&quot;items&quot;)             // Returns nil if not found\nconfig := shared.GetMap(&quot;config&quot;)             // Returns nil if not found\n \n// Type-safe getters with custom defaults\nuserID = shared.GetIntOr(&quot;user_id&quot;, -1)              // Returns -1 if not found\nname = shared.GetStringOr(&quot;name&quot;, &quot;anonymous&quot;)       // Returns &quot;anonymous&quot; if not found\nprice = shared.GetFloat64Or(&quot;price&quot;, 99.99)          // Returns 99.99 if not found\nenabled = shared.GetBoolOr(&quot;enabled&quot;, true)          // Returns true if not found\nThe type-safe getters handle numeric conversions automatically:\n\nGetInt() converts from int8, int16, int32, int64, uint variants, and float types\nGetFloat64() converts from all numeric types including int and float32\n\n","title":"Type-Safe Getters","titles":["Shared Store","Basic Operations"]},"181":{"href":"/concepts/shared-store#bind-method","html":"\n<p>Bind complex types directly to structs (similar to Echo framework):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Define your struct</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> User</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ID       </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      `json:&quot;id&quot;`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Name     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">   `json:&quot;name&quot;`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Email    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">   `json:&quot;email&quot;`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Tags     []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `json:&quot;tags&quot;`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Store as map</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:    </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;email&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;alice@example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;tags&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;admin&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;developer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Bind to struct</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> user </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">User</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">user)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Automatically converts map to struct</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Handle error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Or use MustBind (panics on failure - use for required data)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Config</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">MustBind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config)</span></span></code></pre>\n","isPage":false,"text":"\nBind complex types directly to structs (similar to Echo framework):\n// Define your struct\ntype User struct {\n    ID       int      `json:&quot;id&quot;`\n    Name     string   `json:&quot;name&quot;`\n    Email    string   `json:&quot;email&quot;`\n    Tags     []string `json:&quot;tags&quot;`\n}\n \n// Store as map\nshared.Set(&quot;user&quot;, map[string]any{\n    &quot;id&quot;:    123,\n    &quot;name&quot;:  &quot;Alice&quot;,\n    &quot;email&quot;: &quot;alice@example.com&quot;,\n    &quot;tags&quot;:  []string{&quot;admin&quot;, &quot;developer&quot;},\n})\n \n// Bind to struct\nvar user User\nerr := shared.Bind(&quot;user&quot;, &amp;user)  // Automatically converts map to struct\nif err != nil {\n    // Handle error\n}\n \n// Or use MustBind (panics on failure - use for required data)\nvar config Config\nshared.MustBind(&quot;config&quot;, &amp;config)\n","title":"Bind Method","titles":["Shared Store","Basic Operations"]},"182":{"href":"/concepts/shared-store#utility-methods","html":"\n<p>Additional helper methods for store management:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check if key exists</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Has</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Key exists</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Delete a key</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Delete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;temp_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get all keys</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">keys </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Keys</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns []string</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get number of items</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear all items</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Clear</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nAdditional helper methods for store management:\n// Check if key exists\nif shared.Has(&quot;user_id&quot;) {\n    // Key exists\n}\n \n// Delete a key\nshared.Delete(&quot;temp_data&quot;)\n \n// Get all keys\nkeys := shared.Keys()  // Returns []string\n \n// Get number of items\ncount := shared.Len()\n \n// Clear all items\nshared.Clear()\n","title":"Utility Methods","titles":["Shared Store","Basic Operations"]},"183":{"href":"/concepts/shared-store#getall","html":"\n<p>Get a copy of all stored data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">allData </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetAll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key, value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> allData {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, key, value)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nGet a copy of all stored data:\nallData := shared.GetAll()\nfor key, value := range allData {\n    fmt.Printf(&quot;%s: %v\\n&quot;, key, value)\n}\n","title":"GetAll","titles":["Shared Store","Basic Operations"]},"184":{"href":"/concepts/shared-store#merge","html":"\n<p>Merge multiple values at once:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Merge</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;active&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;timestamp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;metadata&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;version&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;env&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;production&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nMerge multiple values at once:\nshared.Merge(map[string]any{\n    &quot;status&quot;: &quot;active&quot;,\n    &quot;timestamp&quot;: time.Now(),\n    &quot;metadata&quot;: map[string]string{\n        &quot;version&quot;: &quot;1.0&quot;,\n        &quot;env&quot;: &quot;production&quot;,\n    },\n})\n","title":"Merge","titles":["Shared Store","Basic Operations"]},"185":{"href":"/concepts/shared-store#thread-safety","html":"\n<p>SharedStore is safe for concurrent access:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WaitGroup</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Multiple goroutines can safely access</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">id</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;worker_</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, id), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;done&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }(i)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">wg.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nSharedStore is safe for concurrent access:\nvar wg sync.WaitGroup\n \n// Multiple goroutines can safely access\nfor i := 0; i &lt; 10; i++ {\n    wg.Add(1)\n    go func(id int) {\n        defer wg.Done()\n        shared.Set(fmt.Sprintf(&quot;worker_%d&quot;, id), &quot;done&quot;)\n    }(i)\n}\n \nwg.Wait()\n","title":"Thread Safety","titles":["Shared Store"]},"186":{"href":"/concepts/shared-store#common-patterns","html":"\n","isPage":false,"text":"\n","title":"Common Patterns","titles":["Shared Store"]},"187":{"href":"/concepts/shared-store#configuration-storage","html":"\n<p>Store configuration that multiple nodes need:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Define configuration struct</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> APIConfig</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    BaseURL </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `json:&quot;base_url&quot;`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    APIKey  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `json:&quot;api_key&quot;`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Timeout </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `json:&quot;timeout&quot;`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// In main or initial node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">APIConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    BaseURL: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://api.example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    APIKey:  os.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Getenv</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;API_KEY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Timeout: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;30s&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// In any node - using Bind</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">APINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">APIConfig</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Or using GetMap for simple access</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">APINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nStore configuration that multiple nodes need:\n// Define configuration struct\ntype APIConfig struct {\n    BaseURL string `json:&quot;base_url&quot;`\n    APIKey  string `json:&quot;api_key&quot;`\n    Timeout string `json:&quot;timeout&quot;`\n}\n \n// In main or initial node\nshared.Set(&quot;api_config&quot;, APIConfig{\n    BaseURL: &quot;https://api.example.com&quot;,\n    APIKey:  os.Getenv(&quot;API_KEY&quot;),\n    Timeout: &quot;30s&quot;,\n})\n \n// In any node - using Bind\nfunc (n *APINode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    var config APIConfig\n    if err := shared.Bind(&quot;api_config&quot;, &amp;config); err != nil {\n        return nil, err\n    }\n    return config, nil\n}\n \n// Or using GetMap for simple access\nfunc (n *APINode) Prep(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n    config := shared.GetMap(&quot;api_config&quot;)\n    return config, nil\n}\n","title":"Configuration Storage","titles":["Shared Store","Common Patterns"]},"188":{"href":"/concepts/shared-store#accumulating-results","html":"\n<p>Collect results from multiple nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Node 1 - Using type-safe getters</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // GetSlice returns nil if not found, perfect for initialization</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(results, execResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, results)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCollect results from multiple nodes:\n// Node 1 - Using type-safe getters\nfunc (n *Node1) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    // GetSlice returns nil if not found, perfect for initialization\n    results := shared.GetSlice(&quot;results&quot;)\n    if results == nil {\n        results = []any{}\n    }\n    \n    results = append(results, execResult)\n    shared.Set(&quot;results&quot;, results)\n    \n    return flyt.DefaultAction, nil\n}\n","title":"Accumulating Results","titles":["Shared Store","Common Patterns"]},"189":{"href":"/concepts/shared-store#state-management","html":"\n<p>Track workflow state with type safety:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Initialize state</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;workflow_state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;initialized&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;start_time&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Update state in nodes with increment</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> incrementRetry</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, count)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;last_retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> checkState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetStringOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;workflow_state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;unknown&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTrack workflow state with type safety:\n// Initialize state\nshared.Set(&quot;workflow_state&quot;, &quot;initialized&quot;)\nshared.Set(&quot;retry_count&quot;, 0)\nshared.Set(&quot;start_time&quot;, time.Now())\n \n// Update state in nodes with increment\nfunc incrementRetry(shared *flyt.SharedStore) int {\n    count := shared.GetInt(&quot;retry_count&quot;)\n    count++\n    shared.Set(&quot;retry_count&quot;, count)\n    shared.Set(&quot;last_retry&quot;, time.Now())\n    return count\n}\n \n// Check state\nfunc checkState(shared *flyt.SharedStore) string {\n    return shared.GetStringOr(&quot;workflow_state&quot;, &quot;unknown&quot;)\n}\n","title":"State Management","titles":["Shared Store","Common Patterns"]},"190":{"href":"/concepts/shared-store#error-context","html":"\n<p>Store error information for debugging:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ErrorHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;last_error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: err.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;node&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ProcessNode&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;timestamp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;input&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: prepResult,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nStore error information for debugging:\nfunc (n *ErrorHandler) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    if err := execResult.(error); err != nil {\n        shared.Set(&quot;last_error&quot;, map[string]any{\n            &quot;error&quot;: err.Error(),\n            &quot;node&quot;: &quot;ProcessNode&quot;,\n            &quot;timestamp&quot;: time.Now(),\n            &quot;input&quot;: prepResult,\n        })\n        return &quot;error&quot;, nil\n    }\n    return flyt.DefaultAction, nil\n}\n","title":"Error Context","titles":["Shared Store","Common Patterns"]},"191":{"href":"/concepts/shared-store#batch-processing","html":"\n<p>SharedStore in batch operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Store items to process</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item3&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Store batch configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;batch_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;batch_size&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;concurrent&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;timeout&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">60</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// After batch processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;errors&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nSharedStore in batch operations:\n// Store items to process\nshared.Set(&quot;items&quot;, []string{&quot;item1&quot;, &quot;item2&quot;, &quot;item3&quot;})\n \n// Store batch configuration\nshared.Set(&quot;batch_config&quot;, map[string]any{\n    &quot;batch_size&quot;: 10,\n    &quot;concurrent&quot;: true,\n    &quot;timeout&quot;: 60,\n})\n \n// After batch processing\nresults := shared.GetSlice(&quot;results&quot;)\nerrors := shared.GetSlice(&quot;errors&quot;)\n","title":"Batch Processing","titles":["Shared Store"]},"192":{"href":"/concepts/shared-store#isolation-in-batch-flows","html":"\n<p>Each flow in a batch has its own SharedStore:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use BatchNode to process multiple parameter sets</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        baseConfig </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;base_config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Each Result represents a parameter set</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: baseConfig}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: baseConfig}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">params</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> params.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">MustMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process with parameters</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processWithConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span></code></pre>\n","isPage":false,"text":"\nEach flow in a batch has its own SharedStore:\n// Use BatchNode to process multiple parameter sets\nbatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        baseConfig := shared.GetMap(&quot;base_config&quot;)\n        \n        // Each Result represents a parameter set\n        return []flyt.Result{\n            flyt.NewResult(map[string]any{&quot;id&quot;: 1, &quot;config&quot;: baseConfig}),\n            flyt.NewResult(map[string]any{&quot;id&quot;: 2, &quot;config&quot;: baseConfig}),\n        }, nil\n    }).\n    WithExecFunc(func(ctx context.Context, params flyt.Result) (flyt.Result, error) {\n        data := params.MustMap()\n        // Process with parameters\n        return processWithConfig(data[&quot;id&quot;].(int), data[&quot;config&quot;])\n    })\n","title":"Isolation in Batch Flows","titles":["Shared Store"]},"193":{"href":"/concepts/shared-store#best-practices","html":"\n","isPage":false,"text":"\n","title":"Best Practices","titles":["Shared Store"]},"194":{"href":"/concepts/shared-store#1-type-safety","html":"\n<p>Use type-safe getters to avoid manual assertions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Type-safe getter (recommended)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns 0 if not found or wrong type</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Or with custom default</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetIntOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns -1 if not found</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// For complex types, use Bind</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> userData </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">UserData</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Bind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">userData); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Handle error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUse type-safe getters to avoid manual assertions:\n// Type-safe getter (recommended)\ncount := shared.GetInt(&quot;count&quot;)  // Returns 0 if not found or wrong type\n \n// Or with custom default\ncount := shared.GetIntOr(&quot;count&quot;, -1)  // Returns -1 if not found\n \n// For complex types, use Bind\nvar userData UserData\nif err := shared.Bind(&quot;user_data&quot;, &amp;userData); err != nil {\n    // Handle error\n}\n","title":"1. Type Safety","titles":["Shared Store","Best Practices"]},"195":{"href":"/concepts/shared-store#2-key-naming","html":"\n<p>Use consistent, descriptive keys:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    KeyUserID</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">     =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;user_id&quot;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    KeyAuthToken</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">  =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;auth_token&quot;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    KeyResults</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">    =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;processing_results&quot;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    KeyErrorCount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;error_count&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nUse consistent, descriptive keys:\nconst (\n    KeyUserID     = &quot;user_id&quot;\n    KeyAuthToken  = &quot;auth_token&quot;\n    KeyResults    = &quot;processing_results&quot;\n    KeyErrorCount = &quot;error_count&quot;\n)\n","title":"2. Key Naming","titles":["Shared Store","Best Practices"]},"196":{"href":"/concepts/shared-store#3-data-structure","html":"\n<p>Store structured data for clarity:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> WorkflowContext</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    RequestID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    UserID    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    StartTime </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Metadata  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;context&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">WorkflowContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    RequestID: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;req-123&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    UserID:    </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">456</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    StartTime: time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Metadata:  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;source&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">},</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nStore structured data for clarity:\ntype WorkflowContext struct {\n    RequestID string\n    UserID    int\n    StartTime time.Time\n    Metadata  map[string]string\n}\n \nshared.Set(&quot;context&quot;, WorkflowContext{\n    RequestID: &quot;req-123&quot;,\n    UserID:    456,\n    StartTime: time.Now(),\n    Metadata:  map[string]string{&quot;source&quot;: &quot;api&quot;},\n})\n","title":"3. Data Structure","titles":["Shared Store","Best Practices"]},"197":{"href":"/concepts/shared-store#4-cleanup","html":"\n<p>Clear sensitive data when done:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">defer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Clear sensitive data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;auth_token&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api_key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}()</span></span></code></pre>\n","isPage":false,"text":"\nClear sensitive data when done:\ndefer func() {\n    // Clear sensitive data\n    shared.Set(&quot;auth_token&quot;, nil)\n    shared.Set(&quot;api_key&quot;, nil)\n}()\n","title":"4. Cleanup","titles":["Shared Store","Best Practices"]},"198":{"href":"/concepts/shared-store#5-documentation","html":"\n<p>Document expected keys:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SharedStore keys used by this flow:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - &quot;input_file&quot;: string - Path to input file</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - &quot;output_dir&quot;: string - Output directory path</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - &quot;processed_count&quot;: int - Number of processed items</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - &quot;errors&quot;: []error - Collection of errors</span></span></code></pre>\n","isPage":false,"text":"\nDocument expected keys:\n// SharedStore keys used by this flow:\n// - &quot;input_file&quot;: string - Path to input file\n// - &quot;output_dir&quot;: string - Output directory path\n// - &quot;processed_count&quot;: int - Number of processed items\n// - &quot;errors&quot;: []error - Collection of errors\n","title":"5. Documentation","titles":["Shared Store","Best Practices"]},"199":{"href":"/concepts/shared-store#debugging","html":"\n<p>Use GetAll for debugging:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> debugSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetAll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;=== SharedStore Contents ===&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> k, v </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%T</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> = </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, k, v, v)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;===========================&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUse GetAll for debugging:\nfunc debugSharedStore(shared *flyt.SharedStore) {\n    data := shared.GetAll()\n    fmt.Println(&quot;=== SharedStore Contents ===&quot;)\n    for k, v := range data {\n        fmt.Printf(&quot;%s: %T = %v\\n&quot;, k, v, v)\n    }\n    fmt.Println(&quot;===========================&quot;)\n}\n","title":"Debugging","titles":["Shared Store"]},"200":{"href":"/concepts/shared-store#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/nodes\">Nodes</a> - Use SharedStore in node lifecycle</li>\n<li><a href=\"/advanced/batch-processing\">Batch Processing</a> - SharedStore in batch operations</li>\n<li><a href=\"/best-practices\">Best Practices</a> - General Flyt best practices</li>\n</ul>","isPage":false,"text":"\n\nNodes - Use SharedStore in node lifecycle\nBatch Processing - SharedStore in batch operations\nBest Practices - General Flyt best practices\n","title":"Next Steps","titles":["Shared Store"]},"201":{"href":"/getting-started/installation#installation","html":"</header>\n<p>Flyt requires Go 1.21 or later.</p>\n","isPage":true,"text":"\nFlyt requires Go 1.21 or later.\n","title":"Installation","titles":[]},"202":{"href":"/getting-started/installation#install-with-go-get","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> get</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> github.com/mark3labs/flyt</span></span></code></pre>\n","isPage":false,"text":"\ngo get github.com/mark3labs/flyt\n","title":"Install with go get","titles":["Installation"]},"203":{"href":"/getting-started/installation#import-in-your-code","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span></code></pre>\n","isPage":false,"text":"\nimport &quot;github.com/mark3labs/flyt&quot;\n","title":"Import in your code","titles":["Installation"]},"204":{"href":"/getting-started/installation#verify-installation","html":"\n<p>Create a simple test file to verify the installation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">package</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> main</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;test&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    val </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;test&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Flyt installed successfully! Value: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, val)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Run it:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> main.go</span></span></code></pre>\n<p>You should see:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Flyt installed successfully! Value: success</span></span></code></pre>\n","isPage":false,"text":"\nCreate a simple test file to verify the installation:\npackage main\n \nimport (\n    &quot;fmt&quot;\n    &quot;github.com/mark3labs/flyt&quot;\n)\n \nfunc main() {\n    shared := flyt.NewSharedStore()\n    shared.Set(&quot;test&quot;, &quot;success&quot;)\n    \n    val := shared.GetString(&quot;test&quot;)\n    fmt.Printf(&quot;Flyt installed successfully! Value: %s\\n&quot;, val)\n}\nRun it:\ngo run main.go\nYou should see:\nFlyt installed successfully! Value: success\n","title":"Verify installation","titles":["Installation"]},"205":{"href":"/getting-started/installation#next-steps","html":"\n<ul>\n<li><a href=\"/getting-started/quick-start\">Quick Start Guide</a> - Build your first workflow</li>\n<li><a href=\"/getting-started/template\">Project Template</a> - Start with a pre-configured project</li>\n<li><a href=\"/concepts/nodes\">Core Concepts</a> - Understand the fundamentals</li>\n</ul>","isPage":false,"text":"\n\nQuick Start Guide - Build your first workflow\nProject Template - Start with a pre-configured project\nCore Concepts - Understand the fundamentals\n","title":"Next Steps","titles":["Installation"]},"206":{"href":"/getting-started/quick-start#quick-start","html":"</header>\n<p>This guide will help you build your first Flyt workflow in 5 minutes.</p>\n","isPage":true,"text":"\nThis guide will help you build your first Flyt workflow in 5 minutes.\n","title":"Quick Start","titles":[]},"207":{"href":"/getting-started/quick-start#your-first-node","html":"\n<p>Let&#x27;s start with a simple node that processes data. You can choose between two approaches:</p>\n","isPage":false,"text":"\nLet&#x27;s start with a simple node that processes data. You can choose between two approaches:\n","title":"Your First Node","titles":["Quick Start"]},"208":{"href":"/getting-started/quick-start#using-result-type-recommended-for-type-safety","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">package</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> main</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create a node with Result type using fluent API</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Processing data...&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Hello, Flyt!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Or using traditional style with options</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Processing data...&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Hello, Flyt!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create shared store and context</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Run the node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    action, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, node, shared)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        panic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Completed with action: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, action)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\npackage main\n \nimport (\n    &quot;context&quot;\n    &quot;fmt&quot;\n    &quot;github.com/mark3labs/flyt&quot;\n)\n \nfunc main() {\n    // Create a node with Result type using fluent API\n    node := flyt.NewNode().\n        WithExecFunc(func(ctx context.Context, prepResult flyt.Result) (flyt.Result, error) {\n            fmt.Println(&quot;Processing data...&quot;)\n            return flyt.NewResult(&quot;Hello, Flyt!&quot;), nil\n        })\n \n    // Or using traditional style with options\n    node = flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult flyt.Result) (flyt.Result, error) {\n            fmt.Println(&quot;Processing data...&quot;)\n            return flyt.NewResult(&quot;Hello, Flyt!&quot;), nil\n        }),\n    )\n \n    // Create shared store and context\n    shared := flyt.NewSharedStore()\n    ctx := context.Background()\n \n    // Run the node\n    action, err := flyt.Run(ctx, node, shared)\n    if err != nil {\n        panic(err)\n    }\n    \n    fmt.Printf(&quot;Completed with action: %s\\n&quot;, action)\n}\n","title":"Using Result Type (Recommended for Type Safety)","titles":["Quick Start","Your First Node"]},"209":{"href":"/getting-started/quick-start#using-any-type-simple-approach","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create a node with any type using fluent API</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Processing data...&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Hello, Flyt!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create shared store and context</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Run the node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    action, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, node, shared)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        panic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Completed with action: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, action)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunc main() {\n    // Create a node with any type using fluent API\n    node := flyt.NewNode().\n        WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            fmt.Println(&quot;Processing data...&quot;)\n            return &quot;Hello, Flyt!&quot;, nil\n        })\n \n    // Create shared store and context\n    shared := flyt.NewSharedStore()\n    ctx := context.Background()\n \n    // Run the node\n    action, err := flyt.Run(ctx, node, shared)\n    if err != nil {\n        panic(err)\n    }\n    \n    fmt.Printf(&quot;Completed with action: %s\\n&quot;, action)\n}\n","title":"Using Any Type (Simple Approach)","titles":["Quick Start","Your First Node"]},"210":{"href":"/getting-started/quick-start#building-a-flow","html":"\n<p>Now let&#x27;s create a simple workflow with multiple nodes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">package</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> main</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create nodes using Result type for type safety</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fetchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Fetching data...&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;important info&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;fetched_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, execResult.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Use GetMap for type-safe access</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;fetched_data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Type-safe map access</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AsMapOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Processing: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;processed: &quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Build the flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fetchNode, flyt.DefaultAction, processNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Run the flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        panic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Flow completed successfully!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nNow let&#x27;s create a simple workflow with multiple nodes:\npackage main\n \nimport (\n    &quot;context&quot;\n    &quot;fmt&quot;\n    &quot;github.com/mark3labs/flyt&quot;\n)\n \nfunc main() {\n    // Create nodes using Result type for type safety\n    fetchNode := flyt.NewNode(\n        flyt.WithExecFunc(func(ctx context.Context, prepResult flyt.Result) (flyt.Result, error) {\n            fmt.Println(&quot;Fetching data...&quot;)\n            data := map[string]string{&quot;data&quot;: &quot;important info&quot;}\n            return flyt.NewResult(data), nil\n        }),\n        flyt.WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult flyt.Result) (flyt.Action, error) {\n            shared.Set(&quot;fetched_data&quot;, execResult.Value())\n            return flyt.DefaultAction, nil\n        }),\n    )\n \n    processNode := flyt.NewNode(\n        flyt.WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) (flyt.Result, error) {\n            // Use GetMap for type-safe access\n            data := shared.GetMap(&quot;fetched_data&quot;)\n            return flyt.NewResult(data), nil\n        }),\n        flyt.WithExecFunc(func(ctx context.Context, prepResult flyt.Result) (flyt.Result, error) {\n            // Type-safe map access\n            data := prepResult.AsMapOr(nil)\n            fmt.Printf(&quot;Processing: %v\\n&quot;, data[&quot;data&quot;])\n            result := &quot;processed: &quot; + fmt.Sprint(data[&quot;data&quot;])\n            return flyt.NewResult(result), nil\n        }),\n    )\n \n    // Build the flow\n    flow := flyt.NewFlow(fetchNode)\n    flow.Connect(fetchNode, flyt.DefaultAction, processNode)\n \n    // Run the flow\n    shared := flyt.NewSharedStore()\n    ctx := context.Background()\n    \n    err := flow.Run(ctx, shared)\n    if err != nil {\n        panic(err)\n    }\n    \n    fmt.Println(&quot;Flow completed successfully!&quot;)\n}\n","title":"Building a Flow","titles":["Quick Start"]},"211":{"href":"/getting-started/quick-start#adding-error-handling","html":"\n<p>Let&#x27;s add retry logic and error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createRobustNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Using fluent API for configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            attempts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Attempt </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">...</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, attempts)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Simulate flaky operation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;temporary failure&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Success!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nLet&#x27;s add retry logic and error handling:\nfunc createRobustNode() flyt.Node {\n    attempts := 0\n    \n    // Using fluent API for configuration\n    return flyt.NewNode().\n        WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            attempts++\n            fmt.Printf(&quot;Attempt %d...\\n&quot;, attempts)\n            \n            // Simulate flaky operation\n            if attempts &lt; 2 {\n                return nil, fmt.Errorf(&quot;temporary failure&quot;)\n            }\n            \n            return &quot;Success!&quot;, nil\n        }).\n        WithMaxRetries(3).\n        WithWait(time.Second)\n}\n","title":"Adding Error Handling","titles":["Quick Start"]},"212":{"href":"/getting-started/quick-start#using-shared-store","html":"\n<p>The SharedStore allows nodes to communicate:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Set initial data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;timeout&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;retries&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;config&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Using config: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, config)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;configured&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, node, shared)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe SharedStore allows nodes to communicate:\nfunc main() {\n    shared := flyt.NewSharedStore()\n    \n    // Set initial data\n    shared.Set(&quot;config&quot;, map[string]any{\n        &quot;timeout&quot;: 30,\n        &quot;retries&quot;: 3,\n    })\n    \n    node := flyt.NewNode(\n        flyt.WithPrepFuncAny(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            config := shared.GetMap(&quot;config&quot;)\n            return config, nil\n        }),\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            config := prepResult.(map[string]any)\n            fmt.Printf(&quot;Using config: %v\\n&quot;, config)\n            return &quot;configured&quot;, nil\n        }),\n    )\n    \n    ctx := context.Background()\n    flyt.Run(ctx, node, shared)\n}\n","title":"Using Shared Store","titles":["Quick Start"]},"213":{"href":"/getting-started/quick-start#next-steps","html":"\n<p>Now that you&#x27;ve built your first workflow, explore:</p>\n<ul>\n<li><a href=\"/concepts/nodes\">Nodes</a> - Deep dive into node lifecycle</li>\n<li><a href=\"/concepts/actions\">Actions</a> - Control flow with actions</li>\n<li><a href=\"/patterns/error-handling\">Error Handling</a> - Build resilient workflows</li>\n<li><a href=\"https://github.com/mark3labs/flyt/tree/main/cookbook\">Examples</a> - Real-world use cases</li>\n</ul>","isPage":false,"text":"\nNow that you&#x27;ve built your first workflow, explore:\n\nNodes - Deep dive into node lifecycle\nActions - Control flow with actions\nError Handling - Build resilient workflows\nExamples - Real-world use cases\n","title":"Next Steps","titles":["Quick Start"]},"214":{"href":"/getting-started/template#project-template","html":"</header>\n<p>The fastest way to start a new Flyt project is using the official template.</p>\n","isPage":true,"text":"\nThe fastest way to start a new Flyt project is using the official template.\n","title":"Project Template","titles":[]},"215":{"href":"/getting-started/template#quick-setup","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Clone the template</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/mark3labs/flyt-project-template</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> my-flyt-project</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> my-flyt-project</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Remove template git history</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rm</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -rf</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .git</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> init</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Install dependencies</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mod</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tidy</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Run the example</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> main.go</span></span></code></pre>\n","isPage":false,"text":"\n# Clone the template\ngit clone https://github.com/mark3labs/flyt-project-template my-flyt-project\ncd my-flyt-project\n \n# Remove template git history\nrm -rf .git\ngit init\n \n# Install dependencies\ngo mod tidy\n \n# Run the example\ngo run main.go\n","title":"Quick Setup","titles":["Project Template"]},"216":{"href":"/getting-started/template#whats-included","html":"\n<p>The template provides:</p>\n","isPage":false,"text":"\nThe template provides:\n","title":"What&#x27;s Included","titles":["Project Template"]},"217":{"href":"/getting-started/template#project-structure","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">my-flyt-project/</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── main.go           # Entry point with example workflow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── nodes/            # Custom node implementations</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── fetch.go      # Example fetch node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── process.go    # Example processing node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   └── validate.go   # Example validation node</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── flows/            # Reusable flow definitions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   └── example.go    # Example flow composition</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── go.mod            # Go module file</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">└── README.md         # Project documentation</span></span></code></pre>\n","isPage":false,"text":"\nmy-flyt-project/\n├── main.go           # Entry point with example workflow\n├── nodes/            # Custom node implementations\n│   ├── fetch.go      # Example fetch node\n│   ├── process.go    # Example processing node\n│   └── validate.go   # Example validation node\n├── flows/            # Reusable flow definitions\n│   └── example.go    # Example flow composition\n├── go.mod            # Go module file\n└── README.md         # Project documentation\n","title":"Project Structure","titles":["Project Template","What&#x27;s Included"]},"218":{"href":"/getting-started/template#example-code","html":"\n<p>The template includes a working example that demonstrates:</p>\n<ul>\n<li>Creating custom nodes</li>\n<li>Building flows</li>\n<li>Using the SharedStore</li>\n<li>Error handling with retries</li>\n<li>Action-based routing</li>\n</ul>\n","isPage":false,"text":"\nThe template includes a working example that demonstrates:\n\nCreating custom nodes\nBuilding flows\nUsing the SharedStore\nError handling with retries\nAction-based routing\n\n","title":"Example Code","titles":["Project Template","What&#x27;s Included"]},"219":{"href":"/getting-started/template#maingo","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">package</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> main</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">log</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">myproject/flows</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create shared store with initial data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewSharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;api_key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;your-api-key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;base_url&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://api.example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create and run the example flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flows.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateExampleFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Fatal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Get results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;final_result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Success! Result: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s\\n</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\npackage main\n \nimport (\n    &quot;context&quot;\n    &quot;log&quot;\n    \n    &quot;github.com/mark3labs/flyt&quot;\n    &quot;myproject/flows&quot;\n)\n \nfunc main() {\n    // Create shared store with initial data\n    shared := flyt.NewSharedStore()\n    shared.Set(&quot;api_key&quot;, &quot;your-api-key&quot;)\n    shared.Set(&quot;base_url&quot;, &quot;https://api.example.com&quot;)\n    \n    // Create and run the example flow\n    flow := flows.CreateExampleFlow()\n    \n    ctx := context.Background()\n    if err := flow.Run(ctx, shared); err != nil {\n        log.Fatal(err)\n    }\n    \n    // Get results\n    result := shared.GetString(&quot;final_result&quot;)\n    if result != &quot;&quot; {\n        log.Printf(&quot;Success! Result: %s\\n&quot;, result)\n    }\n}\n","title":"main.go","titles":["Project Template","What&#x27;s Included"]},"220":{"href":"/getting-started/template#customizing-the-template","html":"\n","isPage":false,"text":"\n","title":"Customizing the Template","titles":["Project Template"]},"221":{"href":"/getting-started/template#adding-new-nodes","html":"\n<p>Create a new file in the <code>nodes/</code> directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// nodes/custom.go</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">package</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> nodes</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">context</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> CreateCustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Using fluent API</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Your custom logic here</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;custom result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCreate a new file in the nodes/ directory:\n// nodes/custom.go\npackage nodes\n \nimport (\n    &quot;context&quot;\n    &quot;github.com/mark3labs/flyt&quot;\n)\n \nfunc CreateCustomNode() flyt.Node {\n    // Using fluent API\n    return flyt.NewNode().\n        WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            // Your custom logic here\n            return &quot;custom result&quot;, nil\n        })\n}\n","title":"Adding New Nodes","titles":["Project Template","Customizing the Template"]},"222":{"href":"/getting-started/template#creating-new-flows","html":"\n<p>Add flows to the <code>flows/</code> directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// flows/custom.go</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">package</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flows</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">github.com/mark3labs/flyt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">myproject/nodes</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> CreateCustomFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Flow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create nodes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    startNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nodes.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateCustomNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nodes.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">CreateProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Build flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startNode, flyt.DefaultAction, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flow</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAdd flows to the flows/ directory:\n// flows/custom.go\npackage flows\n \nimport (\n    &quot;github.com/mark3labs/flyt&quot;\n    &quot;myproject/nodes&quot;\n)\n \nfunc CreateCustomFlow() *flyt.Flow {\n    // Create nodes\n    startNode := nodes.CreateCustomNode()\n    processNode := nodes.CreateProcessNode()\n    \n    // Build flow\n    flow := flyt.NewFlow(startNode)\n    flow.Connect(startNode, flyt.DefaultAction, processNode)\n    \n    return flow\n}\n","title":"Creating New Flows","titles":["Project Template","Customizing the Template"]},"223":{"href":"/getting-started/template#best-practices","html":"\n<p>When using the template:</p>\n<ol>\n<li><strong>Organize by Feature</strong>: Group related nodes and flows together</li>\n<li><strong>Use Configuration</strong>: Store config in SharedStore or environment variables</li>\n<li><strong>Add Tests</strong>: Create <code>*_test.go</code> files for your nodes and flows</li>\n<li><strong>Document Your Nodes</strong>: Add comments explaining what each node does</li>\n<li><strong>Version Control</strong>: Initialize git and commit regularly</li>\n</ol>\n","isPage":false,"text":"\nWhen using the template:\n\nOrganize by Feature: Group related nodes and flows together\nUse Configuration: Store config in SharedStore or environment variables\nAdd Tests: Create *_test.go files for your nodes and flows\nDocument Your Nodes: Add comments explaining what each node does\nVersion Control: Initialize git and commit regularly\n\n","title":"Best Practices","titles":["Project Template"]},"224":{"href":"/getting-started/template#deployment","html":"\n<p>The template is ready for deployment:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Build the binary</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">go</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -o</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> myapp</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Run in production</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">./myapp</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Or use Docker</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -t</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> myapp</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> myapp</span></span></code></pre>\n","isPage":false,"text":"\nThe template is ready for deployment:\n# Build the binary\ngo build -o myapp\n \n# Run in production\n./myapp\n \n# Or use Docker\ndocker build -t myapp .\ndocker run myapp\n","title":"Deployment","titles":["Project Template"]},"225":{"href":"/getting-started/template#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/nodes\">Core Concepts</a> - Understand Flyt fundamentals</li>\n<li><a href=\"/patterns/closures\">Patterns</a> - Learn common patterns</li>\n<li><a href=\"https://github.com/mark3labs/flyt/tree/main/cookbook\">Examples</a> - See real-world implementations</li>\n</ul>","isPage":false,"text":"\n\nCore Concepts - Understand Flyt fundamentals\nPatterns - Learn common patterns\nExamples - See real-world implementations\n","title":"Next Steps","titles":["Project Template"]},"226":{"href":"/patterns/branching#conditional-branching","html":"</header>\n<p>Control flow execution dynamically based on runtime conditions using action-based routing.</p>\n","isPage":true,"text":"\nControl flow execution dynamically based on runtime conditions using action-based routing.\n","title":"Conditional Branching","titles":[]},"227":{"href":"/patterns/branching#simple-binary-branching","html":"\n<p>Make yes/no decisions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Using fluent API for clear node configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">validationNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        isValid </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> isValid, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, processNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validationNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;invalid&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorNode)</span></span></code></pre>\n","isPage":false,"text":"\nMake yes/no decisions:\n// Using fluent API for clear node configuration\nvalidationNode := flyt.NewNode().\n    WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n        data := prepResult.(string)\n        isValid := len(data) &gt; 0 &amp;&amp; len(data) &lt; 100\n        return isValid, nil\n    }).\n    WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        if execResult.(bool) {\n            return &quot;valid&quot;, nil\n        }\n        return &quot;invalid&quot;, nil\n    })\n \nflow := flyt.NewFlow(validationNode)\nflow.Connect(validationNode, &quot;valid&quot;, processNode)\nflow.Connect(validationNode, &quot;invalid&quot;, errorNode)\n","title":"Simple Binary Branching","titles":["Conditional Branching"]},"228":{"href":"/patterns/branching#multi-way-branching","html":"\n<p>Route to multiple paths:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Fluent API for multi-way branching</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">categoryNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;small&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;medium&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;large&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;xlarge&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;small&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, smallHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;medium&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, mediumHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;large&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, largeHandler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(categoryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;xlarge&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, xlargeHandler)</span></span></code></pre>\n","isPage":false,"text":"\nRoute to multiple paths:\n// Fluent API for multi-way branching\ncategoryNode := flyt.NewNode().\n    WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n        value := prepResult.(float64)\n        \n        switch {\n        case value &lt; 10:\n            return &quot;small&quot;, nil\n        case value &lt; 100:\n            return &quot;medium&quot;, nil\n        case value &lt; 1000:\n            return &quot;large&quot;, nil\n        default:\n            return &quot;xlarge&quot;, nil\n        }\n    }).\n    WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        return flyt.Action(execResult.(string)), nil\n    })\n \nflow := flyt.NewFlow(categoryNode)\nflow.Connect(categoryNode, &quot;small&quot;, smallHandler)\nflow.Connect(categoryNode, &quot;medium&quot;, mediumHandler)\nflow.Connect(categoryNode, &quot;large&quot;, largeHandler)\nflow.Connect(categoryNode, &quot;xlarge&quot;, xlargeHandler)\n","title":"Multi-Way Branching","titles":["Conditional Branching"]},"229":{"href":"/patterns/branching#state-machine-pattern","html":"\n<p>Implement state transitions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> StateMachine</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">StateMachine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    state </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetStringOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;init&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    event </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // State transition logic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    nextState </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transition</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(state, event)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;state&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, nextState)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return action based on new state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nextState), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">StateMachine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transition</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">state</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">event</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transitions </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;init&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;start&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;cancel&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;cancelled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;processing&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;complete&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;done&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;pause&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;paused&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;paused&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;resume&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;cancel&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;cancelled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateTransitions, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> transitions[state]; ok {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nextState, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateTransitions[event]; ok {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nextState</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// No transition</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nImplement state transitions:\ntype StateMachine struct {\n    *flyt.BaseNode\n}\n \nfunc (n *StateMachine) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    state := shared.GetStringOr(&quot;state&quot;, &quot;init&quot;)\n    event := execResult.(string)\n    \n    // State transition logic\n    nextState := n.transition(state, event)\n    shared.Set(&quot;state&quot;, nextState)\n    \n    // Return action based on new state\n    return flyt.Action(nextState), nil\n}\n \nfunc (n *StateMachine) transition(state, event string) string {\n    transitions := map[string]map[string]string{\n        &quot;init&quot;: {\n            &quot;start&quot;: &quot;processing&quot;,\n            &quot;cancel&quot;: &quot;cancelled&quot;,\n        },\n        &quot;processing&quot;: {\n            &quot;complete&quot;: &quot;done&quot;,\n            &quot;error&quot;: &quot;failed&quot;,\n            &quot;pause&quot;: &quot;paused&quot;,\n        },\n        &quot;paused&quot;: {\n            &quot;resume&quot;: &quot;processing&quot;,\n            &quot;cancel&quot;: &quot;cancelled&quot;,\n        },\n    }\n    \n    if stateTransitions, ok := transitions[state]; ok {\n        if nextState, ok := stateTransitions[event]; ok {\n            return nextState\n        }\n    }\n    \n    return state // No transition\n}\n","title":"State Machine Pattern","titles":["Conditional Branching"]},"230":{"href":"/patterns/branching#dynamic-routing","html":"\n<p>Route based on external configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DynamicRouter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    routes </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewDynamicRouter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">configPath</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicRouter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Load routing configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> os.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ReadFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(configPath)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> routes </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    json.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unmarshal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">routes)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicRouter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        routes:   routes,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DynamicRouter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Look up route in configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> action, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.routes[result]; ok {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(action), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Default route</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nRoute based on external configuration:\ntype DynamicRouter struct {\n    *flyt.BaseNode\n    routes map[string]string\n}\n \nfunc NewDynamicRouter(configPath string) *DynamicRouter {\n    // Load routing configuration\n    data, _ := os.ReadFile(configPath)\n    var routes map[string]string\n    json.Unmarshal(data, &amp;routes)\n    \n    return &amp;DynamicRouter{\n        BaseNode: flyt.NewBaseNode(),\n        routes:   routes,\n    }\n}\n \nfunc (n *DynamicRouter) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    result := execResult.(string)\n    \n    // Look up route in configuration\n    if action, ok := n.routes[result]; ok {\n        return flyt.Action(action), nil\n    }\n    \n    // Default route\n    return flyt.DefaultAction, nil\n}\n","title":"Dynamic Routing","titles":["Conditional Branching"]},"231":{"href":"/patterns/branching#weighted-routing","html":"\n<p>Distribute load across paths:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> LoadBalancer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    weights  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    counter  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu       </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewLoadBalancer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">weights</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">LoadBalancer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">LoadBalancer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        weights:  weights,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">LoadBalancer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.counter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Calculate total weight</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    totalWeight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, weight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.weights {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        totalWeight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> weight</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Determine which path based on counter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    position </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.counter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">%</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> totalWeight</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    currentWeight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> action, weight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.weights {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        currentWeight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> weight</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> position </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentWeight {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(action), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">balancer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewLoadBalancer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;server1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 30% of traffic</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;server2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 50% of traffic</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;server3&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 20% of traffic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nDistribute load across paths:\ntype LoadBalancer struct {\n    *flyt.BaseNode\n    weights  map[string]int\n    counter  int\n    mu       sync.Mutex\n}\n \nfunc NewLoadBalancer(weights map[string]int) *LoadBalancer {\n    return &amp;LoadBalancer{\n        BaseNode: flyt.NewBaseNode(),\n        weights:  weights,\n    }\n}\n \nfunc (n *LoadBalancer) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    n.mu.Lock()\n    defer n.mu.Unlock()\n    \n    n.counter++\n    \n    // Calculate total weight\n    totalWeight := 0\n    for _, weight := range n.weights {\n        totalWeight += weight\n    }\n    \n    // Determine which path based on counter\n    position := n.counter % totalWeight\n    currentWeight := 0\n    \n    for action, weight := range n.weights {\n        currentWeight += weight\n        if position &lt; currentWeight {\n            return flyt.Action(action), nil\n        }\n    }\n    \n    return flyt.DefaultAction, nil\n}\n \n// Usage\nbalancer := NewLoadBalancer(map[string]int{\n    &quot;server1&quot;: 3,  // 30% of traffic\n    &quot;server2&quot;: 5,  // 50% of traffic\n    &quot;server3&quot;: 2,  // 20% of traffic\n})\n","title":"Weighted Routing","titles":["Conditional Branching"]},"232":{"href":"/patterns/branching#conditional-loops","html":"\n<p>Create loops with exit conditions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clean fluent API for conditional loops</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">retryNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;attempts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> attempts, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Try operation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> performOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;attempts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: err.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;result&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: result,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;attempts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;attempts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, attempts)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Loop back</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Exit loop</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(retryNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(retryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, retryNode)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Loop back to self</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(retryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, successNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(retryNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, failureNode)</span></span></code></pre>\n","isPage":false,"text":"\nCreate loops with exit conditions:\n// Clean fluent API for conditional loops\nretryNode := flyt.NewNode().\n    WithPrepFuncAny(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n        attempts := shared.GetInt(&quot;attempts&quot;)\n        return attempts, nil\n    }).\n    WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n        attempts := prepResult.(int)\n        \n        // Try operation\n        result, err := performOperation()\n        if err != nil {\n            return map[string]any{\n                &quot;success&quot;: false,\n                &quot;attempts&quot;: attempts + 1,\n                &quot;error&quot;: err.Error(),\n            }, nil\n        }\n        \n        return map[string]any{\n            &quot;success&quot;: true,\n            &quot;result&quot;: result,\n        }, nil\n    }).\n    WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        result := execResult.(map[string]any)\n        \n        if result[&quot;success&quot;].(bool) {\n            return &quot;success&quot;, nil\n        }\n        \n        attempts := result[&quot;attempts&quot;].(int)\n        shared.Set(&quot;attempts&quot;, attempts)\n        \n        if attempts &lt; 3 {\n            return &quot;retry&quot;, nil  // Loop back\n        }\n        \n        return &quot;failed&quot;, nil  // Exit loop\n    })\n \nflow := flyt.NewFlow(retryNode)\nflow.Connect(retryNode, &quot;retry&quot;, retryNode)  // Loop back to self\nflow.Connect(retryNode, &quot;success&quot;, successNode)\nflow.Connect(retryNode, &quot;failed&quot;, failureNode)\n","title":"Conditional Loops","titles":["Conditional Branching"]},"233":{"href":"/patterns/branching#pipeline-branching","html":"\n<p>Branch and merge pipelines:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Split node decides which pipeline(s) to execute</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">splitNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        needsValidation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;validate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        needsEnrichment </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;enrich&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> needsValidation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> needsEnrichment {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;both&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> needsValidation {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;validate_only&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> needsEnrichment {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;enrich_only&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;skip&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Build flow with different pipelines</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Both pipelines</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;both&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, flyt.DefaultAction, enrichNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(enrichNode, flyt.DefaultAction, mergeNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Validation only</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;validate_only&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, validateNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validateNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;skip_enrich&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, mergeNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Enrichment only</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;enrich_only&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, enrichNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(enrichNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;skip_validate&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, mergeNode)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Skip both</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(splitNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;skip&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, mergeNode)</span></span></code></pre>\n","isPage":false,"text":"\nBranch and merge pipelines:\n// Split node decides which pipeline(s) to execute\nsplitNode := flyt.NewNode().\n    WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n        data := prepResult.(map[string]any)\n        \n        needsValidation := data[&quot;validate&quot;].(bool)\n        needsEnrichment := data[&quot;enrich&quot;].(bool)\n        \n        if needsValidation &amp;&amp; needsEnrichment {\n            return &quot;both&quot;, nil\n        } else if needsValidation {\n            return &quot;validate_only&quot;, nil\n        } else if needsEnrichment {\n            return &quot;enrich_only&quot;, nil\n        }\n        return &quot;skip&quot;, nil\n    }).\n    WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n        return flyt.Action(execResult.(string)), nil\n    })\n \n// Build flow with different pipelines\nflow := flyt.NewFlow(splitNode)\n \n// Both pipelines\nflow.Connect(splitNode, &quot;both&quot;, validateNode)\nflow.Connect(validateNode, flyt.DefaultAction, enrichNode)\nflow.Connect(enrichNode, flyt.DefaultAction, mergeNode)\n \n// Validation only\nflow.Connect(splitNode, &quot;validate_only&quot;, validateNode)\nflow.Connect(validateNode, &quot;skip_enrich&quot;, mergeNode)\n \n// Enrichment only\nflow.Connect(splitNode, &quot;enrich_only&quot;, enrichNode)\nflow.Connect(enrichNode, &quot;skip_validate&quot;, mergeNode)\n \n// Skip both\nflow.Connect(splitNode, &quot;skip&quot;, mergeNode)\n","title":"Pipeline Branching","titles":["Conditional Branching"]},"234":{"href":"/patterns/branching#feature-flags","html":"\n<p>Control flow with feature toggles:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FeatureFlagNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flags </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FeatureFlagNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    feature </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Check if feature is enabled</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> enabled, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.flags[feature]; ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> enabled {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(feature </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;_enabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(feature </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;_disabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flagNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">FeatureFlagNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    BaseNode: flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    flags: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;new_algorithm&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;beta_feature&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;experimental&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewFlow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flagNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flagNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;new_algorithm_enabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, newAlgorithmNode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">flow.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Connect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(flagNode, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;new_algorithm_disabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, oldAlgorithmNode)</span></span></code></pre>\n","isPage":false,"text":"\nControl flow with feature toggles:\ntype FeatureFlagNode struct {\n    *flyt.BaseNode\n    flags map[string]bool\n}\n \nfunc (n *FeatureFlagNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    feature := execResult.(string)\n    \n    // Check if feature is enabled\n    if enabled, ok := n.flags[feature]; ok &amp;&amp; enabled {\n        return flyt.Action(feature + &quot;_enabled&quot;), nil\n    }\n    \n    return flyt.Action(feature + &quot;_disabled&quot;), nil\n}\n \n// Usage\nflagNode := &amp;FeatureFlagNode{\n    BaseNode: flyt.NewBaseNode(),\n    flags: map[string]bool{\n        &quot;new_algorithm&quot;: true,\n        &quot;beta_feature&quot;: false,\n        &quot;experimental&quot;: true,\n    },\n}\n \nflow := flyt.NewFlow(flagNode)\nflow.Connect(flagNode, &quot;new_algorithm_enabled&quot;, newAlgorithmNode)\nflow.Connect(flagNode, &quot;new_algorithm_disabled&quot;, oldAlgorithmNode)\n","title":"Feature Flags","titles":["Conditional Branching"]},"235":{"href":"/patterns/branching#ab-testing","html":"\n<p>Route based on experiment groups:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createABTestNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">testName</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">distribution</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Using fluent API with chained configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithPrepFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user_id&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> userID, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Hash user ID for consistent assignment</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            h </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fnv.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">New32a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            h.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">byte</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(userID </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> testName))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            hash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> h.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sum32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Determine variant based on distribution</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            bucket </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(hash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">%</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            cumulative </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> variant, percentage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> distribution {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                cumulative </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> percentage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bucket </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cumulative {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> variant, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;control&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            variant </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ab_variant&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, variant)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(variant), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">abNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createABTestNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;checkout_flow&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;variant_a&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">33</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 33% of users</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;variant_b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">33</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 33% of users</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;control&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">34</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 34% of users</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nRoute based on experiment groups:\nfunc createABTestNode(testName string, distribution map[string]int) flyt.Node {\n    // Using fluent API with chained configuration\n    return flyt.NewNode().\n        WithPrepFuncAny(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            userID := shared.GetString(&quot;user_id&quot;)\n            return userID, nil\n        }).\n        WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            userID := prepResult.(string)\n            \n            // Hash user ID for consistent assignment\n            h := fnv.New32a()\n            h.Write([]byte(userID + testName))\n            hash := h.Sum32()\n            \n            // Determine variant based on distribution\n            bucket := int(hash % 100)\n            cumulative := 0\n            \n            for variant, percentage := range distribution {\n                cumulative += percentage\n                if bucket &lt; cumulative {\n                    return variant, nil\n                }\n            }\n            \n            return &quot;control&quot;, nil\n        }).\n        WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            variant := execResult.(string)\n            shared.Set(&quot;ab_variant&quot;, variant)\n            return flyt.Action(variant), nil\n        })\n}\n \n// Usage\nabNode := createABTestNode(&quot;checkout_flow&quot;, map[string]int{\n    &quot;variant_a&quot;: 33,  // 33% of users\n    &quot;variant_b&quot;: 33,  // 33% of users\n    &quot;control&quot;:   34,  // 34% of users\n})\n","title":"A/B Testing","titles":["Conditional Branching"]},"236":{"href":"/patterns/branching#best-practices","html":"\n<ol>\n<li><strong>Clear Action Names</strong>: Use descriptive action names that indicate the path</li>\n<li><strong>Document Branches</strong>: Comment all possible branches and their conditions</li>\n<li><strong>Handle All Cases</strong>: Ensure all possible actions have connections</li>\n<li><strong>Avoid Deep Nesting</strong>: Keep branching logic simple and readable</li>\n<li><strong>Test All Paths</strong>: Write tests for each branch condition</li>\n<li><strong>Monitor Branch Usage</strong>: Track which paths are taken most frequently</li>\n</ol>\n","isPage":false,"text":"\n\nClear Action Names: Use descriptive action names that indicate the path\nDocument Branches: Comment all possible branches and their conditions\nHandle All Cases: Ensure all possible actions have connections\nAvoid Deep Nesting: Keep branching logic simple and readable\nTest All Paths: Write tests for each branch condition\nMonitor Branch Usage: Track which paths are taken most frequently\n\n","title":"Best Practices","titles":["Conditional Branching"]},"237":{"href":"/patterns/branching#next-steps","html":"\n<ul>\n<li><a href=\"/concepts/actions\">Actions</a> - Deep dive into action system</li>\n<li><a href=\"/concepts/flows\">Flows</a> - Building complex workflows</li>\n<li><a href=\"/patterns/branching#state-machine-pattern\">State Machines</a> - Advanced state management</li>\n</ul>","isPage":false,"text":"\n\nActions - Deep dive into action system\nFlows - Building complex workflows\nState Machines - Advanced state management\n","title":"Next Steps","titles":["Conditional Branching"]},"238":{"href":"/patterns/closures#configuration-via-closures","html":"</header>\n<p>Use closures to create configurable, reusable nodes with encapsulated state and configuration.</p>\n","isPage":true,"text":"\nUse closures to create configurable, reusable nodes with encapsulated state and configuration.\n","title":"Configuration via Closures","titles":[]},"239":{"href":"/patterns/closures#basic-closure-pattern","html":"\n<p>Pass configuration to nodes using closures:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAPINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">apiKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">baseURL</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Using fluent API with closure</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // apiKey and baseURL are captured in the closure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            url </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, baseURL)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            req, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> http.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewRequest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;GET&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, url, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            req.Header.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Authorization&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Bearer </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, apiKey))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            client </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Client</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{Timeout: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.Second}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            resp, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Do</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(req)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> resp.Body.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            json.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewDecoder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(resp.Body).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">data)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">apiNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAPINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;secret-key-123&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://api.example.com&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nPass configuration to nodes using closures:\nfunc createAPINode(apiKey string, baseURL string) flyt.Node {\n    // Using fluent API with closure\n    return flyt.NewNode().\n        WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            // apiKey and baseURL are captured in the closure\n            url := fmt.Sprintf(&quot;%s/data&quot;, baseURL)\n            req, _ := http.NewRequest(&quot;GET&quot;, url, nil)\n            req.Header.Set(&quot;Authorization&quot;, fmt.Sprintf(&quot;Bearer %s&quot;, apiKey))\n            \n            client := &amp;http.Client{Timeout: 30 * time.Second}\n            resp, err := client.Do(req)\n            if err != nil {\n                return nil, err\n            }\n            defer resp.Body.Close()\n            \n            var data map[string]any\n            json.NewDecoder(resp.Body).Decode(&amp;data)\n            return data, nil\n        })\n}\n \n// Usage\napiNode := createAPINode(&quot;secret-key-123&quot;, &quot;https://api.example.com&quot;)\n","title":"Basic Closure Pattern","titles":["Configuration via Closures"]},"240":{"href":"/patterns/closures#stateful-nodes","html":"\n<p>Maintain state across executions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCounterNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mutex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Fluent API with stateful closure</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            current </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Execution #</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, current), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nMaintain state across executions:\nfunc createCounterNode() flyt.Node {\n    count := 0\n    mu := &amp;sync.Mutex{}\n    \n    // Fluent API with stateful closure\n    return flyt.NewNode().\n        WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            mu.Lock()\n            count++\n            current := count\n            mu.Unlock()\n            \n            return fmt.Sprintf(&quot;Execution #%d&quot;, current), nil\n        })\n}\n","title":"Stateful Nodes","titles":["Configuration via Closures"]},"241":{"href":"/patterns/closures#configuration-objects","html":"\n<p>Use structs for complex configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DatabaseConfig</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Host     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Port     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    User     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Password </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Database </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    MaxConns </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">config</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DatabaseConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create connection pool once</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    dsn </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Sprintf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">@tcp(</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)/</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        config.User, config.Password, config.Host, config.Port, config.Database)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sql.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Open</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;mysql&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, dsn)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    db.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">SetMaxOpenConns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config.MaxConns)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Clean fluent API with configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            query </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            rows, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> db.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">QueryContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, query)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rows.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Process rows...</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">dbNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDatabaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DatabaseConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Host:     </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;localhost&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Port:     </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3306</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    User:     </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;app&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Password: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;secret&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Database: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;myapp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    MaxConns: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nUse structs for complex configuration:\ntype DatabaseConfig struct {\n    Host     string\n    Port     int\n    User     string\n    Password string\n    Database string\n    MaxConns int\n}\n \nfunc createDatabaseNode(config DatabaseConfig) flyt.Node {\n    // Create connection pool once\n    dsn := fmt.Sprintf(&quot;%s:%s@tcp(%s:%d)/%s&quot;,\n        config.User, config.Password, config.Host, config.Port, config.Database)\n    \n    db, _ := sql.Open(&quot;mysql&quot;, dsn)\n    db.SetMaxOpenConns(config.MaxConns)\n    \n    // Clean fluent API with configuration\n    return flyt.NewNode().\n        WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            query := prepResult.(string)\n            rows, err := db.QueryContext(ctx, query)\n            if err != nil {\n                return nil, err\n            }\n            defer rows.Close()\n            \n            var results []map[string]any\n            // Process rows...\n            return results, nil\n        })\n}\n \n// Usage\ndbNode := createDatabaseNode(DatabaseConfig{\n    Host:     &quot;localhost&quot;,\n    Port:     3306,\n    User:     &quot;app&quot;,\n    Password: &quot;secret&quot;,\n    Database: &quot;myapp&quot;,\n    MaxConns: 10,\n})\n","title":"Configuration Objects","titles":["Configuration via Closures"]},"242":{"href":"/patterns/closures#factory-functions","html":"\n<p>Create specialized node variants:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createHTTPNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">method</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">headers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Fluent API for factory function</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithPrepFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            url </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;url&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            body </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;body&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;url&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: url, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;body&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: body}, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            url </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;url&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bodyReader </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">io</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Reader</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> body, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;body&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]; ok {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                bodyBytes, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Marshal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(body)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                bodyReader </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bytes.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewReader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(bodyBytes)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            req, _ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> http.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewRequest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(method, url, bodyReader)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Apply configured headers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key, value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> headers {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                req.Header.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key, value)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            client </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Client</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            resp, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Do</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(req)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> resp.Body.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            json.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewDecoder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(resp.Body).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">result)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create specialized nodes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createHTTPNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;GET&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;Accept&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">postNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createHTTPNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;POST&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;Content-Type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;Accept&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;application/json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nCreate specialized node variants:\nfunc createHTTPNode(method string, headers map[string]string) flyt.Node {\n    // Fluent API for factory function\n    return flyt.NewNode().\n        WithPrepFuncAny(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            url := shared.GetString(&quot;url&quot;)\n            body := shared.GetMap(&quot;body&quot;)\n            return map[string]any{&quot;url&quot;: url, &quot;body&quot;: body}, nil\n        }).\n        WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            data := prepResult.(map[string]any)\n            url := data[&quot;url&quot;].(string)\n            \n            var bodyReader io.Reader\n            if body, ok := data[&quot;body&quot;]; ok {\n                bodyBytes, _ := json.Marshal(body)\n                bodyReader = bytes.NewReader(bodyBytes)\n            }\n            \n            req, _ := http.NewRequest(method, url, bodyReader)\n            \n            // Apply configured headers\n            for key, value := range headers {\n                req.Header.Set(key, value)\n            }\n            \n            client := &amp;http.Client{}\n            resp, err := client.Do(req)\n            if err != nil {\n                return nil, err\n            }\n            defer resp.Body.Close()\n            \n            var result map[string]any\n            json.NewDecoder(resp.Body).Decode(&amp;result)\n            return result, nil\n        })\n}\n \n// Create specialized nodes\ngetNode := createHTTPNode(&quot;GET&quot;, map[string]string{\n    &quot;Accept&quot;: &quot;application/json&quot;,\n})\n \npostNode := createHTTPNode(&quot;POST&quot;, map[string]string{\n    &quot;Content-Type&quot;: &quot;application/json&quot;,\n    &quot;Accept&quot;: &quot;application/json&quot;,\n})\n","title":"Factory Functions","titles":["Configuration via Closures"]},"243":{"href":"/patterns/closures#resource-management","html":"\n<p>Manage shared resources:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFileProcessorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">bufferSize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Pre-allocate buffer</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    buffer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">byte</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, bufferSize)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Fluent API with resource management</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            filePath </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            file, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> os.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Open</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(filePath)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            defer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> file.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Reuse buffer</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            n, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> file.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Read</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(buffer)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> io.EOF {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Process buffer[:n]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(buffer[:n]), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nManage shared resources:\nfunc createFileProcessorNode(bufferSize int) flyt.Node {\n    // Pre-allocate buffer\n    buffer := make([]byte, bufferSize)\n    \n    // Fluent API with resource management\n    return flyt.NewNode().\n        WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            filePath := prepResult.(string)\n            \n            file, err := os.Open(filePath)\n            if err != nil {\n                return nil, err\n            }\n            defer file.Close()\n            \n            // Reuse buffer\n            n, err := file.Read(buffer)\n            if err != nil &amp;&amp; err != io.EOF {\n                return nil, err\n            }\n            \n            // Process buffer[:n]\n            return processData(buffer[:n]), nil\n        })\n}\n","title":"Resource Management","titles":["Configuration via Closures"]},"244":{"href":"/patterns/closures#middleware-pattern","html":"\n<p>Wrap nodes with additional behavior:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> withLogging</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">node</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Starting prep&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Prep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            start </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Exec took </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name, time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(start))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPostFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            action, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, shared, prepResult, execResult)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">] Returning action: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, name, action)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> action, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Usage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> withLogging</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processor&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createProcessNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nWrap nodes with additional behavior:\nfunc withLogging(name string, node flyt.Node) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithPrepFuncAny(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            log.Printf(&quot;[%s] Starting prep&quot;, name)\n            return node.Prep(ctx, shared)\n        }),\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            start := time.Now()\n            result, err := node.Exec(ctx, prepResult)\n            log.Printf(&quot;[%s] Exec took %v&quot;, name, time.Since(start))\n            return result, err\n        }),\n        flyt.WithPostFuncAny(func(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n            action, err := node.Post(ctx, shared, prepResult, execResult)\n            log.Printf(&quot;[%s] Returning action: %s&quot;, name, action)\n            return action, err\n        }),\n    )\n}\n \n// Usage\nprocessNode := withLogging(&quot;processor&quot;, createProcessNode())\n","title":"Middleware Pattern","titles":["Configuration via Closures"]},"245":{"href":"/patterns/closures#dynamic-configuration","html":"\n<p>Load configuration at runtime:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createConfigurableNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">configPath</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithPrepFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Load config file</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            data, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> os.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ReadFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(configPath)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            json.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unmarshal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">config)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Use configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processWithConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(config), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nLoad configuration at runtime:\nfunc createConfigurableNode(configPath string) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithPrepFuncAny(func(ctx context.Context, shared *flyt.SharedStore) (any, error) {\n            // Load config file\n            data, err := os.ReadFile(configPath)\n            if err != nil {\n                return nil, err\n            }\n            \n            var config map[string]any\n            json.Unmarshal(data, &amp;config)\n            return config, nil\n        }),\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            config := prepResult.(map[string]any)\n            // Use configuration\n            return processWithConfig(config), nil\n        }),\n    )\n}\n","title":"Dynamic Configuration","titles":["Configuration via Closures"]},"246":{"href":"/patterns/closures#dependency-injection","html":"\n<p>Inject dependencies through closures:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Dependencies</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    DB       </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sql</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DB</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Cache    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">redis</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Client</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Logger   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Logger</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Metrics  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">prometheus</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Registry</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createServiceNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">deps</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Dependencies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Use injected dependencies</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            deps.Logger.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Println</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Processing request&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Check cache</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cached, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deps.Cache.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(); err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                deps.Metrics.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Inc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;cache_hits&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cached, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Query database</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> queryDB</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(deps.DB, prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                deps.Logger.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DB error: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">                return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Update cache</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            deps.Cache.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result, time.Hour)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nInject dependencies through closures:\ntype Dependencies struct {\n    DB       *sql.DB\n    Cache    *redis.Client\n    Logger   *log.Logger\n    Metrics  *prometheus.Registry\n}\n \nfunc createServiceNode(deps Dependencies) flyt.Node {\n    return flyt.NewNode(\n        flyt.WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n            // Use injected dependencies\n            deps.Logger.Println(&quot;Processing request&quot;)\n            \n            // Check cache\n            if cached, err := deps.Cache.Get(ctx, &quot;key&quot;).Result(); err == nil {\n                deps.Metrics.Inc(&quot;cache_hits&quot;)\n                return cached, nil\n            }\n            \n            // Query database\n            result, err := queryDB(deps.DB, prepResult)\n            if err != nil {\n                deps.Logger.Printf(&quot;DB error: %v&quot;, err)\n                return nil, err\n            }\n            \n            // Update cache\n            deps.Cache.Set(ctx, &quot;key&quot;, result, time.Hour)\n            \n            return result, nil\n        }),\n    )\n}\n","title":"Dependency Injection","titles":["Configuration via Closures"]},"247":{"href":"/patterns/closures#best-practices","html":"\n<ol>\n<li><strong>Immutable Configuration</strong>: Don&#x27;t modify captured variables after node creation</li>\n<li><strong>Thread Safety</strong>: Use mutexes for shared state in concurrent scenarios</li>\n<li><strong>Resource Cleanup</strong>: Ensure resources are properly closed</li>\n<li><strong>Error Handling</strong>: Handle configuration errors gracefully</li>\n<li><strong>Documentation</strong>: Document required configuration clearly</li>\n</ol>\n","isPage":false,"text":"\n\nImmutable Configuration: Don&#x27;t modify captured variables after node creation\nThread Safety: Use mutexes for shared state in concurrent scenarios\nResource Cleanup: Ensure resources are properly closed\nError Handling: Handle configuration errors gracefully\nDocumentation: Document required configuration clearly\n\n","title":"Best Practices","titles":["Configuration via Closures"]},"248":{"href":"/patterns/closures#next-steps","html":"\n<ul>\n<li><a href=\"/patterns/error-handling\">Error Handling</a> - Build resilient nodes</li>\n<li><a href=\"/advanced/custom-nodes\">Custom Node Types</a> - Advanced node patterns</li>\n<li><a href=\"/best-practices\">Best Practices</a> - General guidelines</li>\n</ul>","isPage":false,"text":"\n\nError Handling - Build resilient nodes\nCustom Node Types - Advanced node patterns\nBest Practices - General guidelines\n","title":"Next Steps","titles":["Configuration via Closures"]},"249":{"href":"/patterns/error-handling#error-handling--retries","html":"</header>\n<p>Build resilient workflows with proper error handling and retry strategies.</p>\n","isPage":true,"text":"\nBuild resilient workflows with proper error handling and retry strategies.\n","title":"Error Handling &amp; Retries","titles":[]},"250":{"href":"/patterns/error-handling#basic-retry-configuration","html":"\n<p>Configure retries at the node level:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Using fluent API for clean configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFuncAny</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // This will be retried up to 3 times</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callFlakeyAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(time.Second). </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait 1 second between retries</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFallbackFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Called after all retries fail</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;API failed after retries: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Return nil to handle in Post</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span></code></pre>\n","isPage":false,"text":"\nConfigure retries at the node level:\n// Using fluent API for clean configuration\nnode := flyt.NewNode().\n    WithExecFuncAny(func(ctx context.Context, prepResult any) (any, error) {\n        // This will be retried up to 3 times\n        return callFlakeyAPI()\n    }).\n    WithMaxRetries(3).\n    WithWait(time.Second). // Wait 1 second between retries\n    WithExecFallbackFunc(func(prepResult any, err error) (any, error) {\n        // Called after all retries fail\n        log.Printf(&quot;API failed after retries: %v&quot;, err)\n        return nil, nil // Return nil to handle in Post\n    })\n","title":"Basic Retry Configuration","titles":["Error Handling &amp; Retries"]},"251":{"href":"/patterns/error-handling#exponential-backoff","html":"\n<p>Implement exponential backoff with RetryableNode:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BackoffNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    attempt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BackoffNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 5</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BackoffNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Exponential backoff: 1s, 2s, 4s, 8s, 16s</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(math.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Pow</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.attempt))) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.Second</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BackoffNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.attempt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Attempt </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, n.attempt, err)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.attempt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Reset on success</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nImplement exponential backoff with RetryableNode:\ntype BackoffNode struct {\n    *flyt.BaseNode\n    attempt int\n}\n \nfunc (n *BackoffNode) GetMaxRetries() int {\n    return 5\n}\n \nfunc (n *BackoffNode) GetWait() time.Duration {\n    // Exponential backoff: 1s, 2s, 4s, 8s, 16s\n    return time.Duration(math.Pow(2, float64(n.attempt))) * time.Second\n}\n \nfunc (n *BackoffNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    n.attempt++\n    result, err := callAPI()\n    if err != nil {\n        log.Printf(&quot;Attempt %d failed: %v&quot;, n.attempt, err)\n        return nil, err\n    }\n    n.attempt = 0 // Reset on success\n    return result, nil\n}\n","title":"Exponential Backoff","titles":["Error Handling &amp; Retries"]},"252":{"href":"/patterns/error-handling#circuit-breaker-pattern","html":"\n<p>Prevent cascading failures:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CircuitBreakerNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    failures    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    lastFailure </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    threshold   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    timeout     </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> NewCircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        BaseNode:  flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBaseNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        threshold: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        timeout:   </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.Second,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Check if circuit is open</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.threshold {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastFailure) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.timeout {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;circuit breaker open&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Reset after timeout</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callService</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.failures</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.lastFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Reset on success</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPrevent cascading failures:\ntype CircuitBreakerNode struct {\n    *flyt.BaseNode\n    failures    int\n    lastFailure time.Time\n    threshold   int\n    timeout     time.Duration\n}\n \nfunc NewCircuitBreakerNode() *CircuitBreakerNode {\n    return &amp;CircuitBreakerNode{\n        BaseNode:  flyt.NewBaseNode(),\n        threshold: 5,\n        timeout:   30 * time.Second,\n    }\n}\n \nfunc (n *CircuitBreakerNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Check if circuit is open\n    if n.failures &gt;= n.threshold {\n        if time.Since(n.lastFailure) &lt; n.timeout {\n            return nil, fmt.Errorf(&quot;circuit breaker open&quot;)\n        }\n        // Reset after timeout\n        n.failures = 0\n    }\n    \n    result, err := callService()\n    if err != nil {\n        n.failures++\n        n.lastFailure = time.Now()\n        return nil, err\n    }\n    \n    n.failures = 0 // Reset on success\n    return result, nil\n}\n","title":"Circuit Breaker Pattern","titles":["Error Handling &amp; Retries"]},"253":{"href":"/patterns/error-handling#fallback-on-failure","html":"\n<p>Implement the FallbackNode interface for graceful degradation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CachedAPINode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cache </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Map</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CachedAPINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Try to fetch fresh data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Cache successful result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.cache.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key, data)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CachedAPINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return cached data on failure</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cached, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.cache.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Load</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key); ok {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Returning cached data for </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%s</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> due to error: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, key, err)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cached, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return default if no cache</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;unavailable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;cached&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nImplement the FallbackNode interface for graceful degradation:\ntype CachedAPINode struct {\n    *flyt.BaseNode\n    cache sync.Map\n}\n \nfunc (n *CachedAPINode) Exec(ctx context.Context, prepResult any) (any, error) {\n    key := prepResult.(string)\n    \n    // Try to fetch fresh data\n    data, err := fetchFromAPI(key)\n    if err == nil {\n        // Cache successful result\n        n.cache.Store(key, data)\n        return data, nil\n    }\n    \n    return nil, err\n}\n \nfunc (n *CachedAPINode) ExecFallback(prepResult any, err error) (any, error) {\n    key := prepResult.(string)\n    \n    // Return cached data on failure\n    if cached, ok := n.cache.Load(key); ok {\n        log.Printf(&quot;Returning cached data for %s due to error: %v&quot;, key, err)\n        return cached, nil\n    }\n    \n    // Return default if no cache\n    return map[string]any{\n        &quot;status&quot;: &quot;unavailable&quot;,\n        &quot;cached&quot;: false,\n    }, nil\n}\n","title":"Fallback on Failure","titles":["Error Handling &amp; Retries"]},"254":{"href":"/patterns/error-handling#error-aggregation","html":"\n<p>Collect errors from batch operations using BatchNode:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">batchNode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewBatchNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPrepFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) ([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetSlice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            results[i] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithExecFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Process each item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{}, err  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Error for this specific item</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">NewResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithPostFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">results</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        var</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> successful []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Aggregate errors and successes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i, result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> results {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IsError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;item </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, i, result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                successful </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(successful, result.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Store results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;successful&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, successful)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;batch_error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BatchError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                Errors: errors,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/</span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> items failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(errors), </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;partial_failure&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }).</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    WithBatchErrorHandling</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Continue processing despite errors</span></span></code></pre>\n","isPage":false,"text":"\nCollect errors from batch operations using BatchNode:\nbatchNode := flyt.NewBatchNode().\n    WithPrepFunc(func(ctx context.Context, shared *flyt.SharedStore) ([]flyt.Result, error) {\n        items := shared.GetSlice(&quot;items&quot;)\n        results := make([]flyt.Result, len(items))\n        for i, item := range items {\n            results[i] = flyt.NewResult(item)\n        }\n        return results, nil\n    }).\n    WithExecFunc(func(ctx context.Context, item flyt.Result) (flyt.Result, error) {\n        // Process each item\n        result, err := processItem(item.Value())\n        if err != nil {\n            return flyt.Result{}, err  // Error for this specific item\n        }\n        return flyt.NewResult(result), nil\n    }).\n    WithPostFunc(func(ctx context.Context, shared *flyt.SharedStore, items, results []flyt.Result) (flyt.Action, error) {\n        var errors []error\n        var successful []any\n        \n        // Aggregate errors and successes\n        for i, result := range results {\n            if result.IsError() {\n                errors = append(errors, fmt.Errorf(&quot;item %d: %w&quot;, i, result.Error()))\n            } else {\n                successful = append(successful, result.Value())\n            }\n        }\n        \n        // Store results\n        shared.Set(&quot;successful&quot;, successful)\n        if len(errors) &gt; 0 {\n            shared.Set(&quot;batch_error&quot;, &amp;flyt.BatchError{\n                Errors: errors,\n            })\n            log.Printf(&quot;%d/%d items failed&quot;, len(errors), len(items))\n            return &quot;partial_failure&quot;, nil\n        }\n        \n        return flyt.DefaultAction, nil\n    }).\n    WithBatchErrorHandling(true)  // Continue processing despite errors\n","title":"Error Aggregation","titles":["Error Handling &amp; Retries"]},"255":{"href":"/patterns/error-handling#retry-with-jitter","html":"\n<p>Add randomization to prevent thundering herd:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">JitterNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetWait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    base </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.Second </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.attempt)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    jitter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Duration</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rand.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Intn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.Millisecond</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> base </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jitter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAdd randomization to prevent thundering herd:\nfunc (n *JitterNode) GetWait() time.Duration {\n    base := time.Second * time.Duration(n.attempt)\n    jitter := time.Duration(rand.Intn(1000)) * time.Millisecond\n    return base + jitter\n}\n","title":"Retry with Jitter","titles":["Error Handling &amp; Retries"]},"256":{"href":"/patterns/error-handling#selective-retry","html":"\n<p>Only retry specific errors:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SelectiveRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Only retry on network errors</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isNetworkError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Will be retried</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Don&#x27;t retry business logic errors</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;permanent error: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SelectiveRetryNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">GetMaxRetries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Check error type from last execution</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.lastError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isRetryable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastError) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Don&#x27;t retry</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nOnly retry specific errors:\nfunc (n *SelectiveRetryNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    result, err := callAPI()\n    if err != nil {\n        // Only retry on network errors\n        if isNetworkError(err) {\n            return nil, err // Will be retried\n        }\n        // Don&#x27;t retry business logic errors\n        return nil, fmt.Errorf(&quot;permanent error: %w&quot;, err)\n    }\n    return result, nil\n}\n \nfunc (n *SelectiveRetryNode) GetMaxRetries() int {\n    // Check error type from last execution\n    if n.lastError != nil &amp;&amp; !isRetryable(n.lastError) {\n        return 0 // Don&#x27;t retry\n    }\n    return 3\n}\n","title":"Selective Retry","titles":["Error Handling &amp; Retries"]},"257":{"href":"/patterns/error-handling#error-context","html":"\n<p>Provide context for debugging:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ErrorContext</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Node      </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Action    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Input     </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Error     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Timestamp </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Attempts  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DetailedErrorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Post</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">shared</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">SharedStore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">execResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Action</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> execResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        errorCtx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ErrorContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Node:      </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;DetailedErrorNode&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Action:    </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;process&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Input:     prepResult,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Error:     err,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Timestamp: time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Attempts:  n.attempts,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shared.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;last_error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, errorCtx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.attempts </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.maxRetries {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;retry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flyt.DefaultAction, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nProvide context for debugging:\ntype ErrorContext struct {\n    Node      string\n    Action    string\n    Input     any\n    Error     error\n    Timestamp time.Time\n    Attempts  int\n}\n \nfunc (n *DetailedErrorNode) Post(ctx context.Context, shared *flyt.SharedStore, prepResult, execResult any) (flyt.Action, error) {\n    if err, ok := execResult.(error); ok &amp;&amp; err != nil {\n        errorCtx := ErrorContext{\n            Node:      &quot;DetailedErrorNode&quot;,\n            Action:    &quot;process&quot;,\n            Input:     prepResult,\n            Error:     err,\n            Timestamp: time.Now(),\n            Attempts:  n.attempts,\n        }\n        \n        shared.Set(&quot;last_error&quot;, errorCtx)\n        \n        if n.attempts &lt; n.maxRetries {\n            return &quot;retry&quot;, nil\n        }\n        return &quot;error&quot;, nil\n    }\n    \n    return flyt.DefaultAction, nil\n}\n","title":"Error Context","titles":["Error Handling &amp; Retries"]},"258":{"href":"/patterns/error-handling#timeout-handling","html":"\n<p>Prevent hanging operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TimeoutNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Create timeout context</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ctx, cancel </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> context.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">WithTimeout</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ctx, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    defer</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> cancel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    resultChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">chan</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    go</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> longRunningOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            errChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            resultChan </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    select</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">resultChan:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">errChan:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Done</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;operation timed out: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, ctx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPrevent hanging operations:\nfunc (n *TimeoutNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Create timeout context\n    ctx, cancel := context.WithTimeout(ctx, 30*time.Second)\n    defer cancel()\n    \n    resultChan := make(chan any)\n    errChan := make(chan error)\n    \n    go func() {\n        result, err := longRunningOperation()\n        if err != nil {\n            errChan &lt;- err\n        } else {\n            resultChan &lt;- result\n        }\n    }()\n    \n    select {\n    case result := &lt;-resultChan:\n        return result, nil\n    case err := &lt;-errChan:\n        return nil, err\n    case &lt;-ctx.Done():\n        return nil, fmt.Errorf(&quot;operation timed out: %w&quot;, ctx.Err())\n    }\n}\n","title":"Timeout Handling","titles":["Error Handling &amp; Retries"]},"259":{"href":"/patterns/error-handling#best-practices","html":"\n<ol>\n<li><strong>Identify Transient vs Permanent Errors</strong>: Only retry transient failures</li>\n<li><strong>Set Reasonable Limits</strong>: Don&#x27;t retry indefinitely</li>\n<li><strong>Use Backoff</strong>: Avoid overwhelming failing services</li>\n<li><strong>Log Failures</strong>: Track retry attempts for debugging</li>\n<li><strong>Provide Fallbacks</strong>: Gracefully degrade when possible</li>\n<li><strong>Monitor Retry Rates</strong>: High retry rates indicate problems</li>\n</ol>\n","isPage":false,"text":"\n\nIdentify Transient vs Permanent Errors: Only retry transient failures\nSet Reasonable Limits: Don&#x27;t retry indefinitely\nUse Backoff: Avoid overwhelming failing services\nLog Failures: Track retry attempts for debugging\nProvide Fallbacks: Gracefully degrade when possible\nMonitor Retry Rates: High retry rates indicate problems\n\n","title":"Best Practices","titles":["Error Handling &amp; Retries"]},"260":{"href":"/patterns/error-handling#next-steps","html":"\n<ul>\n<li><a href=\"/patterns/fallback\">Fallback on Failure</a> - Graceful degradation</li>\n<li><a href=\"/advanced/batch-processing#batch-error-handling\">Batch Error Handling</a> - Handle batch failures</li>\n<li><a href=\"/best-practices\">Best Practices</a> - General guidelines</li>\n</ul>","isPage":false,"text":"\n\nFallback on Failure - Graceful degradation\nBatch Error Handling - Handle batch failures\nBest Practices - General guidelines\n","title":"Next Steps","titles":["Error Handling &amp; Retries"]},"261":{"href":"/patterns/fallback#fallback-on-failure","html":"</header>\n<p>Implement graceful degradation when operations fail, ensuring your workflows remain resilient and provide the best possible user experience even during failures.</p>\n","isPage":true,"text":"\nImplement graceful degradation when operations fail, ensuring your workflows remain resilient and provide the best possible user experience even during failures.\n","title":"Fallback on Failure","titles":[]},"262":{"href":"/patterns/fallback#fallbacknode-interface","html":"\n<p>The <code>FallbackNode</code> interface allows custom fallback behavior:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FallbackNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    Node</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe FallbackNode interface allows custom fallback behavior:\ntype FallbackNode interface {\n    Node\n    ExecFallback(prepResult any, err error) (any, error)\n}\n","title":"FallbackNode Interface","titles":["Fallback on Failure"]},"263":{"href":"/patterns/fallback#basic-fallback","html":"\n<p>Return default values on failure:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DefaultValueNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DefaultValueNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Try primary operation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromPrimarySource</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Will trigger fallback</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">DefaultValueNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Primary source failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">, returning default&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return safe default value</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;degraded&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;default_value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: err.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nReturn default values on failure:\ntype DefaultValueNode struct {\n    *flyt.BaseNode\n}\n \nfunc (n *DefaultValueNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Try primary operation\n    result, err := fetchFromPrimarySource()\n    if err != nil {\n        return nil, err // Will trigger fallback\n    }\n    return result, nil\n}\n \nfunc (n *DefaultValueNode) ExecFallback(prepResult any, err error) (any, error) {\n    log.Printf(&quot;Primary source failed: %v, returning default&quot;, err)\n    \n    // Return safe default value\n    return map[string]any{\n        &quot;status&quot;: &quot;degraded&quot;,\n        &quot;data&quot;: &quot;default_value&quot;,\n        &quot;error&quot;: err.Error(),\n    }, nil\n}\n","title":"Basic Fallback","titles":["Fallback on Failure"]},"264":{"href":"/patterns/fallback#cached-fallback","html":"\n<p>Use cached data when fresh data is unavailable:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CachedAPINode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cache </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CacheEntry</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mu    </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RWMutex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CacheEntry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Data      </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Timestamp </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CachedAPINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Try to fetch fresh data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromAPI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Update cache on success</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Lock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.cache[key] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CacheEntry</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Data:      data,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Timestamp: time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Unlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CachedAPINode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RLock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    entry, exists </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.cache[key]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.mu.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">RUnlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> exists {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        age </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entry.Timestamp)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Returning cached data (age: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">) due to error: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, age, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Add metadata about cache usage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:       entry.Data,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;cached&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;cache_age&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:  age.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Seconds</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:      err.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // No cache available</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;no fallback available: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%w</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUse cached data when fresh data is unavailable:\ntype CachedAPINode struct {\n    *flyt.BaseNode\n    cache map[string]CacheEntry\n    mu    sync.RWMutex\n}\n \ntype CacheEntry struct {\n    Data      any\n    Timestamp time.Time\n}\n \nfunc (n *CachedAPINode) Exec(ctx context.Context, prepResult any) (any, error) {\n    key := prepResult.(string)\n    \n    // Try to fetch fresh data\n    data, err := fetchFromAPI(key)\n    if err == nil {\n        // Update cache on success\n        n.mu.Lock()\n        n.cache[key] = CacheEntry{\n            Data:      data,\n            Timestamp: time.Now(),\n        }\n        n.mu.Unlock()\n        return data, nil\n    }\n    \n    return nil, err\n}\n \nfunc (n *CachedAPINode) ExecFallback(prepResult any, err error) (any, error) {\n    key := prepResult.(string)\n    \n    n.mu.RLock()\n    entry, exists := n.cache[key]\n    n.mu.RUnlock()\n    \n    if exists {\n        age := time.Since(entry.Timestamp)\n        log.Printf(&quot;Returning cached data (age: %v) due to error: %v&quot;, age, err)\n        \n        // Add metadata about cache usage\n        return map[string]any{\n            &quot;data&quot;:       entry.Data,\n            &quot;cached&quot;:     true,\n            &quot;cache_age&quot;:  age.Seconds(),\n            &quot;error&quot;:      err.Error(),\n        }, nil\n    }\n    \n    // No cache available\n    return nil, fmt.Errorf(&quot;no fallback available: %w&quot;, err)\n}\n","title":"Cached Fallback","titles":["Fallback on Failure"]},"265":{"href":"/patterns/fallback#multi-level-fallback","html":"\n<p>Try multiple fallback strategies:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MultiLevelFallbackNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    primaryURL   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    secondaryURL </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cache        </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sync</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Map</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MultiLevelFallbackNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Try primary source</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromURL</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.primaryURL)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.cache.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;last_good&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MultiLevelFallbackNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">primaryErr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Level 1: Try secondary source</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fetchFromURL</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.secondaryURL)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Using secondary source due to primary error: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%v</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, primaryErr)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Level 2: Try cache</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cached, ok </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.cache.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Load</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;last_good&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); ok {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Using cached data due to all sources failing&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cached, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Level 3: Return minimal default</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;All fallbacks exhausted, returning minimal response&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;unavailable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Service temporarily unavailable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTry multiple fallback strategies:\ntype MultiLevelFallbackNode struct {\n    *flyt.BaseNode\n    primaryURL   string\n    secondaryURL string\n    cache        sync.Map\n}\n \nfunc (n *MultiLevelFallbackNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Try primary source\n    data, err := fetchFromURL(n.primaryURL)\n    if err == nil {\n        n.cache.Store(&quot;last_good&quot;, data)\n        return data, nil\n    }\n    \n    return nil, err\n}\n \nfunc (n *MultiLevelFallbackNode) ExecFallback(prepResult any, primaryErr error) (any, error) {\n    // Level 1: Try secondary source\n    data, err := fetchFromURL(n.secondaryURL)\n    if err == nil {\n        log.Printf(&quot;Using secondary source due to primary error: %v&quot;, primaryErr)\n        return data, nil\n    }\n    \n    // Level 2: Try cache\n    if cached, ok := n.cache.Load(&quot;last_good&quot;); ok {\n        log.Printf(&quot;Using cached data due to all sources failing&quot;)\n        return cached, nil\n    }\n    \n    // Level 3: Return minimal default\n    log.Printf(&quot;All fallbacks exhausted, returning minimal response&quot;)\n    return map[string]any{\n        &quot;status&quot;: &quot;unavailable&quot;,\n        &quot;message&quot;: &quot;Service temporarily unavailable&quot;,\n    }, nil\n}\n","title":"Multi-Level Fallback","titles":["Fallback on Failure"]},"266":{"href":"/patterns/fallback#partial-fallback","html":"\n<p>Return partial results when complete processing fails:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BatchProcessorNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results []</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errors  []</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BatchProcessorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    items </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> prepResult.([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(items))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> make</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _, item </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> range</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> items {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> processItem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(item)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            n.errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.errors, err)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            continue</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.results </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.results, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.errors) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;processing failed: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> errors&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.errors))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.results, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BatchProcessorNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return partial results</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;partial_results&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: n.results,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;success_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:   </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.results),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;error_count&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:     </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.errors),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;errors&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:          n.errors,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:          </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;partial_success&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nReturn partial results when complete processing fails:\ntype BatchProcessorNode struct {\n    *flyt.BaseNode\n    results []Result\n    errors  []error\n}\n \nfunc (n *BatchProcessorNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    items := prepResult.([]Item)\n    n.results = make([]Result, 0, len(items))\n    n.errors = make([]error, 0)\n    \n    for _, item := range items {\n        result, err := processItem(item)\n        if err != nil {\n            n.errors = append(n.errors, err)\n            continue\n        }\n        n.results = append(n.results, result)\n    }\n    \n    if len(n.errors) &gt; 0 {\n        return nil, fmt.Errorf(&quot;processing failed: %d errors&quot;, len(n.errors))\n    }\n    \n    return n.results, nil\n}\n \nfunc (n *BatchProcessorNode) ExecFallback(prepResult any, err error) (any, error) {\n    // Return partial results\n    return map[string]any{\n        &quot;partial_results&quot;: n.results,\n        &quot;success_count&quot;:   len(n.results),\n        &quot;error_count&quot;:     len(n.errors),\n        &quot;errors&quot;:          n.errors,\n        &quot;status&quot;:          &quot;partial_success&quot;,\n    }, nil\n}\n","title":"Partial Fallback","titles":["Fallback on Failure"]},"267":{"href":"/patterns/fallback#circuit-breaker-fallback","html":"\n<p>Prevent cascading failures:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CircuitBreakerNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    failures    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    lastFailure </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    threshold   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    timeout     </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Duration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fallbackMsg </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Exec</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">ctx</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Check if circuit is open</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isCircuitOpen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fmt.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Errorf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;circuit breaker open&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    result, err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callService</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(prepResult)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> err </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">recordFailure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, err</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isCircuitOpen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Return cached or default response immediately</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;circuit_open&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: n.fallbackMsg,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;retry_after&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: n.timeout </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastFailure),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Circuit not open, but request failed</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;degraded&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Service temporarily unavailable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isCircuitOpen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.threshold </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Since</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.lastFailure) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.timeout</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">recordFailure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.failures</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.lastFailure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CircuitBreakerNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.failures </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPrevent cascading failures:\ntype CircuitBreakerNode struct {\n    *flyt.BaseNode\n    failures    int\n    lastFailure time.Time\n    threshold   int\n    timeout     time.Duration\n    fallbackMsg string\n}\n \nfunc (n *CircuitBreakerNode) Exec(ctx context.Context, prepResult any) (any, error) {\n    // Check if circuit is open\n    if n.isCircuitOpen() {\n        return nil, fmt.Errorf(&quot;circuit breaker open&quot;)\n    }\n    \n    result, err := callService(prepResult)\n    if err != nil {\n        n.recordFailure()\n        return nil, err\n    }\n    \n    n.reset()\n    return result, nil\n}\n \nfunc (n *CircuitBreakerNode) ExecFallback(prepResult any, err error) (any, error) {\n    if n.isCircuitOpen() {\n        // Return cached or default response immediately\n        return map[string]any{\n            &quot;status&quot;: &quot;circuit_open&quot;,\n            &quot;message&quot;: n.fallbackMsg,\n            &quot;retry_after&quot;: n.timeout - time.Since(n.lastFailure),\n        }, nil\n    }\n    \n    // Circuit not open, but request failed\n    return map[string]any{\n        &quot;status&quot;: &quot;degraded&quot;,\n        &quot;message&quot;: &quot;Service temporarily unavailable&quot;,\n    }, nil\n}\n \nfunc (n *CircuitBreakerNode) isCircuitOpen() bool {\n    return n.failures &gt;= n.threshold &amp;&amp; \n           time.Since(n.lastFailure) &lt; n.timeout\n}\n \nfunc (n *CircuitBreakerNode) recordFailure() {\n    n.failures++\n    n.lastFailure = time.Now()\n}\n \nfunc (n *CircuitBreakerNode) reset() {\n    n.failures = 0\n}\n","title":"Circuit Breaker Fallback","titles":["Fallback on Failure"]},"268":{"href":"/patterns/fallback#fallback-with-metrics","html":"\n<p>Track fallback usage:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MetricsFallbackNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    *</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">flyt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BaseNode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    primaryCalls   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fallbackCalls  </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">int64</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    lastFallback   </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Time</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MetricsFallbackNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">AddInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.fallbackCalls, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    n.lastFallback </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> time.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Log metrics</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    total </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.primaryCalls) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> atomic.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">LoadInt64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">n.fallbackCalls)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fallbackRate </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(n.fallbackCalls) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> float64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(total) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    log.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Printf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Fallback metrics - Rate: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%.2f%%</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">, Total fallbacks: </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">%d</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        fallbackRate, n.fallbackCalls)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return fallback data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getDefaultResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTrack fallback usage:\ntype MetricsFallbackNode struct {\n    *flyt.BaseNode\n    primaryCalls   int64\n    fallbackCalls  int64\n    lastFallback   time.Time\n}\n \nfunc (n *MetricsFallbackNode) ExecFallback(prepResult any, err error) (any, error) {\n    atomic.AddInt64(&amp;n.fallbackCalls, 1)\n    n.lastFallback = time.Now()\n    \n    // Log metrics\n    total := atomic.LoadInt64(&amp;n.primaryCalls) + atomic.LoadInt64(&amp;n.fallbackCalls)\n    fallbackRate := float64(n.fallbackCalls) / float64(total) * 100\n    \n    log.Printf(&quot;Fallback metrics - Rate: %.2f%%, Total fallbacks: %d&quot;, \n        fallbackRate, n.fallbackCalls)\n    \n    // Return fallback data\n    return getDefaultResponse(), nil\n}\n","title":"Fallback with Metrics","titles":["Fallback on Failure"]},"269":{"href":"/patterns/fallback#conditional-fallback","html":"\n<p>Different fallbacks based on error type:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">func</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">n </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ConditionalFallbackNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ExecFallback</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">prepResult</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">err</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Is</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err, ErrTimeout):</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // For timeouts, return cached data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> n.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCachedResponse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Is</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err, ErrRateLimit):</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // For rate limits, return throttled message</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;rate_limited&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;retry_after&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">60</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Is</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(err, ErrNotFound):</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // For not found, return empty result</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;found&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Generic fallback</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">any</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;status&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Service unavailable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nDifferent fallbacks based on error type:\nfunc (n *ConditionalFallbackNode) ExecFallback(prepResult any, err error) (any, error) {\n    switch {\n    case errors.Is(err, ErrTimeout):\n        // For timeouts, return cached data\n        return n.getCachedResponse(), nil\n        \n    case errors.Is(err, ErrRateLimit):\n        // For rate limits, return throttled message\n        return map[string]any{\n            &quot;error&quot;: &quot;rate_limited&quot;,\n            &quot;retry_after&quot;: 60,\n        }, nil\n        \n    case errors.Is(err, ErrNotFound):\n        // For not found, return empty result\n        return map[string]any{\n            &quot;found&quot;: false,\n            &quot;data&quot;: nil,\n        }, nil\n        \n    default:\n        // Generic fallback\n        return map[string]any{\n            &quot;status&quot;: &quot;error&quot;,\n            &quot;message&quot;: &quot;Service unavailable&quot;,\n        }, nil\n    }\n}\n","title":"Conditional Fallback","titles":["Fallback on Failure"]},"270":{"href":"/patterns/fallback#best-practices","html":"\n<ol>\n<li><strong>Log Fallback Usage</strong>: Track when and why fallbacks are triggered</li>\n<li><strong>Monitor Fallback Rates</strong>: High rates indicate system issues</li>\n<li><strong>Set Appropriate Timeouts</strong>: Don&#x27;t wait too long before falling back</li>\n<li><strong>Provide Meaningful Defaults</strong>: Fallback data should be useful</li>\n<li><strong>Document Fallback Behavior</strong>: Make it clear what happens during failures</li>\n<li><strong>Test Fallback Paths</strong>: Ensure fallbacks work correctly</li>\n<li><strong>Consider User Experience</strong>: Degraded service is better than no service</li>\n</ol>\n","isPage":false,"text":"\n\nLog Fallback Usage: Track when and why fallbacks are triggered\nMonitor Fallback Rates: High rates indicate system issues\nSet Appropriate Timeouts: Don&#x27;t wait too long before falling back\nProvide Meaningful Defaults: Fallback data should be useful\nDocument Fallback Behavior: Make it clear what happens during failures\nTest Fallback Paths: Ensure fallbacks work correctly\nConsider User Experience: Degraded service is better than no service\n\n","title":"Best Practices","titles":["Fallback on Failure"]},"271":{"href":"/patterns/fallback#next-steps","html":"\n<ul>\n<li><a href=\"/patterns/error-handling\">Error Handling</a> - Comprehensive error strategies</li>\n<li><a href=\"/patterns/branching\">Conditional Branching</a> - Dynamic flow control</li>\n<li><a href=\"/patterns/error-handling#circuit-breaker-pattern\">Circuit Breaker Pattern</a> - Prevent cascading failures</li>\n</ul>","isPage":false,"text":"\n\nError Handling - Comprehensive error strategies\nConditional Branching - Dynamic flow control\nCircuit Breaker Pattern - Prevent cascading failures\n","title":"Next Steps","titles":["Fallback on Failure"]}},"dirtCount":0,"index":[["8s",{"2":{"251":1}}],["xlargehandler",{"2":{"228":1}}],["xlarge",{"2":{"228":2}}],["x27",{"0":{"216":1},"1":{"217":1,"218":1,"219":1},"2":{"66":1,"73":1,"81":1,"127":1,"129":1,"169":1,"207":1,"210":1,"211":1,"213":1,"247":1,"256":2,"259":1,"270":1}}],["yes",{"2":{"227":1}}],["you",{"2":{"66":1,"116":1,"124":1,"157":1,"169":2,"172":1,"204":1,"206":1,"207":1,"213":1}}],["your",{"0":{"203":1,"207":1},"1":{"208":1,"209":1},"2":{"31":1,"44":1,"99":1,"141":1,"158":1,"181":1,"205":1,"206":1,"213":1,"219":1,"221":1,"223":2,"261":1}}],["│",{"2":{"217":4}}],["├──",{"2":{"217":6}}],["60",{"2":{"191":1,"269":1}}],["99",{"2":{"180":4}}],["└──",{"2":{"217":3}}],["└─",{"2":{"158":1}}],["zero",{"2":{"106":2,"180":1}}],["known",{"2":{"169":1}}],["kind",{"2":{"98":1}}],["k",{"2":{"88":2,"104":2,"199":2}}],["keep",{"2":{"49":1,"81":1,"94":1,"114":1,"236":1}}],["keyerrorcount",{"2":{"195":1}}],["keyresults",{"2":{"195":1}}],["keyauthtoken",{"2":{"195":1}}],["keyuserid",{"2":{"195":1}}],["keys",{"2":{"23":2,"156":1,"182":3,"195":1,"198":2}}],["key",{"0":{"55":1,"195":1},"2":{"22":1,"112":4,"162":1,"176":1,"182":3,"183":2,"187":2,"197":1,"219":2,"239":1,"242":2,"246":2,"253":6,"264":5}}],["+",{"2":{"61":1,"103":1,"138":1,"210":1,"232":1,"234":2,"235":1,"255":1,"268":1}}],["+=",{"2":{"36":1,"50":1,"103":1,"124":1,"231":2,"235":1}}],["json",{"2":{"230":1,"239":1,"242":5,"245":1}}],["j",{"2":{"124":1}}],["join",{"2":{"65":1}}],["jitternode",{"2":{"255":1}}],["jitter",{"0":{"255":1},"2":{"61":4,"255":2}}],["justified",{"2":{"169":1}}],["just",{"2":{"50":1}}],["quick",{"0":{"206":1,"215":1},"1":{"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1},"2":{"205":1}}],["quickly",{"2":{"67":1}}],["queue",{"0":{"121":1},"2":{"64":5,"121":4}}],["querydb",{"2":{"246":1}}],["querycontext",{"2":{"60":1,"170":1,"241":1}}],["queryrequest",{"2":{"60":1}}],["query",{"2":{"60":3,"86":3,"170":2,"241":2,"246":1}}],["quot",{"2":{"2":4,"4":4,"5":10,"7":2,"8":2,"19":4,"20":4,"22":10,"23":8,"25":4,"28":6,"31":32,"33":20,"34":22,"35":12,"36":34,"37":24,"38":24,"39":30,"43":22,"45":10,"46":16,"48":4,"49":6,"50":10,"51":14,"52":6,"53":12,"58":8,"59":4,"60":2,"62":2,"63":14,"65":10,"66":14,"72":2,"74":2,"75":6,"77":14,"78":6,"79":2,"84":4,"85":4,"86":2,"87":6,"88":2,"89":6,"90":14,"91":16,"92":6,"93":6,"97":12,"100":2,"102":18,"107":8,"108":2,"109":6,"113":2,"117":2,"122":2,"123":2,"125":10,"126":2,"130":8,"131":2,"133":8,"134":12,"135":8,"137":4,"138":8,"139":20,"140":2,"141":8,"145":6,"148":4,"149":4,"152":4,"153":6,"154":4,"155":2,"156":10,"158":4,"162":12,"163":2,"164":6,"167":16,"168":16,"173":2,"179":10,"180":26,"181":30,"182":4,"183":2,"184":16,"185":4,"187":18,"188":4,"189":18,"190":14,"191":20,"192":14,"194":6,"195":8,"196":8,"197":4,"198":8,"199":6,"203":2,"204":12,"208":16,"209":6,"210":26,"211":6,"212":12,"219":22,"221":6,"222":4,"227":8,"228":16,"229":40,"231":6,"232":30,"233":24,"234":14,"235":14,"239":12,"240":2,"241":12,"242":28,"244":8,"246":10,"250":2,"251":2,"252":2,"253":8,"254":12,"256":2,"257":10,"258":2,"263":12,"264":12,"265":18,"266":14,"267":18,"268":2,"269":18}}],["||",{"2":{"36":1}}],["via",{"0":{"238":1},"1":{"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1}}],["visualizing",{"0":{"158":1}}],["ve",{"2":{"213":1}}],["verify",{"0":{"204":1},"2":{"204":1}}],["version",{"2":{"184":1,"223":1}}],["volumes",{"2":{"54":1}}],["vs",{"0":{"32":1,"44":1,"67":1},"2":{"259":1}}],["v",{"2":{"28":2,"31":2,"37":1,"39":1,"43":1,"46":1,"53":1,"63":1,"65":1,"88":2,"98":4,"104":2,"108":1,"109":1,"117":1,"122":1,"156":2,"183":1,"199":4,"210":1,"212":1,"244":1,"246":1,"250":1,"251":1,"253":1,"263":1,"264":2,"265":1}}],["variant",{"2":{"235":9}}],["variants",{"2":{"180":1,"242":1}}],["variables",{"2":{"223":1,"247":1}}],["various",{"2":{"97":1,"127":1,"169":1}}],["var",{"2":{"5":1,"20":1,"25":1,"31":2,"34":4,"35":2,"36":4,"38":2,"39":3,"43":1,"46":2,"48":3,"49":1,"52":2,"53":2,"62":1,"65":1,"66":1,"71":1,"76":1,"77":1,"92":1,"100":3,"101":1,"102":1,"103":1,"106":1,"110":2,"123":1,"162":1,"181":2,"185":1,"187":1,"194":1,"230":1,"239":1,"241":1,"242":2,"245":1,"254":2}}],["valueof",{"2":{"98":1}}],["value",{"2":{"25":2,"31":2,"34":1,"35":3,"36":11,"37":1,"38":2,"39":3,"43":2,"46":5,"49":3,"50":2,"51":1,"52":1,"53":4,"66":2,"106":4,"109":1,"112":2,"134":3,"167":1,"171":1,"176":1,"179":1,"183":2,"204":2,"210":1,"228":4,"242":2,"254":2,"263":2}}],["values",{"0":{"109":1},"2":{"3":1,"40":1,"59":12,"114":1,"179":1,"180":1,"184":1,"263":1}}],["val",{"2":{"5":3,"112":2,"204":2}}],["validitems",{"2":{"105":1}}],["validationflow",{"2":{"84":3}}],["validationrule",{"2":{"65":3}}],["validationnode",{"2":{"65":5,"133":4,"227":4}}],["validation",{"0":{"65":1},"2":{"7":1,"34":1,"65":1,"74":3,"84":1,"155":3,"217":1,"233":1}}],["validatetoken",{"2":{"85":1}}],["validateenabled",{"2":{"35":1}}],["validateorder",{"2":{"34":1}}],["validates",{"2":{"23":1}}],["validatenode",{"2":{"2":3,"72":2,"150":2,"154":3,"158":3,"233":4}}],["validate",{"2":{"2":1,"34":1,"35":1,"50":1,"65":2,"86":3,"92":1,"141":1,"158":1,"217":1,"233":4}}],["valid",{"2":{"2":1,"7":1,"65":1,"72":1,"74":1,"84":1,"85":1,"86":1,"133":2,"154":1,"155":1,"158":1,"227":2}}],["50",{"2":{"231":1}}],["5",{"0":{"198":1},"2":{"23":1,"34":1,"45":2,"46":1,"51":1,"53":2,"60":1,"61":2,"106":1,"110":1,"118":1,"172":1,"206":1,"231":1,"251":1,"252":1}}],["4s",{"2":{"251":1}}],["456",{"2":{"196":1}}],["4",{"0":{"197":1},"2":{"23":1,"34":1}}],["34",{"2":{"235":2}}],["3306",{"2":{"241":1}}],["33",{"2":{"235":4}}],["3",{"0":{"164":1,"196":1},"2":{"23":1,"31":1,"34":1,"39":1,"45":2,"46":1,"52":1,"61":3,"66":1,"73":1,"74":1,"86":1,"97":1,"100":1,"138":1,"167":1,"168":1,"171":5,"211":1,"212":1,"231":1,"232":1,"250":2,"256":1,"265":1}}],["30s",{"2":{"187":1}}],["30",{"2":{"11":1,"61":1,"66":1,"179":1,"212":1,"231":1,"239":1,"252":1,"258":1}}],["2f",{"2":{"268":1}}],["2s",{"2":{"251":1}}],["20",{"2":{"231":1}}],["21",{"2":{"201":1}}],["25",{"2":{"60":1}}],["24",{"2":{"38":1}}],["2",{"0":{"163":1,"195":1},"2":{"23":1,"31":1,"34":1,"46":2,"61":1,"64":1,"73":1,"74":1,"86":1,"97":1,"119":3,"171":5,"192":1,"211":1,"231":1,"251":1,"265":1}}],["later",{"2":{"201":1}}],["latency",{"2":{"63":7}}],["largehandler",{"2":{"134":1,"228":1}}],["large",{"2":{"134":2,"228":2}}],["lastfallback",{"2":{"268":2}}],["lastfailure",{"2":{"126":3,"252":3,"267":4}}],["last",{"2":{"110":1,"189":1,"190":1,"256":1,"257":1,"265":2}}],["lasterr",{"2":{"100":3}}],["lasterror",{"2":{"61":10,"256":2}}],["lazy",{"0":{"26":1}}],["learn",{"2":{"225":1}}],["let",{"2":{"207":1,"210":1,"211":1}}],["levels",{"2":{"94":1}}],["level",{"0":{"265":1},"2":{"74":3,"86":4,"128":1,"250":1,"265":3}}],["leverage",{"2":{"54":1,"66":1,"114":1}}],["len",{"2":{"25":1,"28":1,"31":2,"33":3,"34":2,"36":1,"37":6,"38":2,"39":5,"43":1,"45":1,"46":4,"48":1,"49":1,"50":1,"51":4,"52":1,"53":2,"59":2,"64":1,"65":1,"76":1,"98":2,"101":1,"103":3,"108":3,"118":1,"123":2,"124":3,"133":1,"182":1,"227":2,"254":4,"266":5}}],["linear",{"0":{"147":1}}],["list",{"2":{"141":1}}],["lightweight",{"2":{"80":1}}],["lifecycle",{"0":{"73":1,"161":1},"1":{"162":1,"163":1,"164":1},"2":{"160":1,"200":1,"213":1}}],["limits",{"2":{"54":1,"61":1,"259":1,"269":1}}],["limit",{"2":{"52":3,"120":2}}],["limiter",{"2":{"52":6,"120":6}}],["limiters",{"2":{"52":1}}],["limited",{"0":{"52":1,"120":1},"2":{"269":1}}],["like",{"2":{"43":1,"54":1,"55":1}}],["localhost",{"2":{"241":1}}],["lock",{"2":{"13":1,"59":1,"60":3,"108":2,"110":1,"112":1,"118":1,"119":1,"126":1,"173":1,"231":1,"240":1,"264":1}}],["look",{"2":{"230":1}}],["loops",{"0":{"232":1},"2":{"232":2}}],["loop",{"0":{"149":1},"2":{"149":1,"232":3}}],["logger",{"2":{"246":4}}],["loggedflow",{"2":{"78":1}}],["loggingnode",{"2":{"109":1}}],["logging",{"2":{"40":1,"68":1,"156":1}}],["logend",{"2":{"78":2}}],["logstart",{"2":{"78":3}}],["logic",{"2":{"31":1,"38":1,"58":2,"61":1,"67":1,"68":1,"69":1,"80":3,"157":1,"169":1,"172":1,"211":1,"221":1,"229":1,"236":1,"256":1}}],["log",{"2":{"28":4,"31":1,"33":1,"37":2,"38":1,"39":2,"40":1,"45":1,"46":1,"51":2,"54":1,"63":2,"78":2,"109":1,"145":1,"156":3,"219":3,"244":3,"246":1,"250":1,"251":1,"253":1,"254":1,"259":1,"263":1,"264":1,"265":3,"268":2,"270":1}}],["loadbalancer",{"2":{"231":4}}],["loads",{"2":{"127":1}}],["loadint32",{"2":{"126":1}}],["loadint64",{"2":{"63":3,"125":3,"268":2}}],["loading",{"0":{"26":1}}],["loaduserdata",{"2":{"26":1}}],["load",{"2":{"26":2,"119":4,"230":1,"231":1,"245":2,"253":1,"265":1}}],["longrunningoperation",{"2":{"258":1}}],["long",{"2":{"10":1,"40":1,"127":1,"270":1}}],["lt",{"2":{"10":1,"14":2,"36":1,"38":1,"46":1,"50":1,"53":5,"62":1,"64":4,"76":1,"98":1,"100":2,"101":2,"103":1,"106":3,"117":1,"119":2,"122":6,"123":2,"124":1,"126":1,"134":2,"138":1,"185":1,"211":1,"227":1,"228":3,"231":1,"232":1,"235":1,"252":1,"257":1,"258":5,"267":1}}],["16s",{"2":{"251":1}}],["1s",{"2":{"251":1}}],["123",{"2":{"179":1,"181":1,"196":1,"239":1}}],["1000",{"2":{"228":1,"255":1}}],["100",{"2":{"45":1,"103":1,"117":1,"134":1,"227":1,"228":1,"235":1,"268":1}}],["10",{"2":{"14":2,"25":1,"32":2,"37":1,"44":2,"49":1,"52":2,"101":1,"117":2,"134":1,"185":1,"191":1,"228":1,"241":1}}],["1",{"0":{"162":1,"194":1},"2":{"5":1,"23":1,"31":1,"34":1,"36":1,"46":1,"52":1,"61":1,"63":3,"64":1,"73":1,"74":1,"76":1,"86":1,"97":1,"100":1,"101":1,"102":1,"106":1,"108":1,"119":2,"120":1,"122":2,"123":1,"125":3,"126":1,"138":1,"180":2,"184":1,"185":1,"188":1,"192":1,"194":2,"201":1,"232":1,"250":1,"265":1,"268":1}}],["0",{"2":{"5":1,"14":2,"31":1,"32":2,"33":1,"34":1,"36":1,"37":2,"39":1,"44":2,"45":2,"46":4,"49":2,"50":6,"51":2,"53":1,"59":2,"61":4,"64":1,"65":1,"76":2,"98":1,"100":1,"102":1,"103":1,"105":1,"107":1,"108":2,"117":1,"124":1,"126":2,"133":1,"167":1,"168":1,"180":3,"184":1,"185":1,"189":1,"194":1,"211":1,"227":1,"231":2,"235":1,"240":1,"251":1,"252":2,"254":1,"256":1,"266":3,"267":1}}],["phases",{"2":{"161":1}}],["phase",{"0":{"162":1,"163":1,"164":1},"2":{"129":1,"130":1,"162":2,"163":2,"164":1}}],["push",{"2":{"121":1}}],["purpose",{"2":{"94":1,"141":1}}],["purposes",{"2":{"81":1}}],["p",{"2":{"107":6,"119":16,"120":3,"121":9,"122":4,"125":12,"126":17}}],["permanent",{"2":{"256":1,"259":1}}],["percentage",{"2":{"235":2}}],["persists",{"2":{"176":1}}],["per",{"2":{"46":1,"52":1}}],["perform",{"2":{"163":1}}],["performs",{"2":{"163":1}}],["performoperation",{"2":{"61":1,"232":1}}],["performance",{"0":{"24":1,"80":1},"1":{"25":1,"26":1},"2":{"80":1,"81":1,"125":1,"127":1}}],["perfect",{"2":{"30":1,"188":1}}],["pending",{"2":{"38":2,"125":1}}],["pipelines",{"2":{"233":3}}],["pipelinenode",{"2":{"62":4}}],["pipelinebatchnode",{"2":{"34":1}}],["pipeline",{"0":{"34":1,"107":1,"154":1,"233":1},"2":{"34":2,"74":6,"76":3,"107":8,"154":1,"233":1}}],["port",{"2":{"241":3}}],["point",{"2":{"217":1}}],["pop",{"2":{"121":1}}],["powerful",{"2":{"70":1}}],["pow",{"2":{"61":1,"251":1}}],["position",{"2":{"231":2}}],["possible",{"2":{"25":1,"141":2,"236":2,"259":1,"261":1}}],["postnode",{"2":{"242":1}}],["postgres",{"2":{"60":1}}],["postfunc",{"2":{"32":2,"44":2}}],["post",{"0":{"164":1},"2":{"22":1,"40":1,"50":1,"54":1,"58":2,"65":1,"66":1,"71":1,"73":2,"79":1,"129":1,"130":2,"156":1,"164":2,"188":1,"190":1,"229":1,"230":1,"231":1,"234":1,"242":1,"244":1,"250":1,"257":1}}],["pools",{"2":{"123":1,"127":1,"128":1}}],["pool",{"0":{"116":1,"117":1,"118":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1},"1":{"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1},"2":{"17":1,"41":1,"56":1,"60":4,"69":1,"117":6,"118":5,"119":6,"120":5,"121":3,"122":3,"123":4,"124":5,"125":3,"126":2,"241":1}}],["pooling",{"0":{"17":1}}],["paused",{"2":{"229":2}}],["pause",{"2":{"229":1}}],["package",{"2":{"204":1,"208":1,"210":1,"219":1,"221":1,"222":1}}],["password",{"2":{"241":3}}],["pass",{"2":{"35":1,"46":1,"50":1,"88":1,"239":1}}],["part2",{"2":{"91":2}}],["part1",{"2":{"91":2}}],["partial",{"0":{"266":1},"2":{"31":2,"46":1,"254":1,"266":4}}],["parentdata",{"2":{"88":2}}],["parent",{"2":{"88":4}}],["parentcontext",{"2":{"88":3}}],["params",{"2":{"31":4,"192":2}}],["parameters",{"2":{"31":1,"114":1,"192":1}}],["parameter",{"2":{"30":1,"31":4,"32":1,"192":2}}],["parallelprocessingnode",{"2":{"123":5}}],["parallelmap",{"2":{"101":2}}],["parallel",{"0":{"91":1,"101":1},"2":{"30":1,"32":1,"91":4}}],["parsenode",{"2":{"7":1}}],["path2",{"2":{"152":1}}],["path1",{"2":{"152":1}}],["path",{"2":{"143":1,"148":2,"198":2,"231":1,"236":1}}],["paths",{"2":{"8":1,"148":1,"152":1,"157":1,"228":1,"231":1,"236":2,"270":1}}],["pattern",{"0":{"48":1,"49":1,"50":1,"137":1,"138":1,"139":1,"152":1,"154":1,"229":1,"239":1,"244":1,"252":1},"2":{"116":1,"271":1}}],["patterns",{"0":{"47":1,"77":1,"136":1,"151":1,"186":1},"1":{"48":1,"49":1,"50":1,"137":1,"138":1,"139":1,"152":1,"153":1,"154":1,"187":1,"188":1,"189":1,"190":1},"2":{"29":1,"56":1,"70":1,"90":1,"142":1,"157":1,"175":1,"225":2,"248":1}}],["payment",{"2":{"23":1}}],["panic",{"2":{"5":1,"208":1,"209":1,"210":1}}],["panics",{"2":{"5":2,"127":2,"181":1}}],["places",{"2":{"7":1,"85":1}}],["prevent",{"2":{"126":1,"252":1,"255":1,"258":1,"267":1,"271":1}}],["previousnode",{"2":{"92":3}}],["previous",{"2":{"76":3}}],["predicate",{"2":{"105":2}}],["pre",{"2":{"46":2,"205":1,"243":1}}],["preparation",{"2":{"58":1,"162":1}}],["prepares",{"2":{"73":1,"162":1}}],["prepared",{"2":{"60":7}}],["prepare",{"2":{"31":1,"58":1,"60":1,"162":1}}],["prepfunc",{"2":{"32":2,"44":2}}],["prep",{"0":{"162":1},"2":{"5":3,"22":1,"26":1,"43":1,"58":1,"66":1,"71":1,"73":3,"79":1,"156":1,"162":1,"187":2,"244":2}}],["prepresult",{"2":{"2":1,"3":2,"10":2,"11":2,"13":1,"16":2,"28":2,"58":3,"59":2,"60":2,"61":2,"62":2,"63":2,"64":2,"65":4,"66":3,"71":2,"75":3,"77":4,"78":4,"79":4,"80":4,"85":3,"87":3,"88":2,"90":4,"91":2,"93":1,"100":2,"109":3,"123":2,"130":1,"133":3,"134":3,"137":1,"138":1,"139":1,"140":1,"156":3,"163":2,"164":1,"167":3,"168":3,"170":2,"172":1,"173":1,"188":1,"190":2,"208":2,"209":1,"210":4,"211":1,"212":2,"221":1,"227":3,"228":3,"229":1,"230":1,"231":1,"232":3,"233":3,"234":1,"235":3,"239":1,"240":1,"241":2,"242":2,"243":2,"244":4,"245":2,"246":2,"250":2,"251":1,"252":1,"253":4,"256":1,"257":2,"258":1,"262":1,"263":2,"264":4,"265":2,"266":3,"267":3,"268":1,"269":1}}],["primarycalls",{"2":{"268":2}}],["primaryerr",{"2":{"265":2}}],["primaryurl",{"2":{"265":2}}],["primary",{"2":{"263":2,"265":2}}],["price",{"2":{"180":4}}],["println",{"2":{"43":1,"199":2,"208":2,"209":1,"210":2,"246":1}}],["printf",{"2":{"28":3,"31":1,"33":1,"37":2,"38":1,"39":2,"45":1,"46":1,"51":2,"63":2,"78":2,"109":1,"117":1,"156":3,"179":1,"183":1,"199":1,"204":1,"208":1,"209":1,"210":1,"211":1,"212":1,"219":1,"244":3,"246":1,"250":1,"251":1,"253":1,"254":1,"263":1,"264":1,"265":3,"268":1}}],["priorityqueue",{"2":{"121":1}}],["priorityworkerpool",{"2":{"121":5}}],["prioritytask",{"2":{"121":2}}],["priority",{"0":{"121":1},"2":{"38":2,"121":5}}],["problems",{"2":{"259":1}}],["prometheus",{"2":{"246":1}}],["project",{"0":{"214":1,"217":1},"1":{"215":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1},"2":{"205":2,"214":1,"215":3,"217":2}}],["projects",{"2":{"114":1}}],["provide",{"2":{"68":1,"114":1,"129":1,"257":1,"259":1,"261":1,"270":1}}],["provides",{"2":{"46":1,"102":1,"124":1,"166":1,"172":1,"176":1,"216":1}}],["prototyping",{"2":{"67":1}}],["protect",{"2":{"13":1}}],["production",{"2":{"54":1,"184":1,"224":1}}],["proper",{"2":{"81":1,"249":1}}],["properly",{"2":{"40":1,"68":1,"247":1}}],["propagation",{"0":{"89":1},"2":{"40":1,"81":1}}],["progressbatchnode",{"2":{"37":1}}],["progress",{"0":{"37":1,"51":1},"2":{"37":1,"40":3,"51":1,"54":1}}],["processmessage",{"2":{"167":1,"168":1}}],["processdata",{"2":{"163":1,"171":3,"243":1}}],["process2",{"2":{"152":2}}],["process1",{"2":{"152":2}}],["processwithworkerpool",{"2":{"118":1}}],["processwithcontext",{"2":{"88":1}}],["processwithconfig",{"2":{"58":1,"66":1,"192":1,"245":1}}],["processchunk",{"2":{"103":1}}],["processconfig",{"2":{"35":1}}],["processflow",{"2":{"78":2}}],["processfile",{"2":{"16":1}}],["processbatcheswithpool",{"2":{"124":1}}],["processbatch",{"2":{"59":2,"124":1}}],["processtaskwithcontext",{"2":{"53":1}}],["processtask",{"2":{"37":1,"64":1,"117":1}}],["processor",{"2":{"244":1}}],["processorder",{"2":{"34":1}}],["processoptions",{"2":{"35":1}}],["processuserdata",{"2":{"33":1}}],["processuser",{"2":{"31":1,"45":1}}],["processeddata",{"2":{"66":1}}],["processed++",{"2":{"51":1}}],["processedorder",{"2":{"34":3}}],["processed",{"2":{"25":5,"28":1,"32":1,"33":3,"34":5,"38":7,"43":6,"45":3,"51":4,"66":1,"167":2,"198":2,"210":1}}],["processes",{"2":{"23":2,"31":1,"207":1}}],["processingpipeline",{"2":{"78":1}}],["processingflowfactory",{"2":{"76":2}}],["processingflow",{"2":{"72":5}}],["processingmode",{"2":{"38":3}}],["processing",{"0":{"34":1,"38":1,"42":1,"43":1,"47":1,"52":1,"124":1,"191":1},"1":{"43":1,"44":1,"45":1,"46":1,"47":1,"48":2,"49":2,"50":2,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1},"2":{"25":2,"31":1,"34":4,"35":2,"36":1,"37":1,"38":1,"39":1,"41":3,"43":2,"44":2,"45":3,"46":1,"51":2,"52":1,"56":1,"58":1,"80":1,"91":1,"97":2,"103":1,"109":1,"116":3,"120":1,"123":1,"124":2,"128":1,"139":2,"164":1,"191":1,"195":1,"200":1,"208":2,"209":1,"210":1,"217":1,"229":3,"246":1,"254":1,"266":2}}],["processitem",{"2":{"10":1,"38":1,"51":1,"101":1,"108":1,"118":1,"123":1,"254":1,"266":1}}],["process",{"2":{"16":1,"25":4,"28":1,"30":1,"31":3,"32":3,"33":2,"34":1,"35":2,"37":1,"38":2,"42":1,"43":1,"44":1,"49":1,"51":1,"59":2,"88":1,"92":1,"109":1,"117":1,"121":1,"124":1,"139":1,"141":1,"145":1,"155":2,"158":1,"159":1,"167":1,"168":1,"170":1,"191":1,"192":2,"217":1,"241":1,"243":1,"254":1,"257":1}}],["processnode",{"2":{"8":1,"10":1,"26":1,"28":4,"77":3,"84":1,"90":3,"130":1,"133":1,"144":3,"149":3,"153":3,"158":2,"190":1,"210":2,"222":2,"227":1,"244":1}}],["practices",{"0":{"0":1,"40":1,"54":1,"68":1,"81":1,"94":1,"114":1,"127":1,"141":1,"157":1,"174":1,"193":1,"223":1,"236":1,"247":1,"259":1,"270":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"194":1,"195":1,"196":1,"197":1,"198":1},"2":{"29":1,"115":1,"128":1,"200":2,"248":1,"260":1}}],["http",{"2":{"239":2,"242":2}}],["https",{"2":{"187":1,"215":1,"219":1,"239":1}}],["h",{"2":{"235":3}}],["hits",{"2":{"246":1}}],["history",{"2":{"215":1}}],["hierarchies",{"2":{"86":1}}],["hierarchical",{"0":{"86":1}}],["high",{"2":{"38":1,"128":1,"259":1,"270":1}}],["herd",{"2":{"255":1}}],["here",{"2":{"221":1}}],["headers",{"2":{"242":3}}],["header",{"2":{"239":1,"242":1}}],["heavy",{"2":{"45":1,"80":1}}],["help",{"2":{"206":1}}],["helper",{"0":{"67":1,"100":1,"109":1,"166":1},"1":{"167":1,"168":1},"2":{"67":1,"96":1,"166":1,"182":1}}],["helpers",{"2":{"5":1,"176":1}}],["hello",{"2":{"107":2,"208":2,"209":1}}],["host",{"2":{"241":3}}],["hour",{"2":{"38":1,"246":1}}],["how",{"0":{"130":1},"2":{"32":1,"73":1}}],["happens",{"2":{"270":1}}],["hanging",{"2":{"258":1}}],["handles",{"2":{"43":1,"55":1,"124":1,"164":1}}],["handle",{"2":{"39":1,"40":1,"41":1,"54":1,"56":1,"60":1,"64":1,"81":1,"89":1,"114":1,"122":1,"127":1,"141":1,"169":1,"180":1,"181":1,"194":1,"236":1,"247":1,"250":1,"260":1}}],["handler",{"2":{"8":1,"89":1}}],["handling",{"0":{"4":1,"9":1,"46":1,"153":1,"211":1,"249":1,"258":1},"1":{"10":1,"11":1,"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1},"2":{"8":1,"30":1,"40":1,"41":1,"46":1,"54":1,"55":2,"56":1,"68":1,"153":1,"167":1,"171":1,"174":2,"211":1,"213":1,"218":1,"247":1,"248":1,"249":1,"260":1,"271":1}}],["have",{"2":{"81":1,"94":1,"141":1,"236":1}}],["hash",{"2":{"235":3}}],["has",{"2":{"34":1,"39":1,"53":1,"161":1,"182":1,"192":1}}],["about",{"2":{"264":1}}],["abort",{"2":{"89":1}}],["abnode",{"2":{"235":1}}],["ab",{"2":{"235":1}}],["audit",{"2":{"74":2,"86":2}}],["authorization",{"2":{"239":1}}],["authentication",{"2":{"85":1}}],["auth",{"2":{"61":1,"74":3,"86":3,"195":1,"197":1}}],["automatic",{"2":{"55":1}}],["automatically",{"2":{"43":2,"124":1,"180":1,"181":1}}],["afterfunc",{"2":{"110":1}}],["after",{"2":{"60":1,"61":1,"91":1,"100":1,"122":2,"126":1,"191":1,"247":1,"250":2,"252":1,"267":1,"269":1}}],["affect",{"2":{"40":1}}],["args",{"2":{"60":1}}],["are",{"2":{"32":1,"55":1,"68":1,"114":1,"129":1,"160":1,"236":1,"239":1,"247":1,"270":1}}],["age",{"2":{"48":2,"264":5}}],["aggregator",{"0":{"108":1},"2":{"108":3}}],["aggregatingbatchnode",{"2":{"36":1}}],["aggregation",{"0":{"36":1,"50":1,"254":1}}],["aggregated",{"2":{"36":6,"43":1}}],["aggregatenode",{"2":{"31":1}}],["aggregate",{"2":{"25":1,"31":1,"36":2,"50":1,"254":1}}],["assignment",{"2":{"235":1}}],["assert",{"2":{"19":3,"20":3,"79":4,"93":2}}],["assertions",{"2":{"180":1,"194":1}}],["assertion",{"2":{"5":1}}],["as",{"0":{"70":1,"73":1,"79":1,"150":1},"1":{"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1},"2":{"72":2,"73":2,"76":1,"79":2,"80":2,"81":3,"84":1,"95":1,"150":1,"157":1,"176":1,"181":1}}],["asyncnode",{"2":{"64":6}}],["asynchronous",{"2":{"64":1}}],["async",{"0":{"64":1}}],["asintor",{"2":{"46":2,"49":2,"50":2,"66":2}}],["asmapor",{"2":{"45":1,"66":1,"167":1,"210":1}}],["avg",{"2":{"63":1,"125":1}}],["available",{"2":{"60":1,"61":1,"121":1,"264":2}}],["average",{"2":{"36":1,"50":1}}],["avoid",{"0":{"14":1},"2":{"5":1,"94":1,"127":1,"141":1,"180":1,"194":1,"236":1,"259":1}}],["an",{"2":{"130":1,"135":1}}],["anonymous",{"2":{"102":1,"180":2}}],["another",{"2":{"84":1}}],["and",{"0":{"169":1,"179":1},"2":{"36":1,"39":1,"43":1,"50":1,"54":1,"55":2,"57":1,"68":2,"81":2,"83":1,"96":1,"114":1,"117":1,"124":1,"127":2,"144":1,"145":1,"150":1,"152":1,"162":2,"164":1,"167":2,"168":2,"169":1,"179":1,"180":2,"208":1,"209":1,"211":1,"219":1,"223":3,"233":1,"236":2,"238":1,"239":1,"249":1,"254":1,"261":1,"270":1}}],["anywhere",{"2":{"70":1}}],["any",{"0":{"168":1,"169":1,"209":1},"2":{"2":2,"3":2,"5":3,"10":2,"11":2,"13":2,"16":2,"25":1,"26":1,"28":2,"31":4,"33":1,"34":2,"35":1,"36":6,"37":1,"38":2,"39":5,"43":1,"53":2,"58":4,"59":7,"60":2,"61":2,"62":6,"63":4,"64":2,"65":4,"66":4,"71":4,"75":3,"77":4,"78":4,"79":2,"80":4,"85":4,"87":3,"88":4,"90":4,"91":4,"93":2,"97":3,"98":5,"100":3,"101":2,"103":1,"104":3,"105":1,"106":1,"107":2,"109":2,"112":4,"113":4,"123":2,"130":1,"133":3,"134":3,"137":1,"138":1,"139":1,"140":2,"156":4,"162":2,"163":3,"164":1,"167":1,"168":8,"169":2,"170":2,"171":6,"172":2,"173":2,"179":1,"181":1,"184":1,"187":3,"188":2,"190":2,"191":1,"192":2,"209":3,"211":2,"212":5,"221":2,"227":3,"228":3,"229":1,"230":1,"231":1,"232":7,"233":4,"234":1,"235":4,"239":3,"240":2,"241":3,"242":6,"243":2,"244":4,"245":5,"246":2,"250":4,"251":2,"252":2,"253":5,"254":1,"256":2,"257":2,"258":3,"262":2,"263":5,"264":6,"265":5,"266":5,"267":6,"268":2,"269":5}}],["adjust",{"2":{"119":1}}],["admin",{"2":{"87":1,"181":1}}],["adminnode",{"2":{"85":2}}],["adminflow",{"2":{"85":2}}],["advanced",{"0":{"45":1},"2":{"29":2,"57":1,"142":1,"159":1,"175":1,"237":1,"248":1}}],["adding",{"0":{"211":1,"221":1}}],["addint32",{"2":{"119":2,"126":1}}],["addint64",{"2":{"63":4,"125":4,"268":1}}],["additional",{"2":{"78":1,"182":1,"244":1}}],["add",{"0":{"28":1},"2":{"40":1,"59":1,"63":1,"64":1,"68":1,"101":1,"107":4,"108":2,"123":1,"145":1,"156":1,"172":1,"185":1,"211":1,"222":1,"223":2,"255":1,"264":1}}],["a",{"0":{"177":1,"210":1,"235":1},"2":{"25":1,"31":2,"32":1,"34":2,"43":1,"70":1,"72":4,"73":2,"79":2,"84":3,"94":1,"97":1,"116":1,"117":2,"124":1,"129":2,"130":1,"141":2,"144":1,"145":2,"148":1,"150":1,"160":2,"176":2,"179":1,"182":1,"183":1,"192":2,"204":1,"205":1,"207":1,"208":1,"209":1,"210":1,"214":1,"218":1,"221":1,"235":1}}],["atomic",{"2":{"63":7,"86":1,"119":2,"125":7,"126":4,"268":3}}],["attempt++",{"2":{"251":1}}],["attempt",{"2":{"211":1,"251":5,"255":1}}],["attempts++",{"2":{"61":1,"211":1}}],["attempts",{"2":{"61":3,"138":2,"211":3,"232":11,"257":4,"259":1}}],["attempting",{"2":{"39":1}}],["at",{"2":{"25":1,"32":1,"75":1,"92":1,"140":1,"184":1,"245":1,"250":1}}],["apikey",{"2":{"162":3,"187":2,"239":3}}],["apiresponse",{"2":{"52":2}}],["apirequest",{"2":{"52":1}}],["apiconfig",{"2":{"35":1,"187":3}}],["apiclient",{"2":{"22":2}}],["api",{"2":{"22":2,"35":1,"46":1,"52":4,"87":1,"116":1,"124":1,"133":1,"134":1,"162":1,"167":1,"168":1,"171":2,"179":1,"187":6,"196":1,"197":1,"208":1,"209":1,"211":1,"219":3,"221":1,"227":1,"228":1,"232":1,"235":1,"239":2,"240":1,"241":1,"242":1,"243":1,"250":2}}],["apinode",{"2":{"11":1,"187":2,"239":1}}],["apiflow",{"2":{"7":1,"85":2}}],["approach",{"0":{"209":1}}],["approaches",{"2":{"207":1}}],["appropriately",{"2":{"127":1}}],["appropriate",{"2":{"11":1,"40":1,"114":1,"270":1}}],["app",{"2":{"74":4,"241":1}}],["application",{"2":{"74":1,"86":1,"141":1,"242":3}}],["apply",{"2":{"35":1,"38":1,"242":1}}],["append",{"2":{"10":1,"25":1,"31":2,"34":2,"35":3,"36":1,"38":2,"39":3,"43":1,"46":2,"48":1,"49":1,"52":1,"53":2,"59":1,"65":1,"76":1,"103":1,"105":1,"107":1,"108":1,"188":1,"254":2,"266":2}}],["algorithm",{"2":{"234":3}}],["alice",{"2":{"181":2}}],["also",{"2":{"124":1}}],["alternative",{"2":{"80":1}}],["alternatives",{"2":{"80":1}}],["already",{"2":{"46":1}}],["almost",{"2":{"43":1,"55":1}}],["always",{"2":{"10":1,"16":1,"40":1,"127":1,"174":1}}],["allocate",{"2":{"243":1}}],["allows",{"2":{"212":1,"262":1}}],["allowing",{"2":{"70":1}}],["allowed",{"2":{"50":1}}],["alldata",{"2":{"183":2}}],["allitems",{"2":{"38":3}}],["allresults",{"2":{"31":4}}],["all",{"2":{"8":1,"31":2,"34":1,"36":1,"43":1,"46":2,"64":1,"71":1,"117":1,"141":3,"180":1,"182":2,"183":1,"236":4,"250":1,"265":2}}],["amp",{"0":{"249":1},"1":{"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1},"2":{"5":1,"17":2,"20":1,"34":2,"36":1,"48":2,"52":1,"53":2,"58":1,"59":1,"60":1,"61":3,"62":1,"63":9,"64":2,"65":1,"66":1,"75":1,"102":1,"107":1,"108":1,"112":1,"118":1,"119":3,"120":1,"121":1,"122":1,"123":1,"125":7,"126":4,"138":2,"162":1,"170":1,"172":1,"181":2,"187":1,"194":1,"227":2,"230":2,"231":1,"233":2,"234":3,"239":2,"240":1,"242":2,"243":2,"245":1,"252":1,"254":1,"256":2,"257":2,"267":2,"268":3}}],["active",{"2":{"184":1}}],["actionerror",{"2":{"141":1}}],["actioncomplete",{"2":{"141":1}}],["actionprocess",{"2":{"141":1}}],["actionvalidate",{"2":{"141":1}}],["action",{"0":{"131":1,"132":1},"1":{"133":1,"134":1},"2":{"25":1,"29":1,"31":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"43":2,"45":1,"46":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"58":1,"65":1,"66":1,"71":1,"73":2,"75":3,"77":2,"79":2,"87":2,"90":2,"115":1,"130":3,"131":1,"133":1,"134":2,"135":1,"137":1,"138":1,"139":1,"140":3,"141":5,"156":1,"164":3,"167":1,"168":2,"188":1,"190":1,"208":3,"209":3,"210":1,"218":1,"226":1,"227":1,"228":2,"229":3,"230":4,"231":4,"232":1,"233":2,"234":3,"235":2,"236":2,"237":1,"244":5,"254":1,"257":3}}],["actions",{"0":{"129":1,"130":1,"140":1},"1":{"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1},"2":{"22":1,"46":1,"129":1,"140":1,"141":4,"142":1,"143":1,"148":1,"175":2,"213":2,"236":1,"237":1}}],["actionable",{"2":{"4":1,"174":1}}],["acts",{"2":{"176":1}}],["acquiring",{"2":{"60":1}}],["accept",{"2":{"242":2}}],["accessing",{"2":{"40":1}}],["access",{"0":{"5":1},"2":{"66":1,"88":1,"167":1,"169":1,"185":2,"187":1,"210":2}}],["accumulating",{"0":{"188":1}}],["accumulated",{"2":{"59":1}}],["accumulator",{"2":{"59":1}}],["accumulatornode",{"2":{"59":5}}],["across",{"2":{"37":1,"59":1,"89":1,"114":1,"141":1,"231":1,"240":1}}],["`json",{"2":{"181":4,"187":3}}],["`",{"2":{"3":2,"181":4,"187":3}}],["url",{"2":{"187":1,"219":1,"239":2,"242":7}}],["uint",{"2":{"180":1}}],["utility",{"0":{"99":1,"182":1},"1":{"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1},"2":{"116":1}}],["utilities",{"0":{"96":1,"111":1},"1":{"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":2,"113":2,"114":1,"115":1},"2":{"96":1,"99":1,"114":3,"115":1}}],["using",{"0":{"66":1,"166":1,"208":1,"209":1,"212":1},"1":{"67":1,"167":1,"168":1},"2":{"30":1,"42":1,"80":2,"116":1,"124":1,"131":1,"133":1,"162":1,"167":1,"168":1,"171":2,"187":2,"188":1,"208":2,"209":1,"210":1,"211":1,"212":1,"214":1,"218":1,"221":1,"223":1,"226":1,"227":1,"235":1,"239":2,"250":1,"254":1,"265":2}}],["usage",{"0":{"72":1},"2":{"29":1,"52":1,"75":1,"78":1,"100":1,"101":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"113":1,"114":1,"231":1,"234":1,"235":1,"236":1,"239":1,"241":1,"244":1,"264":1,"268":1,"270":1}}],["uses",{"2":{"116":1,"124":1,"169":1}}],["useful",{"2":{"97":1,"270":1}}],["used",{"2":{"70":1,"72":1,"73":1,"79":1,"81":2,"150":1,"173":1,"198":1}}],["userconfig",{"2":{"104":1}}],["userop",{"2":{"86":3}}],["userdto",{"2":{"48":3}}],["userdata",{"2":{"26":2,"33":2,"45":3,"194":3}}],["userresult",{"2":{"33":2}}],["users",{"2":{"33":8,"45":5,"48":4,"235":3}}],["user3",{"2":{"31":1}}],["user2",{"2":{"31":1}}],["user1",{"2":{"31":1}}],["useridkey",{"2":{"109":1}}],["userid",{"2":{"4":1,"31":2,"102":2,"162":3,"179":2,"180":2,"196":2,"235":4}}],["user",{"2":{"4":1,"22":7,"31":6,"33":14,"45":6,"48":9,"87":1,"102":2,"109":1,"162":1,"179":3,"180":2,"181":6,"182":1,"194":1,"195":1,"235":2,"241":3,"261":1,"270":1}}],["use",{"2":{"3":1,"5":1,"7":1,"14":1,"16":1,"20":1,"25":1,"31":1,"35":1,"40":2,"45":1,"54":3,"60":1,"66":2,"67":1,"68":1,"72":2,"74":1,"76":1,"80":1,"81":1,"84":2,"85":1,"94":1,"102":1,"114":2,"116":2,"117":1,"123":1,"124":1,"141":2,"150":1,"167":2,"168":1,"169":2,"180":1,"181":2,"192":1,"194":2,"195":1,"199":1,"200":1,"210":1,"213":1,"223":1,"224":1,"236":1,"238":1,"241":1,"245":1,"246":1,"247":1,"259":1,"264":1}}],["unavailable",{"2":{"253":1,"264":1,"265":2,"267":1,"269":1}}],["unmarshal",{"2":{"230":1,"245":1}}],["understand",{"2":{"205":1,"225":1}}],["understanding",{"2":{"73":1}}],["until",{"2":{"121":1}}],["unordered",{"2":{"44":1}}],["unknown",{"2":{"35":1,"189":1}}],["unrecoverable",{"2":{"22":1}}],["unit",{"0":{"19":1},"2":{"160":1}}],["unlock",{"2":{"13":1,"59":1,"60":2,"108":2,"110":1,"112":1,"118":1,"119":1,"126":1,"173":1,"231":1,"240":1,"264":1}}],["up",{"0":{"16":1},"2":{"32":1,"44":1,"45":1,"117":1,"119":1,"127":1,"171":2,"174":1,"230":1,"250":1}}],["update",{"2":{"3":1,"58":1,"189":1,"246":1,"264":1}}],["upsert",{"2":{"3":1}}],["objects",{"0":{"241":1}}],["observability",{"0":{"28":1},"2":{"63":1,"68":1}}],["oldalgorithmnode",{"2":{"234":1}}],["options",{"0":{"171":1},"2":{"171":1,"208":1}}],["optimization",{"2":{"127":1}}],["open",{"2":{"16":1,"60":1,"126":1,"241":1,"243":1,"252":2,"267":4}}],["operations",{"0":{"25":1,"178":1},"1":{"179":1,"180":1,"181":1,"182":1,"183":1,"184":1},"2":{"10":1,"53":1,"54":1,"62":1,"64":1,"67":1,"74":1,"86":2,"124":1,"128":1,"167":1,"171":1,"173":1,"176":1,"191":1,"200":1,"254":1,"258":1,"261":1}}],["operation",{"2":{"3":1,"80":1,"100":3,"163":1,"211":1,"232":1,"258":1,"263":1}}],["overwhelming",{"2":{"259":1}}],["override",{"2":{"172":1}}],["overrides",{"2":{"104":1}}],["over",{"2":{"129":1}}],["overload",{"2":{"126":1}}],["overhead",{"2":{"81":1,"169":1}}],["own",{"2":{"55":1,"99":1,"192":1}}],["o",{"2":{"54":1,"224":1}}],["others",{"2":{"40":1}}],["ok",{"2":{"39":2,"109":2,"112":2,"229":4,"230":2,"234":2,"242":2,"253":2,"257":2,"265":2}}],["outside",{"2":{"116":1}}],["out",{"2":{"37":1,"38":1,"49":1,"53":1,"258":1}}],["outputdata",{"2":{"20":1}}],["output",{"2":{"19":1,"20":1,"66":3,"145":1,"164":1,"198":2}}],["occurred",{"2":{"22":1}}],["os",{"2":{"16":1,"187":1,"230":1,"243":1,"245":1}}],["organize",{"2":{"223":1}}],["original",{"2":{"34":2,"179":1}}],["orderresult",{"2":{"34":2}}],["orderdata",{"2":{"23":1}}],["order",{"2":{"23":3,"32":1,"34":13,"44":1,"54":1,"161":1}}],["orders",{"2":{"23":1,"34":8}}],["or",{"2":{"5":2,"20":1,"30":1,"42":1,"67":1,"80":1,"89":1,"141":1,"149":1,"157":1,"162":1,"168":1,"180":1,"181":1,"187":2,"194":2,"201":1,"208":1,"223":1,"224":1,"267":1}}],["once",{"2":{"43":1,"184":1,"241":1}}],["only",{"2":{"26":2,"49":1,"110":1,"172":1,"233":6,"256":2,"259":1}}],["on",{"0":{"253":1,"261":1},"1":{"262":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1},"2":{"3":1,"22":1,"33":1,"35":1,"38":2,"40":1,"46":1,"54":1,"61":2,"75":1,"76":2,"94":1,"119":1,"126":1,"127":1,"143":1,"148":1,"158":1,"163":1,"164":1,"181":1,"226":1,"229":1,"230":1,"231":1,"235":2,"251":1,"252":1,"253":1,"256":1,"260":1,"263":1,"264":1,"269":1}}],["ones",{"2":{"74":1,"155":1}}],["one",{"2":{"2":1,"25":1,"32":1,"40":1,"67":1,"110":1,"174":1}}],["official",{"2":{"214":1}}],["off",{"2":{"67":1}}],["of",{"2":{"3":1,"25":1,"37":2,"38":1,"42":1,"51":1,"81":1,"116":1,"160":2,"166":1,"169":1,"182":1,"183":1,"198":2,"231":3,"235":3}}],["groups",{"2":{"235":1}}],["group",{"2":{"223":1}}],["grained",{"2":{"116":1}}],["graceful",{"2":{"69":1,"253":1,"260":1,"261":1}}],["gracefully",{"2":{"54":1,"247":1,"259":1}}],["guide",{"2":{"205":1,"206":1}}],["guidelines",{"2":{"0":1,"115":1,"128":1,"248":1,"260":1}}],["git",{"2":{"215":4,"223":1}}],["github",{"2":{"202":1,"203":1,"204":1,"208":1,"210":1,"215":1,"219":1,"221":1,"222":1}}],["give",{"2":{"157":1}}],["gt",{"2":{"31":1,"34":1,"36":2,"39":1,"46":1,"49":1,"50":1,"53":1,"59":1,"61":1,"65":1,"77":1,"90":1,"103":1,"119":1,"126":2,"133":1,"158":4,"167":1,"168":1,"227":1,"252":1,"254":1,"266":1,"267":1}}],["goroutines",{"2":{"127":1,"185":1}}],["go",{"0":{"202":1,"219":1},"2":{"14":2,"53":1,"64":2,"101":1,"106":1,"114":1,"121":1,"122":1,"123":1,"157":1,"185":1,"201":1,"202":1,"204":2,"215":3,"217":7,"221":1,"222":1,"223":1,"224":1,"258":1}}],["good",{"2":{"2":1,"3":1,"4":1,"5":2,"14":1,"80":1,"265":2}}],["general",{"2":{"115":1,"128":1,"200":1,"248":1,"260":1}}],["generateid",{"2":{"121":1}}],["generate",{"2":{"33":1}}],["generation",{"0":{"33":1}}],["generics",{"2":{"114":1}}],["generic",{"2":{"4":1,"114":1,"269":1}}],["getcachedresponse",{"2":{"269":1}}],["getcurrentworkers",{"2":{"119":3}}],["getdefaultresponse",{"2":{"268":1}}],["getnode",{"2":{"242":1}}],["getenv",{"2":{"187":1}}],["getfloat64or",{"2":{"180":1}}],["getfloat64",{"2":{"180":2}}],["getall",{"0":{"183":1},"2":{"156":1,"183":1,"199":2}}],["getaveragetime",{"2":{"125":1}}],["getaveragelatency",{"2":{"63":1}}],["getpendingcount",{"2":{"125":1}}],["getrequestid",{"2":{"109":2}}],["getboolor",{"2":{"102":1,"180":1}}],["getbool",{"2":{"102":1,"180":1}}],["getmetrics",{"2":{"63":1}}],["getmaxretries",{"2":{"61":1,"251":1,"256":1}}],["getmap",{"2":{"33":1,"66":1,"88":1,"91":2,"180":1,"187":2,"192":1,"210":2,"212":1,"242":1}}],["getwait",{"2":{"61":1,"251":1,"255":1}}],["getorprepare",{"2":{"60":2}}],["getstats",{"2":{"125":1}}],["getstringor",{"2":{"102":1,"180":1,"189":1,"229":1}}],["getstring",{"2":{"38":1,"58":1,"102":1,"139":1,"145":1,"162":1,"167":1,"168":1,"180":1,"204":1,"219":1,"235":1,"242":1}}],["getsuccessrate",{"2":{"63":1}}],["getslice",{"2":{"25":1,"34":1,"36":1,"37":1,"38":1,"39":1,"43":2,"45":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"180":1,"188":2,"191":2,"254":1}}],["getintor",{"2":{"5":1,"102":1,"167":1,"168":1,"180":1,"194":1}}],["getint",{"2":{"5":1,"77":1,"90":1,"102":1,"138":1,"162":1,"167":1,"168":1,"179":1,"180":2,"189":1,"194":1,"232":1}}],["getters",{"0":{"102":1,"180":1},"2":{"102":2,"162":1,"167":1,"180":4,"188":1,"194":1}}],["getter",{"2":{"5":1,"20":1,"179":1,"194":1}}],["get",{"0":{"179":1,"202":1},"2":{"5":1,"33":1,"37":1,"43":1,"88":1,"112":1,"145":1,"182":2,"183":1,"202":1,"219":1,"239":1,"242":1,"246":1}}],["✅",{"2":{"2":1,"3":1,"4":1,"5":2,"14":1}}],["immediately",{"2":{"267":1}}],["immutable",{"2":{"247":1}}],["import",{"0":{"203":1},"2":{"203":1,"204":1,"208":1,"210":1,"219":1,"221":1,"222":1}}],["important",{"2":{"28":1,"210":1}}],["implements",{"2":{"71":1}}],["implementing",{"2":{"66":1,"95":1}}],["implementations",{"2":{"172":1,"217":1,"225":1}}],["implementation",{"0":{"61":1,"98":1}}],["implement",{"2":{"40":1,"67":1,"70":1,"71":1,"150":1,"229":1,"251":1,"253":1,"261":1}}],["io",{"2":{"242":1,"243":1}}],["i+batchsize",{"2":{"124":1}}],["i+1",{"2":{"76":1,"100":1}}],["i++",{"2":{"14":2,"64":1,"76":1,"98":1,"100":1,"117":1,"185":1}}],["it",{"2":{"79":1,"176":1,"204":1,"270":1}}],["its",{"2":{"55":1,"130":1,"192":1}}],["iteration",{"2":{"10":1,"43":1,"55":1,"149":1}}],["itemctx",{"2":{"53":3}}],["item3",{"2":{"43":2,"191":1}}],["item2",{"2":{"43":2,"191":1}}],["item1",{"2":{"43":2,"191":1}}],["itemmap",{"2":{"38":4}}],["item",{"2":{"10":3,"25":6,"34":2,"35":7,"38":6,"39":5,"43":6,"45":1,"46":6,"48":3,"49":4,"50":3,"51":5,"52":4,"53":4,"97":2,"98":1,"101":2,"105":6,"108":2,"118":3,"123":3,"124":1,"254":7,"266":3}}],["itemstoprocess",{"2":{"38":5}}],["items",{"2":{"10":2,"25":7,"28":1,"35":7,"38":4,"39":7,"42":1,"43":7,"44":1,"45":1,"46":2,"48":1,"49":2,"50":1,"51":8,"52":4,"53":2,"97":1,"101":4,"103":1,"105":1,"108":1,"118":3,"123":4,"124":5,"180":2,"182":2,"191":2,"198":1,"254":7,"266":3}}],["i",{"2":{"14":4,"25":2,"31":2,"33":2,"34":4,"36":2,"37":2,"39":4,"43":2,"45":2,"46":2,"48":2,"49":2,"50":2,"51":2,"52":2,"53":4,"54":1,"62":2,"64":4,"76":3,"98":4,"100":3,"101":2,"103":5,"117":3,"118":2,"123":2,"124":5,"185":3,"254":4}}],["iscircuitopen",{"2":{"267":3}}],["iscomplete",{"2":{"58":1}}],["isretryable",{"2":{"256":1}}],["isratelimiterror",{"2":{"61":2}}],["isopen",{"2":{"126":2}}],["isolation",{"0":{"192":1},"2":{"19":1,"93":1,"94":1}}],["isn",{"2":{"169":1}}],["isnil",{"2":{"66":1}}],["isnetworkerror",{"2":{"61":1,"256":1}}],["isautherror",{"2":{"61":1}}],["issues",{"2":{"61":1,"270":1}}],["iserror",{"2":{"25":1,"31":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"43":1,"45":1,"46":2,"48":1,"49":1,"50":1,"51":1,"52":1,"53":2,"54":1,"254":1}}],["is",{"2":{"5":1,"59":1,"70":1,"72":1,"73":1,"131":1,"185":1,"214":1,"224":1,"234":1,"252":1,"264":1,"267":1,"269":3,"270":1}}],["isvalid",{"2":{"2":1,"105":1,"164":1,"227":2}}],["identify",{"2":{"259":1}}],["ide",{"2":{"169":1}}],["idempotent",{"2":{"3":1}}],["idempotency",{"0":{"3":1},"2":{"174":1}}],["idle",{"2":{"119":1}}],["id",{"2":{"3":4,"22":1,"23":2,"31":4,"33":3,"48":2,"102":2,"109":4,"121":2,"162":1,"179":3,"180":2,"181":3,"182":1,"185":2,"192":3,"195":1,"235":2}}],["injected",{"2":{"246":1}}],["inject",{"2":{"246":1}}],["injection",{"0":{"246":1}}],["info",{"2":{"210":1}}],["information",{"2":{"68":1,"190":1}}],["inc",{"2":{"246":1}}],["includes",{"2":{"218":1}}],["included",{"0":{"216":1},"1":{"217":1,"218":1,"219":1}}],["including",{"2":{"180":1}}],["incrementretry",{"2":{"189":1}}],["increment",{"2":{"189":1}}],["incrementally",{"2":{"157":1}}],["inline",{"2":{"80":1}}],["inner",{"2":{"79":1}}],["innerflow",{"2":{"79":4}}],["init",{"2":{"139":1,"215":1,"229":2}}],["initialized",{"2":{"189":1}}],["initialize",{"2":{"189":1,"223":1}}],["initialization",{"2":{"67":1,"188":1}}],["initial",{"2":{"112":2,"145":1,"187":1,"212":1,"219":1}}],["initnode",{"2":{"73":2}}],["indefinitely",{"2":{"259":1}}],["independently",{"2":{"93":1,"94":1}}],["index",{"2":{"64":1,"98":1,"101":2,"118":2,"123":3}}],["indicate",{"2":{"81":1,"141":1,"236":1,"259":1,"270":1}}],["individual",{"2":{"33":1,"43":1,"179":1}}],["inventory",{"2":{"23":1}}],["invalid",{"2":{"2":1,"5":1,"45":1,"46":1,"65":1,"66":1,"84":1,"133":2,"154":1,"158":2,"227":2}}],["inputs",{"2":{"33":1,"114":1,"159":1}}],["input",{"0":{"33":1},"2":{"19":1,"20":1,"58":4,"66":3,"93":1,"107":2,"113":1,"145":1,"163":1,"171":6,"190":1,"198":2,"257":2}}],["in",{"0":{"88":1,"123":1,"192":1,"203":1},"2":{"7":1,"10":1,"13":1,"19":1,"22":1,"25":1,"29":1,"32":1,"37":1,"40":1,"50":1,"54":1,"66":1,"74":1,"84":2,"85":1,"91":1,"93":1,"94":1,"95":1,"96":1,"100":1,"102":2,"103":1,"109":1,"113":1,"115":1,"124":1,"127":1,"129":1,"131":1,"150":1,"161":1,"173":1,"174":1,"176":1,"187":2,"189":1,"191":1,"192":1,"200":2,"206":1,"221":1,"223":1,"224":1,"230":1,"239":1,"247":1,"250":1}}],["intn",{"2":{"255":1}}],["int16",{"2":{"180":1}}],["int8",{"2":{"180":1}}],["int32",{"2":{"119":3,"126":2,"180":1}}],["intslice",{"2":{"97":1}}],["intentionally",{"2":{"141":1}}],["internally",{"2":{"116":1,"124":1}}],["interfaces",{"2":{"68":2,"94":1}}],["interface",{"0":{"71":1,"262":1},"2":{"65":1,"69":2,"70":1,"71":1,"76":1,"82":1,"95":1,"98":1,"150":1,"253":1,"262":2}}],["integrity",{"2":{"65":1}}],["integration",{"0":{"20":1}}],["int64",{"2":{"63":4,"125":7,"180":1,"268":2}}],["int",{"2":{"5":2,"13":1,"31":1,"33":1,"36":1,"46":1,"49":1,"51":1,"59":2,"61":2,"64":2,"77":3,"90":3,"97":1,"100":1,"101":2,"103":1,"119":3,"120":2,"121":4,"122":1,"123":1,"124":2,"134":1,"173":1,"180":1,"181":1,"185":1,"189":1,"192":1,"196":1,"198":1,"231":4,"232":2,"235":3,"241":2,"243":1,"251":2,"252":2,"256":1,"257":1,"267":2}}],["into",{"2":{"3":1,"80":1,"157":1,"175":1,"213":1,"237":1}}],["installed",{"2":{"204":2}}],["install",{"0":{"202":1},"2":{"215":1}}],["installation",{"0":{"201":1,"204":1},"1":{"202":1,"203":1,"204":1,"205":1},"2":{"204":1}}],["instance",{"2":{"14":1}}],["instances",{"0":{"14":1},"2":{"14":2}}],["instead",{"2":{"3":1,"25":1}}],["insert",{"2":{"3":2,"156":1}}],["if",{"2":{"2":1,"5":3,"16":1,"25":1,"26":1,"28":1,"31":2,"33":3,"34":7,"35":8,"36":6,"37":2,"38":3,"39":6,"43":1,"45":4,"46":5,"48":2,"49":2,"50":3,"51":2,"52":3,"53":4,"58":1,"59":2,"60":7,"61":5,"62":1,"63":1,"65":3,"66":3,"77":2,"79":1,"90":2,"92":1,"98":2,"100":2,"102":3,"103":1,"105":1,"108":5,"110":1,"119":5,"120":1,"121":1,"123":1,"125":1,"126":5,"130":1,"133":1,"134":2,"135":2,"137":1,"138":1,"145":1,"162":1,"163":2,"164":1,"167":1,"168":1,"170":1,"173":1,"180":11,"181":1,"182":2,"187":1,"188":2,"190":1,"194":3,"208":1,"209":1,"210":1,"211":1,"219":2,"227":1,"229":2,"230":1,"231":1,"232":3,"233":3,"234":2,"235":1,"239":1,"241":1,"242":2,"243":2,"245":1,"246":2,"251":1,"252":4,"253":3,"254":3,"256":3,"257":2,"258":1,"263":1,"264":2,"265":3,"266":2,"267":4}}],["eof",{"2":{"243":1}}],["echo",{"2":{"181":1}}],["every",{"2":{"161":1}}],["event",{"2":{"229":4}}],["events",{"2":{"28":1}}],["even",{"2":{"45":1,"261":1}}],["easier",{"2":{"157":1}}],["each",{"2":{"2":1,"10":1,"31":1,"34":2,"43":1,"45":2,"48":1,"55":1,"94":2,"160":1,"174":1,"192":2,"223":1,"236":1,"254":1}}],["edge",{"2":{"114":1}}],["e",{"2":{"108":13}}],["empty",{"2":{"97":1,"114":1,"269":1}}],["embedded",{"2":{"80":1}}],["email",{"2":{"31":6,"181":3}}],["etc",{"2":{"67":1}}],["effectively",{"2":{"41":1,"56":1}}],["efficiently",{"2":{"42":1}}],["efficient",{"2":{"25":1}}],["ensuring",{"2":{"261":1}}],["ensure",{"2":{"65":1,"68":1,"81":1,"114":1,"141":1,"236":1,"247":1,"270":1}}],["encapsulated",{"2":{"238":1}}],["entry",{"2":{"217":1,"264":3}}],["entire",{"2":{"73":2}}],["entities",{"2":{"30":1}}],["environment",{"2":{"223":1}}],["env",{"2":{"184":1}}],["ends",{"2":{"135":1}}],["end",{"2":{"103":4,"124":2}}],["endnode",{"2":{"73":1,"144":2,"149":1}}],["enabled",{"2":{"102":4,"180":4,"234":5}}],["enables",{"2":{"70":1}}],["enrichnode",{"2":{"72":1,"154":2,"233":4}}],["enrichment",{"2":{"34":1,"74":2,"233":1}}],["enrichorderdata",{"2":{"34":1}}],["enrichedorder",{"2":{"34":2}}],["enrich",{"2":{"34":1,"233":4}}],["else",{"2":{"31":1,"34":1,"37":1,"39":2,"45":1,"46":2,"51":1,"53":2,"63":1,"100":1,"125":1,"126":1,"134":1,"233":2,"254":1,"258":1}}],["equal",{"2":{"19":1,"20":1,"79":1}}],["exhausted",{"2":{"265":1}}],["exit",{"2":{"232":2}}],["exists",{"2":{"60":4,"135":1,"182":2,"264":2}}],["existing",{"2":{"46":2,"169":1}}],["exist",{"2":{"22":1}}],["explore",{"2":{"213":1}}],["explaining",{"2":{"157":1,"223":1}}],["explicitly",{"2":{"135":1}}],["expired",{"2":{"85":1}}],["exponential",{"0":{"251":1},"2":{"61":1,"251":2}}],["experience",{"2":{"261":1,"270":1}}],["experiment",{"2":{"235":1}}],["experimental",{"2":{"234":1}}],["expects",{"2":{"81":1,"94":1}}],["expectedresult",{"2":{"20":1}}],["expected",{"2":{"19":1,"70":1,"72":1,"198":1}}],["expensive",{"2":{"17":1}}],["extractretryafter",{"2":{"61":1}}],["extract",{"2":{"61":1,"157":1}}],["extend",{"2":{"58":1}}],["external",{"2":{"52":1,"60":1,"68":1,"230":1}}],["exactly",{"2":{"43":1,"55":1}}],["example",{"0":{"218":1},"2":{"31":3,"181":1,"187":1,"215":1,"217":6,"218":1,"219":2,"239":1}}],["examples",{"2":{"29":1,"114":1,"115":1,"213":1,"225":1}}],["execfallback",{"2":{"253":1,"262":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1}}],["execfn",{"2":{"113":2}}],["execfunc",{"2":{"32":2,"44":2}}],["execute",{"2":{"91":2,"107":2,"145":1,"161":1,"233":1}}],["executes",{"2":{"73":1,"110":1}}],["executions",{"2":{"59":1,"63":4,"240":1}}],["execution",{"0":{"32":1},"2":{"37":1,"42":1,"58":1,"63":2,"91":1,"116":1,"129":1,"143":1,"147":1,"152":1,"157":1,"162":1,"163":1,"173":1,"176":1,"226":1,"240":1,"256":1}}],["execresult",{"2":{"58":1,"65":2,"66":2,"71":1,"75":2,"77":3,"79":2,"87":2,"90":3,"130":1,"133":2,"134":2,"137":2,"138":2,"139":1,"140":2,"156":2,"164":3,"167":2,"168":2,"188":2,"190":2,"210":2,"227":2,"228":2,"229":2,"230":2,"231":1,"232":2,"233":2,"234":2,"235":2,"244":2,"257":2}}],["exec",{"0":{"163":1},"2":{"3":2,"10":1,"11":1,"13":1,"16":1,"19":2,"22":1,"28":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":2,"64":1,"65":1,"66":1,"71":1,"73":2,"79":1,"100":1,"109":1,"123":1,"156":1,"162":1,"163":1,"170":1,"172":2,"173":1,"244":2,"251":1,"252":1,"253":1,"256":1,"258":1,"263":1,"264":1,"265":1,"266":1,"267":1}}],["errnotfound",{"2":{"269":1}}],["errratelimit",{"2":{"269":1}}],["errtimeout",{"2":{"269":1}}],["errchan",{"2":{"53":3,"122":4,"258":3}}],["err",{"2":{"3":2,"4":1,"5":3,"10":1,"16":3,"19":4,"20":4,"28":4,"31":1,"33":6,"34":15,"35":12,"36":6,"37":3,"38":3,"39":7,"43":1,"45":3,"48":3,"51":3,"52":6,"53":5,"60":12,"61":4,"62":5,"63":4,"64":1,"65":3,"66":2,"79":6,"93":4,"100":8,"102":1,"106":6,"108":9,"120":3,"122":2,"123":6,"125":2,"126":2,"137":2,"145":3,"162":3,"163":3,"170":3,"181":2,"187":3,"190":3,"194":2,"208":3,"209":3,"210":3,"219":3,"232":3,"239":3,"241":3,"242":3,"243":7,"244":4,"245":3,"246":6,"250":2,"251":4,"252":3,"253":5,"254":3,"256":5,"257":3,"258":6,"262":1,"263":6,"264":7,"265":5,"266":4,"267":4,"268":1,"269":4}}],["errorctx",{"2":{"257":2}}],["errorcontext",{"2":{"257":2}}],["errorcount++",{"2":{"45":1}}],["errorcount",{"2":{"45":3}}],["errornode",{"2":{"133":1,"158":1,"227":1}}],["erroraggregator",{"2":{"108":4}}],["errorhandlernode",{"2":{"31":1}}],["errorhandler",{"2":{"8":2,"89":4,"153":3,"190":1}}],["errorf",{"2":{"4":1,"5":1,"33":2,"34":4,"35":2,"39":1,"45":1,"46":1,"49":1,"50":1,"52":1,"53":1,"62":1,"65":1,"66":1,"100":1,"108":1,"122":1,"123":1,"126":1,"211":1,"252":1,"254":1,"256":1,"258":1,"264":1,"266":1,"267":1}}],["errors",{"2":{"2":1,"4":2,"22":1,"31":5,"41":1,"46":9,"54":1,"56":1,"61":1,"65":5,"81":1,"89":1,"108":9,"123":4,"174":1,"191":2,"198":2,"247":1,"254":10,"256":3,"259":1,"266":10,"269":3}}],["error",{"0":{"4":1,"8":1,"39":1,"46":1,"89":1,"108":1,"153":1,"190":1,"211":1,"249":1,"254":1,"257":1},"1":{"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1},"2":{"2":1,"3":1,"4":2,"5":3,"8":3,"10":1,"11":1,"13":1,"16":1,"19":2,"22":2,"25":3,"26":1,"28":2,"31":7,"33":3,"34":6,"35":3,"36":3,"37":3,"38":3,"39":3,"40":3,"41":1,"43":3,"45":4,"46":10,"48":3,"49":3,"50":3,"51":3,"52":3,"53":6,"54":3,"55":3,"56":1,"58":3,"59":1,"60":4,"61":4,"62":4,"63":1,"64":1,"65":3,"66":3,"68":2,"71":3,"75":2,"77":3,"78":2,"79":1,"80":2,"81":1,"85":2,"87":2,"88":2,"89":2,"90":3,"91":2,"93":1,"100":6,"106":4,"108":5,"109":1,"113":2,"120":1,"122":4,"123":2,"125":1,"126":2,"130":1,"133":2,"134":2,"137":2,"138":1,"139":1,"140":1,"141":1,"153":4,"156":3,"158":1,"162":1,"163":1,"164":1,"167":3,"168":3,"170":1,"171":3,"172":1,"173":1,"174":1,"181":1,"187":2,"188":1,"190":7,"192":2,"194":1,"195":1,"198":1,"208":2,"209":1,"210":4,"211":2,"212":2,"213":1,"218":1,"221":1,"227":2,"228":2,"229":2,"230":1,"231":1,"232":5,"233":2,"234":1,"235":3,"239":1,"240":1,"241":1,"242":2,"243":1,"244":3,"245":2,"246":2,"247":1,"248":1,"249":1,"250":3,"251":1,"252":1,"253":4,"254":7,"256":3,"257":7,"258":2,"260":1,"262":2,"263":5,"264":6,"265":4,"266":6,"267":3,"268":2,"269":5,"271":2}}],["cd",{"2":{"215":1}}],["cycles",{"2":{"149":1}}],["circuitbreakernode",{"2":{"252":4,"267":6}}],["circuitbreakerpool",{"2":{"126":3}}],["circuit",{"0":{"126":1,"252":1,"267":1},"2":{"126":2,"252":2,"267":4,"271":1}}],["c",{"2":{"97":1}}],["creation",{"2":{"247":1}}],["creating",{"0":{"144":1,"165":1,"177":1,"222":1},"1":{"166":1,"167":1,"168":1,"169":1,"170":1},"2":{"67":1,"83":1,"166":1,"218":1}}],["createhttpnode",{"2":{"242":3}}],["createheavyflow",{"2":{"80":1}}],["createloggingnode",{"2":{"156":3}}],["createlightweightflow",{"2":{"80":1}}],["createtimeoutpool",{"2":{"122":1}}],["createtransformnode",{"2":{"2":1}}],["createparallelnestedflow",{"2":{"91":1}}],["createprocessingflow2",{"2":{"91":1}}],["createprocessingflow1",{"2":{"91":1}}],["createprocessingflow",{"2":{"78":1,"92":1}}],["createprocessingpipeline",{"2":{"74":2}}],["createprocessnode",{"2":{"14":2,"19":1,"77":1,"90":1,"144":1,"155":1,"222":1,"244":1}}],["createnestedflowwithcontext",{"2":{"88":1}}],["createnotificationnode",{"2":{"86":1}}],["createnodefromconfig",{"2":{"76":1}}],["createnode",{"2":{"17":1}}],["createuserflow",{"2":{"87":1}}],["createuseroperation",{"2":{"86":2}}],["createquerynode",{"2":{"86":1}}],["createbusinessrules",{"2":{"155":1}}],["createbusinessrulesnode",{"2":{"84":1}}],["createbusinessvalidationnode",{"2":{"74":1}}],["createbusinessvalidator",{"2":{"7":1}}],["createoptimizednode",{"2":{"80":1}}],["createorderflow",{"2":{"23":2}}],["createrobustnode",{"2":{"211":1}}],["createratelimitedpool",{"2":{"120":1}}],["createratelimitedbatchnode",{"2":{"52":2}}],["createrecursiveflow",{"2":{"90":1}}],["createrecursiveprocessingflow",{"2":{"77":1}}],["createdynamicflow",{"2":{"92":1}}],["createdynamicpipeline",{"2":{"76":1}}],["createdisconnectnode",{"2":{"86":1}}],["created",{"2":{"76":1}}],["createdatabasenode",{"2":{"241":2}}],["createdatabaseoperation",{"2":{"86":2}}],["createdatamergenode",{"2":{"74":1}}],["createdatafetchnode",{"2":{"74":1}}],["createcustomnode",{"2":{"221":1,"222":1}}],["createcustomflow",{"2":{"75":1,"222":1}}],["createcounternode",{"2":{"240":1}}],["createconfigurablenode",{"2":{"245":1}}],["createconfiguredbatchnode",{"2":{"35":1}}],["createconnectnode",{"2":{"86":1}}],["createcomplexflow",{"2":{"75":1}}],["createabtestnode",{"2":{"235":2}}],["createapinode",{"2":{"239":2}}],["createapiflow",{"2":{"87":1}}],["createapplicationflow",{"2":{"74":1,"86":1}}],["createadminflow",{"2":{"87":1}}],["createauditflow",{"2":{"74":1,"86":1}}],["createauthflow",{"2":{"74":1,"85":3,"86":1}}],["createexampleflow",{"2":{"219":1}}],["createendnode",{"2":{"144":1}}],["createenrichmentflow",{"2":{"74":2}}],["createerrorhandlingflow",{"2":{"89":1}}],["createerrorhandlernode",{"2":{"89":1}}],["createerrorhandler",{"2":{"8":1}}],["createmainflow",{"2":{"20":1,"155":1}}],["createfileprocessornode",{"2":{"243":1}}],["createformatchecker",{"2":{"155":1}}],["createflow",{"2":{"76":3}}],["createflowwitherrorhandling",{"2":{"8":1}}],["createfetchnode",{"2":{"2":1,"155":1}}],["createservicenode",{"2":{"246":1}}],["createselectornode",{"2":{"75":2}}],["createsaveflow",{"2":{"92":1}}],["createsavenode",{"2":{"2":1}}],["createstartnode",{"2":{"92":1,"144":1}}],["createsubflow",{"2":{"89":1,"93":1}}],["createschemachecknode",{"2":{"84":1}}],["createschemavalidationnode",{"2":{"74":1}}],["createschemavalidator",{"2":{"7":1}}],["createsimpleflow",{"2":{"75":1}}],["creates",{"2":{"23":1}}],["createvalidateusernode",{"2":{"86":1}}],["createvalidatenode",{"2":{"2":1}}],["createvalidationflow",{"2":{"7":3,"74":2,"92":1,"155":2}}],["create",{"2":{"7":1,"11":1,"14":2,"31":2,"34":2,"43":1,"53":1,"57":1,"72":1,"76":2,"79":1,"84":1,"85":1,"90":1,"91":1,"99":1,"117":2,"119":1,"143":1,"144":1,"149":1,"150":1,"157":1,"204":1,"208":2,"209":2,"210":2,"219":2,"221":1,"222":1,"223":1,"232":1,"238":1,"241":1,"242":2,"258":1}}],["choosing",{"0":{"169":1}}],["choose",{"2":{"54":1,"75":1,"87":1,"207":1}}],["chained",{"2":{"235":1}}],["chaining",{"2":{"167":1}}],["chan",{"2":{"53":2,"64":3,"101":1,"106":1,"122":2,"123":1,"258":2}}],["chunks",{"2":{"103":6}}],["chunksize",{"2":{"103":3}}],["chunkslice",{"2":{"103":2}}],["chunk",{"0":{"103":1},"2":{"103":2}}],["checkout",{"2":{"235":1}}],["checking",{"2":{"169":1}}],["checkbusiness",{"2":{"155":2}}],["checkformat",{"2":{"155":3}}],["checkdepth",{"2":{"90":4}}],["checktoken",{"2":{"85":4}}],["checkstate",{"2":{"189":1}}],["checks",{"2":{"23":1}}],["check",{"2":{"10":2,"40":1,"46":1,"59":1,"60":1,"123":1,"182":1,"189":1,"234":1,"246":1,"252":1,"256":1,"267":1}}],["client",{"2":{"239":3,"242":3,"246":1}}],["closure",{"0":{"239":1},"2":{"239":2,"240":1}}],["closures",{"0":{"238":1},"1":{"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1},"2":{"238":1,"239":1,"246":1}}],["closed",{"2":{"247":1}}],["close",{"2":{"16":1,"60":4,"64":3,"117":1,"118":1,"119":1,"123":3,"124":1,"127":1,"170":1,"239":1,"241":1,"242":1,"243":1}}],["clone",{"2":{"215":2}}],["clarity",{"2":{"196":1}}],["cleaner",{"2":{"133":1,"167":1}}],["cleanup",{"0":{"197":1},"2":{"16":2,"247":1}}],["clean",{"0":{"16":1},"2":{"40":2,"46":1,"54":1,"55":1,"117":1,"127":1,"174":1,"232":1,"241":1,"250":1}}],["clearly",{"2":{"81":1,"94":1,"141":1,"247":1}}],["clear",{"2":{"4":1,"59":1,"68":2,"81":1,"94":1,"114":1,"158":1,"174":1,"182":2,"197":2,"227":1,"236":1,"270":1}}],["cumulative",{"2":{"235":3}}],["currentweight",{"2":{"231":3}}],["currentstate",{"2":{"139":2}}],["currentload",{"2":{"119":2}}],["current",{"2":{"13":2,"119":3,"240":2}}],["customizing",{"0":{"220":1},"1":{"221":1,"222":1}}],["customnode",{"2":{"58":6}}],["customer",{"2":{"23":1}}],["custom",{"0":{"57":1,"58":1,"66":1,"67":1,"99":1,"170":1},"1":{"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":2,"68":1,"69":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1},"2":{"5":1,"41":1,"56":1,"57":1,"58":4,"61":1,"66":1,"67":2,"68":2,"69":1,"75":1,"102":1,"115":1,"116":1,"124":1,"128":1,"172":2,"175":1,"180":1,"194":1,"217":1,"218":1,"221":3,"222":1,"248":1,"262":1}}],["cascading",{"2":{"252":1,"267":1,"271":1}}],["cases",{"2":{"114":1,"141":1,"168":1,"213":1,"236":1}}],["case",{"2":{"10":1,"19":2,"35":2,"38":3,"53":3,"61":3,"62":1,"64":2,"92":3,"106":2,"122":2,"123":2,"139":2,"228":3,"258":3,"269":3}}],["cacheentry",{"2":{"264":3}}],["cachedapinode",{"2":{"253":3,"264":3}}],["cached",{"0":{"264":1},"2":{"246":2,"253":5,"264":3,"265":3,"267":1,"269":1}}],["cache",{"2":{"246":6,"253":5,"264":7,"265":4}}],["captured",{"2":{"239":1,"247":1}}],["categorynode",{"2":{"134":5,"228":6}}],["carry",{"2":{"55":1}}],["cause",{"2":{"46":1}}],["callflakeyapi",{"2":{"250":1}}],["callservice",{"2":{"252":1,"267":1}}],["calls",{"2":{"52":1,"73":1}}],["call",{"2":{"52":1,"79":1,"110":1}}],["called",{"2":{"43":2,"250":1}}],["callapi",{"2":{"11":1,"52":1,"100":1,"251":1,"256":1}}],["calculatemetric",{"2":{"36":1}}],["calculate",{"2":{"36":1,"231":1}}],["cancelled",{"2":{"229":2}}],["cancellation",{"0":{"10":1},"2":{"174":1}}],["cancel",{"2":{"11":2,"53":2,"106":2,"229":2,"258":2}}],["can",{"2":{"5":1,"55":1,"66":1,"89":1,"124":1,"140":1,"141":1,"150":1,"163":1,"185":1,"207":1}}],["centralized",{"2":{"153":1}}],["centralize",{"2":{"8":1}}],["correctly",{"2":{"270":1}}],["core",{"2":{"29":1,"41":1,"205":1,"225":1}}],["copy",{"2":{"183":1}}],["code",{"0":{"203":1,"218":1},"2":{"133":1,"169":1}}],["coupling",{"2":{"94":1}}],["counter++",{"2":{"173":1,"231":1}}],["counter",{"2":{"173":2,"231":3}}],["counternode",{"2":{"13":2}}],["counts",{"2":{"127":1}}],["count++",{"2":{"13":1,"36":1,"50":1,"189":1,"240":1}}],["count",{"2":{"5":8,"13":2,"31":1,"36":6,"45":2,"46":1,"50":5,"59":1,"61":1,"119":1,"127":1,"138":3,"167":2,"168":2,"173":2,"182":1,"189":6,"194":4,"195":1,"198":1,"240":2,"266":2}}],["collection",{"2":{"198":1}}],["collections",{"2":{"42":1}}],["collector",{"2":{"118":5}}],["collect",{"2":{"36":1,"118":1,"188":1,"254":1}}],["comment",{"2":{"236":1}}],["comments",{"2":{"157":1,"223":1}}],["commit",{"2":{"223":1}}],["common",{"0":{"136":1,"186":1},"1":{"137":1,"138":1,"139":1,"187":1,"188":1,"189":1,"190":1},"2":{"96":1,"131":1,"157":1,"176":1,"225":1}}],["communicate",{"2":{"94":1,"212":1}}],["combine",{"2":{"62":1,"74":1}}],["compatibility",{"2":{"168":1}}],["computed",{"2":{"140":1}}],["comprehensive",{"2":{"68":1,"271":1}}],["compose",{"2":{"83":1,"142":1}}],["composable",{"0":{"74":1}}],["composition",{"0":{"92":1,"155":1},"2":{"70":1,"82":1,"159":1,"217":1}}],["composite",{"0":{"62":1}}],["components",{"0":{"85":1},"2":{"67":1,"83":1,"85":1,"169":1}}],["completion",{"2":{"40":1,"54":1,"64":1}}],["completes",{"2":{"130":1}}],["completed",{"2":{"37":1,"53":5,"78":1,"117":1,"125":4,"208":1,"209":1,"210":1}}],["complete",{"2":{"20":1,"51":1,"58":1,"91":1,"117":1,"139":1,"141":1,"229":1,"266":1}}],["complex",{"0":{"34":1,"151":1},"1":{"152":1,"153":1,"154":1},"2":{"5":1,"56":1,"66":1,"67":1,"74":1,"75":1,"80":1,"82":1,"83":1,"102":1,"142":1,"155":1,"162":1,"169":1,"170":1,"181":1,"194":1,"237":1,"241":1}}],["com",{"2":{"31":3,"181":1,"187":1,"202":1,"203":1,"204":1,"208":1,"210":1,"215":1,"219":2,"221":1,"222":1,"239":1}}],["consistent",{"2":{"141":2,"195":1,"235":1}}],["consider",{"2":{"80":2,"81":1,"114":1,"124":1,"270":1}}],["considerations",{"0":{"80":1}}],["constants",{"2":{"141":1}}],["constant",{"2":{"131":1}}],["const",{"2":{"109":1,"141":1,"195":1}}],["constraints",{"2":{"40":1}}],["conversions",{"2":{"180":1}}],["conversion",{"2":{"66":1}}],["converts",{"2":{"180":2,"181":1}}],["convert",{"2":{"33":1,"97":2}}],["convenience",{"2":{"66":1,"169":1}}],["content",{"2":{"242":1}}],["contents",{"2":{"199":1}}],["contextkey",{"2":{"109":3}}],["context",{"0":{"9":1,"88":1,"109":1,"190":1,"257":1},"1":{"10":1,"11":1},"2":{"2":2,"3":2,"5":6,"10":4,"11":4,"13":2,"16":2,"19":1,"20":1,"25":6,"26":2,"28":2,"31":6,"33":6,"34":6,"35":6,"36":6,"37":6,"38":6,"39":6,"43":7,"45":6,"46":6,"48":6,"49":6,"50":6,"51":6,"52":6,"53":8,"58":6,"59":2,"60":2,"61":2,"62":6,"63":2,"64":2,"65":4,"66":6,"71":6,"75":4,"77":6,"78":4,"79":3,"80":4,"85":4,"87":4,"88":7,"90":6,"91":4,"93":4,"100":2,"106":7,"109":9,"113":4,"120":2,"123":3,"130":2,"133":4,"134":4,"137":2,"138":2,"139":2,"140":2,"145":2,"156":6,"162":2,"163":2,"164":2,"167":6,"168":6,"170":2,"171":6,"172":2,"173":2,"174":2,"187":4,"188":2,"190":2,"192":4,"196":1,"208":7,"209":4,"210":10,"211":2,"212":5,"219":2,"221":3,"227":4,"228":4,"229":2,"230":2,"231":2,"232":6,"233":4,"234":2,"235":6,"239":2,"240":2,"241":2,"242":4,"243":2,"244":6,"245":4,"246":2,"250":2,"251":2,"252":2,"253":2,"254":6,"256":2,"257":3,"258":4,"263":2,"264":2,"265":2,"266":2,"267":2}}],["containing",{"2":{"77":1}}],["contains",{"2":{"53":1}}],["continue",{"2":{"34":1,"39":1,"45":1,"46":1,"54":1,"58":1,"90":3,"130":2,"135":1,"138":1,"254":1,"266":1}}],["control",{"2":{"32":1,"52":1,"56":1,"116":1,"120":1,"129":1,"175":1,"213":1,"223":1,"226":1,"234":1,"235":2,"271":1}}],["conditions",{"2":{"38":1,"226":1,"232":1,"236":1}}],["conditionalfallbacknode",{"2":{"269":1}}],["conditionalbatchnode",{"2":{"38":1}}],["conditional",{"0":{"38":1,"87":1,"226":1,"232":1,"269":1},"1":{"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1},"2":{"38":1,"142":1,"232":1,"271":1}}],["condition",{"2":{"14":1,"236":1}}],["concepts",{"2":{"29":1,"41":1,"205":1,"225":1}}],["concerns",{"2":{"2":1}}],["concurrentnode",{"2":{"44":1}}],["concurrentbatch",{"2":{"32":1}}],["concurrently",{"2":{"25":1,"32":1,"44":1}}],["concurrent",{"0":{"32":1,"44":1},"2":{"14":1,"32":1,"41":1,"42":1,"44":1,"45":1,"52":1,"54":1,"56":1,"68":1,"69":1,"114":1,"116":3,"124":1,"173":1,"185":1,"191":1,"247":1}}],["concurrency",{"0":{"12":1},"1":{"13":1,"14":1},"2":{"35":1,"40":2,"44":1,"54":2,"55":1,"127":1}}],["confirmation",{"2":{"23":1}}],["configpath",{"2":{"230":2,"245":2}}],["configs",{"2":{"76":2}}],["configurable",{"2":{"55":1,"238":1}}],["configuration",{"0":{"35":1,"45":1,"187":1,"238":1,"241":1,"245":1,"250":1},"1":{"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1},"2":{"33":1,"35":3,"55":1,"66":1,"76":1,"187":2,"191":1,"211":1,"223":1,"227":1,"230":3,"235":1,"238":1,"239":1,"241":2,"245":2,"247":3,"250":1}}],["configured",{"2":{"163":1,"205":1,"212":1,"242":1}}],["configure",{"2":{"40":1,"44":1,"45":1,"54":1,"171":1,"250":1}}],["config",{"2":{"5":6,"33":3,"35":14,"58":7,"66":5,"76":5,"92":5,"102":4,"104":1,"162":6,"179":1,"180":2,"181":4,"187":8,"191":1,"192":4,"212":7,"223":1,"241":7,"245":6}}],["conflict",{"2":{"3":1}}],["connecting",{"2":{"135":1}}],["connections",{"0":{"146":1},"1":{"147":1,"148":1,"149":1},"2":{"131":1,"141":1,"144":1,"236":1}}],["connection",{"0":{"17":1},"2":{"17":1,"90":1,"135":2,"241":1}}],["connected",{"2":{"130":1}}],["connect",{"2":{"2":3,"7":3,"8":2,"31":2,"72":4,"73":2,"74":5,"75":2,"76":2,"77":3,"78":2,"84":4,"85":5,"86":9,"87":3,"89":5,"90":3,"91":5,"92":1,"93":1,"130":2,"131":1,"133":2,"134":3,"135":2,"142":1,"143":1,"144":2,"147":3,"148":4,"149":3,"150":3,"152":4,"153":5,"154":5,"155":3,"156":2,"158":4,"175":1,"210":1,"222":1,"227":2,"228":4,"232":3,"233":8,"234":2}}],["ctx",{"2":{"2":1,"3":1,"5":3,"10":4,"11":4,"13":1,"14":2,"16":1,"19":3,"20":2,"25":3,"26":1,"28":1,"31":4,"33":3,"34":3,"35":3,"36":3,"37":3,"38":3,"39":3,"43":5,"45":3,"46":3,"48":3,"49":3,"50":3,"51":3,"52":4,"53":4,"58":3,"59":1,"60":2,"61":2,"62":4,"63":2,"64":3,"65":2,"66":3,"71":3,"75":2,"77":3,"78":2,"79":5,"80":2,"85":2,"87":2,"88":2,"90":3,"91":2,"93":1,"100":1,"106":9,"109":6,"113":1,"120":2,"123":3,"130":1,"133":2,"134":2,"137":1,"138":1,"139":1,"140":1,"145":2,"156":3,"162":1,"163":1,"164":1,"167":3,"168":3,"170":2,"171":3,"172":1,"173":1,"187":2,"188":1,"190":1,"192":2,"208":4,"209":3,"210":6,"211":1,"212":4,"219":2,"221":1,"227":2,"228":2,"229":1,"230":1,"231":1,"232":3,"233":2,"234":1,"235":3,"239":1,"240":1,"241":2,"242":2,"243":1,"244":6,"245":2,"246":3,"250":1,"251":1,"252":1,"253":1,"254":3,"256":1,"257":1,"258":5,"263":1,"264":1,"265":1,"266":1,"267":1}}],["naming",{"0":{"195":1},"2":{"141":2}}],["names",{"2":{"81":1,"94":1,"141":1,"157":1,"236":2}}],["name",{"2":{"33":2,"36":2,"48":2,"63":6,"65":2,"75":2,"78":3,"81":1,"94":1,"102":4,"156":4,"157":1,"180":4,"181":3,"244":4}}],["numeric",{"2":{"180":2}}],["num",{"2":{"49":2,"50":2}}],["numbers",{"2":{"49":4,"50":4}}],["number",{"2":{"23":1,"50":1,"182":1,"198":1}}],["nested",{"0":{"83":1,"84":1,"88":1,"91":1,"93":1},"1":{"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1},"2":{"81":1,"82":1,"87":1,"88":1,"89":1,"91":1,"93":1,"94":2,"142":1,"159":1}}],["nesting",{"0":{"87":1},"2":{"81":1,"83":1,"94":1,"236":1}}],["negative",{"2":{"46":1,"50":1}}],["nextstate",{"2":{"229":5}}],["nextaction",{"2":{"140":2}}],["next",{"0":{"29":1,"41":1,"56":1,"69":1,"82":1,"95":1,"115":1,"128":1,"142":1,"159":1,"175":1,"200":1,"205":1,"213":1,"225":1,"237":1,"248":1,"260":1,"271":1},"2":{"129":1,"140":1,"164":2}}],["need",{"2":{"67":1,"116":1,"169":1,"172":1,"187":1}}],["needsenrichment",{"2":{"233":3}}],["needsvalidation",{"2":{"233":3}}],["needsuserdata",{"2":{"26":1}}],["needs",{"2":{"26":1,"44":1,"124":1}}],["needed",{"2":{"26":1,"119":1}}],["network",{"2":{"22":1,"61":1,"256":1}}],["newcircuitbreakernode",{"2":{"252":1}}],["newcustomnode",{"2":{"58":1}}],["newreader",{"2":{"242":1}}],["newrequest",{"2":{"239":1,"242":1}}],["newresult",{"2":{"25":2,"31":4,"33":2,"34":2,"35":3,"36":2,"37":2,"38":2,"39":3,"43":2,"45":2,"46":5,"48":2,"49":1,"50":1,"51":2,"52":2,"53":2,"66":5,"167":2,"171":1,"192":2,"208":2,"210":3,"254":2}}],["new32a",{"2":{"235":1}}],["newmynode",{"2":{"172":1}}],["newmocksharedstore",{"2":{"112":1}}],["newmonitorednode",{"2":{"63":1}}],["newparallelprocessingnode",{"2":{"123":1}}],["newpriorityqueue",{"2":{"121":1}}],["newpriorityworkerpool",{"2":{"121":1}}],["newpool",{"2":{"119":2}}],["newpipeline",{"2":{"107":2}}],["newpipelinenode",{"2":{"62":1}}],["newloadbalancer",{"2":{"231":2}}],["newload",{"2":{"119":2}}],["newlimiter",{"2":{"52":1,"120":1}}],["newdecoder",{"2":{"239":1,"242":1}}],["newdynamicrouter",{"2":{"230":1}}],["newdynamicworkerpool",{"2":{"119":1}}],["newdatabasenode",{"2":{"60":1,"170":1}}],["newdatabaseflow",{"2":{"17":1}}],["newworkerpool",{"2":{"117":1,"118":1,"119":2,"120":1,"121":1,"122":1,"123":1,"124":1}}],["newvalidationnode",{"2":{"65":1}}],["newalgorithmnode",{"2":{"234":1}}],["newasyncnode",{"2":{"64":1}}],["newaccumulatornode",{"2":{"59":1}}],["newsmartretrynode",{"2":{"61":1}}],["newstate",{"2":{"58":1}}],["newsharedstore",{"2":{"20":1,"31":1,"43":1,"79":1,"93":2,"145":1,"177":1,"204":1,"208":1,"209":1,"210":1,"212":1,"219":1}}],["newerrorresult",{"2":{"46":1,"49":1}}],["newbatchnode",{"2":{"25":1,"31":1,"32":2,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"43":1,"44":2,"45":1,"46":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"192":1,"254":1}}],["newbasenode",{"2":{"17":1,"58":1,"59":1,"60":1,"61":1,"62":1,"64":1,"65":1,"123":1,"170":1,"172":1,"230":1,"231":1,"234":1,"252":1}}],["newflow",{"2":{"2":1,"7":1,"8":1,"31":1,"72":2,"73":2,"74":4,"75":1,"76":2,"77":1,"78":1,"79":1,"80":1,"84":2,"85":3,"86":3,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"130":1,"133":1,"134":1,"135":1,"144":1,"147":1,"148":1,"149":1,"150":2,"152":1,"153":1,"154":1,"155":2,"158":1,"210":1,"222":1,"227":1,"228":1,"232":1,"233":1,"234":1}}],["new",{"0":{"221":1,"222":1},"2":{"2":1,"4":1,"14":2,"23":1,"46":1,"119":1,"214":1,"221":1,"229":1,"234":3}}],["newnode",{"2":{"2":1,"75":1,"77":1,"78":2,"79":1,"80":2,"85":2,"87":1,"88":1,"90":1,"91":2,"93":1,"113":1,"133":1,"134":1,"156":1,"167":1,"168":1,"171":3,"208":2,"209":1,"210":2,"211":1,"212":1,"221":1,"227":1,"228":1,"232":1,"233":1,"235":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"250":1}}],["no",{"2":{"61":1,"135":2,"227":1,"229":1,"253":1,"264":2,"270":1}}],["now",{"2":{"28":1,"36":2,"37":1,"63":1,"125":1,"126":1,"184":1,"189":2,"190":1,"196":1,"210":1,"213":1,"244":1,"252":1,"257":1,"264":1,"267":1,"268":1}}],["noerror",{"2":{"19":1,"20":2,"79":3,"93":2}}],["note",{"2":{"116":1,"124":1}}],["notify",{"2":{"86":2}}],["not",{"2":{"5":2,"22":2,"50":1,"102":3,"180":11,"188":1,"194":2,"267":1,"269":1}}],["nodeb",{"2":{"148":2}}],["nodea",{"2":{"148":2}}],["node3",{"2":{"147":2}}],["node2",{"2":{"131":1,"135":1,"147":2,"156":1}}],["node1",{"2":{"131":1,"135":3,"147":2,"156":1,"188":1}}],["nodeconfig",{"2":{"76":2}}],["nodes",{"0":{"13":1,"19":1,"59":1,"60":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"79":1,"123":1,"160":1,"165":1,"221":1,"240":1},"1":{"67":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":2,"167":2,"168":2,"169":2,"170":2,"171":1,"172":1,"173":1,"174":1,"175":1},"2":{"3":1,"13":1,"19":1,"43":1,"55":1,"57":1,"66":1,"67":1,"68":2,"73":1,"76":10,"79":1,"80":2,"81":3,"82":1,"109":1,"115":2,"123":1,"128":2,"142":1,"143":2,"144":1,"150":1,"156":2,"157":2,"159":1,"160":1,"166":1,"169":1,"170":1,"173":1,"174":1,"175":1,"176":1,"187":1,"188":1,"189":1,"200":1,"210":2,"212":1,"213":1,"217":1,"218":1,"221":3,"222":4,"223":3,"238":1,"239":1,"242":1,"244":1,"248":1}}],["node",{"0":{"1":1,"14":1,"22":1,"57":1,"58":1,"70":1,"71":1,"73":1,"113":1,"150":1,"161":1,"170":1,"171":1,"207":1},"1":{"2":1,"3":1,"4":1,"5":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"162":1,"163":1,"164":1,"208":1,"209":1},"2":{"2":3,"8":3,"14":3,"17":1,"19":3,"26":1,"31":2,"34":1,"43":1,"63":1,"68":1,"70":2,"71":4,"72":3,"73":2,"75":1,"76":4,"79":1,"80":5,"82":1,"84":1,"88":2,"92":1,"95":2,"100":1,"113":2,"129":1,"130":2,"141":1,"144":1,"150":1,"156":1,"160":1,"161":1,"167":1,"168":1,"171":4,"174":1,"175":2,"187":2,"188":1,"190":1,"200":1,"207":1,"208":5,"209":4,"211":1,"212":2,"213":1,"217":4,"221":1,"223":1,"227":1,"233":1,"235":1,"239":1,"240":1,"241":1,"242":2,"243":1,"244":6,"245":1,"246":1,"247":1,"248":2,"250":2,"257":2,"262":1}}],["n",{"2":{"3":1,"5":3,"10":1,"11":1,"13":5,"16":1,"26":1,"28":1,"58":9,"59":12,"60":17,"61":17,"62":2,"63":14,"64":13,"65":3,"66":4,"100":1,"109":1,"116":1,"117":1,"123":4,"124":1,"130":1,"162":1,"163":1,"164":1,"170":2,"172":1,"173":5,"179":1,"183":1,"187":2,"188":1,"190":1,"199":1,"204":1,"208":1,"209":1,"210":1,"211":1,"212":1,"219":1,"229":3,"230":2,"231":7,"234":2,"243":3,"251":7,"252":9,"253":4,"255":2,"256":4,"257":4,"258":1,"263":2,"264":8,"265":6,"266":15,"267":19,"268":7,"269":2}}],["nilvalue",{"2":{"97":1}}],["nil",{"2":{"2":2,"4":2,"5":6,"10":2,"13":1,"16":2,"19":1,"25":2,"26":3,"28":3,"31":4,"33":6,"34":9,"35":10,"36":5,"37":4,"38":4,"39":5,"43":3,"45":6,"46":6,"48":4,"49":4,"50":3,"51":4,"52":5,"53":5,"58":4,"59":3,"60":12,"61":6,"62":4,"63":1,"64":2,"65":6,"66":9,"71":1,"75":2,"77":5,"78":2,"79":1,"80":2,"84":1,"85":2,"87":2,"88":2,"89":1,"90":5,"91":3,"92":1,"93":1,"97":1,"98":1,"100":2,"108":5,"110":1,"113":1,"114":1,"120":2,"121":1,"123":3,"125":1,"126":2,"130":2,"131":1,"133":3,"134":4,"135":2,"137":3,"138":3,"139":3,"140":1,"145":1,"147":1,"156":4,"162":3,"163":3,"164":2,"167":5,"168":4,"170":3,"171":3,"172":1,"173":1,"180":2,"181":1,"187":4,"188":3,"190":3,"192":1,"194":1,"197":2,"208":3,"209":2,"210":6,"211":2,"212":2,"219":1,"221":1,"227":3,"228":5,"229":1,"230":2,"231":2,"232":7,"233":5,"234":2,"235":4,"239":4,"240":1,"241":3,"242":4,"243":5,"245":4,"246":5,"250":3,"251":3,"252":4,"253":5,"254":5,"256":5,"257":4,"258":4,"263":4,"264":5,"265":7,"266":4,"267":6,"268":1,"269":5}}],["===========================",{"2":{"199":1}}],["===",{"2":{"199":2}}],["==",{"2":{"36":1,"38":2,"45":1,"46":1,"65":1,"66":1,"77":1,"90":1,"98":2,"100":1,"108":3,"138":1,"188":1,"246":1,"253":1,"264":1,"265":2}}],["=",{"2":{"2":8,"3":3,"5":6,"7":3,"8":3,"10":5,"11":1,"13":1,"14":3,"16":2,"19":4,"20":5,"25":8,"26":1,"28":3,"31":11,"32":3,"33":14,"34":19,"35":16,"36":17,"37":12,"38":16,"39":15,"43":13,"44":3,"45":11,"46":5,"48":10,"49":8,"50":9,"51":10,"52":13,"53":15,"58":2,"59":4,"60":13,"61":10,"62":4,"63":4,"64":9,"65":4,"66":9,"71":1,"72":2,"73":2,"74":13,"75":6,"76":10,"77":7,"78":5,"79":6,"80":4,"84":5,"85":6,"86":12,"87":3,"88":3,"89":3,"90":7,"91":8,"92":9,"93":6,"97":4,"98":4,"100":5,"101":5,"102":7,"103":6,"104":5,"105":4,"106":5,"107":6,"108":7,"109":4,"110":3,"112":2,"113":1,"117":4,"118":7,"119":5,"120":4,"121":3,"122":3,"123":12,"124":9,"125":4,"126":6,"130":1,"133":3,"134":3,"135":1,"137":2,"138":1,"139":1,"140":2,"141":4,"144":4,"145":5,"147":1,"148":1,"149":1,"150":2,"152":1,"153":1,"154":1,"155":7,"158":1,"162":4,"163":3,"167":7,"168":4,"170":3,"171":3,"173":1,"177":1,"179":1,"180":10,"181":2,"182":2,"183":2,"185":1,"187":3,"188":3,"189":1,"190":2,"191":2,"192":3,"194":4,"195":4,"199":3,"204":2,"208":6,"209":5,"210":11,"211":1,"212":5,"219":7,"222":3,"227":4,"228":3,"229":6,"230":3,"231":6,"232":8,"233":5,"234":4,"235":9,"239":6,"240":3,"241":6,"242":14,"243":7,"244":4,"245":3,"246":3,"250":1,"251":3,"252":6,"253":4,"254":10,"255":2,"256":3,"257":3,"258":7,"263":2,"264":6,"265":3,"266":8,"267":5,"268":3}}],["md",{"2":{"217":1}}],["mysql",{"2":{"241":1}}],["myapp",{"2":{"224":4,"241":1}}],["myproject",{"2":{"219":1,"222":1}}],["my",{"2":{"215":2,"217":1}}],["mynode",{"2":{"5":3,"100":1,"130":1,"162":1,"163":1,"164":1,"172":4}}],["ms",{"2":{"125":1}}],["message",{"2":{"167":7,"168":5,"265":1,"267":2,"269":2}}],["mediumhandler",{"2":{"134":1,"228":1}}],["medium",{"2":{"134":2,"228":2}}],["mergemaps",{"2":{"104":2}}],["merge",{"0":{"104":1,"184":1},"2":{"91":2,"152":1,"184":2,"233":1}}],["mergenode",{"2":{"74":2,"91":3,"148":2,"152":2,"233":4}}],["meaningful",{"2":{"81":1,"94":1,"270":1}}],["metadata",{"2":{"184":1,"196":2,"264":1}}],["method",{"0":{"181":1},"2":{"242":2}}],["methods",{"0":{"182":1},"2":{"66":1,"71":1,"79":1,"169":1,"172":1,"182":1}}],["metricdata",{"2":{"36":3}}],["metric",{"2":{"36":7}}],["metricsfallbacknode",{"2":{"268":2}}],["metrics",{"0":{"268":1},"2":{"36":9,"63":12,"68":1,"127":1,"246":2,"268":2}}],["migrating",{"2":{"169":1}}],["might",{"2":{"46":1}}],["middleware",{"0":{"78":1,"244":1}}],["milliseconds",{"2":{"63":1}}],["millisecond",{"2":{"45":1,"255":1}}],["minimal",{"2":{"265":2}}],["minimize",{"2":{"94":1}}],["minutes",{"2":{"206":1}}],["minworkers",{"2":{"119":2}}],["mindful",{"2":{"81":1}}],["min",{"2":{"36":5,"119":4,"124":1}}],["m",{"2":{"36":4,"104":2,"112":8}}],["most",{"2":{"116":1,"124":1,"131":1,"236":1}}],["mocksharedstore",{"2":{"112":5}}],["mocksubflow",{"2":{"93":2}}],["mock",{"0":{"112":1}}],["mocked",{"2":{"93":2}}],["more",{"2":{"61":1,"119":1}}],["monitoredpool",{"2":{"125":3}}],["monitorednode",{"2":{"63":5}}],["monitor",{"2":{"51":1,"54":1,"127":1,"236":1,"259":1,"270":1}}],["monitoring",{"0":{"27":1,"63":1,"125":1},"1":{"28":1},"2":{"68":1}}],["modify",{"2":{"247":1}}],["module",{"2":{"217":1}}],["modular",{"0":{"7":1},"2":{"83":1,"85":1}}],["mod",{"2":{"215":1,"217":1}}],["mode",{"2":{"38":2}}],["mustbind",{"2":{"181":2}}],["must",{"2":{"91":1}}],["mustmap",{"2":{"31":1,"33":1,"36":1,"39":1,"192":1}}],["multilevelfallbacknode",{"2":{"265":3}}],["multi",{"0":{"134":1,"228":1,"265":1},"2":{"34":2,"86":1,"134":1,"228":1}}],["multiple",{"2":{"7":1,"30":2,"31":3,"32":1,"62":1,"85":1,"108":1,"110":1,"148":1,"159":1,"184":1,"185":1,"187":1,"188":1,"192":1,"210":1,"228":1,"265":1}}],["mutexes",{"2":{"247":1}}],["mutex",{"2":{"13":1,"59":1,"108":1,"110":1,"118":1,"121":1,"173":1,"231":1,"240":1}}],["mu",{"2":{"13":3,"59":3,"60":7,"108":5,"110":3,"112":5,"118":3,"119":3,"121":1,"126":5,"173":3,"231":3,"240":3,"264":5}}],["much",{"2":{"2":1}}],["marshal",{"2":{"242":1}}],["mark3labs",{"2":{"202":1,"203":1,"204":1,"208":1,"210":1,"215":1,"219":1,"221":1,"222":1}}],["magic",{"2":{"141":1}}],["machines",{"2":{"237":1}}],["machine",{"0":{"139":1,"229":1}}],["math",{"2":{"61":1,"251":1}}],["matching",{"2":{"49":1}}],["maxconns",{"2":{"241":3}}],["maxworkers",{"2":{"119":4}}],["maxdepth",{"2":{"77":2,"90":2}}],["maxsize",{"2":{"59":6}}],["max",{"2":{"36":5,"90":2,"119":2,"167":1,"168":1}}],["maxretries",{"2":{"35":1,"100":4,"257":1}}],["maps",{"0":{"104":1},"2":{"104":2}}],["mapnode",{"2":{"48":1}}],["map",{"0":{"48":1,"101":1},"2":{"31":3,"33":1,"34":2,"36":6,"37":1,"38":1,"39":2,"51":1,"59":1,"60":2,"63":2,"75":2,"88":1,"91":1,"104":3,"112":2,"125":2,"140":1,"162":1,"163":1,"167":1,"168":2,"179":1,"181":3,"184":2,"190":1,"191":1,"192":2,"196":2,"210":2,"212":2,"229":2,"230":2,"231":3,"232":3,"233":1,"234":2,"235":2,"239":1,"241":1,"242":6,"245":2,"253":2,"263":1,"264":2,"265":2,"266":1,"267":2,"269":3}}],["makedecisionpost",{"2":{"137":1}}],["make",{"2":{"25":1,"33":1,"34":1,"36":1,"37":1,"39":1,"43":1,"45":1,"48":1,"49":1,"50":1,"51":1,"52":2,"53":3,"59":1,"60":1,"64":3,"94":1,"98":1,"101":2,"104":1,"105":1,"106":1,"107":1,"114":1,"118":1,"122":2,"123":3,"124":1,"227":1,"243":1,"254":1,"258":2,"266":2,"270":1}}],["many",{"2":{"80":1,"81":1,"94":1}}],["manage",{"2":{"68":1,"116":1,"243":1}}],["management",{"0":{"11":1,"15":1,"189":1,"243":1},"1":{"16":1,"17":1},"2":{"57":1,"68":1,"69":1,"116":1,"124":1,"174":1,"182":1,"237":1,"243":1}}],["managing",{"0":{"60":1},"2":{"67":1}}],["manual",{"2":{"5":1,"180":1,"194":1}}],["main",{"0":{"219":1},"2":{"84":1,"93":1,"150":1,"163":2,"187":1,"204":3,"208":2,"209":1,"210":2,"212":1,"215":1,"217":1,"219":2}}],["maintain",{"2":{"59":1,"240":1}}],["maintains",{"2":{"32":1,"44":1}}],["maintainable",{"2":{"0":1}}],["mainflow",{"2":{"7":1,"72":3,"73":3,"75":3,"84":3,"87":4,"89":7,"91":6,"93":3,"150":3}}],["❌",{"2":{"2":1,"4":1,"5":1,"14":1}}],["want",{"2":{"169":1}}],["way",{"0":{"134":1,"228":1},"2":{"134":1,"214":1,"228":1}}],["waits",{"2":{"127":1}}],["waitgroup",{"2":{"64":1,"101":1,"123":1,"185":1}}],["wait",{"2":{"45":1,"52":3,"64":2,"101":1,"117":2,"118":1,"120":2,"123":2,"124":1,"171":2,"185":1,"250":1,"270":1}}],["world",{"2":{"107":2,"213":1,"225":1}}],["workload",{"2":{"127":1}}],["workflowcontext",{"2":{"196":2}}],["workflow",{"2":{"83":1,"86":1,"90":1,"129":1,"189":3,"205":1,"206":1,"210":1,"213":1,"217":1}}],["workflows",{"0":{"74":1,"86":1},"2":{"0":1,"20":1,"30":1,"67":1,"74":1,"83":1,"96":1,"142":1,"143":1,"160":1,"175":1,"213":1,"237":1,"249":1,"261":1}}],["works",{"2":{"55":1}}],["work",{"0":{"130":1},"2":{"45":1,"160":1,"163":1,"270":1}}],["working",{"2":{"43":1,"169":2,"218":1}}],["workerpool",{"2":{"116":3,"119":1,"120":1,"121":1,"122":1,"123":1,"124":2,"125":1,"126":1}}],["workers",{"2":{"45":1,"64":7,"101":2,"117":1,"119":1,"120":2,"121":5,"122":2,"123":2,"124":2,"127":1}}],["worker",{"0":{"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1},"1":{"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1},"2":{"41":1,"56":1,"64":2,"69":1,"117":1,"118":1,"119":1,"123":1,"124":1,"127":3,"128":1,"185":1}}],["weight",{"2":{"231":5}}],["weights",{"2":{"231":6}}],["weighted",{"0":{"231":1}}],["were",{"2":{"79":1}}],["well",{"2":{"2":1,"94":1,"114":1,"160":1,"174":1}}],["wrong",{"2":{"180":1,"194":1}}],["wrapping",{"2":{"169":1}}],["wrapper",{"0":{"106":1}}],["wrapped",{"2":{"66":1,"78":4}}],["wrap",{"2":{"66":1,"78":1,"244":1}}],["write",{"2":{"60":1,"68":1,"157":1,"235":1,"236":1}}],["wg",{"2":{"64":4,"101":4,"123":4,"185":4}}],["wisely",{"2":{"54":1}}],["will",{"2":{"46":1,"163":1,"206":1,"250":1,"256":1,"263":1}}],["withexecfallbackfunc",{"2":{"250":1}}],["withexecfunc",{"2":{"25":1,"31":1,"32":2,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"43":1,"44":2,"45":1,"46":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"67":1,"167":2,"171":1,"192":1,"208":2,"210":2,"254":1}}],["withexecfuncany",{"2":{"2":1,"75":1,"77":1,"78":2,"79":1,"80":2,"85":2,"87":1,"88":1,"90":1,"91":1,"93":1,"113":1,"133":1,"134":1,"156":1,"168":2,"171":2,"209":1,"211":1,"212":1,"221":1,"227":1,"228":1,"232":1,"233":1,"235":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"250":1}}],["withvalue",{"2":{"109":1}}],["withrequestid",{"2":{"109":1}}],["within",{"2":{"83":1,"123":1}}],["withlogging",{"2":{"78":2,"244":2}}],["withwait",{"2":{"45":1,"171":3,"172":1,"211":1,"250":1}}],["withmaxretries",{"2":{"35":1,"39":1,"45":1,"171":3,"172":1,"211":1,"250":1}}],["withbatcherrorhandling",{"2":{"34":1,"39":1,"45":1,"46":1,"54":1,"254":1}}],["withbatchconcurrency",{"2":{"25":1,"32":2,"34":1,"35":1,"37":1,"44":2,"45":1,"51":1,"52":1,"53":1,"116":1,"124":1}}],["withpostfuncany",{"2":{"75":1,"77":1,"87":1,"90":1,"133":1,"134":1,"156":1,"168":2,"227":1,"228":1,"232":1,"233":1,"235":1,"244":1}}],["withpostfunc",{"2":{"25":1,"31":1,"32":2,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"43":1,"44":2,"45":1,"46":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"167":2,"210":1,"254":1}}],["withprepfuncany",{"2":{"77":1,"88":1,"90":1,"91":1,"156":1,"168":2,"212":1,"232":1,"235":1,"242":1,"244":1,"245":1}}],["withprepfunc",{"2":{"25":1,"31":1,"32":2,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"43":1,"44":2,"45":1,"46":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"167":2,"192":1,"210":1,"254":1}}],["withtimeout",{"2":{"11":1,"53":1,"106":3,"258":1}}],["with",{"0":{"35":1,"53":1,"66":1,"118":1,"122":1,"124":1,"202":1,"255":1,"268":1},"1":{"67":1},"2":{"5":2,"31":1,"42":1,"43":1,"52":1,"54":2,"55":1,"57":1,"61":1,"78":1,"80":1,"88":1,"91":1,"93":1,"102":1,"116":2,"117":1,"119":1,"123":1,"124":1,"126":1,"127":2,"128":1,"130":1,"142":1,"144":1,"145":1,"158":1,"160":1,"167":1,"168":1,"169":4,"170":1,"171":3,"175":1,"176":1,"179":1,"180":1,"189":2,"192":1,"194":1,"205":1,"207":1,"208":3,"209":2,"210":1,"213":1,"217":1,"218":1,"219":1,"232":1,"233":1,"234":1,"235":1,"238":1,"239":1,"240":1,"241":1,"243":1,"244":1,"249":1,"251":1}}],["why",{"2":{"270":1}}],["which",{"2":{"124":1,"231":1,"233":1,"236":1}}],["where",{"2":{"114":1}}],["wherever",{"2":{"72":1}}],["whether",{"2":{"40":1}}],["when",{"2":{"25":1,"26":1,"43":1,"66":1,"67":2,"73":2,"79":1,"81":1,"116":1,"127":1,"130":1,"169":2,"197":1,"223":1,"259":1,"261":1,"264":1,"266":1,"270":1}}],["what",{"0":{"216":1},"1":{"217":1,"218":1,"219":1},"2":{"35":1,"81":1,"94":1,"223":1,"270":1}}],["w",{"2":{"4":1,"5":1,"33":2,"34":4,"35":1,"39":1,"52":1,"62":1,"100":1,"123":1,"254":1,"256":1,"258":1,"264":1}}],["during",{"2":{"261":1,"270":1}}],["duration",{"2":{"37":5,"61":2,"100":2,"106":1,"110":1,"122":2,"125":2,"126":1,"251":2,"252":1,"255":3,"267":1}}],["due",{"2":{"253":1,"264":1,"265":2}}],["dive",{"2":{"213":1,"237":1}}],["dir",{"2":{"198":1}}],["directory",{"2":{"198":1,"221":1,"222":1}}],["direct",{"2":{"168":1,"171":1}}],["directly",{"2":{"79":1,"116":1,"124":1,"181":1}}],["diagrams",{"2":{"157":1}}],["diamond",{"0":{"152":1}}],["distribution",{"2":{"235":3}}],["distribute",{"2":{"231":1}}],["disabled",{"2":{"234":2}}],["dispatch",{"2":{"121":2}}],["dispatcher",{"2":{"121":1}}],["disconnect",{"2":{"86":2}}],["difficult",{"2":{"94":1}}],["different",{"2":{"46":1,"75":1,"97":1,"157":1,"233":1,"269":1}}],["dms",{"2":{"63":2}}],["dsn",{"2":{"60":2,"241":2}}],["dtos",{"2":{"48":5}}],["dto",{"2":{"48":6}}],["dynamicrouter",{"2":{"230":4}}],["dynamicpost",{"2":{"140":1}}],["dynamicworkerpool",{"2":{"119":5}}],["dynamically",{"2":{"87":1,"226":1}}],["dynamicflow",{"2":{"75":1}}],["dynamic",{"0":{"33":1,"75":1,"92":1,"119":1,"140":1,"230":1,"245":1},"2":{"61":1,"129":1,"271":1}}],["d",{"2":{"4":1,"28":1,"33":3,"37":4,"38":2,"39":3,"45":2,"46":2,"49":1,"51":4,"62":1,"100":1,"108":1,"117":1,"173":1,"179":1,"185":1,"211":1,"240":1,"241":1,"251":1,"254":3,"266":1,"268":1}}],["dbnode",{"2":{"241":1}}],["dbop",{"2":{"86":3}}],["dbconfig",{"2":{"35":1}}],["db",{"2":{"3":1,"17":8,"60":5,"170":7,"241":3,"246":4}}],["degraded",{"2":{"263":1,"267":1,"270":1}}],["degrade",{"2":{"259":1}}],["degradation",{"2":{"69":1,"253":1,"260":1,"261":1}}],["decode",{"2":{"239":1,"242":1}}],["decisions",{"2":{"227":1}}],["decisionnode",{"2":{"148":3}}],["decides",{"2":{"233":1}}],["decide",{"2":{"40":1}}],["delete",{"2":{"182":2}}],["delay",{"2":{"110":2}}],["developer",{"2":{"181":1}}],["debugsharedstore",{"2":{"199":1}}],["debug",{"2":{"156":2}}],["debugging",{"0":{"156":1,"199":1},"2":{"94":1,"156":2,"157":1,"190":1,"199":1,"257":1,"259":1}}],["debounce",{"0":{"110":1},"2":{"110":2}}],["deep",{"2":{"94":1,"213":1,"236":1,"237":1}}],["deps",{"2":{"246":7}}],["deployment",{"0":{"224":1},"2":{"224":1}}],["dependency",{"0":{"246":1}}],["dependencies",{"2":{"94":1,"215":1,"246":4}}],["dependent",{"2":{"54":1}}],["depth+1",{"2":{"77":1,"90":1}}],["depth",{"2":{"77":7,"90":9}}],["depthcheck",{"2":{"77":4}}],["demonstrates",{"2":{"218":1}}],["demonstrateflowlifecycle",{"2":{"73":1}}],["demand",{"2":{"76":1}}],["details",{"0":{"98":1},"2":{"82":1}}],["detailederrornode",{"2":{"257":2}}],["detailed",{"2":{"68":1}}],["detects",{"2":{"55":1}}],["determines",{"2":{"164":1}}],["determine",{"2":{"35":1,"129":1,"164":1,"168":1,"231":1,"235":1}}],["definitions",{"2":{"217":1}}],["defined",{"2":{"94":1,"160":1}}],["define",{"2":{"68":1,"141":1,"143":1,"181":1,"187":1}}],["defer",{"2":{"11":1,"16":2,"28":1,"53":1,"59":1,"60":3,"101":2,"106":1,"108":1,"110":1,"112":2,"119":1,"123":1,"126":1,"170":1,"174":1,"185":1,"197":1,"231":1,"239":1,"241":1,"242":1,"243":1,"258":1}}],["defaultvaluenode",{"2":{"263":3}}],["defaultconfig",{"2":{"104":1}}],["defaults",{"2":{"102":1,"180":1,"270":1}}],["default",{"0":{"131":1},"2":{"5":2,"10":1,"35":1,"38":1,"61":1,"62":1,"131":1,"139":1,"172":1,"194":1,"228":1,"230":1,"253":1,"263":4,"265":1,"267":1,"269":1}}],["defaultaction",{"2":{"2":2,"7":2,"25":1,"31":2,"33":1,"35":1,"36":1,"37":1,"38":1,"39":1,"43":1,"45":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"66":1,"72":3,"73":2,"74":4,"76":2,"77":1,"78":2,"79":1,"84":2,"85":3,"86":5,"89":2,"90":1,"91":2,"92":1,"93":1,"131":3,"144":2,"147":3,"148":2,"149":1,"150":3,"152":2,"153":2,"154":3,"155":2,"156":3,"158":2,"167":1,"168":1,"188":1,"190":1,"210":2,"222":1,"230":1,"231":1,"233":2,"254":1,"257":1}}],["despite",{"2":{"34":1,"39":1,"46":1,"54":1,"254":1}}],["descriptive",{"2":{"4":1,"141":1,"157":1,"195":1,"236":1}}],["design",{"0":{"1":1,"6":1},"1":{"2":1,"3":1,"4":1,"5":1,"7":1,"8":1},"2":{"3":1,"174":1}}],["databaseconfig",{"2":{"241":3}}],["database",{"2":{"33":1,"35":1,"241":3,"246":1}}],["databasenode",{"2":{"17":1,"60":6,"170":4}}],["databaseflow",{"2":{"17":4}}],["data",{"0":{"196":1},"2":{"2":4,"3":9,"22":3,"23":2,"26":2,"31":3,"33":4,"35":4,"39":4,"43":2,"45":1,"54":2,"59":1,"65":1,"66":2,"88":2,"91":5,"93":1,"97":1,"101":2,"112":4,"118":2,"123":2,"133":2,"145":2,"154":1,"159":1,"162":3,"163":2,"167":3,"168":3,"169":4,"176":1,"181":1,"182":1,"183":1,"192":3,"194":1,"196":1,"197":2,"199":2,"207":1,"208":2,"209":1,"210":13,"212":1,"219":1,"227":3,"230":2,"233":3,"239":4,"242":3,"245":2,"253":6,"263":1,"264":11,"265":6,"268":1,"269":2,"270":1}}],["docker",{"2":{"224":3}}],["document",{"0":{"22":1,"23":1},"2":{"68":1,"81":2,"94":2,"114":1,"141":1,"157":1,"158":1,"198":1,"223":1,"236":1,"247":1,"270":1}}],["documentation",{"0":{"21":1,"198":1},"1":{"22":1,"23":1},"2":{"68":1,"217":1,"247":1}}],["don",{"2":{"127":1,"247":1,"256":2,"259":1,"270":1}}],["done",{"2":{"10":1,"53":1,"62":1,"64":5,"101":1,"106":4,"122":3,"123":5,"127":1,"135":1,"139":1,"185":2,"197":1,"229":1,"258":1}}],["down",{"2":{"119":1}}],["double",{"2":{"60":1}}],["does",{"2":{"22":1,"223":1}}],["doing",{"2":{"2":1}}],["do",{"2":{"2":1,"3":1,"174":1,"239":1,"242":1}}],["system",{"2":{"237":1,"270":1}}],["sync",{"2":{"13":1,"59":1,"60":1,"64":1,"101":1,"108":1,"110":1,"112":1,"118":1,"119":1,"121":1,"123":1,"126":1,"173":1,"185":1,"231":1,"240":1,"253":1,"264":1,"265":1}}],["skip",{"2":{"233":5}}],["slice",{"0":{"103":1,"105":1},"2":{"98":1,"103":5,"105":2}}],["slices",{"2":{"97":1}}],["sleep",{"2":{"45":1,"100":1}}],["specialized",{"2":{"242":2}}],["specific",{"2":{"180":1,"254":1,"256":1}}],["sprint",{"2":{"210":1}}],["sprintf",{"2":{"43":1,"65":1,"173":1,"185":1,"239":2,"240":1,"241":1}}],["split",{"2":{"91":2,"152":1,"233":1}}],["splitnode",{"2":{"91":4,"152":3,"233":6}}],["smallhandler",{"2":{"134":1,"228":1}}],["small",{"2":{"134":2,"228":2}}],["smaller",{"2":{"80":1}}],["smartretrynode",{"2":{"61":6}}],["scheme",{"2":{"141":1}}],["schemanode",{"2":{"74":3}}],["schemacheck",{"2":{"7":3,"84":4}}],["scaledown",{"2":{"119":1}}],["scaleup",{"2":{"119":2}}],["scale",{"2":{"119":2}}],["scaling",{"0":{"119":1}}],["scanresults",{"2":{"60":1}}],["scenarios",{"2":{"116":1,"247":1}}],["s",{"0":{"216":1},"1":{"217":1,"218":1,"219":1},"2":{"35":1,"38":1,"63":2,"65":2,"66":1,"73":1,"78":2,"107":2,"109":1,"129":1,"156":3,"183":1,"199":1,"204":1,"207":1,"208":1,"209":1,"210":1,"211":1,"219":1,"233":1,"239":2,"241":4,"244":4,"253":1}}],["some",{"2":{"45":1,"46":1}}],["sources",{"2":{"265":1}}],["source",{"2":{"35":3,"196":1,"263":1,"265":3}}],["sophisticated",{"2":{"34":1,"57":1,"115":1}}],["switch",{"2":{"35":1,"38":1,"61":1,"92":1,"139":1,"228":1,"269":1}}],["similar",{"2":{"181":1}}],["simpler",{"2":{"74":1,"116":1,"124":1,"155":1,"168":1}}],["simple",{"0":{"133":1,"168":1,"209":1,"227":1},"2":{"67":1,"75":1,"79":1,"80":1,"147":1,"157":1,"169":2,"187":1,"204":1,"207":1,"210":1,"236":1}}],["simplify",{"2":{"96":1}}],["simplifies",{"2":{"43":1}}],["simplicity",{"2":{"55":1}}],["simulate",{"2":{"45":1,"211":1}}],["size",{"2":{"33":1,"127":1,"191":1}}],["since",{"2":{"28":1,"37":1,"38":1,"63":1,"125":1,"126":1,"244":1,"252":1,"264":1,"267":2}}],["singleitem",{"2":{"97":1}}],["single",{"0":{"2":1},"2":{"81":1,"94":1,"97":2,"98":1,"144":1,"160":1,"174":1}}],["supported",{"2":{"171":1}}],["support",{"2":{"169":1}}],["succeeded",{"2":{"63":1}}],["successnode",{"2":{"89":1,"232":1}}],["successes",{"2":{"63":4,"254":1}}],["successcount++",{"2":{"33":1,"45":1}}],["successcount",{"2":{"33":3,"45":3}}],["success",{"0":{"137":1},"2":{"22":1,"28":1,"31":2,"33":1,"34":1,"45":1,"46":2,"61":1,"63":1,"66":1,"126":1,"130":1,"137":1,"149":1,"164":1,"204":2,"211":1,"219":1,"232":5,"251":1,"252":1,"264":1,"266":2}}],["successful++",{"2":{"37":1}}],["successfully",{"2":{"22":1,"33":1,"45":1,"204":2,"210":1}}],["successful",{"2":{"19":1,"35":5,"37":5,"39":7,"43":4,"46":5,"51":1,"253":1,"254":5}}],["sum32",{"2":{"235":1}}],["sum",{"2":{"50":1}}],["sumnode",{"2":{"50":1}}],["summary",{"2":{"36":2}}],["subshared",{"2":{"93":3}}],["subflow",{"2":{"73":7,"89":5,"93":2,"150":4}}],["submitted",{"2":{"125":4}}],["submit",{"2":{"64":1,"117":2,"118":1,"119":2,"120":2,"121":2,"122":2,"123":1,"124":1,"125":2,"126":2}}],["sub",{"2":{"7":1,"73":1,"84":1,"91":1,"93":2,"150":2,"157":1}}],["sql",{"2":{"17":2,"60":11,"170":2,"241":1,"246":1}}],["still",{"2":{"171":1}}],["style",{"2":{"171":1,"208":1}}],["styles",{"2":{"166":1}}],["storage",{"0":{"187":1}}],["stored",{"2":{"183":1}}],["storeint32",{"2":{"126":2}}],["store",{"0":{"176":1,"212":1},"1":{"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1},"2":{"33":1,"124":1,"159":1,"164":1,"168":1,"176":1,"179":1,"181":1,"182":1,"187":1,"190":1,"191":2,"196":1,"208":1,"209":1,"219":1,"223":1,"253":1,"254":1,"265":1}}],["stores",{"2":{"22":1}}],["stop",{"2":{"110":1,"135":2}}],["stmt",{"2":{"60":14}}],["stepflow",{"2":{"92":7}}],["step3",{"2":{"80":1}}],["step2",{"2":{"80":1}}],["step1",{"2":{"80":1}}],["step",{"2":{"34":6,"92":5,"129":1}}],["steps",{"0":{"29":1,"41":1,"56":1,"69":1,"82":1,"95":1,"115":1,"128":1,"142":1,"159":1,"175":1,"200":1,"205":1,"213":1,"225":1,"237":1,"248":1,"260":1,"271":1},"2":{"92":1}}],["strategies",{"2":{"249":1,"265":1,"271":1}}],["straightforward",{"2":{"169":1}}],["strong",{"2":{"55":1}}],["stringslice",{"2":{"97":1}}],["strings",{"2":{"53":1,"65":1,"107":3,"129":1,"141":1}}],["string",{"2":{"16":1,"23":3,"31":4,"33":1,"34":2,"36":6,"37":1,"38":3,"39":2,"43":2,"51":1,"59":1,"60":4,"63":4,"65":2,"75":4,"77":2,"78":1,"85":1,"87":1,"88":1,"90":2,"91":1,"97":1,"104":3,"106":1,"107":3,"109":4,"112":4,"121":1,"125":2,"133":1,"134":1,"140":2,"156":1,"162":1,"163":1,"167":2,"168":3,"170":1,"179":1,"181":5,"182":1,"184":3,"187":3,"189":1,"190":1,"191":2,"192":2,"196":5,"198":2,"210":2,"212":2,"227":1,"228":1,"229":6,"230":6,"231":3,"232":3,"233":2,"234":3,"235":5,"239":3,"241":6,"242":11,"243":1,"244":1,"245":3,"253":3,"257":2,"263":1,"264":4,"265":3,"266":1,"267":3,"269":3}}],["structs",{"2":{"181":1,"241":1}}],["structured",{"2":{"196":1}}],["structure",{"0":{"23":1,"196":1,"217":1},"2":{"158":2}}],["struct",{"2":{"13":1,"17":1,"22":1,"23":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":2,"64":2,"65":1,"66":2,"75":1,"76":1,"101":2,"106":1,"107":1,"108":1,"112":1,"118":1,"119":1,"120":1,"121":2,"122":1,"123":2,"125":1,"126":1,"170":1,"172":1,"173":1,"181":4,"187":2,"196":1,"229":1,"230":1,"231":1,"234":1,"241":1,"246":1,"251":1,"252":1,"253":1,"257":1,"263":1,"264":2,"265":1,"266":1,"267":1,"268":1}}],["standalone",{"2":{"81":1}}],["stage",{"2":{"62":3,"107":4}}],["stages",{"2":{"62":5,"107":5}}],["status",{"2":{"38":1,"184":1,"253":1,"263":1,"265":1,"266":1,"267":2,"269":1}}],["stats",{"2":{"37":1,"51":1}}],["statetransitions",{"2":{"229":2}}],["statemachine",{"2":{"229":3}}],["statement",{"2":{"60":1}}],["statepost",{"2":{"139":1}}],["stateless",{"2":{"67":1}}],["stateful",{"0":{"59":1,"240":1},"2":{"240":1}}],["state",{"0":{"139":1,"189":1,"229":1},"2":{"13":1,"55":1,"57":1,"58":8,"59":1,"67":1,"139":3,"170":1,"189":6,"229":10,"237":2,"238":1,"240":1,"247":1}}],["starttime",{"2":{"37":2,"196":2}}],["starting",{"2":{"31":1,"37":1,"51":1,"78":1,"244":1}}],["start",{"0":{"206":1},"1":{"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1},"2":{"28":2,"37":2,"63":2,"64":1,"73":1,"121":1,"125":2,"144":1,"157":1,"158":1,"189":1,"205":2,"207":1,"214":1,"229":1,"244":2}}],["startnode",{"2":{"8":2,"73":3,"76":2,"85":2,"89":2,"92":3,"93":2,"130":3,"144":3,"149":3,"153":3,"158":2,"222":3}}],["shipment",{"2":{"23":1}}],["share",{"2":{"159":1}}],["shared",{"0":{"14":1,"88":1,"176":1,"212":1},"1":{"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1},"2":{"5":7,"13":1,"14":2,"20":4,"25":4,"26":2,"31":6,"33":5,"34":5,"35":3,"36":4,"37":7,"38":5,"39":6,"43":8,"45":5,"46":4,"48":4,"49":4,"50":6,"51":4,"52":4,"53":5,"58":4,"65":1,"66":4,"71":2,"75":1,"77":4,"79":3,"87":1,"88":3,"90":4,"91":5,"97":1,"102":7,"130":1,"133":1,"134":1,"137":1,"138":3,"139":4,"140":1,"145":4,"156":3,"159":1,"162":4,"164":2,"167":6,"168":6,"177":1,"179":3,"180":10,"181":3,"182":5,"183":1,"184":1,"185":1,"187":5,"188":3,"189":9,"190":2,"191":4,"192":2,"194":3,"196":1,"197":2,"199":2,"204":3,"208":3,"209":3,"210":6,"212":5,"219":6,"227":1,"228":1,"229":3,"230":1,"231":1,"232":4,"233":1,"234":1,"235":4,"242":3,"243":1,"244":4,"245":1,"247":1,"254":5,"257":2}}],["sharedstore",{"0":{"5":1,"112":1,"177":1},"2":{"5":3,"22":1,"23":2,"25":2,"26":1,"31":2,"33":2,"34":2,"35":2,"36":2,"37":2,"38":2,"39":2,"43":2,"45":2,"46":2,"48":2,"49":2,"50":2,"51":2,"52":2,"53":2,"58":2,"65":1,"66":2,"71":2,"75":1,"77":2,"87":1,"88":1,"90":2,"91":1,"130":1,"133":1,"134":1,"137":1,"138":1,"139":1,"140":1,"145":1,"156":3,"162":2,"164":1,"167":2,"168":2,"176":1,"185":1,"187":2,"188":1,"189":2,"190":1,"191":1,"192":2,"198":1,"199":2,"200":2,"210":2,"212":2,"218":1,"223":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":2,"233":1,"234":1,"235":2,"242":1,"244":2,"245":1,"254":2,"257":1}}],["sharing",{"2":{"14":1,"176":1}}],["shouldprocess",{"2":{"38":6}}],["should",{"2":{"2":1,"40":1,"81":1,"94":2,"114":1,"141":1,"173":1,"174":1,"204":1,"270":1}}],["service",{"2":{"265":1,"267":1,"269":1,"270":2}}],["services",{"2":{"259":1}}],["server3",{"2":{"231":1}}],["server2",{"2":{"231":1}}],["server1",{"2":{"231":1}}],["secret",{"2":{"239":1,"241":1}}],["secondary",{"2":{"265":2}}],["secondaryurl",{"2":{"265":2}}],["seconds",{"2":{"37":2,"171":2,"264":1}}],["second",{"2":{"11":1,"45":1,"52":1,"53":1,"61":1,"100":1,"106":1,"110":1,"171":3,"172":1,"211":1,"239":1,"250":2,"251":1,"252":1,"255":1,"258":1}}],["self",{"2":{"232":1}}],["selectiveretrynode",{"2":{"256":2}}],["selective",{"0":{"256":1}}],["selection",{"0":{"75":1},"2":{"75":1}}],["selector",{"2":{"75":5}}],["selected",{"2":{"38":1}}],["select",{"2":{"10":1,"53":1,"62":1,"64":1,"106":1,"122":1,"123":1,"258":1}}],["sensitive",{"2":{"197":2}}],["sends",{"2":{"23":1}}],["semaphore",{"2":{"101":3}}],["sequentialnode",{"2":{"44":1}}],["sequentialbatch",{"2":{"32":1}}],["sequential",{"0":{"32":1,"44":1},"2":{"32":2,"42":1,"44":2,"54":1,"147":1}}],["see",{"2":{"29":1,"115":1,"204":1,"225":1}}],["setup",{"0":{"215":1}}],["setmaxidleconns",{"2":{"60":1}}],["setmaxopenconns",{"2":{"60":1,"241":1}}],["sets",{"2":{"23":1,"30":1,"31":3,"32":1,"192":1}}],["set",{"0":{"179":1},"2":{"3":1,"11":1,"20":1,"25":1,"31":3,"33":1,"34":2,"35":1,"36":1,"37":3,"38":1,"39":3,"40":1,"43":3,"45":2,"46":2,"48":1,"49":1,"50":3,"51":1,"52":1,"53":3,"54":1,"58":1,"66":1,"77":1,"88":1,"90":1,"91":2,"93":1,"97":1,"112":1,"127":1,"138":1,"139":2,"145":1,"164":1,"167":1,"168":1,"179":3,"181":1,"185":1,"187":1,"188":1,"189":5,"190":1,"191":2,"192":1,"196":1,"197":2,"204":1,"210":1,"212":2,"219":2,"229":1,"232":1,"235":1,"239":1,"242":1,"246":1,"254":2,"257":1,"259":1,"270":1}}],["separate",{"2":{"2":1}}],["safenode",{"2":{"173":2}}],["safety",{"0":{"12":1,"173":1,"185":1,"194":1,"208":1},"1":{"13":1,"14":1},"2":{"55":1,"66":1,"68":1,"114":1,"189":1,"210":1,"247":1}}],["safe",{"0":{"5":1,"13":1,"102":1,"167":1,"180":1},"2":{"5":2,"20":1,"66":2,"68":1,"102":2,"114":1,"162":1,"167":4,"169":1,"171":1,"173":1,"176":2,"179":1,"180":3,"185":1,"188":1,"194":2,"210":2,"263":1}}],["safely",{"2":{"3":1,"174":1,"185":1}}],["savedebounced",{"2":{"110":4}}],["saveoptions",{"2":{"35":1}}],["saveorder",{"2":{"34":1}}],["saveresults",{"2":{"35":1}}],["saveenabled",{"2":{"35":1}}],["savenode",{"2":{"2":2,"3":1,"8":1,"72":1,"150":1,"153":2,"154":1,"158":1}}],["savetodatabase",{"2":{"2":1,"110":1}}],["save",{"2":{"2":1,"34":2,"35":2,"92":1,"158":1}}],["rf",{"2":{"215":1}}],["rm",{"2":{"215":1}}],["rps",{"2":{"120":2}}],["rv",{"2":{"98":5}}],["rule",{"2":{"65":3}}],["rules",{"2":{"65":5}}],["runlock",{"2":{"60":1,"112":1,"126":1,"264":1}}],["runs",{"2":{"34":1,"73":2}}],["run",{"2":{"14":2,"20":1,"31":3,"43":2,"93":2,"145":2,"204":2,"208":2,"209":2,"210":2,"212":1,"215":2,"219":2,"224":2}}],["running",{"0":{"145":1},"2":{"10":1,"40":1,"95":1,"121":3}}],["runtime",{"2":{"5":1,"33":1,"75":1,"92":1,"129":1,"140":1,"226":1,"245":1}}],["rlock",{"2":{"60":1,"112":1,"126":1,"264":1}}],["routing",{"0":{"132":1,"230":1,"231":1},"1":{"133":1,"134":1},"2":{"142":1,"218":1,"226":1,"230":1}}],["route",{"2":{"228":1,"230":3,"235":1}}],["routes",{"2":{"130":1,"230":6}}],["routernode",{"2":{"87":5}}],["rows",{"2":{"60":3,"170":3,"241":3}}],["robust",{"2":{"0":1}}],["rwmutex",{"2":{"60":1,"112":1,"119":1,"126":1,"264":1}}],["riskyoperation",{"2":{"39":1}}],["r",{"2":{"25":3,"31":5,"101":4}}],["randomization",{"2":{"255":1}}],["rand",{"2":{"61":1,"255":1}}],["range",{"2":{"8":1,"10":1,"25":3,"31":1,"33":2,"34":2,"35":3,"36":2,"37":2,"38":2,"39":2,"43":2,"45":2,"46":1,"48":2,"49":2,"50":2,"51":2,"52":2,"53":2,"60":1,"62":1,"64":2,"65":1,"75":1,"76":2,"88":1,"92":1,"101":1,"103":1,"104":2,"105":1,"107":1,"108":1,"118":1,"123":2,"124":1,"183":1,"199":1,"231":2,"235":1,"242":1,"254":2,"266":1}}],["rates",{"2":{"259":2,"270":2}}],["ratelimitedpool",{"2":{"120":4}}],["rate",{"0":{"52":1,"120":1},"2":{"33":1,"37":1,"52":6,"61":1,"63":1,"120":5,"268":1,"269":2}}],["race",{"2":{"14":1}}],["remain",{"2":{"261":1}}],["remove",{"2":{"215":1}}],["registry",{"2":{"246":1}}],["regularly",{"2":{"223":1}}],["regular",{"2":{"43":1,"55":1}}],["redis",{"2":{"246":1}}],["related",{"2":{"223":1}}],["req",{"2":{"196":1,"239":3,"242":3}}],["requires",{"2":{"201":1}}],["requirements",{"2":{"68":1}}],["require",{"2":{"67":1}}],["required",{"2":{"23":1,"181":1,"247":1}}],["requestid",{"2":{"109":4,"196":2}}],["requestidkey",{"2":{"109":3}}],["request",{"2":{"52":2,"87":3,"109":1,"246":1,"267":1}}],["requests",{"2":{"52":2}}],["represents",{"2":{"160":1,"192":1}}],["replaceall",{"2":{"107":1}}],["rejectnode",{"2":{"154":1}}],["reflect",{"2":{"98":2}}],["refreshauthtoken",{"2":{"85":1}}],["refreshtoken",{"2":{"85":3}}],["reference",{"2":{"77":1}}],["re",{"2":{"81":1}}],["reader",{"2":{"242":1}}],["readable",{"2":{"236":1}}],["readfile",{"2":{"230":1,"245":1}}],["ready",{"2":{"224":1}}],["readme",{"2":{"217":1}}],["read",{"2":{"162":1,"243":1}}],["reads",{"2":{"22":1,"162":1}}],["real",{"2":{"54":1,"213":1,"225":1}}],["reasonable",{"2":{"54":1,"259":1}}],["recurse",{"2":{"77":3}}],["recursion",{"2":{"77":2}}],["recursive",{"0":{"77":1,"90":1},"2":{"77":1,"90":2}}],["recommended",{"0":{"208":1},"2":{"179":1,"194":1}}],["recovered",{"2":{"39":10}}],["recoveroperation",{"2":{"39":1}}],["recoverableerror",{"2":{"39":1}}],["recoverable",{"2":{"39":3}}],["recoverablebatchnode",{"2":{"39":1}}],["recover",{"2":{"39":1,"89":1,"127":1}}],["recovery",{"0":{"39":1},"2":{"39":3}}],["recordfailure",{"2":{"267":2}}],["records",{"2":{"3":1}}],["record",{"2":{"3":1}}],["recent",{"2":{"38":1}}],["review",{"2":{"29":1}}],["reusability",{"2":{"141":1}}],["reusable",{"0":{"85":1},"2":{"7":2,"67":1,"72":1,"83":1,"85":1,"114":1,"157":1,"169":1,"217":1,"238":1}}],["reuse",{"2":{"17":2,"157":1,"243":1}}],["resume",{"2":{"229":1}}],["resultcollector",{"2":{"118":2}}],["resultchan",{"2":{"53":3,"258":3}}],["result2",{"2":{"91":4}}],["result1",{"2":{"91":4}}],["result",{"0":{"36":1,"66":1,"167":1,"169":1,"208":1},"1":{"67":1},"2":{"10":3,"19":3,"20":3,"25":5,"28":3,"31":7,"33":8,"34":14,"35":13,"36":10,"37":10,"38":9,"39":18,"40":2,"43":10,"45":9,"46":11,"48":9,"49":8,"50":9,"51":10,"52":10,"53":17,"54":3,"55":3,"58":3,"59":2,"61":2,"62":4,"63":2,"64":1,"66":10,"79":1,"80":6,"93":1,"98":3,"100":3,"104":3,"105":4,"106":4,"107":6,"113":1,"117":2,"118":5,"123":3,"124":4,"140":2,"145":1,"156":1,"163":2,"167":10,"168":2,"169":2,"171":3,"172":1,"192":5,"208":5,"210":9,"219":5,"221":1,"230":2,"232":6,"242":3,"244":2,"246":4,"251":2,"252":2,"253":1,"254":12,"256":2,"258":4,"263":2,"266":4,"267":2,"269":1}}],["results",{"0":{"118":1,"188":1},"2":{"10":4,"20":1,"25":6,"31":4,"33":6,"34":5,"35":3,"36":7,"37":5,"38":2,"39":6,"40":1,"43":11,"45":5,"46":4,"48":5,"49":5,"50":6,"51":6,"52":5,"53":5,"64":4,"91":1,"101":4,"118":5,"123":4,"124":4,"145":1,"164":3,"170":1,"188":9,"191":2,"195":1,"219":1,"241":2,"254":6,"266":10}}],["resilient",{"2":{"213":1,"248":1,"249":1,"261":1}}],["res",{"2":{"106":3}}],["resettime",{"2":{"126":2}}],["reset",{"2":{"61":1,"126":2,"251":1,"252":2,"267":2}}],["resources",{"0":{"16":1},"2":{"17":1,"54":1,"60":1,"67":1,"68":1,"127":1,"174":1,"243":1,"247":1}}],["resource",{"0":{"15":1,"60":1,"243":1},"1":{"16":1,"17":1},"2":{"40":1,"68":1,"174":1,"243":1,"247":1}}],["resp",{"2":{"52":3,"239":3,"242":3}}],["responses",{"2":{"52":5}}],["response",{"2":{"52":2,"265":1,"267":1}}],["responsibility",{"0":{"2":1},"2":{"174":1}}],["respect",{"0":{"10":1},"2":{"174":1}}],["retrieve",{"2":{"179":1}}],["retried",{"2":{"163":1,"250":1,"256":1}}],["retries",{"0":{"249":1},"1":{"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1},"2":{"22":1,"45":1,"61":3,"66":3,"100":1,"167":1,"168":1,"171":2,"212":1,"218":1,"250":4}}],["retrycount",{"2":{"167":2,"168":2}}],["retrynode",{"2":{"130":1,"232":6}}],["retryoperation",{"2":{"100":2}}],["retryafter",{"2":{"61":3}}],["retryablepost",{"2":{"138":1}}],["retryablenode",{"0":{"61":1},"2":{"69":1,"251":1}}],["retryable",{"2":{"3":1,"174":1}}],["retry",{"0":{"100":1,"138":1,"250":1,"255":1,"256":1},"2":{"39":1,"45":1,"61":3,"67":1,"69":1,"89":2,"130":2,"138":1,"149":2,"163":1,"167":3,"168":3,"171":2,"189":4,"211":1,"232":2,"249":1,"256":4,"257":1,"259":5,"267":1,"269":1}}],["returning",{"2":{"244":1,"253":1,"263":1,"264":1,"265":1}}],["returned",{"2":{"129":1,"143":1}}],["returns",{"2":{"5":1,"43":1,"73":2,"81":1,"97":2,"102":3,"130":1,"131":1,"135":1,"180":10,"182":1,"188":1,"194":2}}],["return",{"2":{"2":2,"3":1,"4":3,"5":4,"7":1,"8":1,"10":2,"11":1,"13":1,"16":2,"17":2,"25":3,"26":2,"28":2,"31":4,"33":5,"34":9,"35":9,"36":5,"37":4,"38":4,"39":7,"43":4,"45":5,"46":8,"48":4,"49":4,"50":4,"51":4,"52":6,"53":6,"58":5,"59":4,"60":10,"61":10,"62":4,"63":3,"64":3,"65":5,"66":7,"74":4,"75":4,"76":2,"77":5,"78":3,"79":1,"80":4,"84":1,"85":3,"86":3,"87":2,"88":3,"89":1,"90":5,"91":3,"92":1,"93":1,"98":3,"100":4,"101":1,"103":1,"104":1,"105":2,"106":3,"107":4,"108":5,"109":3,"110":1,"112":2,"113":2,"118":1,"119":1,"120":3,"121":1,"122":2,"123":4,"124":1,"125":1,"126":4,"130":2,"131":1,"133":3,"134":4,"137":2,"138":2,"139":3,"140":1,"141":1,"155":2,"156":4,"162":3,"163":2,"164":2,"167":5,"168":4,"170":3,"171":3,"172":2,"173":1,"174":1,"180":1,"187":3,"188":1,"189":2,"190":2,"192":2,"208":2,"209":1,"210":4,"211":3,"212":2,"221":2,"222":1,"227":3,"228":5,"229":4,"230":3,"231":3,"232":6,"233":5,"234":2,"235":5,"239":3,"240":2,"241":3,"242":4,"243":4,"244":4,"245":4,"246":4,"250":3,"251":4,"252":4,"253":6,"254":5,"255":1,"256":5,"257":3,"258":3,"263":5,"264":4,"265":6,"266":5,"267":7,"268":2,"269":7}}],["fnv",{"2":{"235":1}}],["fn",{"2":{"101":2,"106":2,"110":2}}],["fs",{"2":{"75":4}}],["first",{"0":{"207":1},"1":{"208":1,"209":1},"2":{"205":1,"206":1,"213":1}}],["fields",{"2":{"172":1}}],["fine",{"2":{"116":1}}],["finalize",{"2":{"139":1}}],["finalnode",{"2":{"135":1}}],["final",{"2":{"73":2,"219":1}}],["filterslice",{"2":{"105":2}}],["filtered",{"2":{"49":6}}],["filternode",{"2":{"49":1}}],["filter",{"0":{"49":1,"105":1}}],["filepath",{"2":{"243":2}}],["files",{"2":{"223":1}}],["file",{"2":{"16":4,"198":2,"204":1,"217":1,"221":1,"243":3,"245":1}}],["filenode",{"2":{"16":1}}],["full",{"2":{"59":1}}],["fundamental",{"2":{"160":1}}],["fundamentals",{"2":{"29":1,"82":1,"95":1,"205":1,"225":1}}],["function",{"0":{"110":1},"2":{"94":1,"242":1}}],["functions",{"0":{"67":1,"99":1,"166":1,"167":1,"168":1,"242":1},"1":{"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"167":1,"168":1},"2":{"67":1,"96":1,"166":1,"168":1,"169":2}}],["functionality",{"2":{"58":1}}],["func",{"2":{"2":1,"3":1,"5":3,"7":1,"8":1,"10":1,"11":1,"13":1,"16":1,"17":2,"19":1,"20":1,"23":1,"25":3,"26":1,"28":2,"31":3,"33":3,"34":3,"35":4,"36":3,"37":3,"38":3,"39":3,"43":3,"45":3,"46":3,"48":3,"49":3,"50":3,"51":3,"52":4,"53":4,"58":4,"59":3,"60":4,"61":4,"62":4,"63":3,"64":5,"65":3,"66":3,"73":1,"74":4,"75":4,"76":2,"77":4,"78":3,"79":2,"80":5,"84":1,"85":3,"86":3,"87":2,"88":3,"89":1,"90":4,"91":3,"92":1,"93":2,"98":1,"100":4,"101":4,"103":1,"104":1,"105":3,"106":4,"107":7,"108":2,"109":3,"110":5,"112":3,"113":3,"117":1,"118":2,"119":5,"120":3,"121":5,"122":5,"123":5,"124":2,"125":4,"126":4,"130":1,"133":2,"134":2,"137":1,"138":1,"139":1,"140":1,"155":2,"156":4,"162":1,"163":1,"164":1,"167":3,"168":3,"170":2,"171":3,"172":2,"173":1,"185":1,"187":2,"188":1,"189":2,"190":1,"192":2,"197":1,"199":1,"204":1,"208":3,"209":2,"210":5,"211":2,"212":3,"219":1,"221":2,"222":1,"227":2,"228":2,"229":2,"230":2,"231":2,"232":3,"233":2,"234":1,"235":4,"239":2,"240":2,"241":2,"242":3,"243":2,"244":4,"245":3,"246":2,"250":2,"251":3,"252":2,"253":2,"254":3,"255":1,"256":2,"257":1,"258":2,"263":2,"264":2,"265":2,"266":2,"267":5,"268":1,"269":1}}],["featureflagnode",{"2":{"234":3}}],["feature",{"0":{"234":1},"2":{"223":1,"234":7}}],["features",{"2":{"57":1}}],["fewer",{"2":{"61":1}}],["fetching",{"2":{"210":1}}],["fetchdata",{"2":{"106":1}}],["fetchfromurl",{"2":{"265":2}}],["fetchfromprimarysource",{"2":{"263":1}}],["fetchfromdb",{"2":{"35":1}}],["fetchfromapi",{"2":{"2":1,"35":1,"253":1,"264":1}}],["fetchusers",{"2":{"33":1}}],["fetchusernode",{"2":{"22":2}}],["fetched",{"2":{"22":1,"210":2}}],["fetches",{"2":{"22":2}}],["fetchnode",{"2":{"2":3,"7":1,"72":2,"74":3,"84":2,"150":2,"154":2,"210":3}}],["fetch",{"2":{"2":1,"4":1,"33":2,"155":3,"217":2,"253":1,"264":1}}],["fresh",{"2":{"253":1,"264":2}}],["frequently",{"2":{"236":1}}],["framework",{"2":{"43":1,"55":1,"181":1}}],["from",{"2":{"22":3,"31":1,"33":2,"36":1,"39":1,"61":1,"73":1,"74":1,"88":1,"118":1,"127":1,"155":1,"162":1,"180":2,"188":1,"254":1,"256":1}}],["fastest",{"2":{"214":1}}],["faster",{"2":{"44":1}}],["fatal",{"2":{"145":1,"219":1}}],["factory",{"0":{"242":1},"2":{"76":3,"242":1}}],["factories",{"0":{"76":1}}],["falling",{"2":{"270":1}}],["fallbackrate",{"2":{"268":2}}],["fallbackcalls",{"2":{"268":5}}],["fallbackmsg",{"2":{"267":2}}],["fallbacks",{"2":{"259":1,"265":1,"268":1,"269":1,"270":2}}],["fallback",{"0":{"253":1,"261":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1},"1":{"262":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1},"2":{"260":1,"262":1,"263":1,"264":1,"265":1,"268":3,"269":1,"270":5}}],["fallbacknode",{"0":{"262":1},"2":{"69":1,"253":1,"262":2}}],["false",{"2":{"38":1,"39":1,"102":1,"126":1,"180":1,"232":1,"234":1,"253":1,"269":1}}],["fails",{"2":{"266":1}}],["failing",{"2":{"259":1,"265":1}}],["fail",{"2":{"45":1,"250":1,"261":1}}],["failurenode",{"2":{"232":1}}],["failure",{"0":{"137":1,"253":1,"261":1},"1":{"262":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1},"2":{"40":1,"137":1,"163":1,"164":1,"181":1,"211":1,"253":1,"254":1,"260":1,"263":1}}],["failures++",{"2":{"252":1,"267":1}}],["failures",{"2":{"34":2,"39":3,"40":1,"54":1,"63":4,"126":7,"252":5,"259":2,"260":1,"261":1,"267":4,"270":1,"271":1}}],["failed++",{"2":{"37":1,"51":1}}],["failed",{"2":{"4":2,"31":1,"33":2,"34":10,"35":1,"37":5,"39":10,"45":1,"46":2,"51":5,"52":1,"62":1,"63":1,"65":1,"66":1,"100":1,"123":1,"125":4,"229":1,"232":2,"250":1,"251":1,"254":1,"263":1,"266":1,"267":1}}],["f",{"2":{"17":2,"76":1}}],["focused",{"2":{"81":1,"94":1}}],["for",{"0":{"208":1},"2":{"8":1,"10":1,"14":3,"16":1,"20":1,"25":4,"30":1,"31":1,"33":2,"34":4,"35":3,"36":2,"37":2,"38":2,"39":3,"40":2,"43":3,"44":1,"45":3,"46":2,"48":2,"49":2,"50":2,"51":2,"52":3,"53":4,"54":3,"58":1,"60":1,"61":3,"62":1,"64":4,"65":1,"66":4,"68":4,"75":1,"76":3,"80":1,"84":1,"88":1,"91":1,"92":1,"97":2,"98":1,"100":1,"101":1,"102":1,"103":2,"104":2,"105":1,"107":1,"108":1,"114":1,"116":3,"117":2,"118":1,"120":1,"121":1,"123":3,"124":5,"127":1,"133":1,"134":1,"135":2,"141":1,"149":1,"156":2,"157":2,"162":2,"166":1,"167":2,"168":1,"170":1,"176":1,"181":1,"182":1,"183":1,"185":2,"187":1,"188":1,"190":1,"194":1,"196":1,"199":2,"210":2,"211":1,"223":1,"224":1,"227":1,"228":1,"231":2,"232":1,"235":2,"236":1,"241":1,"242":2,"247":1,"250":1,"253":2,"254":3,"257":1,"259":1,"266":1,"269":3}}],["found",{"2":{"5":1,"22":1,"102":3,"180":11,"188":1,"194":2,"269":2}}],["follow",{"2":{"0":1}}],["fmt",{"2":{"4":1,"5":1,"33":2,"34":4,"35":2,"39":1,"43":2,"45":1,"46":1,"49":1,"50":1,"52":1,"53":1,"62":1,"65":2,"66":1,"100":1,"108":1,"117":1,"122":1,"123":1,"126":1,"173":1,"179":1,"183":1,"185":1,"199":3,"204":2,"208":4,"209":2,"210":5,"211":2,"212":1,"239":2,"240":1,"241":1,"252":1,"254":1,"256":1,"258":1,"264":1,"266":1,"267":1}}],["flagnode",{"2":{"234":4}}],["flags",{"0":{"234":1},"2":{"234":3}}],["flaky",{"2":{"211":1}}],["fluent",{"2":{"133":1,"134":1,"167":1,"168":1,"171":2,"208":1,"209":1,"211":1,"221":1,"227":1,"228":1,"232":1,"235":1,"239":1,"240":1,"241":1,"242":1,"243":1,"250":1}}],["flexible",{"2":{"55":1}}],["float32",{"2":{"180":1}}],["float",{"2":{"180":1}}],["float64",{"2":{"33":2,"36":4,"37":1,"50":2,"61":4,"228":1,"251":1,"268":2}}],["flow2",{"2":{"91":4}}],["flow1",{"2":{"91":4}}],["flowconfig",{"2":{"76":3,"92":1}}],["flowfactory",{"2":{"76":2}}],["flowtype",{"2":{"75":2}}],["flowselector",{"2":{"75":4}}],["flows",{"0":{"7":1,"20":1,"30":1,"79":1,"83":1,"88":1,"90":1,"91":1,"93":1,"143":1,"144":1,"145":1,"156":1,"158":1,"192":1,"222":1},"1":{"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1},"2":{"7":1,"30":1,"70":1,"71":1,"73":1,"74":1,"75":5,"76":2,"77":1,"78":1,"80":2,"81":6,"82":2,"83":2,"87":1,"88":1,"89":1,"91":3,"92":1,"93":1,"94":4,"95":4,"142":2,"143":1,"150":1,"155":1,"157":5,"158":1,"159":2,"175":1,"217":1,"218":1,"219":2,"222":4,"223":2,"237":1}}],["flow",{"0":{"6":1,"23":1,"31":1,"70":1,"73":1,"75":1,"76":1,"77":1,"78":1,"84":1,"85":1,"92":1,"135":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"153":1,"155":1,"210":1},"1":{"7":1,"8":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"147":1,"148":1,"149":1,"152":1,"153":1,"154":1},"2":{"2":4,"7":5,"8":4,"20":2,"23":1,"31":6,"56":2,"71":2,"72":4,"73":5,"74":10,"75":5,"76":10,"77":9,"78":7,"79":4,"80":5,"81":1,"82":2,"84":9,"85":8,"86":16,"88":2,"89":1,"90":7,"91":1,"92":5,"93":3,"94":2,"95":2,"129":1,"130":4,"131":2,"133":3,"134":4,"135":5,"144":4,"145":3,"147":4,"148":5,"149":4,"150":3,"152":5,"153":6,"154":6,"155":9,"156":2,"157":1,"158":6,"175":1,"176":2,"192":1,"198":1,"210":6,"213":1,"217":2,"219":3,"222":5,"226":1,"227":3,"228":5,"232":4,"233":10,"234":4,"235":1,"271":1}}],["flyt",{"2":{"0":1,"2":5,"5":3,"7":4,"8":3,"13":1,"14":2,"17":2,"20":1,"22":1,"23":1,"25":12,"26":1,"31":17,"32":2,"33":13,"34":16,"35":15,"36":14,"37":13,"38":13,"39":15,"43":14,"44":2,"45":14,"46":16,"48":13,"49":12,"50":12,"51":13,"52":15,"53":15,"58":5,"59":2,"60":2,"61":2,"62":2,"63":3,"64":2,"65":4,"66":10,"72":5,"73":4,"74":12,"75":12,"76":9,"77":12,"78":9,"79":5,"80":8,"84":5,"85":11,"86":11,"87":7,"88":6,"89":4,"90":11,"91":9,"92":5,"93":6,"96":1,"97":5,"102":1,"113":3,"117":1,"118":1,"119":3,"120":2,"121":2,"122":2,"123":4,"124":1,"125":1,"126":1,"130":3,"131":3,"133":4,"134":5,"135":1,"137":2,"138":2,"139":2,"140":3,"141":4,"144":3,"145":1,"147":4,"148":3,"149":2,"150":5,"152":3,"153":3,"154":4,"155":6,"156":11,"158":3,"160":1,"162":1,"164":2,"166":1,"167":11,"168":5,"170":2,"171":9,"172":4,"173":1,"177":1,"187":2,"188":3,"189":2,"190":3,"192":8,"199":1,"200":1,"201":1,"202":1,"203":1,"204":4,"206":1,"208":14,"209":4,"210":23,"211":2,"212":6,"214":1,"215":3,"217":1,"219":2,"221":3,"222":4,"225":1,"227":4,"228":5,"229":4,"230":6,"231":6,"232":5,"233":7,"234":7,"235":6,"239":2,"240":2,"241":2,"242":3,"243":2,"244":9,"245":5,"246":3,"250":1,"251":1,"252":2,"253":1,"254":14,"257":3,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1}}],["binary",{"0":{"227":1},"2":{"224":1}}],["bind",{"0":{"181":1},"2":{"5":2,"20":2,"34":2,"36":1,"48":2,"52":1,"66":2,"102":2,"162":2,"181":3,"187":2,"194":2}}],["branches",{"2":{"236":2}}],["branch",{"2":{"233":1,"236":2}}],["branching",{"0":{"133":1,"134":1,"148":1,"226":1,"227":1,"228":1,"233":1},"1":{"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1},"2":{"134":1,"142":1,"228":1,"236":1,"271":1}}],["breaker",{"0":{"126":1,"252":1,"267":1},"2":{"126":2,"252":1,"267":1,"271":1}}],["breaking",{"2":{"80":1}}],["block",{"2":{"127":1}}],["blocking",{"2":{"127":1}}],["blocks",{"2":{"121":1,"160":1,"174":1}}],["b",{"0":{"235":1},"2":{"97":1,"148":1,"235":1}}],["bytes",{"2":{"242":1}}],["byte",{"2":{"235":1,"243":1}}],["by",{"2":{"43":1,"83":1,"121":1,"129":1,"135":1,"143":1,"198":1,"223":1}}],["bodybytes",{"2":{"242":2}}],["bodyreader",{"2":{"242":3}}],["body",{"2":{"239":2,"242":9}}],["both",{"2":{"81":1,"91":2,"233":4}}],["bound",{"2":{"54":1}}],["boundaries",{"0":{"8":1}}],["bool",{"2":{"39":1,"105":2,"109":1,"112":1,"121":1,"126":1,"133":1,"227":1,"232":1,"233":2,"234":2,"267":1}}],["balancer",{"2":{"231":1}}],["backward",{"2":{"168":1}}],["back",{"2":{"149":1,"232":2,"270":1}}],["backoffnode",{"2":{"251":4}}],["backoff",{"0":{"251":1},"2":{"61":1,"100":2,"251":2,"259":1}}],["backofffactor",{"2":{"61":3}}],["background",{"2":{"19":1,"20":1,"43":1,"79":1,"93":2,"145":1,"208":1,"209":1,"210":1,"212":1,"219":1}}],["baseconfig",{"2":{"192":3}}],["baseurl",{"2":{"187":2,"239":3}}],["base",{"2":{"61":3,"187":1,"192":1,"219":1,"255":2}}],["based",{"0":{"132":1,"167":1,"168":1},"1":{"133":1,"134":1},"2":{"33":1,"35":1,"38":2,"40":1,"46":1,"54":1,"61":1,"75":1,"76":1,"94":1,"119":1,"127":1,"143":1,"148":1,"164":1,"168":1,"169":2,"218":1,"226":2,"229":1,"230":1,"231":1,"235":2,"269":1}}],["basenode",{"0":{"172":1},"2":{"13":1,"17":1,"22":1,"58":3,"59":2,"60":2,"61":2,"62":2,"63":6,"64":2,"65":2,"66":1,"123":2,"170":2,"172":3,"173":1,"229":1,"230":2,"231":2,"234":2,"251":1,"252":2,"253":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1}}],["basic",{"0":{"31":1,"43":1,"58":1,"72":1,"84":1,"117":1,"178":1,"239":1,"250":1,"263":1},"1":{"179":1,"180":1,"181":1,"182":1,"183":1,"184":1},"2":{"74":2}}],["batchprocessornode",{"2":{"266":3}}],["batcherror",{"2":{"254":1}}],["batches",{"2":{"25":1,"38":1,"40":1,"95":1,"124":1}}],["batchresults",{"2":{"124":2}}],["batchstart+j",{"2":{"124":1}}],["batchstart",{"2":{"124":1}}],["batchsize",{"2":{"33":2,"124":2}}],["batchnodebuilder",{"2":{"35":1,"52":1}}],["batchnode",{"2":{"25":2,"30":1,"31":5,"33":1,"42":1,"43":3,"45":1,"46":2,"51":1,"52":1,"53":1,"55":1,"116":2,"124":2,"192":2,"254":2}}],["batch",{"0":{"25":1,"30":1,"31":1,"35":1,"38":1,"42":1,"43":1,"47":1,"52":1,"53":1,"124":1,"191":1,"192":1},"1":{"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":2,"49":2,"50":2,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1},"2":{"25":1,"31":2,"33":1,"34":2,"35":1,"36":1,"37":4,"39":1,"40":1,"41":2,"43":3,"45":1,"51":3,"53":1,"54":1,"59":1,"80":1,"95":1,"97":2,"103":1,"116":3,"124":4,"128":2,"159":1,"173":1,"191":5,"192":1,"200":2,"254":2,"260":2}}],["bad",{"2":{"2":1,"4":1,"5":1,"14":1}}],["bucket",{"2":{"235":2}}],["built",{"2":{"102":2,"213":1}}],["builder",{"0":{"107":1,"113":1}}],["builddynamicflow",{"2":{"75":2}}],["building",{"0":{"210":1},"2":{"67":2,"160":1,"169":2,"218":1,"237":1}}],["build",{"2":{"0":1,"74":1,"76":1,"86":1,"92":1,"115":1,"128":1,"144":2,"155":1,"157":1,"205":1,"206":1,"210":1,"213":1,"222":1,"224":3,"233":1,"248":1,"249":1}}],["business",{"2":{"86":1,"94":1,"256":1}}],["businessnode",{"2":{"74":2}}],["businessrules",{"2":{"7":2,"84":2}}],["buffersize",{"2":{"243":2}}],["buffer",{"2":{"59":2,"243":6}}],["but",{"2":{"44":1,"267":1}}],["bearer",{"2":{"239":1}}],["behave",{"2":{"73":1}}],["behavior",{"0":{"22":1},"2":{"45":1,"57":1,"68":1,"78":1,"79":1,"81":1,"171":1,"244":1,"262":1,"270":1}}],["beta",{"2":{"234":1}}],["better",{"2":{"66":1,"169":1,"270":1}}],["between",{"0":{"169":1},"2":{"45":1,"156":1,"159":1,"171":2,"176":1,"207":1,"250":1}}],["benefits",{"0":{"55":1}}],["before",{"2":{"10":1,"40":1,"91":1,"270":1}}],["be",{"2":{"3":1,"46":1,"70":1,"81":1,"114":1,"140":1,"150":1,"163":1,"173":1,"174":1,"250":1,"256":1,"270":1}}],["best",{"0":{"0":1,"40":1,"54":1,"68":1,"81":1,"94":1,"114":1,"127":1,"141":1,"157":1,"174":1,"193":1,"223":1,"236":1,"247":1,"259":1,"270":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"194":1,"195":1,"196":1,"197":1,"198":1},"2":{"29":1,"115":1,"128":1,"200":2,"248":1,"260":1,"261":1}}],["tcp",{"2":{"241":1}}],["tidy",{"2":{"215":1}}],["timer",{"2":{"110":5}}],["timed",{"2":{"53":1,"258":1}}],["timedout",{"2":{"53":5}}],["times",{"2":{"45":1,"110":1,"171":2,"250":1}}],["timestamp",{"2":{"36":2,"38":3,"184":1,"190":1,"257":2,"264":3}}],["time",{"2":{"11":1,"25":1,"28":2,"32":1,"36":2,"37":6,"38":4,"45":3,"53":1,"61":3,"63":2,"100":4,"106":2,"110":4,"122":3,"125":3,"126":5,"171":3,"172":1,"184":1,"189":3,"190":1,"196":3,"211":1,"239":1,"244":2,"246":1,"250":1,"251":3,"252":6,"255":5,"257":3,"258":1,"264":4,"267":6,"268":3}}],["timeoutnode",{"2":{"258":1}}],["timeoutpool",{"2":{"122":4}}],["timeouts",{"2":{"11":1,"53":2,"122":1,"269":1,"270":1}}],["timeout",{"0":{"11":1,"53":1,"106":1,"122":1,"258":1},"2":{"11":1,"53":3,"66":3,"106":2,"122":7,"126":1,"179":1,"187":3,"191":1,"212":1,"239":1,"252":4,"258":1,"267":3}}],["taken",{"2":{"236":1}}],["tags",{"2":{"181":3}}],["taskid",{"2":{"117":3}}],["task",{"2":{"37":5,"53":3,"64":9,"69":1,"116":2,"117":2,"119":2,"120":2,"121":9,"122":4,"125":2,"126":2}}],["tasks",{"2":{"37":12,"53":4,"64":4,"96":1,"117":2,"121":1}}],["two",{"2":{"166":1,"207":1}}],["temporarily",{"2":{"265":1,"267":1}}],["temporary",{"2":{"211":1}}],["template",{"0":{"214":1,"220":1},"1":{"215":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":2,"222":2,"223":1,"224":1,"225":1},"2":{"205":1,"214":1,"215":3,"216":1,"218":1,"223":1,"224":1}}],["temp",{"2":{"182":1}}],["termination",{"0":{"135":1}}],["terminates",{"2":{"135":1}}],["terminate",{"2":{"77":2,"135":1,"141":1,"147":1}}],["tested",{"2":{"114":1}}],["testname",{"2":{"235":2}}],["testnode",{"2":{"113":2}}],["testnestedflow",{"2":{"93":1}}],["testflowasnode",{"2":{"79":1}}],["tests",{"2":{"68":1,"113":1,"157":1,"223":1,"236":1}}],["testdata",{"2":{"20":1}}],["testcompleteflow",{"2":{"20":1}}],["testprocessnode",{"2":{"19":1}}],["test",{"0":{"19":1,"20":1,"113":1},"2":{"19":4,"20":1,"54":2,"79":2,"81":2,"93":4,"94":2,"113":1,"114":1,"127":2,"157":1,"204":3,"223":1,"236":1,"270":1}}],["testing",{"0":{"18":1,"79":1,"93":1,"111":1,"235":1},"1":{"19":1,"20":1,"112":1,"113":1},"2":{"19":1,"20":1,"68":1,"79":1,"93":1,"157":1}}],["typing",{"2":{"55":1}}],["typesafenode",{"2":{"66":4}}],["types",{"0":{"57":1,"170":1},"1":{"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1},"2":{"5":1,"66":1,"97":2,"102":1,"162":1,"168":1,"169":3,"175":1,"180":2,"181":1,"194":1,"248":1}}],["type",{"0":{"5":1,"66":1,"102":1,"167":1,"180":1,"194":1,"208":2,"209":1},"1":{"67":1},"2":{"5":3,"13":1,"17":1,"20":1,"22":1,"55":2,"58":1,"59":1,"60":1,"61":2,"62":1,"63":2,"64":1,"65":2,"66":5,"71":1,"75":1,"76":2,"87":1,"92":1,"102":2,"106":1,"107":1,"108":1,"109":1,"112":1,"114":1,"118":1,"119":1,"120":1,"121":2,"122":1,"123":1,"125":1,"126":1,"162":1,"167":5,"169":2,"170":1,"171":3,"172":1,"173":1,"176":1,"179":1,"180":6,"181":1,"187":1,"188":1,"189":1,"194":3,"196":1,"208":1,"209":1,"210":4,"229":1,"230":1,"231":1,"234":1,"241":1,"242":1,"246":1,"251":1,"252":1,"253":1,"256":1,"257":1,"262":1,"263":1,"264":2,"265":1,"266":1,"267":1,"268":1,"269":1}}],["trimspace",{"2":{"107":1}}],["triggered",{"2":{"270":1}}],["trigger",{"2":{"43":1,"163":1,"263":1}}],["try",{"2":{"39":2,"232":1,"253":1,"263":1,"264":1,"265":4}}],["true",{"2":{"34":1,"38":1,"39":2,"45":1,"46":1,"54":1,"102":1,"121":1,"126":1,"180":2,"191":1,"232":1,"234":2,"254":1,"264":1}}],["traffic",{"2":{"231":3}}],["transient",{"2":{"259":2}}],["transition",{"2":{"229":4}}],["transitions",{"2":{"229":3}}],["transformation",{"2":{"154":1}}],["transformations",{"2":{"67":1,"169":1}}],["transformoptions",{"2":{"35":1}}],["transformenabled",{"2":{"35":1}}],["transformed",{"2":{"2":3}}],["transformnode",{"2":{"2":3,"72":2,"150":1,"154":2}}],["transform",{"2":{"2":2,"35":1,"48":2,"80":1}}],["traditional",{"2":{"171":1,"208":1}}],["track",{"2":{"37":1,"40":2,"54":1,"125":1,"127":1,"189":1,"236":1,"259":1,"268":1,"270":1}}],["tracking",{"0":{"37":1,"51":1},"2":{"23":1,"40":2,"54":1,"55":1}}],["t",{"2":{"19":5,"20":5,"79":6,"93":4,"101":4,"103":4,"105":5,"106":5,"107":15,"127":1,"169":1,"199":1,"224":1,"247":1,"256":2,"259":1,"270":1}}],["than",{"2":{"270":1}}],["that",{"2":{"31":1,"34":1,"129":1,"130":1,"161":1,"169":2,"176":1,"187":1,"207":1,"213":1,"218":1,"236":1}}],["thundering",{"2":{"255":1}}],["thoroughly",{"2":{"81":1,"114":1}}],["throttled",{"2":{"269":1}}],["throughout",{"2":{"55":1,"176":1}}],["through",{"2":{"30":1,"46":1,"50":1,"81":1,"88":1,"94":1,"246":1}}],["three",{"2":{"161":1}}],["threshold",{"2":{"126":3,"252":3,"267":2}}],["thread",{"0":{"13":1,"173":1,"185":1},"2":{"68":2,"114":1,"173":1,"176":1,"247":1}}],["this",{"2":{"26":1,"49":1,"53":1,"70":1,"163":1,"198":1,"206":1,"250":1,"254":1}}],["thing",{"2":{"2":1,"174":1}}],["then",{"2":{"130":1}}],["their",{"2":{"94":1,"141":1,"236":1}}],["they",{"2":{"81":1,"129":1,"143":1}}],["themselves",{"2":{"77":1}}],["them",{"2":{"70":1,"114":1}}],["the",{"0":{"71":1,"220":1},"1":{"221":1,"222":1},"2":{"22":1,"26":1,"31":2,"43":1,"46":1,"66":1,"70":1,"72":1,"73":6,"79":1,"80":1,"81":1,"116":2,"129":1,"130":2,"131":2,"135":1,"143":1,"145":1,"150":1,"160":1,"162":2,"163":3,"164":2,"167":1,"168":1,"169":1,"172":2,"176":1,"179":1,"180":1,"204":1,"205":1,"208":1,"209":1,"210":2,"212":1,"214":2,"215":2,"216":1,"218":2,"219":1,"221":1,"222":1,"223":1,"224":2,"236":1,"239":1,"250":1,"253":1,"261":1,"262":1}}],["these",{"2":{"0":1}}],["toggles",{"2":{"234":1}}],["together",{"2":{"143":1,"223":1}}],["tolower",{"2":{"107":1}}],["toslice",{"0":{"97":1},"1":{"98":1},"2":{"97":5,"98":1}}],["token",{"2":{"85":2,"195":1,"197":1}}],["totalweight",{"2":{"231":3}}],["totaltime",{"2":{"125":2}}],["totallatency",{"2":{"63":2}}],["total",{"2":{"36":5,"37":3,"50":4,"51":1,"231":1,"268":3}}],["took",{"2":{"28":1,"244":1}}],["too",{"2":{"2":1,"94":1,"270":1}}],["to",{"2":{"0":1,"3":1,"4":1,"5":1,"8":1,"31":2,"32":1,"33":3,"35":4,"40":1,"43":1,"44":1,"45":1,"48":1,"54":2,"59":1,"66":1,"70":1,"81":1,"96":1,"97":2,"117":1,"130":1,"135":1,"143":1,"145":1,"167":1,"169":1,"171":2,"174":1,"180":1,"181":4,"191":1,"192":1,"194":1,"198":1,"204":1,"212":1,"214":1,"222":1,"228":1,"232":1,"233":1,"238":1,"239":1,"250":2,"253":2,"255":1,"264":2,"265":2}}]],"serializationVersion":2}
